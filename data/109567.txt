package com.yalantis.ucrop.view;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.util.AttributeSet;
import com.yalantis.ucrop.R;
import com.yalantis.ucrop.callback.BitmapCropCallback;
import com.yalantis.ucrop.callback.CropBoundsChangeListener;
import com.yalantis.ucrop.model.CropParameters;
import com.yalantis.ucrop.model.ImageState;
import com.yalantis.ucrop.task.BitmapCropTask;
import com.yalantis.ucrop.util.CubicEasing;
import com.yalantis.ucrop.util.RectUtils;
import java.lang.ref.WeakReference;
import java.util.Arrays;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
public class CropImageView extends TransformImageView {
public static final int DEFAULT_MAX_BITMAP_SIZE = 0;
public static final int DEFAULT_IMAGE_TO_CROP_BOUNDS_ANIM_DURATION = 500;
public static final float DEFAULT_MAX_SCALE_MULTIPLIER = 10.0f;
public static final float SOURCE_IMAGE_ASPECT_RATIO = 0f;
public static final float DEFAULT_ASPECT_RATIO = SOURCE_IMAGE_ASPECT_RATIO;
private final RectF mCropRect = new RectF();
private final Matrix mTempMatrix = new Matrix();
private float mTargetAspectRatio;
private float mMaxScaleMultiplier = DEFAULT_MAX_SCALE_MULTIPLIER;
private CropBoundsChangeListener mCropBoundsChangeListener;
private Runnable mWrapCropBoundsRunnable, mZoomImageToPositionRunnable = null;
private float mMaxScale, mMinScale;
private int mMaxResultImageSizeX = 0, mMaxResultImageSizeY = 0;
private long mImageToWrapCropBoundsAnimDuration = DEFAULT_IMAGE_TO_CROP_BOUNDS_ANIM_DURATION;
public CropImageView(Context context) {
this(context, null);
}
public CropImageView(Context context, AttributeSet attrs) {
this(context, attrs, 0);
}
public CropImageView(Context context, AttributeSet attrs, int defStyle) {
super(context, attrs, defStyle);
}
public void cropAndSaveImage(@NonNull Bitmap.CompressFormat compressFormat, int compressQuality,
@Nullable BitmapCropCallback cropCallback) {
cancelAllAnimations();
setImageToWrapCropBounds(false);
final ImageState imageState = new ImageState(
mCropRect, RectUtils.trapToRect(mCurrentImageCorners),
getCurrentScale(), getCurrentAngle());
final CropParameters cropParameters = new CropParameters(
mMaxResultImageSizeX, mMaxResultImageSizeY,
compressFormat, compressQuality,
getImageInputPath(), getImageOutputPath(), getExifInfo());
new BitmapCropTask(getViewBitmap(), imageState, cropParameters, cropCallback)
.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}
public float getMaxScale() {
return mMaxScale;
}
public float getMinScale() {
return mMinScale;
}
public float getTargetAspectRatio() {
return mTargetAspectRatio;
}
public void setCropRect(RectF cropRect) {
mTargetAspectRatio = cropRect.width() / cropRect.height();
mCropRect.set(cropRect.left - getPaddingLeft(), cropRect.top - getPaddingTop(),
cropRect.right - getPaddingRight(), cropRect.bottom - getPaddingBottom());
calculateImageScaleBounds();
setImageToWrapCropBounds();
}
public void setTargetAspectRatio(float targetAspectRatio) {
final Drawable drawable = getDrawable();
if (drawable == null) {
mTargetAspectRatio = targetAspectRatio;
return;
}
if (targetAspectRatio == SOURCE_IMAGE_ASPECT_RATIO) {
mTargetAspectRatio = drawable.getIntrinsicWidth() / (float) drawable.getIntrinsicHeight();
} else {
mTargetAspectRatio = targetAspectRatio;
}
if (mCropBoundsChangeListener != null) {
mCropBoundsChangeListener.onCropAspectRatioChanged(mTargetAspectRatio);
}
}
@Nullable
public CropBoundsChangeListener getCropBoundsChangeListener() {
return mCropBoundsChangeListener;
}
public void setCropBoundsChangeListener(@Nullable CropBoundsChangeListener cropBoundsChangeListener) {
mCropBoundsChangeListener = cropBoundsChangeListener;
}
public void setMaxResultImageSizeX(@IntRange(from = 10) int maxResultImageSizeX) {
mMaxResultImageSizeX = maxResultImageSizeX;
}
public void setMaxResultImageSizeY(@IntRange(from = 10) int maxResultImageSizeY) {
mMaxResultImageSizeY = maxResultImageSizeY;
}
public void setImageToWrapCropBoundsAnimDuration(@IntRange(from = 100) long imageToWrapCropBoundsAnimDuration) {
if (imageToWrapCropBoundsAnimDuration > 0) {
mImageToWrapCropBoundsAnimDuration = imageToWrapCropBoundsAnimDuration;
} else {
throw new IllegalArgumentException("Animation duration cannot be negative value.");
}
}
public void setMaxScaleMultiplier(float maxScaleMultiplier) {
mMaxScaleMultiplier = maxScaleMultiplier;
}
public void zoomOutImage(float deltaScale) {
zoomOutImage(deltaScale, mCropRect.centerX(), mCropRect.centerY());
}
public void zoomOutImage(float scale, float centerX, float centerY) {
if (scale >= getMinScale()) {
postScale(scale / getCurrentScale(), centerX, centerY);
}
}
public void zoomInImage(float deltaScale) {
zoomInImage(deltaScale, mCropRect.centerX(), mCropRect.centerY());
}
public void zoomInImage(float scale, float centerX, float centerY) {
if (scale <= getMaxScale()) {
postScale(scale / getCurrentScale(), centerX, centerY);
}
}
public void postScale(float deltaScale, float px, float py) {
if (deltaScale > 1 && getCurrentScale() * deltaScale <= getMaxScale()) {
super.postScale(deltaScale, px, py);
} else if (deltaScale < 1 && getCurrentScale() * deltaScale >= getMinScale()) {
super.postScale(deltaScale, px, py);
}
}
public void postRotate(float deltaAngle) {
postRotate(deltaAngle, mCropRect.centerX(), mCropRect.centerY());
}
public void cancelAllAnimations() {
removeCallbacks(mWrapCropBoundsRunnable);
removeCallbacks(mZoomImageToPositionRunnable);
}
public void setImageToWrapCropBounds() {
setImageToWrapCropBounds(true);
}
public void setImageToWrapCropBounds(boolean animate) {
if (mBitmapLaidOut && !isImageWrapCropBounds()) {
float currentX = mCurrentImageCenter[0];
float currentY = mCurrentImageCenter[1];
float currentScale = getCurrentScale();
float deltaX = mCropRect.centerX() - currentX;
float deltaY = mCropRect.centerY() - currentY;
float deltaScale = 0;
mTempMatrix.reset();
mTempMatrix.setTranslate(deltaX, deltaY);
final float[] tempCurrentImageCorners = Arrays.copyOf(mCurrentImageCorners, mCurrentImageCorners.length);
mTempMatrix.mapPoints(tempCurrentImageCorners);
boolean willImageWrapCropBoundsAfterTranslate = isImageWrapCropBounds(tempCurrentImageCorners);
if (willImageWrapCropBoundsAfterTranslate) {
final float[] imageIndents = calculateImageIndents();
deltaX = -(imageIndents[0] + imageIndents[2]);
deltaY = -(imageIndents[1] + imageIndents[3]);
} else {
RectF tempCropRect = new RectF(mCropRect);
mTempMatrix.reset();
mTempMatrix.setRotate(getCurrentAngle());
mTempMatrix.mapRect(tempCropRect);
final float[] currentImageSides = RectUtils.getRectSidesFromCorners(mCurrentImageCorners);
deltaScale = Math.max(tempCropRect.width() / currentImageSides[0],
tempCropRect.height() / currentImageSides[1]);
deltaScale = deltaScale * currentScale - currentScale;
}
if (animate) {
post(mWrapCropBoundsRunnable = new WrapCropBoundsRunnable(
CropImageView.this, mImageToWrapCropBoundsAnimDuration, currentX, currentY, deltaX, deltaY,
currentScale, deltaScale, willImageWrapCropBoundsAfterTranslate));
} else {
postTranslate(deltaX, deltaY);
if (!willImageWrapCropBoundsAfterTranslate) {
zoomInImage(currentScale + deltaScale, mCropRect.centerX(), mCropRect.centerY());
}
}
}
}
private float[] calculateImageIndents() {
mTempMatrix.reset();
mTempMatrix.setRotate(-getCurrentAngle());
float[] unrotatedImageCorners = Arrays.copyOf(mCurrentImageCorners, mCurrentImageCorners.length);
float[] unrotatedCropBoundsCorners = RectUtils.getCornersFromRect(mCropRect);
mTempMatrix.mapPoints(unrotatedImageCorners);
mTempMatrix.mapPoints(unrotatedCropBoundsCorners);
RectF unrotatedImageRect = RectUtils.trapToRect(unrotatedImageCorners);
RectF unrotatedCropRect = RectUtils.trapToRect(unrotatedCropBoundsCorners);
float deltaLeft = unrotatedImageRect.left - unrotatedCropRect.left;
float deltaTop = unrotatedImageRect.top - unrotatedCropRect.top;
float deltaRight = unrotatedImageRect.right - unrotatedCropRect.right;
float deltaBottom = unrotatedImageRect.bottom - unrotatedCropRect.bottom;
float indents[] = new float[4];
indents[0] = (deltaLeft > 0) ? deltaLeft : 0;
indents[1] = (deltaTop > 0) ? deltaTop : 0;
indents[2] = (deltaRight < 0) ? deltaRight : 0;
indents[3] = (deltaBottom < 0) ? deltaBottom : 0;
mTempMatrix.reset();
mTempMatrix.setRotate(getCurrentAngle());
mTempMatrix.mapPoints(indents);
return indents;
}
@Override
protected void onImageLaidOut() {
super.onImageLaidOut();
final Drawable drawable = getDrawable();
if (drawable == null) {
return;
}
float drawableWidth = drawable.getIntrinsicWidth();
float drawableHeight = drawable.getIntrinsicHeight();
if (mTargetAspectRatio == SOURCE_IMAGE_ASPECT_RATIO) {
mTargetAspectRatio = drawableWidth / drawableHeight;
}
int height = (int) (mThisWidth / mTargetAspectRatio);
if (height > mThisHeight) {
int width = (int) (mThisHeight * mTargetAspectRatio);
int halfDiff = (mThisWidth - width) / 2;
mCropRect.set(halfDiff, 0, width + halfDiff, mThisHeight);
} else {
int halfDiff = (mThisHeight - height) / 2;
mCropRect.set(0, halfDiff, mThisWidth, height + halfDiff);
}
calculateImageScaleBounds(drawableWidth, drawableHeight);
setupInitialImagePosition(drawableWidth, drawableHeight);
if (mCropBoundsChangeListener != null) {
mCropBoundsChangeListener.onCropAspectRatioChanged(mTargetAspectRatio);
}
if (mTransformImageListener != null) {
mTransformImageListener.onScale(getCurrentScale());
mTransformImageListener.onRotate(getCurrentAngle());
}
}
protected boolean isImageWrapCropBounds() {
return isImageWrapCropBounds(mCurrentImageCorners);
}
protected boolean isImageWrapCropBounds(float[] imageCorners) {
mTempMatrix.reset();
mTempMatrix.setRotate(-getCurrentAngle());
float[] unrotatedImageCorners = Arrays.copyOf(imageCorners, imageCorners.length);
mTempMatrix.mapPoints(unrotatedImageCorners);
float[] unrotatedCropBoundsCorners = RectUtils.getCornersFromRect(mCropRect);
mTempMatrix.mapPoints(unrotatedCropBoundsCorners);
return RectUtils.trapToRect(unrotatedImageCorners).contains(RectUtils.trapToRect(unrotatedCropBoundsCorners));
}
protected void zoomImageToPosition(float scale, float centerX, float centerY, long durationMs) {
if (scale > getMaxScale()) {
scale = getMaxScale();
}
final float oldScale = getCurrentScale();
final float deltaScale = scale - oldScale;
post(mZoomImageToPositionRunnable = new ZoomImageToPosition(CropImageView.this,
durationMs, oldScale, deltaScale, centerX, centerY));
}
private void calculateImageScaleBounds() {
final Drawable drawable = getDrawable();
if (drawable == null) {
return;
}
calculateImageScaleBounds(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
}
private void calculateImageScaleBounds(float drawableWidth, float drawableHeight) {
float widthScale = Math.min(mCropRect.width() / drawableWidth, mCropRect.width() / drawableHeight);
float heightScale = Math.min(mCropRect.height() / drawableHeight, mCropRect.height() / drawableWidth);
mMinScale = Math.min(widthScale, heightScale);
mMaxScale = mMinScale * mMaxScaleMultiplier;
}
private void setupInitialImagePosition(float drawableWidth, float drawableHeight) {
float cropRectWidth = mCropRect.width();
float cropRectHeight = mCropRect.height();
float widthScale = mCropRect.width() / drawableWidth;
float heightScale = mCropRect.height() / drawableHeight;
float initialMinScale = Math.max(widthScale, heightScale);
float tw = (cropRectWidth - drawableWidth * initialMinScale) / 2.0f + mCropRect.left;
float th = (cropRectHeight - drawableHeight * initialMinScale) / 2.0f + mCropRect.top;
mCurrentImageMatrix.reset();
mCurrentImageMatrix.postScale(initialMinScale, initialMinScale);
mCurrentImageMatrix.postTranslate(tw, th);
setImageMatrix(mCurrentImageMatrix);
}
@SuppressWarnings("deprecation")
protected void processStyledAttributes(@NonNull TypedArray a) {
float targetAspectRatioX = Math.abs(a.getFloat(R.styleable.ucrop_UCropView_ucrop_aspect_ratio_x, DEFAULT_ASPECT_RATIO));
float targetAspectRatioY = Math.abs(a.getFloat(R.styleable.ucrop_UCropView_ucrop_aspect_ratio_y, DEFAULT_ASPECT_RATIO));
if (targetAspectRatioX == SOURCE_IMAGE_ASPECT_RATIO || targetAspectRatioY == SOURCE_IMAGE_ASPECT_RATIO) {
mTargetAspectRatio = SOURCE_IMAGE_ASPECT_RATIO;
} else {
mTargetAspectRatio = targetAspectRatioX / targetAspectRatioY;
}
}
private static class WrapCropBoundsRunnable implements Runnable {
private final WeakReference<CropImageView> mCropImageView;
private final long mDurationMs, mStartTime;
private final float mOldX, mOldY;
private final float mCenterDiffX, mCenterDiffY;
private final float mOldScale;
private final float mDeltaScale;
private final boolean mWillBeImageInBoundsAfterTranslate;
public WrapCropBoundsRunnable(CropImageView cropImageView,
long durationMs,
float oldX, float oldY,
float centerDiffX, float centerDiffY,
float oldScale, float deltaScale,
boolean willBeImageInBoundsAfterTranslate) {
mCropImageView = new WeakReference<>(cropImageView);
mDurationMs = durationMs;
mStartTime = System.currentTimeMillis();
mOldX = oldX;
mOldY = oldY;
mCenterDiffX = centerDiffX;
mCenterDiffY = centerDiffY;
mOldScale = oldScale;
mDeltaScale = deltaScale;
mWillBeImageInBoundsAfterTranslate = willBeImageInBoundsAfterTranslate;
}
@Override
public void run() {
CropImageView cropImageView = mCropImageView.get();
if (cropImageView == null) {
return;
}
long now = System.currentTimeMillis();
float currentMs = Math.min(mDurationMs, now - mStartTime);
float newX = CubicEasing.easeOut(currentMs, 0, mCenterDiffX, mDurationMs);
float newY = CubicEasing.easeOut(currentMs, 0, mCenterDiffY, mDurationMs);
float newScale = CubicEasing.easeInOut(currentMs, 0, mDeltaScale, mDurationMs);
if (currentMs < mDurationMs) {
cropImageView.postTranslate(newX - (cropImageView.mCurrentImageCenter[0] - mOldX), newY - (cropImageView.mCurrentImageCenter[1] - mOldY));
if (!mWillBeImageInBoundsAfterTranslate) {
cropImageView.zoomInImage(mOldScale + newScale, cropImageView.mCropRect.centerX(), cropImageView.mCropRect.centerY());
}
if (!cropImageView.isImageWrapCropBounds()) {
cropImageView.post(this);
}
}
}
}
private static class ZoomImageToPosition implements Runnable {
private final WeakReference<CropImageView> mCropImageView;
private final long mDurationMs, mStartTime;
private final float mOldScale;
private final float mDeltaScale;
private final float mDestX;
private final float mDestY;
public ZoomImageToPosition(CropImageView cropImageView,
long durationMs,
float oldScale, float deltaScale,
float destX, float destY) {
mCropImageView = new WeakReference<>(cropImageView);
mStartTime = System.currentTimeMillis();
mDurationMs = durationMs;
mOldScale = oldScale;
mDeltaScale = deltaScale;
mDestX = destX;
mDestY = destY;
}
@Override
public void run() {
CropImageView cropImageView = mCropImageView.get();
if (cropImageView == null) {
return;
}
long now = System.currentTimeMillis();
float currentMs = Math.min(mDurationMs, now - mStartTime);
float newScale = CubicEasing.easeInOut(currentMs, 0, mDeltaScale, mDurationMs);
if (currentMs < mDurationMs) {
cropImageView.zoomInImage(mOldScale + newScale, mDestX, mDestY);
cropImageView.post(this);
} else {
cropImageView.setImageToWrapCropBounds();
}
}
}
}
