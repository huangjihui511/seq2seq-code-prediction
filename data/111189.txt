package com.github.benmanes.caffeine.cache.local;
import static com.github.benmanes.caffeine.cache.Specifications.kRefQueueType;
import static com.github.benmanes.caffeine.cache.Specifications.vRefQueueType;
import javax.lang.model.element.Modifier;
import com.github.benmanes.caffeine.cache.Feature;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
public final class AddKeyValueStrength extends LocalCacheRule {
@Override
protected boolean applies() {
return true;
}
@Override
protected void execute() {
addKeyStrength();
addValueStrength();
}
private void addKeyStrength() {
if (context.generateFeatures.contains(Feature.WEAK_KEYS)) {
addStrength("collectKeys", "keyReferenceQueue", kRefQueueType);
}
}
private void addValueStrength() {
if (context.generateFeatures.contains(Feature.INFIRM_VALUES)) {
addStrength("collectValues", "valueReferenceQueue", vRefQueueType);
}
}
private void addStrength(String collectName, String queueName, TypeName type) {
context.cache.addMethod(MethodSpec.methodBuilder(queueName)
.addModifiers(context.protectedFinalModifiers())
.returns(type)
.addStatement("return $N", queueName)
.build());
context.cache.addField(FieldSpec.builder(type, queueName, Modifier.FINAL)
.initializer("new $T()", type)
.build());
context.cache.addMethod(MethodSpec.methodBuilder(collectName)
.addModifiers(context.protectedFinalModifiers())
.addStatement("return true")
.returns(boolean.class)
.build());
}
}
