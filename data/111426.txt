package io.grpc.testing;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.truth.Fact.fact;
import static java.util.concurrent.TimeUnit.NANOSECONDS;
import com.google.common.truth.ComparableSubject;
import com.google.common.truth.FailureMetadata;
import com.google.common.truth.Subject;
import io.grpc.Deadline;
import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import javax.annotation.CheckReturnValue;
import javax.annotation.Nullable;
@SuppressWarnings("rawtypes") 
public final class DeadlineSubject extends ComparableSubject {
private static final Subject.Factory<DeadlineSubject, Deadline> deadlineFactory =
new Factory();
public static Subject.Factory<DeadlineSubject, Deadline> deadline() {
return deadlineFactory;
}
private final Deadline actual;
@SuppressWarnings("unchecked")
private DeadlineSubject(FailureMetadata metadata, Deadline subject) {
super(metadata, subject);
this.actual = subject;
}
@CheckReturnValue
public TolerantDeadlineComparison isWithin(final long delta, final TimeUnit timeUnit) {
return new TolerantDeadlineComparison() {
@Override
public void of(Deadline expected) {
Deadline actual = DeadlineSubject.this.actual;
checkNotNull(actual, "actual value cannot be null. expected=%s", expected);
BigInteger actualTimeRemaining = BigInteger.valueOf(actual.timeRemaining(NANOSECONDS));
BigInteger expectedTimeRemaining = BigInteger.valueOf(expected.timeRemaining(NANOSECONDS));
BigInteger deltaNanos = BigInteger.valueOf(timeUnit.toNanos(delta));
if (actualTimeRemaining.subtract(expectedTimeRemaining).abs().compareTo(deltaNanos) > 0) {
failWithoutActual(
fact("expected", expected),
fact("but was", actual),
fact("outside tolerance in ns", deltaNanos));
}
}
};
}
public abstract static class TolerantDeadlineComparison {
private TolerantDeadlineComparison() {}
public abstract void of(Deadline expectedDeadline);
@Deprecated
@Override
public boolean equals(@Nullable Object o) {
throw new UnsupportedOperationException(
"If you meant to compare deadlines, use .of(Deadline) instead.");
}
@Deprecated
@Override
public int hashCode() {
throw new UnsupportedOperationException("Subject.hashCode() is not supported.");
}
}
private static final class Factory implements Subject.Factory<DeadlineSubject, Deadline>  {
@Override
public DeadlineSubject createSubject(FailureMetadata metadata, Deadline that) {
return new DeadlineSubject(metadata, that);
}
}
}
