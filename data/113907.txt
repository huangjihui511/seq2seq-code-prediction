package psiprobe.controllers.deploy;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.InternalResourceView;
import psiprobe.controllers.AbstractTomcatContainerController;
@Controller
public class DeployContextController extends AbstractTomcatContainerController {
@RequestMapping(path = "/adm/deploycontext.htm")
@Override
public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)
throws Exception {
return super.handleRequest(request, response);
}
@Override
public ModelAndView handleRequestInternal(HttpServletRequest request,
HttpServletResponse response) throws Exception {
String contextName = ServletRequestUtils.getStringParameter(request, "context", null);
if (contextName != null) {
try {
if (getContainerWrapper().getTomcatContainer().installContext(contextName)) {
request.setAttribute("successMessage", getMessageSourceAccessor()
.getMessage("probe.src.deploy.context.success", new Object[] {contextName}));
Authentication auth = SecurityContextHolder.getContext().getAuthentication();
String name = auth.getName();
logger.info(getMessageSourceAccessor().getMessage("probe.src.log.deploycontext"), name,
contextName);
} else {
request.setAttribute("errorMessage", getMessageSourceAccessor()
.getMessage("probe.src.deploy.context.failure", new Object[] {contextName}));
}
} catch (Exception e) {
request.setAttribute("errorMessage", e.getMessage());
logger.trace("", e);
}
}
return new ModelAndView(new InternalResourceView(getViewName()));
}
@Value("/adm/deploy.htm")
@Override
public void setViewName(String viewName) {
super.setViewName(viewName);
}
}
