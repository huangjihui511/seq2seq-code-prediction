package org.jb2011.lnf.beautyeye.ch12_progress;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import javax.swing.JComponent;
import javax.swing.JProgressBar;
import javax.swing.plaf.ComponentUI;
import javax.swing.plaf.UIResource;
import javax.swing.plaf.basic.BasicProgressBarUI;
import org.jb2011.lnf.beautyeye.utils.ReflectHelper;
import org.jb2011.lnf.beautyeye.winlnfutils.WinUtils;
import org.jb2011.ninepatch4j.NinePatch;
public class BEProgressBarUI extends BasicProgressBarUI
implements org.jb2011.lnf.beautyeye.BeautyEyeLNFHelper.__UseParentPaintSurported
{
public static ComponentUI createUI(JComponent x)
{
return new BEProgressBarUI();
}
public boolean isUseParentPaint()
{
return progressBar != null
&& (!(progressBar.getForeground() instanceof UIResource)
|| !(progressBar.getBackground() instanceof UIResource));
}
protected void paintDeterminate(Graphics g, JComponent c)
{
if (!(g instanceof Graphics2D))
{
return;
}
if(isUseParentPaint())
{
super.paintDeterminate(g, c);
return;
}
Insets b = progressBar.getInsets(); 
int barRectWidth = progressBar.getWidth() - (b.right + b.left);
int barRectHeight = progressBar.getHeight() - (b.top + b.bottom);
paintProgressBarBgImpl(progressBar.getOrientation() == JProgressBar.HORIZONTAL
, g, b, barRectWidth, barRectHeight);
if (barRectWidth <= 0 || barRectHeight <= 0)
{
return;
}
int amountFull = getAmountFull(b, barRectWidth, barRectHeight);
Graphics2D g2 = (Graphics2D) g;
if (progressBar.getOrientation() == JProgressBar.HORIZONTAL)
{
if (WinUtils.isLeftToRight(c))
{
paintProgressBarContentImpl(true, g,b.left, b.top
,amountFull, barRectHeight, -1);
}
else
{
paintProgressBarContentImpl(true, g,barRectWidth+b.left, b.top
, barRectWidth + b.left - amountFull, barRectHeight, -1);
}
}
else
{ 
paintProgressBarContentImpl(false, g, b.left, b.top + barRectHeight - amountFull
, barRectWidth, amountFull, barRectHeight);
}
if (progressBar.isStringPainted())
{
paintString(g, b.left, b.top, barRectWidth, barRectHeight,amountFull, b);
}
}
protected void paintIndeterminate(Graphics g, JComponent c)
{
if (!(g instanceof Graphics2D))
{
return;
}
if(isUseParentPaint())
{
super.paintIndeterminate(g, c);
return;
}
Insets b = progressBar.getInsets(); 
int barRectWidth = progressBar.getWidth() - (b.right + b.left);
int barRectHeight = progressBar.getHeight() - (b.top + b.bottom);
if (barRectWidth <= 0 || barRectHeight <= 0) {
return;
}
paintProgressBarBgImpl(progressBar.getOrientation() == JProgressBar.HORIZONTAL, g,b,barRectWidth, barRectHeight);
Graphics2D g2 = (Graphics2D)g;
boxRect = getBox(boxRect);
if (boxRect != null)
{
paintProgressBarContentImpl(progressBar.getOrientation() == JProgressBar.HORIZONTAL
}
if (progressBar.isStringPainted())
{
if (progressBar.getOrientation() == JProgressBar.HORIZONTAL)
{
paintString(g2, b.left, b.top, barRectWidth, barRectHeight,boxRect.x, boxRect.width, b);
}
else
{
paintString(g2, b.left, b.top, barRectWidth, barRectHeight,boxRect.y, boxRect.height, b);
}
}
}
protected void paintProgressBarContentImpl(boolean isHorizontal
,Graphics g,int x,int y,int amountFull,int barContentRectHeight
, int barSumHeightForVertival)
{
NinePatch np;
if(isHorizontal)
{
if(amountFull > 0 && amountFull < n9min)
{
amountFull = n9min;
}
np = __Icon9Factory__.getInstance().getProgressBar_green();
}
else
{
if(barContentRectHeight > 0 && barContentRectHeight < n9min)
{
y = barSumHeightForVertival - n9min;
barContentRectHeight = n9min;
}
np = __Icon9Factory__.getInstance().getProgressBar_blue_v();
}
np.draw((Graphics2D)g, x, y, amountFull, barContentRectHeight);
}
protected void paintProgressBarBgImpl(boolean isHorizontal,Graphics g,Insets b,int barRectWidth,int barRectHeight)
{
NinePatch np;
if(isHorizontal)
np = __Icon9Factory__.getInstance().getProgressBarBg();
else
np = __Icon9Factory__.getInstance().getProgressBarBg_v();
np.draw((Graphics2D)g, b.left, b.top, barRectWidth, barRectHeight);
}
private void paintString(Graphics g, int x, int y, int width, int height,
int fillStart, int amountFull, Insets b)
{
ReflectHelper.invokeMethod(BasicProgressBarUI.class, this, "paintString"
, new Class[]{Graphics.class, int.class, int.class, int.class, int.class, int.class, int.class, Insets.class}
, new Object[]{g,x,y,width,height,fillStart,amountFull,b});
}
}
