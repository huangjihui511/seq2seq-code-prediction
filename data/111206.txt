package com.github.benmanes.caffeine;
import java.util.Queue;
import org.openjdk.jmh.annotations.AuxCounters;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.Group;
import org.openjdk.jmh.annotations.GroupThreads;
import org.openjdk.jmh.annotations.Param;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.Setup;
import org.openjdk.jmh.annotations.State;
@State(Scope.Group)
public class SingleConsumerQueueBenchmark {
@Param({
"SingleConsumerQueue_optimistic",
"SingleConsumerQueue_linearizable",
"ConcurrentLinkedQueue"})
QueueType queueType;
Queue<Boolean> queue;
@AuxCounters
@State(Scope.Thread)
public static class PollCounters {
public int pollsFailed;
public int pollsMade;
}
@AuxCounters
@State(Scope.Thread)
public static class OfferCounters {
public int offersFailed;
public int offersMade;
}
@Setup
public void setup() {
queue = queueType.create();
}
@Benchmark @Group("no_contention") @GroupThreads(1)
public void no_contention_offer(OfferCounters counters) {
if (queue.offer(Boolean.TRUE)) {
counters.offersMade++;
} else {
counters.offersFailed++;
}
}
@Benchmark @Group("no_contention") @GroupThreads(1)
public void no_contention_poll(PollCounters counters) {
if (queue.poll() == null) {
counters.pollsFailed++;
} else {
counters.pollsMade++;
}
}
@Benchmark @Group("mild_contention") @GroupThreads(2)
public void mild_contention_offer(OfferCounters counters) {
if (queue.offer(Boolean.TRUE)) {
counters.offersMade++;
} else {
counters.offersFailed++;
}
}
@Benchmark @Group("mild_contention") @GroupThreads(1)
public void mild_contention_poll(PollCounters counters) {
if (queue.poll() == null) {
counters.pollsFailed++;
} else {
counters.pollsMade++;
}
}
@Benchmark @Group("high_contention") @GroupThreads(8)
public void high_contention_offer(OfferCounters counters) {
if (queue.offer(Boolean.TRUE)) {
counters.offersMade++;
} else {
counters.offersFailed++;
}
}
@Benchmark @Group("high_contention") @GroupThreads(1)
public void high_contention_poll(PollCounters counters) {
if (queue.poll() == null) {
counters.pollsFailed++;
} else {
counters.pollsMade++;
}
}
}
