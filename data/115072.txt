package com.example.appengine;
import static com.google.common.truth.Truth.assertThat;
import com.google.appengine.api.NamespaceManager;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entities;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.CompositeFilterOperator;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;
import com.google.appengine.tools.development.testing.LocalServiceTestHelper;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
@RunWith(JUnit4.class)
public class MetadataNamespacesTest {
private final LocalServiceTestHelper helper =
new LocalServiceTestHelper(
new LocalDatastoreServiceTestConfig()
.setDefaultHighRepJobPolicyUnappliedJobPercentage(0));
private StringWriter responseWriter;
private DatastoreService datastore;
@Before
public void setUp() {
helper.setUp();
datastore = DatastoreServiceFactory.getDatastoreService();
responseWriter = new StringWriter();
}
@After
public void tearDown() {
helper.tearDown();
}
void printAllNamespaces(DatastoreService ds, PrintWriter writer) {
Query q = new Query(Entities.NAMESPACE_METADATA_KIND);
for (Entity e : ds.prepare(q).asIterable()) {
if (e.getKey().getId() != 0) {
writer.println("<default>");
} else {
writer.println(e.getKey().getName());
}
}
}
@Test
public void printAllNamespaces_printsNamespaces() throws Exception {
datastore.put(new Entity("Simple"));
NamespaceManager.set("another-namespace");
datastore.put(new Entity("Simple"));
printAllNamespaces(datastore, new PrintWriter(responseWriter));
String response = responseWriter.toString();
assertThat(response).contains("<default>");
assertThat(response).contains("another-namespace");
}
List<String> getNamespaces(DatastoreService ds, String start, String end) {
Query q = new Query(Entities.NAMESPACE_METADATA_KIND);
List<Filter> subFilters = new ArrayList();
if (start != null) {
subFilters.add(
new FilterPredicate(
Entity.KEY_RESERVED_PROPERTY,
FilterOperator.GREATER_THAN_OR_EQUAL,
Entities.createNamespaceKey(start)));
}
if (end != null) {
subFilters.add(
new FilterPredicate(
Entity.KEY_RESERVED_PROPERTY,
FilterOperator.LESS_THAN_OR_EQUAL,
Entities.createNamespaceKey(end)));
}
q.setFilter(CompositeFilterOperator.and(subFilters));
List<String> results = new ArrayList<String>();
for (Entity e : ds.prepare(q).asIterable()) {
results.add(Entities.getNamespaceFromNamespaceKey(e.getKey()));
}
return results;
}
@Test
public void getNamespaces_returnsNamespaces() throws Exception {
NamespaceManager.set("alpha");
datastore.put(new Entity("Simple"));
NamespaceManager.set("bravo");
datastore.put(new Entity("Simple"));
NamespaceManager.set("charlie");
datastore.put(new Entity("Simple"));
NamespaceManager.set("zed");
datastore.put(new Entity("Simple"));
List<String> results = getNamespaces(datastore, "bravo", "echo");
assertThat(results).containsExactly("bravo", "charlie");
}
}
