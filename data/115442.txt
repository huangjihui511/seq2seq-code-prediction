package org.gnucash.android.db.adapter;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.graphics.Color;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.Log;
import org.gnucash.android.R;
import org.gnucash.android.app.GnuCashApplication;
import org.gnucash.android.db.DatabaseSchema;
import org.gnucash.android.model.Account;
import org.gnucash.android.model.AccountType;
import org.gnucash.android.model.Commodity;
import org.gnucash.android.model.Money;
import org.gnucash.android.model.Split;
import org.gnucash.android.model.Transaction;
import org.gnucash.android.model.TransactionType;
import org.gnucash.android.util.TimestampHelper;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
import static org.gnucash.android.db.DatabaseSchema.TransactionEntry;
public class AccountsDbAdapter extends DatabaseAdapter<Account> {
public static final String ACCOUNT_NAME_SEPARATOR = ":";
public static final String ROOT_ACCOUNT_FULL_NAME = " ";
private final TransactionsDbAdapter mTransactionsAdapter;
private final CommoditiesDbAdapter mCommoditiesDbAdapter;
public AccountsDbAdapter(SQLiteDatabase db, TransactionsDbAdapter transactionsDbAdapter) {
super(db, AccountEntry.TABLE_NAME, new String[]{
AccountEntry.COLUMN_NAME         ,
AccountEntry.COLUMN_DESCRIPTION  ,
AccountEntry.COLUMN_TYPE         ,
AccountEntry.COLUMN_CURRENCY     ,
AccountEntry.COLUMN_COLOR_CODE   ,
AccountEntry.COLUMN_FAVORITE     ,
AccountEntry.COLUMN_FULL_NAME    ,
AccountEntry.COLUMN_PLACEHOLDER  ,
AccountEntry.COLUMN_CREATED_AT   ,
AccountEntry.COLUMN_HIDDEN       ,
AccountEntry.COLUMN_COMMODITY_UID,
AccountEntry.COLUMN_PARENT_ACCOUNT_UID,
AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID
});
mTransactionsAdapter = transactionsDbAdapter;
mCommoditiesDbAdapter = new CommoditiesDbAdapter(db);
}
public AccountsDbAdapter(SQLiteDatabase db){
super(db, AccountEntry.TABLE_NAME, new String[]{
AccountEntry.COLUMN_NAME         ,
AccountEntry.COLUMN_DESCRIPTION  ,
AccountEntry.COLUMN_TYPE         ,
AccountEntry.COLUMN_CURRENCY     ,
AccountEntry.COLUMN_COLOR_CODE   ,
AccountEntry.COLUMN_FAVORITE     ,
AccountEntry.COLUMN_FULL_NAME    ,
AccountEntry.COLUMN_PLACEHOLDER  ,
AccountEntry.COLUMN_CREATED_AT   ,
AccountEntry.COLUMN_HIDDEN       ,
AccountEntry.COLUMN_COMMODITY_UID,
AccountEntry.COLUMN_PARENT_ACCOUNT_UID,
AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID
});
mTransactionsAdapter = new TransactionsDbAdapter(db, new SplitsDbAdapter(db));
mCommoditiesDbAdapter = new CommoditiesDbAdapter(db);
}
public static AccountsDbAdapter getInstance(){
return GnuCashApplication.getAccountsDbAdapter();
}
@Override
public void addRecord(@NonNull Account account, UpdateMethod updateMethod){
Log.d(LOG_TAG, "Replace account to db");
List<Transaction> templateTransactions = mTransactionsAdapter.getScheduledTransactionsForAccount(account.getUID());
super.addRecord(account, updateMethod);
String accountUID = account.getUID();
if (account.getAccountType() != AccountType.ROOT){
updateRecord(accountUID, AccountEntry.COLUMN_FULL_NAME, getFullyQualifiedAccountName(accountUID));
for (Transaction t : account.getTransactions()) {
t.setCommodity(account.getCommodity());
mTransactionsAdapter.addRecord(t, updateMethod);
}
for (Transaction transaction : templateTransactions) {
mTransactionsAdapter.addRecord(transaction, UpdateMethod.update);
}
}
}
@Override
public long bulkAddRecords(@NonNull List<Account> accountList, UpdateMethod updateMethod){
List<Transaction> transactionList = new ArrayList<>(accountList.size()*2);
for (Account account : accountList) {
transactionList.addAll(account.getTransactions());
transactionList.addAll(mTransactionsAdapter.getScheduledTransactionsForAccount(account.getUID()));
}
long nRow = super.bulkAddRecords(accountList, updateMethod);
if (nRow > 0 && !transactionList.isEmpty()){
mTransactionsAdapter.bulkAddRecords(transactionList, updateMethod);
}
return nRow;
}
@Override
protected @NonNull SQLiteStatement setBindings(@NonNull SQLiteStatement stmt, @NonNull final Account account) {
stmt.clearBindings();
stmt.bindString(1, account.getName());
if (account.getDescription() != null)
stmt.bindString(2, account.getDescription());
stmt.bindString(3, account.getAccountType().name());
stmt.bindString(4, account.getCommodity().getCurrencyCode());
if (account.getColor() != Account.DEFAULT_COLOR) {
stmt.bindString(5, account.getColorHexString());
}
stmt.bindLong(6, account.isFavorite() ? 1 : 0);
stmt.bindString(7, account.getFullName());
stmt.bindLong(8, account.isPlaceholderAccount() ? 1 : 0);
stmt.bindString(9, TimestampHelper.getUtcStringFromTimestamp(account.getCreatedTimestamp()));
stmt.bindLong(10, account.isHidden() ? 1 : 0);
stmt.bindString(11, account.getCommodity().getUID());
String parentAccountUID = account.getParentUID();
if (parentAccountUID == null && account.getAccountType() != AccountType.ROOT) {
parentAccountUID = getOrCreateGnuCashRootAccountUID();
}
if (parentAccountUID != null) {
stmt.bindString(12, parentAccountUID);
}
if (account.getDefaultTransferAccountUID() != null) {
stmt.bindString(13, account.getDefaultTransferAccountUID());
}
stmt.bindString(14, account.getUID());
return stmt;
}
public int markAsExported(String accountUID){
ContentValues contentValues = new ContentValues();
contentValues.put(TransactionEntry.COLUMN_EXPORTED, 1);
return mDb.update(
TransactionEntry.TABLE_NAME,
contentValues,
TransactionEntry.COLUMN_UID + " IN ( " +
"SELECT DISTINCT " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
" FROM " + TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME + " ON " +
TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = " +
SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " , " +
AccountEntry.TABLE_NAME + " ON " + SplitEntry.TABLE_NAME + "." +
SplitEntry.COLUMN_ACCOUNT_UID + " = " + AccountEntry.TABLE_NAME + "." +
AccountEntry.COLUMN_UID + " WHERE " + AccountEntry.TABLE_NAME + "." +
AccountEntry.COLUMN_UID + " = ? "
+ " ) ",
new String[]{accountUID}
);
}
public int updateAllAccounts(String columnKey, String newValue){
ContentValues contentValues = new ContentValues();
if (newValue == null) {
contentValues.putNull(columnKey);
} else {
contentValues.put(columnKey, newValue);
}
return mDb.update(AccountEntry.TABLE_NAME, contentValues, null, null);
}
public int updateAccount(long accountId, String columnKey, String newValue){
return updateRecord(AccountEntry.TABLE_NAME, accountId, columnKey, newValue);
}
public void reassignDescendantAccounts(@NonNull String accountUID, @NonNull String newParentAccountUID) {
List<String> descendantAccountUIDs = getDescendantAccountUIDs(accountUID, null, null);
if (descendantAccountUIDs.size() > 0) {
List<Account> descendantAccounts = getSimpleAccountList(
AccountEntry.COLUMN_UID + " IN ('" + TextUtils.join("','", descendantAccountUIDs) + "')",
null,
null
);
HashMap<String, Account> mapAccounts = new HashMap<>();
for (Account account : descendantAccounts)
mapAccounts.put(account.getUID(), account);
String parentAccountFullName;
if (getAccountType(newParentAccountUID) == AccountType.ROOT) {
parentAccountFullName = "";
} else {
parentAccountFullName = getAccountFullName(newParentAccountUID);
}
ContentValues contentValues = new ContentValues();
for (String acctUID : descendantAccountUIDs) {
Account acct = mapAccounts.get(acctUID);
if (accountUID.equals(acct.getParentUID())) {
acct.setParentUID(newParentAccountUID);
if (parentAccountFullName == null || parentAccountFullName.isEmpty()) {
acct.setFullName(acct.getName());
} else {
acct.setFullName(parentAccountFullName + ACCOUNT_NAME_SEPARATOR + acct.getName());
}
contentValues.clear();
contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, newParentAccountUID);
contentValues.put(AccountEntry.COLUMN_FULL_NAME, acct.getFullName());
mDb.update(
AccountEntry.TABLE_NAME, contentValues,
AccountEntry.COLUMN_UID + " = ?",
new String[]{acct.getUID()}
);
} else {
acct.setFullName(
mapAccounts.get(acct.getParentUID()).getFullName() +
ACCOUNT_NAME_SEPARATOR + acct.getName()
);
contentValues.clear();
contentValues.put(AccountEntry.COLUMN_FULL_NAME, acct.getFullName());
mDb.update(
AccountEntry.TABLE_NAME, contentValues,
AccountEntry.COLUMN_UID + " = ?",
new String[]{acct.getUID()}
);
}
}
}
}
public boolean recursiveDeleteAccount(long accountId){
String accountUID = getUID(accountId);
if (getAccountType(accountUID) == AccountType.ROOT) {
return false;
}
Log.d(LOG_TAG, "Delete account with rowId with its transactions and sub-accounts: " + accountId);
List<String> descendantAccountUIDs = getDescendantAccountUIDs(accountUID, null, null);
mDb.beginTransaction();
try {
descendantAccountUIDs.add(accountUID); 
for (String descendantAccountUID : descendantAccountUIDs) {
mTransactionsAdapter.deleteTransactionsForAccount(descendantAccountUID);
}
String accountUIDList = "'" + TextUtils.join("','", descendantAccountUIDs) + "'";
long deletedCount = mDb.delete(
AccountEntry.TABLE_NAME,
AccountEntry.COLUMN_UID + " IN (" + accountUIDList + ")",
null
);
if (deletedCount > 0){
ContentValues contentValues = new ContentValues();
contentValues.putNull(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID);
mDb.update(mTableName, contentValues,
AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID + " IN (" + accountUIDList + ")",
null);
}
mDb.setTransactionSuccessful();
return true;
}
finally {
mDb.endTransaction();
}
}
@Override
public Account buildModelInstance(@NonNull final Cursor c){
Account account = buildSimpleAccountInstance(c);
account.setTransactions(mTransactionsAdapter.getAllTransactionsForAccount(account.getUID()));
return account;
}
private Account buildSimpleAccountInstance(Cursor c) {
Account account = new Account(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME)));
populateBaseModelAttributes(c, account);
String description = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_DESCRIPTION));
account.setDescription(description == null ? "" : description);
account.setParentUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID)));
account.setAccountType(AccountType.valueOf(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_TYPE))));
String currencyCode = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
account.setCommodity(mCommoditiesDbAdapter.getCommodity(currencyCode));
account.setPlaceHolderFlag(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1);
account.setDefaultTransferAccountUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID)));
String color = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE));
if (color != null)
account.setColor(color);
account.setFavorite(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_FAVORITE)) == 1);
account.setFullName(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_FULL_NAME)));
account.setHidden(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_HIDDEN)) == 1);
return account;
}
public String getParentAccountUID(@NonNull String uid){
Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
new String[]{AccountEntry.COLUMN_PARENT_ACCOUNT_UID},
AccountEntry.COLUMN_UID + " = ?",
new String[]{uid},
null, null, null, null);
try {
if (cursor.moveToFirst()) {
Log.d(LOG_TAG, "Found parent account UID, returning value");
return cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
} else {
return null;
}
} finally {
cursor.close();
}
}
public String getAccountColorCode(long accountId){
Cursor c = mDb.query(AccountEntry.TABLE_NAME,
new String[]{AccountEntry._ID, AccountEntry.COLUMN_COLOR_CODE},
AccountEntry._ID + "=" + accountId,
null, null, null, null);
try {
if (c.moveToFirst()) {
return c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE));
}
else {
return null;
}
} finally {
c.close();
}
}
public AccountType getAccountType(long accountId){
return getAccountType(getUID(accountId));
}
public List<Account> getSimpleAccountList(){
LinkedList<Account> accounts = new LinkedList<>();
Cursor c = fetchAccounts(null, null, AccountEntry.COLUMN_FULL_NAME + " ASC");
try {
while (c.moveToNext()) {
accounts.add(buildSimpleAccountInstance(c));
}
}
finally {
c.close();
}
return accounts;
}
public List<Account> getSimpleAccountList(String where, String[] whereArgs, String orderBy){
LinkedList<Account> accounts = new LinkedList<>();
Cursor c = fetchAccounts(where, whereArgs, orderBy);
try {
while (c.moveToNext()) {
accounts.add(buildSimpleAccountInstance(c));
}
}
finally {
c.close();
}
return accounts;
}
public List<Account> getExportableAccounts(Timestamp lastExportTimeStamp){
LinkedList<Account> accountsList = new LinkedList<>();
Cursor cursor = mDb.query(
TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
" ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = " +
SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " , " +
AccountEntry.TABLE_NAME + " ON " + AccountEntry.TABLE_NAME + "." +
AccountEntry.COLUMN_UID + " = " + SplitEntry.TABLE_NAME + "." +
SplitEntry.COLUMN_ACCOUNT_UID,
new String[]{AccountEntry.TABLE_NAME + ".*"},
TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_MODIFIED_AT + " > ?",
new String[]{TimestampHelper.getUtcStringFromTimestamp(lastExportTimeStamp)},
AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID,
null,
null
);
try {
while (cursor.moveToNext()) {
accountsList.add(buildModelInstance(cursor));
}
}
finally {
cursor.close();
}
return accountsList;
}
public String getOrCreateImbalanceAccountUID(Commodity commodity){
String imbalanceAccountName = getImbalanceAccountName(commodity);
String uid = findAccountUidByFullName(imbalanceAccountName);
if (uid == null){
Account account = new Account(imbalanceAccountName, commodity);
account.setAccountType(AccountType.BANK);
account.setParentUID(getOrCreateGnuCashRootAccountUID());
account.setHidden(!GnuCashApplication.isDoubleEntryEnabled());
account.setColor("#964B00");
addRecord(account, UpdateMethod.insert);
uid = account.getUID();
}
return uid;
}
public String getImbalanceAccountUID(Commodity commodity){
String imbalanceAccountName = getImbalanceAccountName(commodity);
return findAccountUidByFullName(imbalanceAccountName);
}
public String createAccountHierarchy(String fullName, AccountType accountType) {
if ("".equals(fullName)) {
throw new IllegalArgumentException("fullName cannot be empty");
}
String[] tokens = fullName.trim().split(ACCOUNT_NAME_SEPARATOR);
String uid = getOrCreateGnuCashRootAccountUID();
String parentName = "";
ArrayList<Account> accountsList = new ArrayList<>();
for (String token : tokens) {
parentName += token;
String parentUID = findAccountUidByFullName(parentName);
if (parentUID != null) { 
uid = parentUID;
} else {
Account account = new Account(token);
account.setAccountType(accountType);
account.setParentUID(uid); 
account.setFullName(parentName);
accountsList.add(account);
uid = account.getUID();
}
parentName += ACCOUNT_NAME_SEPARATOR;
}
if (accountsList.size() > 0) {
bulkAddRecords(accountsList, UpdateMethod.insert);
}
return uid;
}
public String getOrCreateOpeningBalanceAccountUID() {
String openingBalanceAccountName = getOpeningBalanceAccountFullName();
String uid = findAccountUidByFullName(openingBalanceAccountName);
if (uid == null) {
uid = createAccountHierarchy(openingBalanceAccountName, AccountType.EQUITY);
}
return uid;
}
public String findAccountUidByFullName(String fullName){
Cursor c = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_UID},
AccountEntry.COLUMN_FULL_NAME + "= ?", new String[]{fullName},
null, null, null, "1");
try {
if (c.moveToNext()) {
return c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
} else {
return null;
}
} finally {
c.close();
}
}
@Override
public Cursor fetchAllRecords(){
Log.v(LOG_TAG, "Fetching all accounts from db");
String selection = AccountEntry.COLUMN_HIDDEN + " = 0 AND " + AccountEntry.COLUMN_TYPE + " != ?" ;
return mDb.query(AccountEntry.TABLE_NAME,
null,
selection,
new String[]{AccountType.ROOT.name()},
null, null,
AccountEntry.COLUMN_NAME + " ASC");
}
public Cursor fetchAllRecordsOrderedByFullName(){
Log.v(LOG_TAG, "Fetching all accounts from db");
String selection = AccountEntry.COLUMN_HIDDEN + " = 0 AND " + AccountEntry.COLUMN_TYPE + " != ?" ;
return mDb.query(AccountEntry.TABLE_NAME,
null,
selection,
new String[]{AccountType.ROOT.name()},
null, null,
AccountEntry.COLUMN_FULL_NAME + " ASC");
}
public Cursor fetchAccounts(@Nullable String where, @Nullable String[] whereArgs, @Nullable String orderBy){
if (orderBy == null){
orderBy = AccountEntry.COLUMN_NAME + " ASC";
}
Log.v(LOG_TAG, "Fetching all accounts from db where " + where + " order by " + orderBy);
return mDb.query(AccountEntry.TABLE_NAME,
null, where, whereArgs, null, null,
orderBy);
}
public Cursor fetchAccountsOrderedByFullName(String where, String[] whereArgs) {
Log.v(LOG_TAG, "Fetching all accounts from db where " + where);
return mDb.query(AccountEntry.TABLE_NAME,
null, where, whereArgs, null, null,
AccountEntry.COLUMN_FULL_NAME + " ASC");
}
public Cursor fetchAccountsOrderedByFavoriteAndFullName(String where, String[] whereArgs) {
Log.v(LOG_TAG, "Fetching all accounts from db where " + where + " order by Favorite then Name");
return mDb.query(AccountEntry.TABLE_NAME,
null, where, whereArgs, null, null,
AccountEntry.COLUMN_FAVORITE + " DESC, " + AccountEntry.COLUMN_FULL_NAME + " ASC");
}
public Money getAccountBalance(String accountUID){
return computeBalance(accountUID, -1, -1);
}
public Money getAccountBalance(String accountUID, long startTimestamp, long endTimestamp) {
return computeBalance(accountUID, startTimestamp, endTimestamp);
}
public Money getAccountBalance(AccountType accountType, long startTimestamp, long endTimestamp){
Cursor cursor = fetchAccounts(AccountEntry.COLUMN_TYPE + "= ?",
new String[]{accountType.name()}, null);
List<String> accountUidList = new ArrayList<>();
while (cursor.moveToNext()){
String accountUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
accountUidList.add(accountUID);
}
cursor.close();
boolean hasDebitNormalBalance = accountType.hasDebitNormalBalance();
String currencyCode = GnuCashApplication.getDefaultCurrencyCode();
Log.d(LOG_TAG, "all account list : " + accountUidList.size());
SplitsDbAdapter splitsDbAdapter = mTransactionsAdapter.getSplitDbAdapter();
return (startTimestamp == -1 && endTimestamp == -1)
? splitsDbAdapter.computeSplitBalance(accountUidList, currencyCode, hasDebitNormalBalance)
: splitsDbAdapter.computeSplitBalance(accountUidList, currencyCode, hasDebitNormalBalance, startTimestamp, endTimestamp);
}
public Money getAccountBalance(List<AccountType> accountTypes, long start, long end){
Money balance = Money.createZeroInstance(GnuCashApplication.getDefaultCurrencyCode());
for (AccountType accountType : accountTypes) {
balance = balance.add(getAccountBalance(accountType, start, end));
}
return balance;
}
private Money computeBalance(String accountUID, long startTimestamp, long endTimestamp) {
Log.d(LOG_TAG, "Computing account balance for account ID " + accountUID);
String currencyCode = mTransactionsAdapter.getAccountCurrencyCode(accountUID);
boolean hasDebitNormalBalance = getAccountType(accountUID).hasDebitNormalBalance();
List<String> accountsList = getDescendantAccountUIDs(accountUID,
null, null);
accountsList.add(0, accountUID);
Log.d(LOG_TAG, "all account list : " + accountsList.size());
SplitsDbAdapter splitsDbAdapter = mTransactionsAdapter.getSplitDbAdapter();
return (startTimestamp == -1 && endTimestamp == -1)
? splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance)
: splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance, startTimestamp, endTimestamp);
}
public Money getAccountsBalance(@NonNull List<String> accountUIDList, long startTimestamp, long endTimestamp) {
String currencyCode = GnuCashApplication.getDefaultCurrencyCode();
Money balance = Money.createZeroInstance(currencyCode);
if (accountUIDList.isEmpty())
return balance;
boolean hasDebitNormalBalance = getAccountType(accountUIDList.get(0)).hasDebitNormalBalance();
SplitsDbAdapter splitsDbAdapter = mTransactionsAdapter.getSplitDbAdapter();
Money splitSum = (startTimestamp == -1 && endTimestamp == -1)
? splitsDbAdapter.computeSplitBalance(accountUIDList, currencyCode, hasDebitNormalBalance)
: splitsDbAdapter.computeSplitBalance(accountUIDList, currencyCode, hasDebitNormalBalance, startTimestamp, endTimestamp);
return balance.add(splitSum);
}
public List<String> getDescendantAccountUIDs(String accountUID, String where, String[] whereArgs) {
ArrayList<String> accountsList = new ArrayList<>();
ArrayList<String> accountsListLevel = new ArrayList<>();
accountsListLevel.add(accountUID);
for (;;) {
Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
new String[]{AccountEntry.COLUMN_UID},
AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IN ( '" + TextUtils.join("' , '", accountsListLevel) + "' )" +
(where == null ? "" : " AND " + where),
whereArgs, null, null, null);
accountsListLevel.clear();
if (cursor != null) {
try {
int columnIndex = cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID);
while (cursor.moveToNext()) {
accountsListLevel.add(cursor.getString(columnIndex));
}
} finally {
cursor.close();
}
}
if (accountsListLevel.size() > 0) {
accountsList.addAll(accountsListLevel);
}
else {
break;
}
}
return accountsList;
}
public Cursor fetchSubAccounts(String accountUID) {
Log.v(LOG_TAG, "Fetching sub accounts for account id " + accountUID);
String selection = AccountEntry.COLUMN_HIDDEN + " = 0 AND "
+ AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ?";
return mDb.query(AccountEntry.TABLE_NAME,
null,
selection,
new String[]{accountUID}, null, null, AccountEntry.COLUMN_NAME + " ASC");
}
public Cursor fetchTopLevelAccounts() {
return fetchAccounts("(" + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL OR "
+ AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ?) AND "
+ AccountEntry.COLUMN_HIDDEN + " = 0 AND "
+ AccountEntry.COLUMN_TYPE + " != ?",
new String[]{getOrCreateGnuCashRootAccountUID(), AccountType.ROOT.name()},
AccountEntry.COLUMN_NAME + " ASC");
}
public Cursor fetchRecentAccounts(int numberOfRecent) {
return mDb.query(TransactionEntry.TABLE_NAME
+ " LEFT OUTER JOIN " + SplitEntry.TABLE_NAME + " ON "
+ TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
+ SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID
+ " , " + AccountEntry.TABLE_NAME + " ON " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID
+ " = " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID,
new String[]{AccountEntry.TABLE_NAME + ".*"},
AccountEntry.COLUMN_HIDDEN + " = 0",
null,
SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID, 
null, 
"MAX ( " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ) DESC", 
Integer.toString(numberOfRecent) 
);
}
public Cursor fetchFavoriteAccounts(){
Log.v(LOG_TAG, "Fetching favorite accounts from db");
String condition = AccountEntry.COLUMN_FAVORITE + " = 1";
return mDb.query(AccountEntry.TABLE_NAME,
null, condition, null, null, null,
AccountEntry.COLUMN_NAME + " ASC");
}
public String getOrCreateGnuCashRootAccountUID() {
Cursor cursor = fetchAccounts(AccountEntry.COLUMN_TYPE + "= ?",
new String[]{AccountType.ROOT.name()}, null);
try {
if (cursor.moveToFirst()) {
return cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
}
} finally {
cursor.close();
}
Account rootAccount = new Account("ROOT Account", new CommoditiesDbAdapter(mDb).getCommodity("USD"));
rootAccount.setAccountType(AccountType.ROOT);
rootAccount.setFullName(ROOT_ACCOUNT_FULL_NAME);
rootAccount.setHidden(true);
rootAccount.setPlaceHolderFlag(true);
ContentValues contentValues = new ContentValues();
contentValues.put(AccountEntry.COLUMN_UID, rootAccount.getUID());
contentValues.put(AccountEntry.COLUMN_NAME, rootAccount.getName());
contentValues.put(AccountEntry.COLUMN_FULL_NAME, rootAccount.getFullName());
contentValues.put(AccountEntry.COLUMN_TYPE, rootAccount.getAccountType().name());
contentValues.put(AccountEntry.COLUMN_HIDDEN, rootAccount.isHidden() ? 1 : 0);
String defaultCurrencyCode = GnuCashApplication.getDefaultCurrencyCode();
contentValues.put(AccountEntry.COLUMN_CURRENCY, defaultCurrencyCode);
contentValues.put(AccountEntry.COLUMN_COMMODITY_UID, getCommodityUID(defaultCurrencyCode));
Log.i(LOG_TAG, "Creating ROOT account");
mDb.insert(AccountEntry.TABLE_NAME, null, contentValues);
return rootAccount.getUID();
}
public int getSubAccountCount(String accountUID){
String queryCount = "SELECT COUNT(*) FROM " + AccountEntry.TABLE_NAME + " WHERE "
+ AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ?";
Cursor cursor = mDb.rawQuery(queryCount, new String[]{accountUID});
cursor.moveToFirst();
int count = cursor.getInt(0);
cursor.close();
return count;
}
public String getCurrencyCode(String uid){
return getAccountCurrencyCode(uid);
}
public String getAccountName(String accountUID){
return getAttribute(accountUID, AccountEntry.COLUMN_NAME);
}
public long getDefaultTransferAccountID(long accountID){
Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
new String[]{AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID},
AccountEntry._ID + " = " + accountID,
null, null, null, null);
try {
if (cursor.moveToNext()) {
String uid = cursor.getString(
cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID));
if (uid == null)
return 0;
else
return getID(uid);
} else {
return 0;
}
} finally {
cursor.close();
}
}
public String getFullyQualifiedAccountName(String accountUID){
String accountName = getAccountName(accountUID);
String parentAccountUID = getParentAccountUID(accountUID);
if (parentAccountUID == null || parentAccountUID.equalsIgnoreCase(getOrCreateGnuCashRootAccountUID())){
return accountName;
}
String parentAccountName = getFullyQualifiedAccountName(parentAccountUID);
return parentAccountName + ACCOUNT_NAME_SEPARATOR + accountName;
}
public String getAccountFullName(String accountUID) {
Cursor cursor = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_FULL_NAME},
AccountEntry.COLUMN_UID + " = ?", new String[]{accountUID},
null, null, null);
try {
if (cursor.moveToFirst()) {
return cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_FULL_NAME));
}
}
finally {
cursor.close();
}
throw new IllegalArgumentException("account UID: " + accountUID + " does not exist");
}
public boolean isPlaceholderAccount(String accountUID) {
String isPlaceholder = getAttribute(accountUID, AccountEntry.COLUMN_PLACEHOLDER);
return Integer.parseInt(isPlaceholder) == 1;
}
public boolean isHiddenAccount(String accountUID){
String isHidden = getAttribute(accountUID, AccountEntry.COLUMN_HIDDEN);
return Integer.parseInt(isHidden) == 1;
}
public boolean isFavoriteAccount(String accountUID){
String isFavorite = getAttribute(accountUID, AccountEntry.COLUMN_FAVORITE);
return Integer.parseInt(isFavorite) == 1;
}
public List<Transaction> getAllOpeningBalanceTransactions(){
Cursor cursor = fetchAccounts(null, null, null);
List<Transaction> openingTransactions = new ArrayList<>();
try {
SplitsDbAdapter splitsDbAdapter = mTransactionsAdapter.getSplitDbAdapter();
while (cursor.moveToNext()) {
long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
String accountUID = getUID(id);
String currencyCode = getCurrencyCode(accountUID);
ArrayList<String> accountList = new ArrayList<>();
accountList.add(accountUID);
Money balance = splitsDbAdapter.computeSplitBalance(accountList,
currencyCode, getAccountType(accountUID).hasDebitNormalBalance());
if (balance.asBigDecimal().compareTo(new BigDecimal(0)) == 0)
continue;
Transaction transaction = new Transaction(GnuCashApplication.getAppContext().getString(R.string.account_name_opening_balances));
transaction.setNote(getAccountName(accountUID));
transaction.setCommodity(Commodity.getInstance(currencyCode));
TransactionType transactionType = Transaction.getTypeForBalance(getAccountType(accountUID),
balance.isNegative());
Split split = new Split(balance, accountUID);
split.setType(transactionType);
transaction.addSplit(split);
transaction.addSplit(split.createPair(getOrCreateOpeningBalanceAccountUID()));
transaction.setExported(true);
openingTransactions.add(transaction);
}
} finally {
cursor.close();
}
return openingTransactions;
}
public static String getImbalanceAccountPrefix() {
return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-";
}
public static String getImbalanceAccountName(Commodity commodity){
return getImbalanceAccountPrefix() + commodity.getCurrencyCode();
}
public static String getOpeningBalanceAccountFullName(){
Context context = GnuCashApplication.getAppContext();
String parentEquity = context.getString(R.string.account_name_equity).trim();
if (parentEquity.length() > 0) {
return parentEquity + ACCOUNT_NAME_SEPARATOR
+ context.getString(R.string.account_name_opening_balances);
} else
return context.getString(R.string.account_name_opening_balances);
}
public static int getActiveAccountColorResource(@NonNull String accountUID) {
AccountsDbAdapter accountsDbAdapter = getInstance();
String colorCode = null;
int iColor = -1;
String parentAccountUID = accountUID;
while (parentAccountUID != null ) {
colorCode = accountsDbAdapter.getAccountColorCode(accountsDbAdapter.getID(parentAccountUID));
if (colorCode != null) {
iColor = Color.parseColor(colorCode);
break;
}
parentAccountUID = accountsDbAdapter.getParentAccountUID(parentAccountUID);
}
if (colorCode == null) {
iColor = GnuCashApplication.getAppContext().getResources().getColor(R.color.theme_primary);
}
return iColor;
}
public List<Commodity> getCommoditiesInUse() {
Cursor cursor = mDb.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
null, null, null, null, null, null);
List<Commodity> commodityList = new ArrayList<>();
try {
while (cursor.moveToNext()) {
String currencyCode =
cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
commodityList.add(mCommoditiesDbAdapter.getCommodity(currencyCode));
}
} finally {
cursor.close();
}
return commodityList;
}
@Override
public int deleteAllRecords() {
mDb.delete(DatabaseSchema.PriceEntry.TABLE_NAME, null, null);
mDb.delete(SplitEntry.TABLE_NAME, null, null);
mDb.delete(TransactionEntry.TABLE_NAME, null, null);
mDb.delete(DatabaseSchema.ScheduledActionEntry.TABLE_NAME, null, null);
mDb.delete(DatabaseSchema.BudgetAmountEntry.TABLE_NAME, null, null);
mDb.delete(DatabaseSchema.BudgetEntry.TABLE_NAME, null, null);
mDb.delete(DatabaseSchema.RecurrenceEntry.TABLE_NAME, null, null);
return mDb.delete(AccountEntry.TABLE_NAME, null, null);
}
@Override
public boolean deleteRecord(@NonNull String uid) {
boolean result = super.deleteRecord(uid);
if (result){
ContentValues contentValues = new ContentValues();
contentValues.putNull(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID);
mDb.update(mTableName, contentValues,
AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID + "=?",
new String[]{uid});
}
return result;
}
public int getTransactionMaxSplitNum(@NonNull String accountUID) {
Cursor cursor = mDb.query("trans_extra_info",
new String[]{"MAX(trans_split_count)"},
"trans_acct_t_uid IN ( SELECT DISTINCT " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
" FROM trans_split_acct WHERE " + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID +
" = ? )",
new String[]{accountUID},
null,
null,
null
);
try {
if (cursor.moveToFirst()) {
return (int)cursor.getLong(0);
} else {
return 0;
}
}
finally {
cursor.close();
}
}
}
