package it.unimi.dsi.fastutil.io;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
s */
public class FastMultiByteArrayInputStream extends MeasurableInputStream implements RepositionableStream {
public static final int SLICE_BITS = 30;
public static final int SLICE_SIZE = 1 << SLICE_BITS;
public static final int SLICE_MASK = SLICE_SIZE - 1;
public byte[][] array;
public byte[] current;
public long length;
private long position;
public FastMultiByteArrayInputStream(final MeasurableInputStream is) throws IOException {
this(is, is.length());
}
public FastMultiByteArrayInputStream(final InputStream is, long size) throws IOException {
length = size;
array = new byte[(int)((size + SLICE_SIZE - 1) / SLICE_SIZE) + 1][];
for(int i = 0; i < array.length - 1; i++) {
array[i] = new byte[size >= SLICE_SIZE ? SLICE_SIZE : (int)size];
if (BinIO.loadBytes(is, array[i]) != array[i].length) throw new EOFException();
size -= array[i].length;
}
current = array[0];
}
public FastMultiByteArrayInputStream(final FastMultiByteArrayInputStream is) {
this.array = is.array;
this.length = is.length;
this.current = array[0];
}
public FastMultiByteArrayInputStream(final byte[] array) {
if (array.length == 0) this.array = new byte[1][];
else {
this.array = new byte[2][];
this.array[0] = array;
this.length = array.length;
this.current = array;
}
}
@Override
public int available() {
return (int)Math.min(Integer.MAX_VALUE, length - position);
}
@Override
public long skip(long n) {
if (n > length - position) n = length - position;
position += n;
updateCurrent();
return n;
}
@Override
public int read() {
if (length == position) return -1;
final int disp = (int)(position++ & SLICE_MASK);
if (disp == 0) updateCurrent();
return current[disp] & 0xFF;
}
@Override
public int read(final byte[] b, int offset, final int length) {
final long remaining = this.length - position;
if (remaining == 0) return length == 0 ? 0 : -1;
int n = (int)Math.min(length, remaining);
final int m = n;
for(;;) {
final int disp = (int)(position & SLICE_MASK);
if (disp == 0) updateCurrent();
final int res = Math.min(n, current.length - disp);
System.arraycopy(current, disp, b, offset, res);
n -= res;
position += res;
if (n == 0) return m;
offset += res;
}
}
private void updateCurrent() {
current = array[(int)(position >>> SLICE_BITS)];
}
@Override
public long position() {
return position;
}
@Override
public void position(final long newPosition) {
position = Math.min(newPosition, length);
updateCurrent();
}
@Override
public long length() throws IOException {
return length;
}
@Override
public void close() {}
@Override
public boolean markSupported() {
return false;
}
@Override
public void mark(final int dummy) {
throw new UnsupportedOperationException();
}
@Override
public void reset() {
throw new UnsupportedOperationException();
}
}
