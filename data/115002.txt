package com.google.samples;
import com.google.api.services.jobs.v3.CloudTalentSolution;
import com.google.api.services.jobs.v3.model.Company;
import com.google.api.services.jobs.v3.model.CreateCompanyRequest;
import com.google.api.services.jobs.v3.model.UpdateCompanyRequest;
import java.io.IOException;
import java.util.Random;
public final class BasicCompanySample {
private static final String DEFAULT_PROJECT_ID =
"projects/" + System.getenv("GOOGLE_CLOUD_PROJECT");
private static CloudTalentSolution talentSolutionClient = JobServiceQuickstart
.getTalentSolutionClient();
public static Company generateCompany() {
String companyName =
"company:" + String.valueOf(new Random().nextLong());
Company company =
new Company()
.setDisplayName("Google")
.setHeadquartersAddress("1600 Amphitheatre Parkway Mountain View, CA 94043")
.setExternalId(companyName);
System.out.println("Company generated: " + company);
return company;
}
public static Company createCompany(Company companyToBeCreated) throws IOException {
try {
CreateCompanyRequest createCompanyRequest =
new CreateCompanyRequest().setCompany(companyToBeCreated);
Company companyCreated =
talentSolutionClient.projects()
.companies()
.create(DEFAULT_PROJECT_ID, createCompanyRequest)
.execute();
System.out.println("Company created: " + companyCreated);
return companyCreated;
} catch (IOException e) {
System.out.println("Got exception while creating company");
throw e;
}
}
public static Company getCompany(String companyName) throws IOException {
try {
Company companyExisted =
talentSolutionClient.projects().companies().get(companyName).execute();
System.out.println("Company existed: " + companyExisted);
return companyExisted;
} catch (IOException e) {
System.out.println("Got exception while getting company");
throw e;
}
}
public static Company updateCompany(String companyName, Company companyToBeUpdated)
throws IOException {
try {
UpdateCompanyRequest updateCompanyRequest =
new UpdateCompanyRequest().setCompany(companyToBeUpdated);
Company companyUpdated =
talentSolutionClient
.projects()
.companies()
.patch(companyName, updateCompanyRequest)
.execute();
System.out.println("Company updated: " + companyUpdated);
return companyUpdated;
} catch (IOException e) {
System.out.println("Got exception while updating company");
throw e;
}
}
public static Company updateCompanyWithFieldMask(String companyName, String fieldMask,
Company companyToBeUpdated)
throws IOException {
try {
UpdateCompanyRequest updateCompanyRequest =
new UpdateCompanyRequest().setUpdateMask(fieldMask).setCompany(companyToBeUpdated);
Company companyUpdated =
talentSolutionClient
.projects()
.companies()
.patch(companyName, updateCompanyRequest)
.execute();
System.out.println("Company updated: " + companyUpdated);
return companyUpdated;
} catch (IOException e) {
System.out.println("Got exception while updating company");
throw e;
}
}
public static void deleteCompany(String companyName) throws IOException {
try {
talentSolutionClient.projects().companies().delete(companyName).execute();
System.out.println("Company deleted");
} catch (IOException e) {
System.out.println("Got exception while deleting company");
throw e;
}
}
public static void main(String... args) throws Exception {
Company companyToBeCreated = generateCompany();
Company companyCreated = createCompany(companyToBeCreated);
String companyName = companyCreated.getName();
getCompany(companyName);
Company companyToBeUpdated = companyCreated
.setCareerSiteUri("https:
updateCompany(companyName, companyToBeUpdated);
updateCompanyWithFieldMask(companyName, "displayName",
new Company().setDisplayName("changedTitle")
.setName(companyCreated.getName()));
deleteCompany(companyName);
}
}
