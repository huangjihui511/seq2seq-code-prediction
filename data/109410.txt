package com.facebook.presto.sql.planner.iterative.rule;
import com.facebook.presto.matching.Captures;
import com.facebook.presto.matching.Pattern;
import com.facebook.presto.spi.relation.VariableReferenceExpression;
import com.facebook.presto.sql.planner.iterative.Rule;
import com.facebook.presto.sql.planner.plan.JoinNode;
import com.facebook.presto.sql.planner.plan.LateralJoinNode;
import com.google.common.collect.ImmutableList;
import java.util.Optional;
import static com.facebook.presto.matching.Pattern.empty;
import static com.facebook.presto.sql.planner.plan.Patterns.LateralJoin.correlation;
import static com.facebook.presto.sql.planner.plan.Patterns.lateralJoin;
public class TransformUncorrelatedLateralToJoin
implements Rule<LateralJoinNode>
{
private static final Pattern<LateralJoinNode> PATTERN = lateralJoin()
.with(empty(correlation()));
@Override
public Pattern<LateralJoinNode> getPattern()
{
return PATTERN;
}
@Override
public Result apply(LateralJoinNode lateralJoinNode, Captures captures, Context context)
{
return Result.ofPlanNode(new JoinNode(
context.getIdAllocator().getNextId(),
JoinNode.Type.INNER,
lateralJoinNode.getInput(),
lateralJoinNode.getSubquery(),
ImmutableList.of(),
ImmutableList.<VariableReferenceExpression>builder()
.addAll(lateralJoinNode.getInput().getOutputVariables())
.addAll(lateralJoinNode.getSubquery().getOutputVariables())
.build(),
Optional.empty(),
Optional.empty(),
Optional.empty(),
Optional.empty()));
}
}
