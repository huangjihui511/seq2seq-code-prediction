package org.jsoup.nodes;
import org.jsoup.Jsoup;
import org.jsoup.parser.Parser;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
public class DocumentTypeTest {
@Test
public void constructorValidationOkWithBlankName() {
new DocumentType("","", "");
}
@Test
public void constructorValidationThrowsExceptionOnNulls() {
assertThrows(IllegalArgumentException.class, () -> new DocumentType("html", null, null));
}
@Test
public void constructorValidationOkWithBlankPublicAndSystemIds() {
new DocumentType("html","", "");
}
@Test public void outerHtmlGeneration() {
DocumentType html5 = new DocumentType("html", "", "");
assertEquals("<!doctype html>", html5.outerHtml());
DocumentType publicDocType = new DocumentType("html", "-
assertEquals("<!DOCTYPE html PUBLIC \"-
DocumentType systemDocType = new DocumentType("html", "", "http:
assertEquals("<!DOCTYPE html SYSTEM \"http:
DocumentType combo = new DocumentType("notHtml", "--public", "--system");
assertEquals("<!DOCTYPE notHtml PUBLIC \"--public\" \"--system\">", combo.outerHtml());
assertEquals("notHtml", combo.name());
assertEquals("--public", combo.publicId());
assertEquals("--system", combo.systemId());
}
@Test public void testRoundTrip() {
String base = "<!DOCTYPE html>";
assertEquals("<!doctype html>", htmlOutput(base));
assertEquals(base, xmlOutput(base));
String publicDoc = "<!DOCTYPE html PUBLIC \"-
assertEquals(publicDoc, htmlOutput(publicDoc));
assertEquals(publicDoc, xmlOutput(publicDoc));
String systemDoc = "<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\">";
assertEquals(systemDoc, htmlOutput(systemDoc));
assertEquals(systemDoc, xmlOutput(systemDoc));
String legacyDoc = "<!DOCTYPE html SYSTEM \"about:legacy-compat\">";
assertEquals(legacyDoc, htmlOutput(legacyDoc));
assertEquals(legacyDoc, xmlOutput(legacyDoc));
}
private String htmlOutput(String in) {
DocumentType type = (DocumentType) Jsoup.parse(in).childNode(0);
return type.outerHtml();
}
private String xmlOutput(String in) {
return Jsoup.parse(in, "", Parser.xmlParser()).childNode(0).outerHtml();
}
}
