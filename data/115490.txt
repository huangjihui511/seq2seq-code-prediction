package org.gnucash.android.receivers;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import com.crashlytics.android.Crashlytics;
import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
import org.gnucash.android.db.adapter.DatabaseAdapter;
import org.gnucash.android.db.adapter.TransactionsDbAdapter;
import org.gnucash.android.model.Account;
import org.gnucash.android.model.Commodity;
import org.gnucash.android.model.Money;
import org.gnucash.android.model.Split;
import org.gnucash.android.model.Transaction;
import org.gnucash.android.model.TransactionType;
import org.gnucash.android.ui.homescreen.WidgetConfigurationActivity;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.MathContext;
public class TransactionRecorder extends BroadcastReceiver {
@Override
public void onReceive(Context context, Intent intent) {
Log.i(this.getClass().getName(), "Received transaction recording intent");
Bundle args = intent.getExtras();
String name = args.getString(Intent.EXTRA_TITLE);
String note = args.getString(Intent.EXTRA_TEXT);
String currencyCode = args.getString(Account.EXTRA_CURRENCY_CODE);
if (currencyCode == null)
currencyCode = Money.DEFAULT_CURRENCY_CODE;
Transaction transaction = new Transaction(name);
transaction.setTime(System.currentTimeMillis());
transaction.setNote(note);
transaction.setCommodity(Commodity.getInstance(currencyCode));
String accountUID = args.getString(Transaction.EXTRA_ACCOUNT_UID);
if (accountUID != null) {
TransactionType type = TransactionType.valueOf(args.getString(Transaction.EXTRA_TRANSACTION_TYPE));
BigDecimal amountBigDecimal = (BigDecimal) args.getSerializable(Transaction.EXTRA_AMOUNT);
Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);
amountBigDecimal = amountBigDecimal.setScale(commodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN).round(MathContext.DECIMAL128);
Money amount = new Money(amountBigDecimal, Commodity.getInstance(currencyCode));
Split split = new Split(amount, accountUID);
split.setType(type);
transaction.addSplit(split);
String transferAccountUID = args.getString(Transaction.EXTRA_DOUBLE_ACCOUNT_UID);
if (transferAccountUID != null) {
transaction.addSplit(split.createPair(transferAccountUID));
}
}
String splits = args.getString(Transaction.EXTRA_SPLITS);
if (splits != null) {
StringReader stringReader = new StringReader(splits);
BufferedReader bufferedReader = new BufferedReader(stringReader);
String line = null;
try {
while ((line = bufferedReader.readLine()) != null){
Split split = Split.parseSplit(line);
transaction.addSplit(split);
}
} catch (IOException e) {
Crashlytics.logException(e);
}
}
TransactionsDbAdapter.getInstance().addRecord(transaction, DatabaseAdapter.UpdateMethod.insert);
WidgetConfigurationActivity.updateAllWidgets(context);
}
}
