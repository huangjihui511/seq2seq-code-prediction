package com.site.blog.my.core.service.impl;
import com.site.blog.my.core.controller.vo.BlogDetailVO;
import com.site.blog.my.core.controller.vo.BlogListVO;
import com.site.blog.my.core.controller.vo.SimpleBlogListVO;
import com.site.blog.my.core.dao.*;
import com.site.blog.my.core.entity.Blog;
import com.site.blog.my.core.entity.BlogCategory;
import com.site.blog.my.core.entity.BlogTag;
import com.site.blog.my.core.entity.BlogTagRelation;
import com.site.blog.my.core.service.BlogService;
import com.site.blog.my.core.util.MarkDownUtil;
import com.site.blog.my.core.util.PageQueryUtil;
import com.site.blog.my.core.util.PageResult;
import com.site.blog.my.core.util.PatternUtil;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import java.util.*;
import java.util.stream.Collectors;
@Service
public class BlogServiceImpl implements BlogService {
@Autowired
private BlogMapper blogMapper;
@Autowired
private BlogCategoryMapper categoryMapper;
@Autowired
private BlogTagMapper tagMapper;
@Autowired
private BlogTagRelationMapper blogTagRelationMapper;
@Autowired
private BlogCommentMapper blogCommentMapper;
@Override
@Transactional
public String saveBlog(Blog blog) {
BlogCategory blogCategory = categoryMapper.selectByPrimaryKey(blog.getBlogCategoryId());
if (blogCategory == null) {
blog.setBlogCategoryId(0);
} else {
blog.setBlogCategoryName(blogCategory.getCategoryName());
blogCategory.setCategoryRank(blogCategory.getCategoryRank() + 1);
}
String[] tags = blog.getBlogTags().split(",");
if (tags.length > 6) {
}
if (blogMapper.insertSelective(blog) > 0) {
List<BlogTag> tagListForInsert = new ArrayList<>();
List<BlogTag> allTagsList = new ArrayList<>();
for (int i = 0; i < tags.length; i++) {
BlogTag tag = tagMapper.selectByTagName(tags[i]);
if (tag == null) {
BlogTag tempTag = new BlogTag();
tempTag.setTagName(tags[i]);
tagListForInsert.add(tempTag);
} else {
allTagsList.add(tag);
}
}
if (!CollectionUtils.isEmpty(tagListForInsert)) {
tagMapper.batchInsertBlogTag(tagListForInsert);
}
categoryMapper.updateByPrimaryKeySelective(blogCategory);
List<BlogTagRelation> blogTagRelations = new ArrayList<>();
allTagsList.addAll(tagListForInsert);
for (BlogTag tag : allTagsList) {
BlogTagRelation blogTagRelation = new BlogTagRelation();
blogTagRelation.setBlogId(blog.getBlogId());
blogTagRelation.setTagId(tag.getTagId());
blogTagRelations.add(blogTagRelation);
}
if (blogTagRelationMapper.batchInsert(blogTagRelations) > 0) {
return "success";
}
}
}
@Override
public PageResult getBlogsPage(PageQueryUtil pageUtil) {
List<Blog> blogList = blogMapper.findBlogList(pageUtil);
int total = blogMapper.getTotalBlogs(pageUtil);
PageResult pageResult = new PageResult(blogList, total, pageUtil.getLimit(), pageUtil.getPage());
return pageResult;
}
@Override
public Boolean deleteBatch(Integer[] ids) {
return blogMapper.deleteBatch(ids) > 0;
}
@Override
public int getTotalBlogs() {
return blogMapper.getTotalBlogs(null);
}
@Override
public Blog getBlogById(Long blogId) {
return blogMapper.selectByPrimaryKey(blogId);
}
@Override
@Transactional
public String updateBlog(Blog blog) {
Blog blogForUpdate = blogMapper.selectByPrimaryKey(blog.getBlogId());
if (blogForUpdate == null) {
}
blogForUpdate.setBlogTitle(blog.getBlogTitle());
blogForUpdate.setBlogSubUrl(blog.getBlogSubUrl());
blogForUpdate.setBlogContent(blog.getBlogContent());
blogForUpdate.setBlogCoverImage(blog.getBlogCoverImage());
blogForUpdate.setBlogStatus(blog.getBlogStatus());
blogForUpdate.setEnableComment(blog.getEnableComment());
BlogCategory blogCategory = categoryMapper.selectByPrimaryKey(blog.getBlogCategoryId());
if (blogCategory == null) {
blogForUpdate.setBlogCategoryId(0);
} else {
blogForUpdate.setBlogCategoryName(blogCategory.getCategoryName());
blogForUpdate.setBlogCategoryId(blogCategory.getCategoryId());
blogCategory.setCategoryRank(blogCategory.getCategoryRank() + 1);
}
String[] tags = blog.getBlogTags().split(",");
if (tags.length > 6) {
}
blogForUpdate.setBlogTags(blog.getBlogTags());
List<BlogTag> tagListForInsert = new ArrayList<>();
List<BlogTag> allTagsList = new ArrayList<>();
for (int i = 0; i < tags.length; i++) {
BlogTag tag = tagMapper.selectByTagName(tags[i]);
if (tag == null) {
BlogTag tempTag = new BlogTag();
tempTag.setTagName(tags[i]);
tagListForInsert.add(tempTag);
} else {
allTagsList.add(tag);
}
}
if (!CollectionUtils.isEmpty(tagListForInsert)) {
tagMapper.batchInsertBlogTag(tagListForInsert);
}
List<BlogTagRelation> blogTagRelations = new ArrayList<>();
allTagsList.addAll(tagListForInsert);
for (BlogTag tag : allTagsList) {
BlogTagRelation blogTagRelation = new BlogTagRelation();
blogTagRelation.setBlogId(blog.getBlogId());
blogTagRelation.setTagId(tag.getTagId());
blogTagRelations.add(blogTagRelation);
}
categoryMapper.updateByPrimaryKeySelective(blogCategory);
blogTagRelationMapper.deleteByBlogId(blog.getBlogId());
blogTagRelationMapper.batchInsert(blogTagRelations);
if (blogMapper.updateByPrimaryKeySelective(blogForUpdate) > 0) {
return "success";
}
}
@Override
public PageResult getBlogsForIndexPage(int page) {
Map params = new HashMap();
params.put("page", page);
params.put("limit", 8);
PageQueryUtil pageUtil = new PageQueryUtil(params);
List<Blog> blogList = blogMapper.findBlogList(pageUtil);
List<BlogListVO> blogListVOS = getBlogListVOsByBlogs(blogList);
int total = blogMapper.getTotalBlogs(pageUtil);
PageResult pageResult = new PageResult(blogListVOS, total, pageUtil.getLimit(), pageUtil.getPage());
return pageResult;
}
@Override
public List<SimpleBlogListVO> getBlogListForIndexPage(int type) {
List<SimpleBlogListVO> simpleBlogListVOS = new ArrayList<>();
List<Blog> blogs = blogMapper.findBlogListByType(type, 9);
if (!CollectionUtils.isEmpty(blogs)) {
for (Blog blog : blogs) {
SimpleBlogListVO simpleBlogListVO = new SimpleBlogListVO();
BeanUtils.copyProperties(blog, simpleBlogListVO);
simpleBlogListVOS.add(simpleBlogListVO);
}
}
return simpleBlogListVOS;
}
@Override
public BlogDetailVO getBlogDetail(Long id) {
Blog blog = blogMapper.selectByPrimaryKey(id);
BlogDetailVO blogDetailVO = getBlogDetailVO(blog);
if (blogDetailVO != null) {
return blogDetailVO;
}
return null;
}
@Override
public PageResult getBlogsPageByTag(String tagName, int page) {
if (PatternUtil.validKeyword(tagName)) {
BlogTag tag = tagMapper.selectByTagName(tagName);
if (tag != null && page > 0) {
Map param = new HashMap();
param.put("page", page);
param.put("limit", 9);
param.put("tagId", tag.getTagId());
PageQueryUtil pageUtil = new PageQueryUtil(param);
List<Blog> blogList = blogMapper.getBlogsPageByTagId(pageUtil);
List<BlogListVO> blogListVOS = getBlogListVOsByBlogs(blogList);
int total = blogMapper.getTotalBlogsByTagId(pageUtil);
PageResult pageResult = new PageResult(blogListVOS, total, pageUtil.getLimit(), pageUtil.getPage());
return pageResult;
}
}
return null;
}
@Override
public PageResult getBlogsPageByCategory(String categoryName, int page) {
if (PatternUtil.validKeyword(categoryName)) {
BlogCategory blogCategory = categoryMapper.selectByCategoryName(categoryName);
blogCategory = new BlogCategory();
blogCategory.setCategoryId(0);
}
if (blogCategory != null && page > 0) {
Map param = new HashMap();
param.put("page", page);
param.put("limit", 9);
param.put("blogCategoryId", blogCategory.getCategoryId());
PageQueryUtil pageUtil = new PageQueryUtil(param);
List<Blog> blogList = blogMapper.findBlogList(pageUtil);
List<BlogListVO> blogListVOS = getBlogListVOsByBlogs(blogList);
int total = blogMapper.getTotalBlogs(pageUtil);
PageResult pageResult = new PageResult(blogListVOS, total, pageUtil.getLimit(), pageUtil.getPage());
return pageResult;
}
}
return null;
}
@Override
public PageResult getBlogsPageBySearch(String keyword, int page) {
if (page > 0 && PatternUtil.validKeyword(keyword)) {
Map param = new HashMap();
param.put("page", page);
param.put("limit", 9);
param.put("keyword", keyword);
PageQueryUtil pageUtil = new PageQueryUtil(param);
List<Blog> blogList = blogMapper.findBlogList(pageUtil);
List<BlogListVO> blogListVOS = getBlogListVOsByBlogs(blogList);
int total = blogMapper.getTotalBlogs(pageUtil);
PageResult pageResult = new PageResult(blogListVOS, total, pageUtil.getLimit(), pageUtil.getPage());
return pageResult;
}
return null;
}
@Override
public BlogDetailVO getBlogDetailBySubUrl(String subUrl) {
Blog blog = blogMapper.selectBySubUrl(subUrl);
BlogDetailVO blogDetailVO = getBlogDetailVO(blog);
if (blogDetailVO != null) {
return blogDetailVO;
}
return null;
}
private BlogDetailVO getBlogDetailVO(Blog blog) {
if (blog != null && blog.getBlogStatus() == 1) {
blog.setBlogViews(blog.getBlogViews() + 1);
blogMapper.updateByPrimaryKey(blog);
BlogDetailVO blogDetailVO = new BlogDetailVO();
BeanUtils.copyProperties(blog, blogDetailVO);
blogDetailVO.setBlogContent(MarkDownUtil.mdToHtml(blogDetailVO.getBlogContent()));
BlogCategory blogCategory = categoryMapper.selectByPrimaryKey(blog.getBlogCategoryId());
if (blogCategory == null) {
blogCategory = new BlogCategory();
blogCategory.setCategoryId(0);
blogCategory.setCategoryIcon("/admin/dist/img/category/00.png");
}
blogDetailVO.setBlogCategoryIcon(blogCategory.getCategoryIcon());
if (!StringUtils.isEmpty(blog.getBlogTags())) {
List<String> tags = Arrays.asList(blog.getBlogTags().split(","));
blogDetailVO.setBlogTags(tags);
}
Map params = new HashMap();
params.put("blogId", blog.getBlogId());
blogDetailVO.setCommentCount(blogCommentMapper.getTotalBlogComments(params));
return blogDetailVO;
}
return null;
}
private List<BlogListVO> getBlogListVOsByBlogs(List<Blog> blogList) {
List<BlogListVO> blogListVOS = new ArrayList<>();
if (!CollectionUtils.isEmpty(blogList)) {
List<Integer> categoryIds = blogList.stream().map(Blog::getBlogCategoryId).collect(Collectors.toList());
Map<Integer, String> blogCategoryMap = new HashMap<>();
if (!CollectionUtils.isEmpty(categoryIds)) {
List<BlogCategory> blogCategories = categoryMapper.selectByCategoryIds(categoryIds);
if (!CollectionUtils.isEmpty(blogCategories)) {
blogCategoryMap = blogCategories.stream().collect(Collectors.toMap(BlogCategory::getCategoryId, BlogCategory::getCategoryIcon, (key1, key2) -> key2));
}
}
for (Blog blog : blogList) {
BlogListVO blogListVO = new BlogListVO();
BeanUtils.copyProperties(blog, blogListVO);
if (blogCategoryMap.containsKey(blog.getBlogCategoryId())) {
blogListVO.setBlogCategoryIcon(blogCategoryMap.get(blog.getBlogCategoryId()));
} else {
blogListVO.setBlogCategoryId(0);
blogListVO.setBlogCategoryIcon("/admin/dist/img/category/00.png");
}
blogListVOS.add(blogListVO);
}
}
return blogListVOS;
}
}
