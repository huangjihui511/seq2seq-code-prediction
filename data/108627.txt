package com.alibaba.csp.sentinel.slots.block.flow.controller;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import org.junit.Test;
import com.alibaba.csp.sentinel.node.Node;
import com.alibaba.csp.sentinel.test.AbstractTimeBasedTest;
public class WarmUpControllerTest extends AbstractTimeBasedTest {
@Test
public void testWarmUp() throws InterruptedException {
WarmUpController warmupController = new WarmUpController(10, 10, 3);
setCurrentMillis(System.currentTimeMillis());
Node node = mock(Node.class);
when(node.passQps()).thenReturn(8d);
when(node.previousPassQps()).thenReturn(1d);
assertFalse(warmupController.canPass(node, 1));
when(node.passQps()).thenReturn(1d);
when(node.previousPassQps()).thenReturn(1d);
assertTrue(warmupController.canPass(node, 1));
when(node.previousPassQps()).thenReturn(10d);
for (int i = 0; i < 100; i++) {
sleep(100);
warmupController.canPass(node, 1);
}
when(node.passQps()).thenReturn(8d);
assertTrue(warmupController.canPass(node, 1));
when(node.passQps()).thenReturn(10d);
assertFalse(warmupController.canPass(node, 1));
}
}
