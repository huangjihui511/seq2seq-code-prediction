package org.pf4j;
import org.pf4j.util.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.nio.file.Path;
import java.nio.file.Paths;
public class DefaultPluginManager extends AbstractPluginManager {
private static final Logger log = LoggerFactory.getLogger(DefaultPluginManager.class);
public static final String PLUGINS_DIR_CONFIG_PROPERTY_NAME = "pf4j.pluginsConfigDir";
public DefaultPluginManager() {
super();
}
public DefaultPluginManager(Path pluginsRoot) {
super(pluginsRoot);
}
@Override
protected PluginDescriptorFinder createPluginDescriptorFinder() {
return new CompoundPluginDescriptorFinder()
.add(new PropertiesPluginDescriptorFinder())
.add(new ManifestPluginDescriptorFinder());
}
@Override
protected ExtensionFinder createExtensionFinder() {
DefaultExtensionFinder extensionFinder = new DefaultExtensionFinder(this);
addPluginStateListener(extensionFinder);
return extensionFinder;
}
@Override
protected PluginFactory createPluginFactory() {
return new DefaultPluginFactory();
}
@Override
protected ExtensionFactory createExtensionFactory() {
return new DefaultExtensionFactory();
}
@Override
protected PluginStatusProvider createPluginStatusProvider() {
String configDir = System.getProperty(PLUGINS_DIR_CONFIG_PROPERTY_NAME);
Path configPath = configDir != null ? Paths.get(configDir) : getPluginsRoot();
return new DefaultPluginStatusProvider(configPath);
}
@Override
protected PluginRepository createPluginRepository() {
return new CompoundPluginRepository()
.add(new DevelopmentPluginRepository(getPluginsRoot()), this::isDevelopment)
.add(new JarPluginRepository(getPluginsRoot()), this::isNotDevelopment)
.add(new DefaultPluginRepository(getPluginsRoot()), this::isNotDevelopment);
}
@Override
protected PluginLoader createPluginLoader() {
return new CompoundPluginLoader()
.add(new DevelopmentPluginLoader(this), this::isDevelopment)
.add(new JarPluginLoader(this), this::isNotDevelopment)
.add(new DefaultPluginLoader(this), this::isNotDevelopment);
}
@Override
protected VersionManager createVersionManager() {
return new DefaultVersionManager();
}
@Override
protected void initialize() {
super.initialize();
if (isDevelopment()) {
addPluginStateListener(new LoggingPluginStateListener());
}
log.info("PF4J version {} in '{}' mode", getVersion(), getRuntimeMode());
}
@Override
protected PluginWrapper loadPluginFromPath(Path pluginPath) {
try {
pluginPath = FileUtils.expandIfZip(pluginPath);
} catch (Exception e) {
log.warn("Failed to unzip " + pluginPath, e);
return null;
}
return super.loadPluginFromPath(pluginPath);
}
}
