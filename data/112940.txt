package io.kubernetes.client.extended.workqueue;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import java.util.LinkedList;
import java.util.Set;
public class DefaultWorkQueue<T> implements WorkQueue<T> {
private LinkedList<T> queue;
private Set<T> dirty;
private Set<T> processing;
private boolean shuttingDown = false;
public DefaultWorkQueue() {
this.queue = Lists.newLinkedList();
this.dirty = Sets.newHashSet();
this.processing = Sets.newHashSet();
}
@Override
public synchronized void add(T item) {
if (shuttingDown) {
return;
}
if (this.dirty.contains(item)) {
return;
}
this.dirty.add(item);
if (this.processing.contains(item)) {
return;
}
this.queue.add(item);
this.notify();
}
@Override
public synchronized int length() {
return this.queue.size();
}
@Override
public synchronized T get() throws InterruptedException {
while (queue.size() == 0 && !shuttingDown) {
this.wait();
}
if (queue.size() == 0) {
return null;
}
T obj = this.queue.poll();
this.processing.add(obj);
this.dirty.remove(obj);
return obj;
}
@Override
public synchronized void done(T item) {
this.processing.remove(item);
if (this.dirty.contains(item)) {
this.queue.add(item);
this.notify();
}
}
@Override
public synchronized void shutDown() {
this.shuttingDown = true;
this.notifyAll();
}
@Override
public synchronized boolean isShuttingDown() {
return shuttingDown;
}
}
