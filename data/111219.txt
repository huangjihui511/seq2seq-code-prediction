package com.github.benmanes.caffeine.cache.impl;
import static com.github.benmanes.caffeine.cache.CacheType.CONCURRENCY_LEVEL;
import com.github.benmanes.caffeine.cache.BasicCache;
import com.trivago.triava.tcache.Cache;
import com.trivago.triava.tcache.EvictionPolicy;
import com.trivago.triava.tcache.TCacheFactory;
public final class TCache<K, V> implements BasicCache<K, V> {
private final Cache<K, V> cache;
public TCache(int maximumSize, EvictionPolicy policy) {
cache = TCacheFactory.standardFactory().<K, V>builder()
.setConcurrencyLevel(CONCURRENCY_LEVEL)
.setMaxElements(maximumSize)
.setEvictionPolicy(policy)
.setStatistics(false)
.build();
}
@Override
public V get(K key) {
return cache.get(key);
}
@Override
public void put(K key, V value) {
cache.put(key, value);
}
@Override
public void clear() {
cache.clear();
}
}
