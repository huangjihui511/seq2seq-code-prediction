package com.spazedog.lib.rootfw4;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import android.util.Log;
public class ShellStream {
public static final String TAG = Common.TAG + ".ShellStream";
protected Process mConnection;
protected DataOutputStream mStdInput;
protected BufferedReader mStdOutput;
protected Thread mStdOutputWorker;
protected OnStreamListener mListener;
protected final Counter mCounter = new Counter();
protected final Object mLock = new Object();
protected Boolean mIsActive = false;
protected Boolean mIsRoot = false;
protected String mCommandEnd = "EOL:a00c38d8:EOL";
protected static class Counter {
private volatile Integer mCount = 0;
private volatile Object mLock = new Object();
public Integer size() {
synchronized(mLock) {
return mCount;
}
}
public Integer encrease() {
synchronized(mLock) {
return (mCount += 1);
}
}
public Integer decrease() {
synchronized(mLock) {
return mCount > 0 ? (mCount -= 1) : (mCount = 0);
}
}
public void reset() {
synchronized(mLock) {
mCount = 0;
}
}
}
public static interface OnStreamListener {
public void onStreamStart();
public void onStreamInput(String outputLine);
public void onStreamStop(Integer resultCode);
public void onStreamDied();
}
public ShellStream(Boolean requestRoot, OnStreamListener listener) {
try {
if(Common.DEBUG)Log.d(TAG, "Construct: Establishing a new shell stream");
ProcessBuilder builder = new ProcessBuilder(requestRoot ? "su" : "sh");
builder.redirectErrorStream(true);
mIsRoot = requestRoot;
mIsActive = true;
mListener = listener;
mConnection = builder.start();
mStdInput = new DataOutputStream(mConnection.getOutputStream());
mStdOutput = new BufferedReader(new InputStreamReader(mConnection.getInputStream()));
mStdOutputWorker = new Thread() {
@Override
public void run() {
String output = null;
try {
while (mIsActive && (output = mStdOutput.readLine()) != null) {
if (mListener != null && mCounter.size() > 0) {
if (output.contains(mCommandEnd)) {
Integer result = 0;
try {
if (output.startsWith(mCommandEnd)) {
result = Integer.parseInt(output.substring(mCommandEnd.length()+1));
} else {
result = 1;
}
} catch (Throwable e) {
Log.w(TAG, e.getMessage(), e);
}
mListener.onStreamStop(result);
mCounter.decrease();
synchronized(mLock) {
mLock.notifyAll();
}
} else {
mListener.onStreamInput(output);
}
}
}
} catch (IOException e) {
Log.w(TAG, e.getMessage(), e); output = null;
}
if (output == null) {
ShellStream.this.destroy();
}
}
};
mStdOutputWorker.start();
} catch (IOException e) {
Log.w(TAG, e.getMessage(), e); mIsActive = false;
}
}
public synchronized void execute(final String command) {
final Object lock = new Object();
new Thread() {
@Override
public void run() {
mCounter.encrease();
synchronized(lock) {
lock.notifyAll();
}
synchronized(mLock) {
if (waitFor(0, -1)) {
mListener.onStreamStart();
String input = command + "\n";
input += "    echo " + mCommandEnd + " $?\n";
try {
mStdInput.write( input.getBytes() );
if (mStdInput != null) {
mStdInput.flush();
}
} catch (IOException e) {
Log.w(TAG, e.getMessage(), e);
}
}
}
}
}.start();
synchronized (lock) {
try {
lock.wait();
} catch (InterruptedException e) {}
}
}
public Boolean waitFor() {
return waitFor(0, 0);
}
public Boolean waitFor(Integer timeout) {
return waitFor(timeout, 0);
}
protected Boolean waitFor(Integer timeout, Integer index) {
Integer counter = mCounter.size()+index;
if (counter > 0) {
Long timeoutMilis = timeout > 0 ? System.currentTimeMillis() + timeout : 0L;
synchronized(mLock) {
while (mCounter.size() > 0 && mIsActive) {
try {
counter -= 1;
mLock.wait(timeout.longValue());
if (timeout > 0 && System.currentTimeMillis() >= timeoutMilis) {
return mCounter.size() == 0 && mIsActive;
} else if (counter <= 0) {
return mIsActive;
}
} catch (InterruptedException e) {
Log.w(TAG, e.getMessage(), e);
}
}
}
}
return mIsActive;
}
public Boolean isActive() {
return mIsActive;
}
public Boolean isRunning() {
return mCounter.size() > 0;
}
public Boolean isRoot() {
return mIsRoot;
}
public synchronized void destroy() {
if (mStdInput != null) {
mIsActive = false;
mCounter.reset();
try {
mStdInput.close();
mStdInput = null;
} catch (IOException e) {}
mStdOutputWorker.interrupt();
mStdOutputWorker = null;
synchronized (mLock) {
mLock.notifyAll();
}
mListener.onStreamDied();
mListener = null;
}
}
}
