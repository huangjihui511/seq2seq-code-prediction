package com.github.benmanes.caffeine.cache.local;
import static com.github.benmanes.caffeine.cache.Specifications.REMOVAL_LISTENER;
import javax.lang.model.element.Modifier;
import com.github.benmanes.caffeine.cache.Feature;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
public final class AddRemovalListener extends LocalCacheRule {
@Override
protected boolean applies() {
return context.generateFeatures.contains(Feature.LISTENING);
}
@Override
protected void execute() {
context.cache.addField(
FieldSpec.builder(REMOVAL_LISTENER, "removalListener", Modifier.FINAL).build());
context.constructor.addStatement("this.removalListener = builder.getRemovalListener(async)");
context.cache.addMethod(MethodSpec.methodBuilder("removalListener")
.addModifiers(context.publicFinalModifiers())
.addStatement("return removalListener")
.returns(REMOVAL_LISTENER)
.build());
context.cache.addMethod(MethodSpec.methodBuilder("hasRemovalListener")
.addModifiers(context.publicFinalModifiers())
.addStatement("return true")
.returns(boolean.class)
.build());
}
}
