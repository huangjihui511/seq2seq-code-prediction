package org.msgpack.core;
import org.msgpack.core.buffer.ArrayBufferOutput;
import org.msgpack.core.buffer.MessageBuffer;
import org.msgpack.core.buffer.MessageBufferOutput;
import java.io.IOException;
import java.util.List;
public class MessageBufferPacker
extends MessagePacker
{
protected MessageBufferPacker(MessagePack.PackerConfig config)
{
this(new ArrayBufferOutput(), config);
}
protected MessageBufferPacker(ArrayBufferOutput out, MessagePack.PackerConfig config)
{
super(out, config);
}
public MessageBufferOutput reset(MessageBufferOutput out)
throws IOException
{
if (!(out instanceof ArrayBufferOutput)) {
throw new IllegalArgumentException("MessageBufferPacker accepts only ArrayBufferOutput");
}
return super.reset(out);
}
private ArrayBufferOutput getArrayBufferOut()
{
return (ArrayBufferOutput) out;
}
@Override
public void clear()
{
super.clear();
getArrayBufferOut().clear();
}
public byte[] toByteArray()
{
try {
flush();
}
catch (IOException ex) {
throw new RuntimeException(ex);
}
return getArrayBufferOut().toByteArray();
}
public MessageBuffer toMessageBuffer()
{
try {
flush();
}
catch (IOException ex) {
throw new RuntimeException(ex);
}
return getArrayBufferOut().toMessageBuffer();
}
public List<MessageBuffer> toBufferList()
{
try {
flush();
}
catch (IOException ex) {
throw new RuntimeException(ex);
}
return getArrayBufferOut().toBufferList();
}
public int getBufferSize()
{
return getArrayBufferOut().getSize();
}
}
