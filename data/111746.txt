package org.jupiter.common.util.collection;
import java.util.AbstractCollection;
import java.util.AbstractSet;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.jupiter.common.util.Ints;
public class ByteObjectHashMap<V> implements ByteObjectMap<V> {
public static final int DEFAULT_CAPACITY = 8;
public static final float DEFAULT_LOAD_FACTOR = 0.5f;
private static final Object NULL_VALUE = new Object();
private int maxSize;
private final float loadFactor;
private byte[] keys;
private V[] values;
private int size;
private int mask;
private final Set<Byte> keySet = new KeySet();
private final Set<Entry<Byte, V>> entrySet = new EntrySet();
private final Iterable<PrimitiveEntry<V>> entries = PrimitiveIterator::new;
public ByteObjectHashMap() {
this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
}
public ByteObjectHashMap(int initialCapacity) {
this(initialCapacity, DEFAULT_LOAD_FACTOR);
}
public ByteObjectHashMap(int initialCapacity, float loadFactor) {
if (initialCapacity < 1) {
throw new IllegalArgumentException("initialCapacity must be >= 1");
}
if (loadFactor <= 0.0f || loadFactor > 1.0f) {
throw new IllegalArgumentException("loadFactor must be > 0 and <= 1");
}
this.loadFactor = loadFactor;
int capacity = Ints.findNextPositivePowerOfTwo(initialCapacity);
mask = capacity - 1;
keys = new byte[capacity];
@SuppressWarnings({"unchecked", "SuspiciousArrayCast"})
V[] temp = (V[]) new Object[capacity];
values = temp;
maxSize = calcMaxSize(capacity);
}
private static <T> T toExternal(T value) {
return value == NULL_VALUE ? null : value;
}
@SuppressWarnings("unchecked")
private static <T> T toInternal(T value) {
return value == null ? (T) NULL_VALUE : value;
}
@Override
public V get(byte key) {
int index = indexOf(key);
return index == -1 ? null : toExternal(values[index]);
}
@Override
public V put(byte key, V value) {
int startIndex = hashIndex(key);
int index = startIndex;
for (;;) {
if (values[index] == null) {
keys[index] = key;
values[index] = toInternal(value);
growSize();
return null;
}
if (keys[index] == key) {
V previousValue = values[index];
values[index] = toInternal(value);
return toExternal(previousValue);
}
if ((index = probeNext(index)) == startIndex) {
throw new IllegalStateException("Unable to insert");
}
}
}
@Override
public void putAll(Map<? extends Byte, ? extends V> sourceMap) {
if (sourceMap instanceof ByteObjectHashMap) {
@SuppressWarnings("unchecked")
ByteObjectHashMap<V> source = (ByteObjectHashMap<V>) sourceMap;
for (int i = 0; i < source.values.length; ++i) {
V sourceValue = source.values[i];
if (sourceValue != null) {
put(source.keys[i], sourceValue);
}
}
return;
}
for (Entry<? extends Byte, ? extends V> entry : sourceMap.entrySet()) {
put(entry.getKey(), entry.getValue());
}
}
@Override
public V remove(byte key) {
int index = indexOf(key);
if (index == -1) {
return null;
}
V prev = values[index];
removeAt(index);
return toExternal(prev);
}
@Override
public int size() {
return size;
}
@Override
public boolean isEmpty() {
return size == 0;
}
@Override
public void clear() {
Arrays.fill(keys, (byte) 0);
Arrays.fill(values, null);
size = 0;
}
@Override
public boolean containsKey(byte key) {
return indexOf(key) >= 0;
}
@Override
public boolean containsValue(Object value) {
@SuppressWarnings("unchecked")
V v1 = toInternal((V) value);
for (V v2 : values) {
if (v2 != null && v2.equals(v1)) {
return true;
}
}
return false;
}
@Override
public Iterable<PrimitiveEntry<V>> entries() {
return entries;
}
@Override
public Collection<V> values() {
return new AbstractCollection<V>() {
@Override
public Iterator<V> iterator() {
return new Iterator<V>() {
final PrimitiveIterator iter = new PrimitiveIterator();
@Override
public boolean hasNext() {
return iter.hasNext();
}
@Override
public V next() {
return iter.next().value();
}
@Override
public void remove() {
throw new UnsupportedOperationException();
}
};
}
@Override
public int size() {
return size;
}
};
}
@Override
public int hashCode() {
int hash = size;
for (byte key : keys) {
hash ^= hashCode(key);
}
return hash;
}
@Override
public boolean equals(Object obj) {
if (this == obj) {
return true;
}
if (!(obj instanceof ByteObjectMap)) {
return false;
}
@SuppressWarnings("rawtypes")
ByteObjectMap other = (ByteObjectMap) obj;
if (size != other.size()) {
return false;
}
for (int i = 0; i < values.length; ++i) {
V value = values[i];
if (value != null) {
byte key = keys[i];
Object otherValue = other.get(key);
if (value == NULL_VALUE) {
if (otherValue != null) {
return false;
}
} else if (!value.equals(otherValue)) {
return false;
}
}
}
return true;
}
@Override
public boolean containsKey(Object key) {
return containsKey(objectToKey(key));
}
@Override
public V get(Object key) {
return get(objectToKey(key));
}
@Override
public V put(Byte key, V value) {
return put(objectToKey(key), value);
}
@Override
public V remove(Object key) {
return remove(objectToKey(key));
}
@Override
public Set<Byte> keySet() {
return keySet;
}
@Override
public Set<Entry<Byte, V>> entrySet() {
return entrySet;
}
private byte objectToKey(Object key) {
return (Byte) key;
}
private int indexOf(byte key) {
int startIndex = hashIndex(key);
int index = startIndex;
for (;;) {
if (values[index] == null) {
return -1;
}
if (key == keys[index]) {
return index;
}
if ((index = probeNext(index)) == startIndex) {
return -1;
}
}
}
private int hashIndex(byte key) {
return hashCode(key) & mask;
}
private static int hashCode(byte key) {
return (int) key;
}
private int probeNext(int index) {
return (index + 1) & mask;
}
private void growSize() {
size++;
if (size > maxSize) {
if (keys.length == Integer.MAX_VALUE) {
throw new IllegalStateException("Max capacity reached at size=" + size);
}
rehash(keys.length << 1);
}
}
private boolean removeAt(final int index) {
--size;
keys[index] = 0;
values[index] = null;
boolean movedBack = false;
int nextFree = index;
for (int i = probeNext(index); values[i] != null; i = probeNext(i)) {
int bucket = hashIndex(keys[i]);
if (i < bucket && (bucket <= nextFree || nextFree <= i) ||
bucket <= nextFree && nextFree <= i) {
keys[nextFree] = keys[i];
values[nextFree] = values[i];
movedBack = true;
keys[i] = 0;
values[i] = null;
nextFree = i;
}
}
return movedBack;
}
private int calcMaxSize(int capacity) {
int upperBound = capacity - 1;
return Math.min(upperBound, (int) (capacity * loadFactor));
}
private void rehash(int newCapacity) {
byte[] oldKeys = keys;
V[] oldVals = values;
keys = new byte[newCapacity];
@SuppressWarnings({"unchecked", "SuspiciousArrayCast"})
V[] temp = (V[]) new Object[newCapacity];
values = temp;
maxSize = calcMaxSize(newCapacity);
mask = newCapacity - 1;
for (int i = 0; i < oldVals.length; ++i) {
V oldVal = oldVals[i];
if (oldVal != null) {
byte oldKey = oldKeys[i];
int index = hashIndex(oldKey);
for (;;) {
if (values[index] == null) {
keys[index] = oldKey;
values[index] = oldVal;
break;
}
index = probeNext(index);
}
}
}
}
@Override
public String toString() {
if (isEmpty()) {
return "{}";
}
StringBuilder sb = new StringBuilder(4 * size);
sb.append('{');
boolean first = true;
for (int i = 0; i < values.length; ++i) {
V value = values[i];
if (value != null) {
if (!first) {
sb.append(", ");
}
sb.append(keyToString(keys[i])).append('=').append(value == this ? "(this Map)" :
toExternal(value));
first = false;
}
}
return sb.append('}').toString();
}
protected String keyToString(byte key) {
return Byte.toString(key);
}
private final class EntrySet extends AbstractSet<Entry<Byte, V>> {
@Override
public Iterator<Entry<Byte, V>> iterator() {
return new MapIterator();
}
@Override
public int size() {
return ByteObjectHashMap.this.size();
}
}
private final class KeySet extends AbstractSet<Byte> {
@Override
public int size() {
return ByteObjectHashMap.this.size();
}
@Override
public boolean contains(Object o) {
return ByteObjectHashMap.this.containsKey(o);
}
@Override
public boolean remove(Object o) {
return ByteObjectHashMap.this.remove(o) != null;
}
@Override
public boolean retainAll(Collection<?> retainedKeys) {
boolean changed = false;
for (Iterator<PrimitiveEntry<V>> iter = entries().iterator(); iter.hasNext(); ) {
PrimitiveEntry<V> entry = iter.next();
if (!retainedKeys.contains(entry.key())) {
changed = true;
iter.remove();
}
}
return changed;
}
@Override
public void clear() {
ByteObjectHashMap.this.clear();
}
@Override
public Iterator<Byte> iterator() {
return new Iterator<Byte>() {
private final Iterator<Entry<Byte, V>> iter = entrySet.iterator();
@Override
public boolean hasNext() {
return iter.hasNext();
}
@Override
public Byte next() {
return iter.next().getKey();
}
@Override
public void remove() {
iter.remove();
}
};
}
}
private final class PrimitiveIterator implements Iterator<PrimitiveEntry<V>>, PrimitiveEntry<V> {
private int prevIndex = -1;
private int nextIndex = -1;
private int entryIndex = -1;
private void scanNext() {
for (;;) {
if (++nextIndex == values.length || values[nextIndex] != null) {
break;
}
}
}
@Override
public boolean hasNext() {
if (nextIndex == -1) {
scanNext();
}
return nextIndex < keys.length;
}
@Override
public PrimitiveEntry<V> next() {
if (!hasNext()) {
throw new NoSuchElementException();
}
prevIndex = nextIndex;
scanNext();
entryIndex = prevIndex;
return this;
}
@Override
public void remove() {
if (prevIndex < 0) {
throw new IllegalStateException("next must be called before each remove.");
}
if (removeAt(prevIndex)) {
nextIndex = prevIndex;
}
prevIndex = -1;
}
@Override
public byte key() {
return keys[entryIndex];
}
@Override
public V value() {
return toExternal(values[entryIndex]);
}
@Override
public void setValue(V value) {
values[entryIndex] = toInternal(value);
}
}
private final class MapIterator implements Iterator<Entry<Byte, V>> {
private final PrimitiveIterator iter = new PrimitiveIterator();
@Override
public boolean hasNext() {
return iter.hasNext();
}
@Override
public Entry<Byte, V> next() {
if (!hasNext()) {
throw new NoSuchElementException();
}
iter.next();
return new MapEntry(iter.entryIndex);
}
@Override
public void remove() {
iter.remove();
}
}
final class MapEntry implements Entry<Byte, V> {
private final int entryIndex;
MapEntry(int entryIndex) {
this.entryIndex = entryIndex;
}
@Override
public Byte getKey() {
verifyExists();
return keys[entryIndex];
}
@Override
public V getValue() {
verifyExists();
return toExternal(values[entryIndex]);
}
@Override
public V setValue(V value) {
verifyExists();
V prevValue = toExternal(values[entryIndex]);
values[entryIndex] = toInternal(value);
return prevValue;
}
private void verifyExists() {
if (values[entryIndex] == null) {
throw new IllegalStateException("The map entry has been removed");
}
}
}
}
