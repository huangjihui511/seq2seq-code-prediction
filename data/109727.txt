package lombok.javac;
import java.util.HashSet;
import java.util.Set;
import javax.lang.model.element.Name;
import javax.lang.model.type.ArrayType;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.ErrorType;
import javax.lang.model.type.ExecutableType;
import javax.lang.model.type.NoType;
import javax.lang.model.type.NullType;
import javax.lang.model.type.PrimitiveType;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.type.TypeVariable;
import javax.lang.model.type.WildcardType;
import javax.lang.model.util.AbstractTypeVisitor6;
import com.sun.tools.javac.code.Type;
public class FindTypeVarScanner extends AbstractTypeVisitor6<Void, Void> {
private Set<String> typeVariables = new HashSet<String>();
public Set<String> getTypeVariables() {
return typeVariables;
}
private Void subVisit(TypeMirror mirror) {
if (mirror == null) return null;
return mirror.accept(this, null);
}
@Override public Void visitPrimitive(PrimitiveType t, Void p) {
return null;
}
@Override public Void visitNull(NullType t, Void p) {
return null;
}
@Override public Void visitNoType(NoType t, Void p) {
return null;
}
@Override public Void visitUnknown(TypeMirror t, Void p) {
return null;
}
@Override public Void visitError(ErrorType t, Void p) {
return null;
}
@Override public Void visitArray(ArrayType t, Void p) {
return subVisit(t.getComponentType());
}
@Override public Void visitDeclared(DeclaredType t, Void p) {
for (TypeMirror subT : t.getTypeArguments()) subVisit(subT);
return null;
}
@Override public Void visitTypeVariable(TypeVariable t, Void p) {
Name name = null;
try {
name = ((Type) t).tsym.name;
} catch (NullPointerException e) {}
if (name != null) typeVariables.add(name.toString());
subVisit(t.getLowerBound());
subVisit(t.getUpperBound());
return null;
}
@Override public Void visitWildcard(WildcardType t, Void p) {
subVisit(t.getSuperBound());
subVisit(t.getExtendsBound());
return null;
}
@Override public Void visitExecutable(ExecutableType t, Void p) {
subVisit(t.getReturnType());
for (TypeMirror subT : t.getParameterTypes()) subVisit(subT);
for (TypeMirror subT : t.getThrownTypes()) subVisit(subT);
for (TypeVariable subT : t.getTypeVariables()) subVisit(subT);
return null;
}
}
