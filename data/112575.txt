package com.sun.swingset3.utilities;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.EventQueue;
import java.util.EventListener;
import javax.swing.JEditorPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.Element;
import javax.swing.text.StyleConstants;
import javax.swing.text.View;
import javax.swing.text.ViewFactory;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.ObjectView;
import com.sun.swingset3.demos.DemoUtilities;
public class HTMLPanel extends JEditorPane {
public static interface ComponentCreationListener extends EventListener {
public void componentCreated(HTMLPanel htmlPanel, Component component);
}
private static HyperlinkHandler hyperlinkHandler;
public HTMLPanel() {
setContentType("text/html");
setEditorKit(new ComponentEditorKit()); 
setEditable(false); 
if (hyperlinkHandler == null) {
hyperlinkHandler = new HyperlinkHandler();
}
addHyperlinkListener(hyperlinkHandler);
}
public void addComponentCreationListener(HTMLPanel.ComponentCreationListener l) {
listenerList.add(ComponentCreationListener.class, l);
}
public void removeComponentCreationListener(HTMLPanel.ComponentCreationListener l) {
listenerList.remove(HTMLPanel.ComponentCreationListener.class, l);
}
private class ComponentEditorKit extends HTMLEditorKit {
@Override
public ViewFactory getViewFactory() {
return new ComponentFactory();
}
}
protected class ComponentFactory extends HTMLEditorKit.HTMLFactory {
public ComponentFactory() {
super();
}
@Override
public View create(Element element) {
AttributeSet attrs = element.getAttributes();
Object elementName =
attrs.getAttribute(AbstractDocument.ElementNameAttribute);
Object o = (elementName != null) ?
null : attrs.getAttribute(StyleConstants.NameAttribute);
if (o instanceof HTML.Tag) {
if (o == HTML.Tag.OBJECT) {
return new ComponentView(element);
}
}
return super.create(element);
}
}
protected class ComponentView extends ObjectView {
public ComponentView(Element element) {
super(element);
}
@Override
protected Component createComponent() {
final Component component = super.createComponent();
Runnable notifier = new Runnable() {
public void run() {
final ComponentCreationListener listeners[] =
HTMLPanel.this.listenerList.getListeners(ComponentCreationListener.class);
for (ComponentCreationListener l : listeners) {
l.componentCreated(HTMLPanel.this, component);
}
}
};
if (EventQueue.isDispatchThread()) {
notifier.run();
} else {
EventQueue.invokeLater(notifier);
}
return component;
}
}
public static class HyperlinkHandler implements HyperlinkListener {
Cursor defaultCursor;
public void hyperlinkUpdate(HyperlinkEvent event) {
JEditorPane descriptionPane = (JEditorPane) event.getSource();
HyperlinkEvent.EventType type = event.getEventType();
if (type == HyperlinkEvent.EventType.ACTIVATED) {
try {
DemoUtilities.browse(event.getURL().toURI());
} catch (Exception e) {
e.printStackTrace();
System.err.println(e);
}
} else if (type == HyperlinkEvent.EventType.ENTERED) {
defaultCursor = descriptionPane.getCursor();
descriptionPane.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
} else if (type == HyperlinkEvent.EventType.EXITED) {
descriptionPane.setCursor(defaultCursor);
}
}
}
}
