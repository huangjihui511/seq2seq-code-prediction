package org.gnucash.android.ui.account;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Bundle;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.TabLayout;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.preference.PreferenceManager;
import android.util.Log;
import android.util.SparseArray;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;
import com.crashlytics.android.Crashlytics;
import com.kobakei.ratethisapp.RateThisApp;
import org.gnucash.android.BuildConfig;
import org.gnucash.android.R;
import org.gnucash.android.app.GnuCashApplication;
import org.gnucash.android.db.DatabaseSchema;
import org.gnucash.android.db.adapter.AccountsDbAdapter;
import org.gnucash.android.db.adapter.BooksDbAdapter;
import org.gnucash.android.importer.ImportAsyncTask;
import org.gnucash.android.ui.common.BaseDrawerActivity;
import org.gnucash.android.ui.common.FormActivity;
import org.gnucash.android.ui.common.Refreshable;
import org.gnucash.android.ui.common.UxArgument;
import org.gnucash.android.ui.transaction.TransactionsActivity;
import org.gnucash.android.ui.util.TaskDelegate;
import org.gnucash.android.ui.wizard.FirstRunWizardActivity;
import org.gnucash.android.util.BackupManager;
import butterknife.BindView;
public class AccountsActivity extends BaseDrawerActivity implements OnAccountClickedListener {
public static final int REQUEST_PICK_ACCOUNTS_FILE = 0x1;
public static final int REQUEST_EDIT_ACCOUNT = 0x10;
protected static final String LOG_TAG = "AccountsActivity";
private static final int DEFAULT_NUM_PAGES = 3;
public static final int INDEX_RECENT_ACCOUNTS_FRAGMENT = 0;
public static final int INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT = 1;
public static final int INDEX_FAVORITE_ACCOUNTS_FRAGMENT = 2;
public static final String LAST_OPEN_TAB_INDEX = "last_open_tab";
public static final String EXTRA_TAB_INDEX = "org.gnucash.android.extra.TAB_INDEX";
private SparseArray<Refreshable> mFragmentPageReferenceMap = new SparseArray<>();
@BindView(R.id.pager) ViewPager mViewPager;
@BindView(R.id.fab_create_account) FloatingActionButton mFloatingActionButton;
@BindView(R.id.coordinatorLayout) CoordinatorLayout mCoordinatorLayout;
public static RateThisApp.Config rateAppConfig = new RateThisApp.Config(14, 100);
private AccountViewPagerAdapter mPagerAdapter;
private class AccountViewPagerAdapter extends FragmentPagerAdapter {
public AccountViewPagerAdapter(FragmentManager fm){
super(fm);
}
@Override
public Fragment getItem(int i) {
AccountsListFragment currentFragment = (AccountsListFragment) mFragmentPageReferenceMap.get(i);
if (currentFragment == null) {
switch (i) {
case INDEX_RECENT_ACCOUNTS_FRAGMENT:
currentFragment = AccountsListFragment.newInstance(AccountsListFragment.DisplayMode.RECENT);
break;
case INDEX_FAVORITE_ACCOUNTS_FRAGMENT:
currentFragment = AccountsListFragment.newInstance(AccountsListFragment.DisplayMode.FAVORITES);
break;
case INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT:
default:
currentFragment = AccountsListFragment.newInstance(AccountsListFragment.DisplayMode.TOP_LEVEL);
break;
}
mFragmentPageReferenceMap.put(i, currentFragment);
}
return currentFragment;
}
@Override
public void destroyItem(ViewGroup container, int position, Object object) {
super.destroyItem(container, position, object);
mFragmentPageReferenceMap.remove(position);
}
@Override
public CharSequence getPageTitle(int position) {
switch (position){
case INDEX_RECENT_ACCOUNTS_FRAGMENT:
return getString(R.string.title_recent_accounts);
case INDEX_FAVORITE_ACCOUNTS_FRAGMENT:
return getString(R.string.title_favorite_accounts);
case INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT:
default:
return getString(R.string.title_all_accounts);
}
}
@Override
public int getCount() {
return DEFAULT_NUM_PAGES;
}
}
public AccountsListFragment getCurrentAccountListFragment(){
int index = mViewPager.getCurrentItem();
Fragment fragment = (Fragment) mFragmentPageReferenceMap.get(index);
if (fragment == null)
fragment = mPagerAdapter.getItem(index);
return (AccountsListFragment) fragment;
}
@Override
public int getContentView() {
return R.layout.activity_accounts;
}
@Override
public int getTitleRes() {
return R.string.title_accounts;
}
@Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
final Intent intent = getIntent();
handleOpenFileIntent(intent);
init();
TabLayout tabLayout = (TabLayout) findViewById(R.id.tab_layout);
tabLayout.addTab(tabLayout.newTab().setText(R.string.title_recent_accounts));
tabLayout.addTab(tabLayout.newTab().setText(R.string.title_all_accounts));
tabLayout.addTab(tabLayout.newTab().setText(R.string.title_favorite_accounts));
tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
mPagerAdapter = new AccountViewPagerAdapter(getSupportFragmentManager());
mViewPager.setAdapter(mPagerAdapter);
mViewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabLayout));
tabLayout.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
@Override
public void onTabSelected(TabLayout.Tab tab) {
mViewPager.setCurrentItem(tab.getPosition());
}
@Override
public void onTabUnselected(TabLayout.Tab tab) {
}
@Override
public void onTabReselected(TabLayout.Tab tab) {
}
});
setCurrentTab();
mFloatingActionButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Intent addAccountIntent = new Intent(AccountsActivity.this, FormActivity.class);
addAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
addAccountIntent.putExtra(UxArgument.FORM_TYPE, FormActivity.FormType.ACCOUNT.name());
startActivityForResult(addAccountIntent, AccountsActivity.REQUEST_EDIT_ACCOUNT);
}
});
}
@Override
protected void onStart() {
super.onStart();
if (BuildConfig.CAN_REQUEST_RATING) {
RateThisApp.init(rateAppConfig);
RateThisApp.onStart(this);
RateThisApp.showRateDialogIfNeeded(this);
}
}
private void handleOpenFileIntent(Intent intent) {
Uri data = intent.getData();
if (data != null){
BackupManager.backupActiveBook();
intent.setData(null);
new ImportAsyncTask(this).execute(data);
removeFirstRunFlag();
}
}
@Override
protected void onNewIntent(Intent intent) {
super.onNewIntent(intent);
setIntent(intent);
setCurrentTab();
int index = mViewPager.getCurrentItem();
Fragment fragment = (Fragment) mFragmentPageReferenceMap.get(index);
if (fragment != null)
((Refreshable)fragment).refresh();
handleOpenFileIntent(intent);
}
public void setCurrentTab(){
SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
int lastTabIndex = preferences.getInt(LAST_OPEN_TAB_INDEX, INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT);
int index = getIntent().getIntExtra(EXTRA_TAB_INDEX, lastTabIndex);
mViewPager.setCurrentItem(index);
}
private void init() {
PreferenceManager.setDefaultValues(this, BooksDbAdapter.getInstance().getActiveBookUID(),
Context.MODE_PRIVATE, R.xml.fragment_transaction_preferences, true);
SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
boolean firstRun = prefs.getBoolean(getString(R.string.key_first_run), true);
if (firstRun){
startActivity(new Intent(GnuCashApplication.getAppContext(), FirstRunWizardActivity.class));
prefs.edit().putBoolean(getString(R.string.key_use_double_entry), true).apply();
finish();
return;
}
if (hasNewFeatures()){
showWhatsNewDialog(this);
}
GnuCashApplication.startScheduledActionExecutionService(this);
BackupManager.schedulePeriodicBackups(this);
}
@Override
protected void onDestroy() {
super.onDestroy();
SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
preferences.edit().putInt(LAST_OPEN_TAB_INDEX, mViewPager.getCurrentItem()).apply();
}
private boolean hasNewFeatures(){
String minorVersion = getResources().getString(R.string.app_minor_version);
int currentMinor = Integer.parseInt(minorVersion);
SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
int previousMinor = prefs.getInt(getString(R.string.key_previous_minor_version), 0);
if (currentMinor > previousMinor){
Editor editor = prefs.edit();
editor.putInt(getString(R.string.key_previous_minor_version), currentMinor);
editor.apply();
return true;
}
return false;
}
public static AlertDialog showWhatsNewDialog(Context context){
Resources resources = context.getResources();
StringBuilder releaseTitle = new StringBuilder(resources.getString(R.string.title_whats_new));
PackageInfo packageInfo;
try {
packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
releaseTitle.append(" - v").append(packageInfo.versionName);
} catch (NameNotFoundException e) {
Crashlytics.logException(e);
Log.e(LOG_TAG, "Error displaying 'Whats new' dialog");
}
return new AlertDialog.Builder(context)
.setTitle(releaseTitle.toString())
.setMessage(R.string.whats_new)
.setPositiveButton(R.string.label_dismiss, new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
dialog.dismiss();
}
}).show();
}
public static void openExportFragment(AppCompatActivity activity) {
Intent intent = new Intent(activity, FormActivity.class);
intent.putExtra(UxArgument.FORM_TYPE, FormActivity.FormType.EXPORT.name());
activity.startActivity(intent);
}
@Override
public boolean onCreateOptionsMenu(Menu menu) {
MenuInflater inflater = getMenuInflater();
inflater.inflate(R.menu.global_actions, menu);
return true;
}
@Override
public boolean onOptionsItemSelected(MenuItem item) {
switch (item.getItemId()) {
case android.R.id.home:
return super.onOptionsItemSelected(item);
default:
return false;
}
}
public static void createDefaultAccounts(final String currencyCode, final Activity activity) {
TaskDelegate delegate = null;
if (currencyCode != null) {
delegate = new TaskDelegate() {
@Override
public void onTaskComplete() {
AccountsDbAdapter.getInstance().updateAllAccounts(DatabaseSchema.AccountEntry.COLUMN_CURRENCY, currencyCode);
GnuCashApplication.setDefaultCurrencyCode(currencyCode);
}
};
}
Uri uri = Uri.parse("android.resource:
new ImportAsyncTask(activity, delegate).execute(uri);
}
public static void startXmlFileChooser(Activity activity) {
Intent pickIntent = new Intent(Intent.ACTION_GET_CONTENT);
pickIntent.addCategory(Intent.CATEGORY_OPENABLE);
pickIntent.setType("*/*");
Intent chooser = Intent.createChooser(pickIntent, "Select GnuCash account file"); 
try {
activity.startActivityForResult(chooser, REQUEST_PICK_ACCOUNTS_FILE);
} catch (ActivityNotFoundException ex){
Crashlytics.log("No file manager for selecting files available");
Crashlytics.logException(ex);
Toast.makeText(activity, R.string.toast_install_file_manager, Toast.LENGTH_LONG).show();
}
}
public static void startXmlFileChooser(Fragment fragment) {
Intent pickIntent = new Intent(Intent.ACTION_GET_CONTENT);
pickIntent.addCategory(Intent.CATEGORY_OPENABLE);
pickIntent.setType("*/*");
Intent chooser = Intent.createChooser(pickIntent, "Select GnuCash account file"); 
try {
fragment.startActivityForResult(chooser, REQUEST_PICK_ACCOUNTS_FILE);
} catch (ActivityNotFoundException ex){
Crashlytics.log("No file manager for selecting files available");
Crashlytics.logException(ex);
Toast.makeText(fragment.getActivity(), R.string.toast_install_file_manager, Toast.LENGTH_LONG).show();
}
}
public static void importXmlFileFromIntent(Activity context, Intent data, TaskDelegate onFinishTask) {
BackupManager.backupActiveBook();
new ImportAsyncTask(context, onFinishTask).execute(data.getData());
}
public static void start(Context context){
Intent accountsActivityIntent = new Intent(context, AccountsActivity.class);
accountsActivityIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
accountsActivityIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_SINGLE_TOP);
context.startActivity(accountsActivityIntent);
}
@Override
public void accountSelected(String accountUID) {
Intent intent = new Intent(this, TransactionsActivity.class);
intent.setAction(Intent.ACTION_VIEW);
intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
startActivity(intent);
}
public static void removeFirstRunFlag(){
Context context = GnuCashApplication.getAppContext();
Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
editor.putBoolean(context.getString(R.string.key_first_run), false);
editor.commit();
}
}
