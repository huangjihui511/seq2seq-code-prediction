package org.apereo.cas.support.saml.services;
import org.apereo.cas.authentication.CoreAuthenticationTestUtils;
import org.apereo.cas.support.saml.BaseSamlIdPConfigurationTests;
import org.apereo.cas.support.saml.SamlIdPTestUtils;
import org.apereo.cas.util.CollectionUtils;
import lombok.val;
import org.apache.commons.io.FileUtils;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.core.io.FileSystemResource;
import static org.junit.jupiter.api.Assertions.*;
@Tag("SAML")
public class PatternMatchingEntityIdAttributeReleasePolicyTests extends BaseSamlIdPConfigurationTests {
@BeforeAll
public static void beforeClass() {
METADATA_DIRECTORY = new FileSystemResource(FileUtils.getTempDirectory());
}
@Test
public void verifyPatternDoesNotMatch() {
val filter = new PatternMatchingEntityIdAttributeReleasePolicy();
filter.setAllowedAttributes(CollectionUtils.wrapList("uid"));
val registeredService = SamlIdPTestUtils.getSamlRegisteredService();
registeredService.setAttributeReleasePolicy(filter);
val attributes = filter.getAttributes(CoreAuthenticationTestUtils.getPrincipal(),
CoreAuthenticationTestUtils.getService(), registeredService);
assertTrue(attributes.isEmpty());
}
@Test
public void verifyPatternDoesNotMatchAndReversed() {
val filter = new PatternMatchingEntityIdAttributeReleasePolicy();
filter.setAllowedAttributes(CollectionUtils.wrapList("cn"));
filter.setEntityIds("helloworld");
filter.setReverseMatch(true);
val registeredService = SamlIdPTestUtils.getSamlRegisteredService();
registeredService.setAttributeReleasePolicy(filter);
val attributes = filter.getAttributes(CoreAuthenticationTestUtils.getPrincipal(),
CoreAuthenticationTestUtils.getService(), registeredService);
assertFalse(attributes.isEmpty());
}
@Test
public void verifyPatternDoesMatch() {
val filter = new PatternMatchingEntityIdAttributeReleasePolicy();
filter.setEntityIds("https:
filter.setAllowedAttributes(CollectionUtils.wrapList("uid", "givenName", "displayName"));
val registeredService = SamlIdPTestUtils.getSamlRegisteredService();
registeredService.setAttributeReleasePolicy(filter);
val attributes = filter.getAttributes(CoreAuthenticationTestUtils.getPrincipal(),
CoreAuthenticationTestUtils.getService(), registeredService);
assertFalse(attributes.isEmpty());
}
}
