package org.gnucash.android.db;
import android.content.Context;
import android.database.Cursor;
import android.support.v4.content.AsyncTaskLoader;
import android.support.v4.content.Loader;
import org.gnucash.android.db.adapter.DatabaseAdapter;
public abstract class DatabaseCursorLoader extends AsyncTaskLoader<Cursor> {
private Cursor mCursor = null;
protected DatabaseAdapter mDatabaseAdapter = null;
protected final Loader.ForceLoadContentObserver mObserver;
public DatabaseCursorLoader(Context context) {
super(context);
mObserver = new ForceLoadContentObserver();
}
public abstract Cursor loadInBackground();
protected void registerContentObserver(Cursor cursor){
cursor.registerContentObserver(mObserver);
}
@Override
public void deliverResult(Cursor data) {
if (isReset()) {
if (data != null) {
onReleaseResources(data);
}
return;
}
Cursor oldCursor = mCursor;
mCursor = data;
if (isStarted()) {
super.deliverResult(data);
}
if (oldCursor != null && oldCursor != data && !oldCursor.isClosed()) {
onReleaseResources(oldCursor);
}
}
@Override
protected void onStartLoading() {
if (mCursor != null){
deliverResult(mCursor);
}
if (takeContentChanged() || mCursor == null) {
forceLoad();
}
}
@Override
protected void onStopLoading() {
cancelLoad();
}
@Override
public void onCanceled(Cursor data) {
super.onCanceled(data);
onReleaseResources(data);
}
@Override
protected void onReset() {
super.onReset();
onStopLoading();
if (mCursor != null && !mCursor.isClosed()) {
onReleaseResources(mCursor);
}
mCursor = null;
}
protected void onReleaseResources(Cursor c) {
if (c != null)
c.close();
}
}
