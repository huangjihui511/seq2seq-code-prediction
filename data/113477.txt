package com.pokegoapi.api.pokemon;
import POGOProtos.Enums.PokemonIdOuterClass.PokemonId;
import POGOProtos.Networking.Responses.DownloadItemTemplatesResponseOuterClass.DownloadItemTemplatesResponse.ItemTemplate;
import POGOProtos.Settings.Master.PokemonSettingsOuterClass.PokemonSettings;
import com.pokegoapi.api.settings.templates.ItemTemplates;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
public class Evolutions {
private final ItemTemplates itemTemplates;
private final Map<PokemonId, Evolution> evolutions = new HashMap<>();
public Evolutions(ItemTemplates templates) {
itemTemplates = templates;
evolutions.clear();
for (ItemTemplate template : templates.templates) {
if (template.hasPokemonSettings()) {
PokemonSettings settings = template.getPokemonSettings();
PokemonId pokemon = settings.getPokemonId();
if (!evolutions.containsKey(pokemon)) {
addEvolution(null, pokemon);
}
}
}
}
private void addEvolution(PokemonId parent, PokemonId pokemon) {
Evolution evolution = new Evolution(itemTemplates, parent, pokemon);
evolutions.put(pokemon, evolution);
for (PokemonId poke : evolution.evolutions) {
addEvolution(pokemon, poke);
}
}
public Evolution getEvolution(PokemonId pokemon) {
return evolutions.get(pokemon);
}
public List<PokemonId> getEvolutions(PokemonId pokemon) {
Evolution evolution = getEvolution(pokemon);
if (evolution != null) {
return evolution.evolutions;
}
return new ArrayList<>();
}
public List<PokemonId> getBasic(PokemonId pokemon) {
List<PokemonId> basic = new ArrayList<>();
Evolution evolution = getEvolution(pokemon);
if (evolution != null) {
if (evolution.parent != null) {
basic.add(evolution.parent);
} else {
basic.add(pokemon);
}
return basic;
} else {
basic.add(pokemon);
return basic;
}
}
public List<PokemonId> getHighest(PokemonId pokemon) {
List<PokemonId> highest = new ArrayList<>();
Evolution evolution = getEvolution(pokemon);
if (evolution != null) {
if (evolution.evolutions != null && evolution.evolutions.size() > 0) {
for (PokemonId child : evolution.evolutions) {
highest.addAll(getHighest(child));
}
} else {
highest.add(pokemon);
}
return highest;
} else {
highest.add(pokemon);
return highest;
}
}
public boolean canEvolve(PokemonId pokemon) {
Evolution evolution = getEvolution(pokemon);
return evolution != null && evolution.evolutions != null && evolution.evolutions.size() > 0;
}
}
