package com.google.api.client.extensions.appengine.datastore;
import com.google.api.client.util.IOUtils;
import com.google.api.client.util.Lists;
import com.google.api.client.util.Maps;
import com.google.api.client.util.Preconditions;
import com.google.api.client.util.Sets;
import com.google.api.client.util.store.AbstractDataStore;
import com.google.api.client.util.store.AbstractDataStoreFactory;
import com.google.api.client.util.store.DataStore;
import com.google.api.client.util.store.DataStoreUtils;
import com.google.appengine.api.datastore.Blob;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.EntityNotFoundException;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.memcache.Expiration;
import com.google.appengine.api.memcache.MemcacheService;
import com.google.appengine.api.memcache.MemcacheServiceFactory;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
public class AppEngineDataStoreFactory extends AbstractDataStoreFactory {
final boolean disableMemcache;
final Expiration memcacheExpiration;
@Override
protected <V extends Serializable> DataStore<V> createDataStore(String id) throws IOException {
return new AppEngineDataStore<V>(this, id);
}
public AppEngineDataStoreFactory() {
this(new Builder());
}
public AppEngineDataStoreFactory(Builder builder) {
disableMemcache = builder.disableMemcache;
memcacheExpiration = builder.memcacheExpiration;
}
public boolean getDisableMemcache() {
return disableMemcache;
}
public static AppEngineDataStoreFactory getDefaultInstance() {
return InstanceHolder.INSTANCE;
}
static class InstanceHolder {
static final AppEngineDataStoreFactory INSTANCE = new AppEngineDataStoreFactory();
}
static class AppEngineDataStore<V extends Serializable> extends AbstractDataStore<V> {
private final Lock lock = new ReentrantLock();
private static final String FIELD_VALUE = "value";
private final MemcacheService memcache;
private final DatastoreService dataStoreService;
final Expiration memcacheExpiration;
AppEngineDataStore(AppEngineDataStoreFactory dataStoreFactory, String id) {
super(dataStoreFactory, id);
memcache =
dataStoreFactory.disableMemcache ? null : MemcacheServiceFactory.getMemcacheService(id);
memcacheExpiration = dataStoreFactory.memcacheExpiration;
dataStoreService = DatastoreServiceFactory.getDatastoreService();
}
private V deserialize(Entity entity) throws IOException {
Blob blob = (Blob) entity.getProperty(FIELD_VALUE);
return IOUtils.deserialize(blob.getBytes());
}
@Override
public Set<String> keySet() throws IOException {
lock.lock();
try {
Set<String> result = Sets.newHashSet();
for (Entity entity : query(true)) {
result.add(entity.getKey().getName());
}
return Collections.unmodifiableSet(result);
} finally {
lock.unlock();
}
}
@Override
public Collection<V> values() throws IOException {
lock.lock();
try {
if (memcache != null) {
memcache.clearAll();
}
List<V> result = Lists.newArrayList();
Map<String, V> map = memcache != null ? Maps.<String, V>newHashMap() : null;
for (Entity entity : query(false)) {
V value = deserialize(entity);
result.add(value);
if (map != null) {
map.put(entity.getKey().getName(), value);
}
}
if (memcache != null) {
memcache.putAll(map, memcacheExpiration);
}
return Collections.unmodifiableList(result);
} finally {
lock.unlock();
}
}
@Override
public V get(String key) throws IOException {
if (key == null) {
return null;
}
lock.lock();
try {
if (memcache != null && memcache.contains(key)) {
@SuppressWarnings("unchecked")
V result = (V) memcache.get(key);
return result;
}
Key dataKey = KeyFactory.createKey(getId(), key);
Entity entity;
try {
entity = dataStoreService.get(dataKey);
} catch (EntityNotFoundException exception) {
if (memcache != null) {
memcache.delete(key);
}
return null;
}
V result = deserialize(entity);
if (memcache != null) {
memcache.put(key, result, memcacheExpiration);
}
return result;
} finally {
lock.unlock();
}
}
@Override
public AppEngineDataStore<V> set(String key, V value) throws IOException {
Preconditions.checkNotNull(key);
Preconditions.checkNotNull(value);
lock.lock();
try {
Entity entity = new Entity(getId(), key);
entity.setUnindexedProperty(FIELD_VALUE, new Blob(IOUtils.serialize(value)));
dataStoreService.put(entity);
if (memcache != null) {
memcache.put(key, value, memcacheExpiration);
}
} finally {
lock.unlock();
}
return this;
}
@Override
public DataStore<V> delete(String key) throws IOException {
if (key == null) {
return this;
}
lock.lock();
try {
dataStoreService.delete(KeyFactory.createKey(getId(), key));
if (memcache != null) {
memcache.delete(key);
}
} finally {
lock.unlock();
}
return this;
}
@Override
public AppEngineDataStore<V> clear() throws IOException {
lock.lock();
try {
if (memcache != null) {
memcache.clearAll();
}
List<Key> keys = Lists.newArrayList();
for (Entity entity : query(true)) {
keys.add(entity.getKey());
}
dataStoreService.delete(keys);
} finally {
lock.unlock();
}
return this;
}
@Override
public AppEngineDataStoreFactory getDataStoreFactory() {
return (AppEngineDataStoreFactory) super.getDataStoreFactory();
}
@Override
public String toString() {
return DataStoreUtils.toString(this);
}
private Iterable<Entity> query(boolean keysOnly) {
Query query = new Query(getId());
if (keysOnly) {
query.setKeysOnly();
}
return dataStoreService.prepare(query).asIterable();
}
}
public static class Builder {
boolean disableMemcache;
Expiration memcacheExpiration;
public final boolean getDisableMemcache() {
return disableMemcache;
}
public Builder setDisableMemcache(boolean disableMemcache) {
this.disableMemcache = disableMemcache;
return this;
}
public final Expiration getMemcacheExpiration() {
return memcacheExpiration;
}
public Builder setMemcacheExpiration(Expiration memcacheExpiration) {
this.memcacheExpiration = memcacheExpiration;
return this;
}
public AppEngineDataStoreFactory build() {
return new AppEngineDataStoreFactory(this);
}
}
}
