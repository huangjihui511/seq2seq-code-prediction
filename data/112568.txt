package com.sun.swingset3.demos.tree;
import java.awt.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import com.sun.swingset3.DemoProperties;
import com.sun.swingset3.demos.ResourceManager;
@DemoProperties(
value = "JTree Demo",
category = "Data",
description = "Demonstrates JTree, a component which supports display/editing of hierarchical data",
sourceFiles = {
"com/sun/swingset3/demos/tree/TreeDemo.java",
"com/sun/swingset3/demos/ResourceManager.java",
"com/sun/swingset3/demos/tree/resources/tree.txt",
"com/sun/swingset3/demos/tree/resources/TreeDemo.properties",
"com/sun/swingset3/demos/tree/resources/images/TreeDemo.gif"
}
)
public class TreeDemo extends JPanel {
private final ResourceManager resourceManager = new ResourceManager(this.getClass());
public static void main(String[] args) {
JFrame frame = new JFrame(TreeDemo.class.getAnnotation(DemoProperties.class).value());
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.getContentPane().add(new TreeDemo());
frame.setPreferredSize(new Dimension(800, 600));
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
public TreeDemo() {
setLayout(new BorderLayout());
add(new JScrollPane(createTree()), BorderLayout.CENTER);
}
private JTree createTree() {
DefaultMutableTreeNode top = new DefaultMutableTreeNode(resourceManager.getString("TreeDemo.music"));
DefaultMutableTreeNode catagory = null;
DefaultMutableTreeNode artist = null;
DefaultMutableTreeNode record = null;
URL url = getClass().getResource("resources/tree.txt");
try {
InputStream is = url.openStream();
InputStreamReader isr = new InputStreamReader(is, "UTF-8");
BufferedReader reader = new BufferedReader(isr);
String line = reader.readLine();
while (line != null) {
char linetype = line.charAt(0);
switch (linetype) {
case 'C':
catagory = new DefaultMutableTreeNode(line.substring(2));
top.add(catagory);
break;
case 'A':
if (catagory != null) {
catagory.add(artist = new DefaultMutableTreeNode(line.substring(2)));
}
break;
case 'R':
if (artist != null) {
artist.add(record = new DefaultMutableTreeNode(line.substring(2)));
}
break;
case 'S':
if (record != null) {
record.add(new DefaultMutableTreeNode(line.substring(2)));
}
break;
default:
break;
}
line = reader.readLine();
}
} catch (IOException e) {
}
JTree tree = new JTree(top) {
public Insets getInsets() {
return new Insets(5, 5, 5, 5);
}
};
tree.setEditable(true);
return tree;
}
}
