package lombok.javac.handlers;
import lombok.javac.JavacNode;
import lombok.javac.JavacResolution;
import com.sun.tools.javac.code.Type;
import com.sun.tools.javac.tree.JCTree.JCBlock;
import com.sun.tools.javac.tree.JCTree.JCExpression;
import com.sun.tools.javac.tree.JCTree.JCMethodDecl;
import com.sun.tools.javac.tree.JCTree.JCVariableDecl;
public enum JavacResolver {
CLASS {
@Override
public Type resolveMember(JavacNode node, JCExpression expr) {
Type type = expr.type;
if (type == null) {
try {
new JavacResolution(node.getContext()).resolveClassMember(node);
type = expr.type;
} catch (Exception ignore) {
}
}
return type;
}
},
METHOD {
public Type resolveMember(JavacNode node, JCExpression expr) {
Type type = expr.type;
if (type == null) {
try {
JCExpression resolvedExpression = ((JCExpression) new JavacResolution(node.getContext()).resolveMethodMember(node).get(expr));
if (resolvedExpression != null) type = resolvedExpression.type;
} catch (Exception ignore) {
}
}
return type;
}
},
CLASS_AND_METHOD {
@Override
public Type resolveMember(JavacNode node, JCExpression expr) {
Type type = METHOD.resolveMember(node, expr);
if (type == null) {
JavacNode classNode = node;
while (classNode != null && noneOf(classNode.get(), JCBlock.class, JCMethodDecl.class, JCVariableDecl.class)) {
classNode = classNode.up();
}
if (classNode != null) {
type = CLASS.resolveMember(classNode, expr);
}
}
return type;
}
private boolean noneOf(Object o, Class<?>... clazzes) {
for (Class<?> clazz : clazzes) {
if (clazz.isInstance(o)) return false;
}
return true;
}
};
public abstract Type resolveMember(final JavacNode node, final JCExpression expr);
}
