package org.gnucash.android.importer;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.provider.OpenableColumns;
import android.util.Log;
import android.widget.Toast;
import com.crashlytics.android.Crashlytics;
import org.gnucash.android.R;
import org.gnucash.android.db.DatabaseSchema;
import org.gnucash.android.db.adapter.BooksDbAdapter;
import org.gnucash.android.ui.util.TaskDelegate;
import org.gnucash.android.util.BookUtils;
import java.io.InputStream;
public class ImportAsyncTask extends AsyncTask<Uri, Void, Boolean> {
private final Activity mContext;
private TaskDelegate mDelegate;
private ProgressDialog mProgressDialog;
private String mImportedBookUID;
public ImportAsyncTask(Activity context){
this.mContext = context;
}
public ImportAsyncTask(Activity context, TaskDelegate delegate){
this.mContext = context;
this.mDelegate = delegate;
}
@Override
protected void onPreExecute() {
super.onPreExecute();
mProgressDialog = new ProgressDialog(mContext);
mProgressDialog.setTitle(R.string.title_progress_importing_accounts);
mProgressDialog.setIndeterminate(true);
mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
mProgressDialog.show();
mProgressDialog.setProgressNumberFormat(null);
mProgressDialog.setProgressPercentFormat(null);
}
@Override
protected Boolean doInBackground(Uri... uris) {
try {
InputStream accountInputStream = mContext.getContentResolver().openInputStream(uris[0]);
mImportedBookUID = GncXmlImporter.parse(accountInputStream);
} catch (Exception exception){
Log.e(ImportAsyncTask.class.getName(), "" + exception.getMessage());
Crashlytics.log("Could not open: " + uris[0].toString());
Crashlytics.logException(exception);
exception.printStackTrace();
final String err_msg = exception.getLocalizedMessage();
Crashlytics.log(err_msg);
mContext.runOnUiThread(new Runnable() {
@Override
public void run() {
Toast.makeText(mContext,
mContext.getString(R.string.toast_error_importing_accounts) + "\n" + err_msg,
Toast.LENGTH_LONG).show();
}
});
return false;
}
Cursor cursor = mContext.getContentResolver().query(uris[0], null, null, null, null);
if (cursor != null && cursor.moveToFirst()) {
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
String displayName = cursor.getString(nameIndex);
ContentValues contentValues = new ContentValues();
contentValues.put(DatabaseSchema.BookEntry.COLUMN_DISPLAY_NAME, displayName);
contentValues.put(DatabaseSchema.BookEntry.COLUMN_SOURCE_URI, uris[0].toString());
BooksDbAdapter.getInstance().updateRecord(mImportedBookUID, contentValues);
cursor.close();
}
mContext.getSharedPreferences(mImportedBookUID, Context.MODE_PRIVATE)
.edit()
.putBoolean(mContext.getString(R.string.key_use_double_entry), true)
.apply();
return true;
}
@Override
protected void onPostExecute(Boolean importSuccess) {
try {
if (mProgressDialog != null && mProgressDialog.isShowing())
mProgressDialog.dismiss();
} catch (IllegalArgumentException ex){
} finally {
mProgressDialog = null;
}
int message = importSuccess ? R.string.toast_success_importing_accounts : R.string.toast_error_importing_accounts;
Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show();
if (mImportedBookUID != null)
BookUtils.loadBook(mImportedBookUID);
if (mDelegate != null)
mDelegate.onTaskComplete();
}
}
