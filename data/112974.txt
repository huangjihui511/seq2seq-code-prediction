package io.kubernetes.client.util.labels;
import java.util.function.Function;
import java.util.function.Predicate;
public class EqualityMatcher implements LabelMatcher {
EqualityMatcher(String key, Operator operator, String value) {
this.key = key;
this.operator = operator;
this.value = value;
}
private Operator operator;
private String key;
private String value;
public static EqualityMatcher equal(String key, String value) {
return new EqualityMatcher(key, Operator.EQUAL, value);
}
public static EqualityMatcher notEqual(String key, String value) {
return new EqualityMatcher(key, Operator.NOT_EQUAL, value);
}
@Override
public String toString() {
return new StringBuilder()
.append(key)
.append(" ")
.append(operator.name)
.append(" ")
.append(value)
.toString();
}
@Override
public boolean test(String s) {
return operator.with(value).test(s);
}
@Override
public String getKey() {
return key;
}
private enum Operator {
EQUAL(
"=",
arg -> {
return v -> arg.equals(v);
}),
DOUBLE_EQUAL(
"==",
arg -> {
return v -> arg.equals(v);
}),
NOT_EQUAL(
"!=",
arg -> {
return v -> !arg.equals(v);
});
Operator(String name, Function<String, Predicate<String>> matcherFunc) {
this.name = name;
this.matcherFunc = matcherFunc;
}
private final String name;
private final Function<String, Predicate<String>> matcherFunc;
Predicate<String> with(String value) {
return matcherFunc.apply(value);
}
}
}
