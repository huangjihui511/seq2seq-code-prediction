package com.github.benmanes.caffeine.cache;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.Level;
import org.openjdk.jmh.annotations.Param;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.Setup;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.TearDown;
@State(Scope.Benchmark)
public class EvictionBenchmark {
@Param({
"LinkedHashMap_Lru",
"Caffeine",
"Ehcache3",
})
CacheType cacheType;
@Param({"0", "100", "10000", "1000000", "10000000"})
int size;
BasicCache<Integer, Boolean> cache;
@State(Scope.Thread)
public static class ThreadState {
int key = 0;
}
@Setup
public void setup() {
cache = cacheType.create(size);
for (int i = 0; i < size; i++) {
cache.put(Integer.MIN_VALUE + i, Boolean.TRUE);
}
}
@TearDown(Level.Iteration)
public void tearDown() {
cache.cleanUp();
}
@Benchmark
public void evict(ThreadState threadState) {
cache.put(threadState.key++, Boolean.TRUE);
}
}
