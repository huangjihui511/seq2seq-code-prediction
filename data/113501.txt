package com.pokegoapi.api.pokemon;
import POGOProtos.Enums.PokemonIdOuterClass.PokemonId;
import POGOProtos.Settings.Master.Pokemon.StatsAttributesOuterClass.StatsAttributes;
import POGOProtos.Settings.Master.PokemonSettingsOuterClass.PokemonSettings;
import POGOProtos.Settings.Master.PokemonUpgradeSettingsOuterClass.PokemonUpgradeSettings;
import com.pokegoapi.api.PokemonGo;
import com.pokegoapi.api.settings.templates.ItemTemplates;
import com.pokegoapi.exceptions.NoSuchItemException;
public class PokemonCpUtils {
private static float getLevel(double combinedCpMultiplier) {
double level;
if (combinedCpMultiplier < 0.734f) {
level = 58.35178527 * combinedCpMultiplier * combinedCpMultiplier
- 2.838007664 * combinedCpMultiplier + 0.8539209906;
} else {
level = 171.0112688 * combinedCpMultiplier - 95.20425243;
}
return (float) (Math.round((level) * 2) / 2.0);
}
public static float getLevelFromCpMultiplier(double combinedCpMultiplier) {
return getLevel(combinedCpMultiplier);
}
public static int getCp(int attack, int defense, int stamina, double combinedCpMultiplier) {
return (int) Math.round(attack * Math.pow(defense, 0.5) * Math.pow(stamina, 0.5)
}
public static int getMaxCp(PokemonGo api, int attack, int defense, int stamina) {
return getMaxCpForPlayer(api, attack, defense, stamina, 40);
}
public static int getAbsoluteMaxCp(PokemonGo api, PokemonId id) throws NoSuchItemException {
PokemonSettings settings = api.itemTemplates.getPokemonSettings(id);
if (settings == null) {
throw new NoSuchItemException("Cannot find meta data for " + id);
}
StatsAttributes stats = settings.getStats();
int attack = 15 + stats.getBaseAttack();
int defense = 15 + stats.getBaseDefense();
int stamina = 15 + stats.getBaseStamina();
return getMaxCpForPlayer(api, attack, defense, stamina, 40);
}
public static int getMaxCpForPlayer(PokemonGo api, int attack, int defense, int stamina, int playerLevel) {
float maxLevel = Math.min(playerLevel + 1.5F, 40.0F);
double maxCpMultplier = api.itemTemplates.getLevelCpMultiplier(maxLevel);
return getCp(attack, defense, stamina, maxCpMultplier);
}
public static int getCpAfterPowerup(int cp, double combinedCpMultiplier) {
double level = getLevelFromCpMultiplier(combinedCpMultiplier);
if (level <= 10) {
return cp + (int) Math.round((cp * 0.009426125469) / Math.pow(combinedCpMultiplier, 2));
}
if (level <= 20) {
return cp + (int) Math.round((cp * 0.008919025675) / Math.pow(combinedCpMultiplier, 2));
}
if (level <= 30) {
return cp + (int) Math.round((cp * 0.008924905903) / Math.pow(combinedCpMultiplier, 2));
}
return cp + (int) Math.round((cp * 0.00445946079) / Math.pow(combinedCpMultiplier, 2));
}
public static double getAdditionalCpMultiplierAfterPowerup(PokemonGo api,
double cpMultiplier, double additionalCpMultiplier) {
float nextLevel = getLevelFromCpMultiplier(cpMultiplier + additionalCpMultiplier) + .5f;
return api.itemTemplates.getLevelCpMultiplier(nextLevel) - cpMultiplier;
}
public static int getStartdustCostsForPowerup(PokemonGo api, double combinedCpMultiplier) {
PokemonUpgradeSettings upgradeSettings = api.itemTemplates.upgradeSettings;
int level = (int) getLevelFromCpMultiplier(combinedCpMultiplier);
if (level < upgradeSettings.getStardustCostCount()) {
return upgradeSettings.getStardustCost(level);
}
return 0;
}
public static int getCandyCostsForPowerup(PokemonGo api, double combinedCpMultiplier) {
int level = (int) getLevelFromCpMultiplier(combinedCpMultiplier);
return api.itemTemplates.upgradeSettings.getCandyCost(level);
}
}
