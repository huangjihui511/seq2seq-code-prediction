package org.apache.struts2.osgi.host;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.felix.shell.ShellService;
import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;
import org.osgi.framework.BundleException;
import org.osgi.framework.BundleReference;
import javax.servlet.ServletContext;
import java.net.URL;
import java.security.CodeSource;
import java.security.ProtectionDomain;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
public class GlassfishOSGiHost extends BaseOsgiHost implements OsgiHost {
private static final Logger LOG = LogManager.getLogger(GlassfishOSGiHost.class);
private static final String BUNDLES_DIR = "/WEB-INF/classes/bundles/2/";
private BundleContext bctx = null;
@Override
public void init(ServletContext servletContext) {
this.servletContext = servletContext;
installManagedBundles();
addSpringOSGiSupport();
servletContext.setAttribute(OSGI_BUNDLE_CONTEXT, bctx);
}
private void installManagedBundles() {
try {
BundleReference ref = (BundleReference) servletContext.getClass()
.getClassLoader();
bctx = ref.getBundle().getBundleContext();
installBundles();
} catch (Exception ex) {
LOG.error("Installing Managed Bundles met a problem", ex);
}
}
private void installBundles() throws Exception {
ArrayList<Bundle> installed = new ArrayList<Bundle>();
for (URL url : findBundles()) {
LOG.debug("Installing bundle [" + url + "]");
Bundle bundle = bctx.installBundle(url.toExternalForm());
installed.add(bundle);
}
for (Bundle bundle : installed) {
try {
bundle.start();
} catch (BundleException e) {
e.printStackTrace();
LOG.error("Failed to start " + bundle, e);
}
}
}
private List<URL> findBundles() throws Exception {
ArrayList<URL> list = new ArrayList<URL>();
for (Object o : this.servletContext.getResourcePaths(BUNDLES_DIR)) {
String name = (String) o;
if (name.endsWith(".jar")) {
URL url = this.servletContext.getResource(name);
if (url != null) {
list.add(url);
}
}
}
ProtectionDomain protectionDomain = ShellService.class.getProtectionDomain();
CodeSource codeSource = protectionDomain.getCodeSource();
URL loc = codeSource.getLocation();
list.add(loc);
return list;
}
@Override
protected void addSpringOSGiSupport() {
try {
Class<?> clazz = Class
.forName("org.springframework.osgi.web.context.support.OsgiBundleXmlWebApplicationContext");
String key = (String) clazz.getDeclaredField(
"BUNDLE_CONTEXT_ATTRIBUTE").get(null);
servletContext.setAttribute(key, bctx);
} catch (ClassNotFoundException e) {
if (LOG.isDebugEnabled()) {
LOG.debug("Spring OSGi support is not enabled");
}
} catch (Exception e) {
LOG.error(
"The API of Spring OSGi has changed and the field [[}] is no longer available. The OSGi plugin needs to be updated",
"org.springframework.osgi.web.context.support.OsgiBundleXmlWebApplicationContext.BUNDLE_CONTEXT_ATTRIBUTE", e);
}
}
@Override
public Map<String, Bundle> getBundles() {
Map<String, Bundle> bundles = new HashMap<String, Bundle>();
for (Bundle bundle : bctx.getBundles()) {
bundles.put(bundle.getSymbolicName(), bundle);
}
return Collections.unmodifiableMap(bundles);
}
public Map<String, Bundle> getActiveBundles() {
Map<String, Bundle> bundles = new HashMap<String, Bundle>();
for (Bundle bundle : bctx.getBundles()) {
if (bundle.getState() == Bundle.ACTIVE)
bundles.put(bundle.getSymbolicName(), bundle);
}
return Collections.unmodifiableMap(bundles);
}
public BundleContext getBundleContext() {
return bctx;
}
public void destroy() throws Exception {
}
}
