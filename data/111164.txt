package com.github.benmanes.caffeine.cache.simulator.admission.bloom;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.lessThan;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import com.github.benmanes.caffeine.cache.simulator.membership.FilterType;
import com.github.benmanes.caffeine.cache.simulator.membership.Membership;
import com.google.common.collect.ImmutableMap;
import com.jakewharton.fliptables.FlipTable;
import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
public class MembershipTest {
static final String[] HEADERS = { "Type", "Insertions", "False Positives" };
static final double EXPECTED_INSERTIONS_MULTIPLIER = 0.5;
static final double FPP = 0.03;
static final boolean display = false;
@Test(dataProvider = "filterTypes")
public void bloomFilterTest(FilterType filterType) {
for (int capacity = 2 << 10; capacity < (2 << 22); capacity = capacity << 2) {
long[] input = new Random().longs(capacity).distinct().toArray();
Config config = getConfig(filterType, capacity);
List<String[]> rows = new ArrayList<>();
Membership filter = filterType.create(config);
int falsePositives = falsePositives(filter, input);
int expectedInsertions = (int) (capacity * EXPECTED_INSERTIONS_MULTIPLIER);
double falsePositiveRate = ((double) falsePositives / expectedInsertions);
assertThat(filterType.toString(), falsePositiveRate, is(lessThan(FPP + 0.2)));
rows.add(row(filterType, expectedInsertions, falsePositives, falsePositiveRate));
if (display) {
printTable(rows);
}
}
}
@DataProvider(name = "filterTypes")
public Object[] providesFilterTypes() {
return FilterType.values();
}
private int falsePositives(Membership filter, long[] input) {
int falsePositives = 0;
int truePositives = 0;
int i = 0;
for (; i < (input.length / 2); i++) {
filter.put(input[i]);
}
for (int k = 0; k < i; k++) {
truePositives += filter.mightContain(input[k]) ? 1 : 0;
}
assertThat(truePositives, is(input.length / 2));
for (; i < input.length; i++) {
falsePositives += filter.mightContain(input[i]) ? 1 : 0;
}
return falsePositives;
}
private Config getConfig(FilterType filterType, int capacity) {
Map<String, Object> properties = ImmutableMap.of(
"membership.expected-insertions-multiplier", EXPECTED_INSERTIONS_MULTIPLIER,
"membership.filter", filterType.name(),
"maximum-size", capacity,
"membership.fpp", FPP);
return ConfigFactory.parseMap(properties)
.withFallback(ConfigFactory.load().getConfig("caffeine.simulator"));
}
private static String[] row(FilterType filterType, int expectedInsertions,
int falsePositives, double falsePositiveRate) {
return new String[] {
filterType.toString(),
String.format("%,d", expectedInsertions),
String.format("%,d (%.2f %%)", falsePositives, 100 * falsePositiveRate),
};
}
private static void printTable(List<String[]> rows) {
String[][] data = new String[rows.size()][HEADERS.length];
for (int i = 0; i < rows.size(); i++) {
data[i] = rows.get(i);
}
System.out.println(FlipTable.of(HEADERS, data));
}
}
