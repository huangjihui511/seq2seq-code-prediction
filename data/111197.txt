package com.github.benmanes.caffeine.cache.node;
import static com.github.benmanes.caffeine.cache.Specifications.UNSAFE_ACCESS;
import static com.github.benmanes.caffeine.cache.Specifications.keyRefQueueSpec;
import static com.github.benmanes.caffeine.cache.Specifications.keyRefSpec;
import static com.github.benmanes.caffeine.cache.Specifications.keySpec;
import static com.github.benmanes.caffeine.cache.Specifications.offsetName;
import static com.github.benmanes.caffeine.cache.Specifications.valueRefQueueSpec;
import static com.github.benmanes.caffeine.cache.Specifications.valueSpec;
import com.squareup.javapoet.MethodSpec;
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public final class AddConstructors extends NodeRule {
@Override
protected boolean applies() {
return true;
}
@Override
protected void execute() {
addConstructorDefault();
addConstructorByKey();
addConstructorByKeyRef();
}
private void addConstructorDefault() {
context.constructorDefault = MethodSpec.constructorBuilder();
}
private void addConstructorByKey() {
context.constructorByKey = MethodSpec.constructorBuilder().addParameter(keySpec);
context.constructorByKey.addParameter(keyRefQueueSpec);
addCommonParameters(context.constructorByKey);
if (isBaseClass()) {
callSiblingConstructor();
} else {
callParentByKey();
}
}
private void addConstructorByKeyRef() {
context.constructorByKeyRef = MethodSpec.constructorBuilder().addParameter(keyRefSpec);
addCommonParameters(context.constructorByKeyRef);
if (isBaseClass()) {
assignKeyRefAndValue();
} else {
callParentByKeyRef();
}
}
private void addCommonParameters(MethodSpec.Builder constructor) {
constructor.addParameter(valueSpec);
constructor.addParameter(valueRefQueueSpec);
constructor.addParameter(int.class, "weight");
constructor.addParameter(long.class, "now");
}
private void callSiblingConstructor() {
if (isStrongKeys()) {
context.constructorByKey.addStatement("this(key, value, valueReferenceQueue, weight, now)");
} else {
context.constructorByKey.addStatement(
"this(new $T($N, $N), value, valueReferenceQueue, weight, now)", keyReferenceType(),
"key", "keyReferenceQueue");
}
}
private void assignKeyRefAndValue() {
context.constructorByKeyRef.addStatement("$T.UNSAFE.putObject(this, $N, $N)",
UNSAFE_ACCESS, offsetName("key"), "keyReference");
if (isStrongValues()) {
context.constructorByKeyRef.addStatement("$T.UNSAFE.putObject(this, $N, $N)",
UNSAFE_ACCESS, offsetName("value"), "value");
} else {
context.constructorByKeyRef.addStatement("$T.UNSAFE.putObject(this, $N, new $T($N, $N, $N))",
UNSAFE_ACCESS, offsetName("value"), valueReferenceType(), "keyReference",
"value", "valueReferenceQueue");
}
}
private void callParentByKey() {
context.constructorByKey.addStatement(
"super(key, keyReferenceQueue, value, valueReferenceQueue, weight, now)");
}
private void callParentByKeyRef() {
context.constructorByKeyRef.addStatement(
"super(keyReference, value, valueReferenceQueue, weight, now)");
}
}
