package org.apache.flink.cep.nfa;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Objects;
import java.util.PriorityQueue;
import java.util.Queue;
public class NFAState {
private Queue<ComputationState> partialMatches;
private Queue<ComputationState> completedMatches;
private boolean stateChanged;
public static final Comparator<ComputationState> COMPUTATION_STATE_COMPARATOR =
Comparator.<ComputationState>comparingLong(c ->
c.getStartEventID() != null ? c.getStartEventID().getTimestamp() : Long.MAX_VALUE)
.thenComparingInt(c ->
c.getStartEventID() != null ? c.getStartEventID().getId() : Integer.MAX_VALUE);
public NFAState(Iterable<ComputationState> states) {
this.partialMatches = new PriorityQueue<>(COMPUTATION_STATE_COMPARATOR);
for (ComputationState startingState : states) {
partialMatches.add(startingState);
}
this.completedMatches = new PriorityQueue<>(COMPUTATION_STATE_COMPARATOR);
}
public NFAState(Queue<ComputationState> partialMatches, Queue<ComputationState> completedMatches) {
this.partialMatches = partialMatches;
this.completedMatches = completedMatches;
}
public boolean isStateChanged() {
return stateChanged;
}
public void resetStateChanged() {
this.stateChanged = false;
}
public void setStateChanged() {
this.stateChanged = true;
}
public Queue<ComputationState> getPartialMatches() {
return partialMatches;
}
public Queue<ComputationState> getCompletedMatches() {
return completedMatches;
}
public void setNewPartialMatches(PriorityQueue<ComputationState> newPartialMatches) {
this.partialMatches = newPartialMatches;
}
@Override
public boolean equals(Object o) {
if (this == o) {
return true;
}
if (o == null || getClass() != o.getClass()) {
return false;
}
NFAState nfaState = (NFAState) o;
return Arrays.equals(partialMatches.toArray(), nfaState.partialMatches.toArray()) &&
Arrays.equals(completedMatches.toArray(), nfaState.completedMatches.toArray());
}
@Override
public int hashCode() {
return Objects.hash(partialMatches, completedMatches);
}
@Override
public String toString() {
return "NFAState{" +
"partialMatches=" + partialMatches +
", completedMatches=" + completedMatches +
", stateChanged=" + stateChanged +
'}';
}
}
