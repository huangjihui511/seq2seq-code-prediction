package spark.utils.urldecoding;
import java.io.IOException;
public abstract class Utf8Appendable {
public static final char REPLACEMENT = '\ufffd';
private static final int UTF8_ACCEPT = 0;
private static final int UTF8_REJECT = 12;
protected final Appendable _appendable;
protected int _state = UTF8_ACCEPT;
private static final byte[] BYTE_TABLE =
{
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 11, 6, 6, 6, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
};
private static final byte[] TRANS_TABLE =
{
0, 12, 24, 36, 60, 96, 84, 12, 12, 12, 48, 72, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 0, 12, 12, 12, 12, 12, 0, 12, 0, 12, 12, 12, 24, 12, 12, 12, 12, 12, 24, 12, 24, 12, 12,
12, 12, 12, 12, 12, 12, 12, 24, 12, 12, 12, 12, 12, 24, 12, 12, 12, 12, 12, 12, 12, 24, 12, 12,
12, 12, 12, 12, 12, 12, 12, 36, 12, 36, 12, 12, 12, 36, 12, 12, 12, 12, 12, 36, 12, 36, 12, 12,
12, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12
};
private int _codep;
public Utf8Appendable(Appendable appendable) {
_appendable = appendable;
}
public abstract int length();
protected void reset() {
_state = UTF8_ACCEPT;
}
private void checkCharAppend() throws IOException {
if (_state != UTF8_ACCEPT) {
_appendable.append(REPLACEMENT);
int state = _state;
_state = UTF8_ACCEPT;
throw new org.eclipse.jetty.util.Utf8Appendable.NotUtf8Exception("char appended in state " + state);
}
}
public void append(char c) {
try {
checkCharAppend();
_appendable.append(c);
} catch (IOException e) {
throw new RuntimeException(e);
}
}
public void append(String s, int offset, int length) {
try {
checkCharAppend();
_appendable.append(s, offset, offset + length);
} catch (IOException e) {
throw new RuntimeException(e);
}
}
public void append(byte b) {
try {
appendByte(b);
} catch (IOException e) {
throw new RuntimeException(e);
}
}
protected void appendByte(byte b) throws IOException {
if (b > 0 && _state == UTF8_ACCEPT) {
_appendable.append((char) (b & 0xFF));
} else {
int i = b & 0xFF;
int type = BYTE_TABLE[i];
_codep = _state == UTF8_ACCEPT ? (0xFF >> type) & i : (i & 0x3F) | (_codep << 6);
int next = TRANS_TABLE[_state + type];
switch (next) {
case UTF8_ACCEPT:
_state = next;
if (_codep < Character.MIN_HIGH_SURROGATE) {
_appendable.append((char) _codep);
} else {
for (char c : Character.toChars(_codep))
_appendable.append(c);
}
break;
case UTF8_REJECT:
String reason = "byte " + TypeUtil.toHexString(b) + " in state " + (_state / 12);
_codep = 0;
_state = UTF8_ACCEPT;
_appendable.append(REPLACEMENT);
throw new org.eclipse.jetty.util.Utf8Appendable.NotUtf8Exception(reason);
default:
_state = next;
}
}
}
public boolean isUtf8SequenceComplete() {
return _state == UTF8_ACCEPT;
}
@SuppressWarnings("serial")
public static class NotUtf8Exception extends IllegalArgumentException {
public NotUtf8Exception(String reason) {
super("Not valid UTF8! " + reason);
}
}
protected void checkState() {
if (!isUtf8SequenceComplete()) {
_codep = 0;
_state = UTF8_ACCEPT;
try {
_appendable.append(REPLACEMENT);
} catch (IOException e) {
throw new RuntimeException(e);
}
throw new org.eclipse.jetty.util.Utf8Appendable.NotUtf8Exception("incomplete UTF8 sequence");
}
}
}
