package io.dropwizard.configuration;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.databind.JsonMappingException;
import io.dropwizard.util.Strings;
import org.apache.commons.text.similarity.LevenshteinDistance;
import javax.annotation.Nullable;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import static java.util.Objects.requireNonNull;
public class ConfigurationParsingException extends ConfigurationException {
private static final long serialVersionUID = 1L;
static class Builder {
private static final int MAX_SUGGESTIONS = 5;
private String summary;
private String detail = "";
private List<JsonMappingException.Reference> fieldPath = Collections.emptyList();
private int line = -1;
private int column = -1;
@Nullable
private Exception cause;
private List<String> suggestions = new ArrayList<>();
@Nullable
private String suggestionBase;
private boolean suggestionsSorted = false;
Builder(String summary) {
this.summary = summary;
}
public String getSummary() {
return summary.trim();
}
public String getDetail() {
return detail.trim();
}
public boolean hasDetail() {
return detail != null && !detail.isEmpty();
}
public List<JsonMappingException.Reference> getFieldPath() {
return fieldPath;
}
public boolean hasFieldPath() {
return fieldPath != null && !fieldPath.isEmpty();
}
public int getLine() {
return line;
}
public int getColumn() {
return column;
}
public boolean hasLocation() {
return line > -1 && column > -1;
}
public List<String> getSuggestions() {
if (suggestionsSorted || !hasSuggestionBase()) {
return suggestions;
}
suggestions.sort(new LevenshteinComparator(requireNonNull(getSuggestionBase())));
suggestionsSorted = true;
return suggestions;
}
public boolean hasSuggestions() {
return suggestions != null && !suggestions.isEmpty();
}
@Nullable
public String getSuggestionBase() {
return suggestionBase;
}
public boolean hasSuggestionBase() {
return suggestionBase != null && !suggestionBase.isEmpty();
}
@Nullable
public Exception getCause() {
return cause;
}
public boolean hasCause() {
return cause != null;
}
Builder setCause(Exception cause) {
this.cause = cause;
return this;
}
Builder setDetail(@Nullable String detail) {
this.detail = Strings.nullToEmpty(detail);
return this;
}
Builder setFieldPath(List<JsonMappingException.Reference> fieldPath) {
this.fieldPath = fieldPath;
return this;
}
Builder setLocation(JsonLocation location) {
return location == null
? this
: setLocation(location.getLineNr(), location.getColumnNr());
}
Builder setLocation(int line, int column) {
this.line = line;
this.column = column;
return this;
}
Builder addSuggestion(String suggestion) {
this.suggestionsSorted = false;
this.suggestions.add(suggestion);
return this;
}
Builder addSuggestions(Collection<String> suggestions) {
this.suggestionsSorted = false;
this.suggestions.addAll(suggestions);
return this;
}
Builder setSuggestionBase(String base) {
this.suggestionBase = base;
this.suggestionsSorted = false;
return this;
}
ConfigurationParsingException build(String path) {
final StringBuilder sb = new StringBuilder(getSummary());
if (hasFieldPath()) {
sb.append(" at: ").append(buildPath(getFieldPath()));
} else if (hasLocation()) {
sb.append(" at line: ").append(getLine() + 1)
.append(", column: ").append(getColumn() + 1);
}
if (hasDetail()) {
sb.append("; ").append(getDetail());
}
if (hasSuggestions()) {
final List<String> suggestions = getSuggestions();
sb.append(NEWLINE).append("    Did you mean?:").append(NEWLINE);
final Iterator<String> it = suggestions.iterator();
int i = 0;
while (it.hasNext() && i < MAX_SUGGESTIONS) {
sb.append("      - ").append(it.next());
i++;
if (it.hasNext()) {
sb.append(NEWLINE);
}
}
final int total = suggestions.size();
if (i < total) {
sb.append("        [").append(total - i).append(" more]");
}
}
return hasCause()
? new ConfigurationParsingException(path, sb.toString(), requireNonNull(getCause()))
: new ConfigurationParsingException(path, sb.toString());
}
private String buildPath(Iterable<JsonMappingException.Reference> path) {
final StringBuilder sb = new StringBuilder();
if (path != null) {
final Iterator<JsonMappingException.Reference> it = path.iterator();
while (it.hasNext()) {
final JsonMappingException.Reference reference = it.next();
final String name = reference.getFieldName();
if (name == null) {
sb.append('[').append(reference.getIndex()).append(']');
} else {
sb.append(name);
}
if (it.hasNext()) {
sb.append('.');
}
}
}
return sb.toString();
}
protected static class LevenshteinComparator implements Comparator<String>, Serializable {
private static final long serialVersionUID = 1L;
private static final LevenshteinDistance LEVENSHTEIN_DISTANCE = new LevenshteinDistance();
private String base;
public LevenshteinComparator(String base) {
this.base = base;
}
@Override
public int compare(String a, String b) {
if (a.equals(b)) {
return 0; 
} else if (a.equals(base)) {
return -1; 
} else if (b.equals(base)) {
return 1; 
}
return Integer.compare(LEVENSHTEIN_DISTANCE.apply(a, base),
LEVENSHTEIN_DISTANCE.apply(b, base));
}
private void writeObject(ObjectOutputStream stream) throws IOException {
stream.defaultWriteObject();
}
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
stream.defaultReadObject();
}
}
}
static Builder builder(String brief) {
return new Builder(brief);
}
private ConfigurationParsingException(String path, String msg) {
super(path, Collections.singleton(msg));
}
private ConfigurationParsingException(String path, String msg, Throwable cause) {
super(path, Collections.singleton(msg), cause);
}
}
