package mobi.hsz.idea.gitignore.actions;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.EditorFactory;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.PsiFile;
import mobi.hsz.idea.gitignore.IgnoreBundle;
import mobi.hsz.idea.gitignore.psi.IgnoreFile;
import mobi.hsz.idea.gitignore.ui.template.UserTemplateDialog;
import mobi.hsz.idea.gitignore.util.CommonDataKeys;
import mobi.hsz.idea.gitignore.util.Icons;
import org.jetbrains.annotations.NotNull;
public class CreateUserTemplateAction extends AnAction {
public CreateUserTemplateAction() {
super(IgnoreBundle.message("action.createUserTemplate"),
IgnoreBundle.message("action.createUserTemplate.description"), Icons.IGNORE);
}
@Override
public void actionPerformed(@NotNull AnActionEvent e) {
final Project project = e.getData(CommonDataKeys.PROJECT);
final PsiFile file = e.getData(CommonDataKeys.PSI_FILE);
if (project == null || !(file instanceof IgnoreFile)) {
return;
}
String content = file.getText();
Document document = file.getViewProvider().getDocument();
if (document != null) {
Editor[] editors = EditorFactory.getInstance().getEditors(document);
if (editors.length > 0) {
String selectedText = editors[0].getSelectionModel().getSelectedText();
if (!StringUtil.isEmpty(selectedText)) {
content = selectedText;
}
}
}
new UserTemplateDialog(project, content).show();
}
@Override
public void update(@NotNull AnActionEvent e) {
final PsiFile file = e.getData(CommonDataKeys.PSI_FILE);
if (!(file instanceof IgnoreFile)) {
e.getPresentation().setVisible(false);
return;
}
getTemplatePresentation().setIcon(file.getFileType().getIcon());
}
}
