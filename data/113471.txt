package com.pokegoapi.api.inventory;
import POGOProtos.Enums.PokemonFamilyIdOuterClass.PokemonFamilyId;
import POGOProtos.Enums.PokemonIdOuterClass;
import POGOProtos.Inventory.CandyOuterClass.Candy;
import POGOProtos.Inventory.InventoryItemDataOuterClass.InventoryItemData;
import POGOProtos.Inventory.InventoryItemOuterClass.InventoryItem;
import POGOProtos.Networking.Requests.Messages.ReleasePokemonMessageOuterClass.ReleasePokemonMessage;
import POGOProtos.Networking.Requests.RequestTypeOuterClass.RequestType;
import POGOProtos.Networking.Responses.GetHoloInventoryResponseOuterClass.GetHoloInventoryResponse;
import POGOProtos.Networking.Responses.ReleasePokemonResponseOuterClass.ReleasePokemonResponse;
import POGOProtos.Networking.Responses.ReleasePokemonResponseOuterClass.ReleasePokemonResponse.Result;
import com.annimon.stream.Collectors;
import com.annimon.stream.Stream;
import com.annimon.stream.function.Predicate;
import com.google.protobuf.ByteString;
import com.google.protobuf.InvalidProtocolBufferException;
import com.pokegoapi.api.PokemonGo;
import com.pokegoapi.api.pokemon.Pokemon;
import com.pokegoapi.exceptions.request.RequestFailedException;
import com.pokegoapi.main.ServerRequest;
import com.pokegoapi.main.ServerRequestEnvelope;
import com.pokegoapi.main.ServerResponse;
import lombok.Getter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
public class PokeBank {
@Getter
public final List<Pokemon> pokemons = Collections.synchronizedList(new ArrayList<Pokemon>());
@Getter
private final Object lock = new Object();
@Getter
private final PokemonGo api;
public PokeBank(PokemonGo api) {
this.api = api;
}
public void reset() {
synchronized (this.lock) {
pokemons.clear();
}
}
public void addPokemon(final Pokemon pokemon) {
synchronized (this.lock) {
List<Pokemon> alreadyAdded = Stream.of(pokemons).filter(new Predicate<Pokemon>() {
@Override
public boolean test(Pokemon testPokemon) {
return pokemon.getId() == testPokemon.getId();
}
}).collect(Collectors.<Pokemon>toList());
if (alreadyAdded.size() < 1) {
pokemons.add(pokemon);
}
}
}
public List<Pokemon> getPokemonByPokemonId(final PokemonIdOuterClass.PokemonId id) {
synchronized (this.lock) {
return Stream.of(pokemons).filter(new Predicate<Pokemon>() {
@Override
public boolean test(Pokemon pokemon) {
return pokemon.getPokemonId().equals(id);
}
}).collect(Collectors.<Pokemon>toList());
}
}
public void removePokemon(final long pokemonID) {
synchronized (this.lock) {
List<Pokemon> previous = new ArrayList<>();
previous.addAll(pokemons);
pokemons.clear();
pokemons.addAll(Stream.of(previous).filter(new Predicate<Pokemon>() {
@Override
public boolean test(Pokemon pokemon) {
return pokemon.getId() != pokemonID;
}
}).collect(Collectors.<Pokemon>toList()));
}
}
public void removePokemon(final Pokemon pokemon) {
removePokemon(pokemon.getId());
}
public Pokemon getPokemonById(final Long id) {
synchronized (this.lock) {
for (Pokemon pokemon : pokemons) {
if (pokemon.getId() == id) {
return pokemon;
}
}
}
return null;
}
public Map<PokemonFamilyId, Integer> releasePokemon(Pokemon... releasePokemon) throws RequestFailedException {
ReleasePokemonMessage.Builder releaseBuilder = ReleasePokemonMessage.newBuilder();
for (Pokemon pokemon : releasePokemon) {
if (!pokemon.isDeployed() && !pokemon.isFavorite()) {
releaseBuilder.addPokemonIds(pokemon.getId());
}
}
ServerRequest releaseRequest = new ServerRequest(RequestType.RELEASE_POKEMON, releaseBuilder.build());
ServerRequestEnvelope envelope = ServerRequestEnvelope.createCommons(releaseRequest, api);
Map<PokemonFamilyId, Integer> lastCandies = new HashMap<>(api.inventories.candyjar.getCandies());
ServerResponse response = api.requestHandler.sendServerRequests(envelope);
try {
ByteString inventoryData = response.get(RequestType.GET_HOLO_INVENTORY);
GetHoloInventoryResponse inventoryResponse = GetHoloInventoryResponse.parseFrom(inventoryData);
ReleasePokemonResponse releaseResponse = ReleasePokemonResponse.parseFrom(releaseRequest.getData());
Map<PokemonFamilyId, Integer> candyCount = new HashMap<>();
if (releaseResponse.getResult() == Result.SUCCESS && inventoryResponse.getSuccess()) {
synchronized (this.lock) {
this.pokemons.removeAll(Arrays.asList(releasePokemon));
}
for (Pokemon pokemon : releasePokemon) {
api.inventories.pokebank.removePokemon(pokemon);
}
List<InventoryItem> items = inventoryResponse.getInventoryDelta().getInventoryItemsList();
for (InventoryItem item : items) {
InventoryItemData data = item.getInventoryItemData();
if (data != null && data.hasCandy()) {
Candy candy = data.getCandy();
PokemonFamilyId family = candy.getFamilyId();
Integer lastCandy = lastCandies.get(family);
if (lastCandy == null) {
lastCandy = 0;
}
candyCount.put(family, candy.getCandy() - lastCandy);
}
}
api.inventories.updateInventories(inventoryResponse);
}
return candyCount;
} catch (InvalidProtocolBufferException e) {
throw new RequestFailedException(e);
}
}
public int size() {
return pokemons.size() + api.inventories.hatchery.eggs.size();
}
public int getMaxStorage() {
return api.playerProfile.getPlayerData().getMaxPokemonStorage();
}
}
