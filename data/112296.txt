package com.github.jknack.handlebars.internal;
import java.io.IOException;
import java.io.Writer;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import com.github.jknack.handlebars.Context;
import com.github.jknack.handlebars.Decorator;
import com.github.jknack.handlebars.Handlebars;
import com.github.jknack.handlebars.Options;
import com.github.jknack.handlebars.TagType;
import com.github.jknack.handlebars.Template;
public class VarDecorator extends Variable {
private boolean root;
private Decorator decorator;
public VarDecorator(final Handlebars handlebars, final String name, final TagType type,
final List<Param> params, final Map<String, Param> hash, final boolean root) {
super(handlebars, name, type, params, hash);
this.root = root;
}
@Override
protected void postInit() {
this.decorator = handlebars.decorator(name);
}
@Override
public void before(final Context context, final Writer writer) throws IOException {
Context ctx = root ? Context.copy(context, null) : context;
Options options = new Options(handlebars, name, type, ctx, this, Template.EMPTY,
decoParams(ctx), hash(ctx), Collections.<String> emptyList(), null);
options.data(Context.PARAM_SIZE, this.params.size());
decorator.apply(this, options);
}
@Override
public void apply(final Context context, final Writer writer) throws IOException {
}
@Override
public boolean decorate() {
return true;
}
@Override
protected String suffix() {
return "*";
}
}
