package org.spongepowered.mod.test.integration;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.data.type.HandTypes;
import org.spongepowered.api.event.message.MessageChannelEvent;
import org.spongepowered.api.item.ItemTypes;
import org.spongepowered.api.item.inventory.ItemStack;
import org.spongepowered.api.item.inventory.entity.Hotbar;
import org.spongepowered.api.item.inventory.entity.PlayerInventory;
import org.spongepowered.api.item.inventory.property.SlotIndex;
import org.spongepowered.api.item.inventory.query.QueryOperationTypes;
import org.spongepowered.api.text.Text;
import org.spongepowered.api.text.chat.ChatTypes;
import org.spongepowered.mctester.internal.BaseTest;
import org.spongepowered.mctester.internal.event.StandaloneEventListener;
import org.spongepowered.mctester.api.junit.MinecraftRunner;
import org.spongepowered.mctester.api.ScreenshotOptions;
import org.spongepowered.mctester.junit.TestUtils;
import org.spongepowered.mctester.api.UseSeparateWorld;
import org.spongepowered.mctester.api.WorldOptions;
@RunWith(MinecraftRunner.class)
@WorldOptions(deleteWorldOnSuccess = true)
public class ChatTest extends BaseTest {
public ChatTest(TestUtils testUtils) {
super(testUtils);
}
@Test
@ScreenshotOptions(takeScreenshotOnSuccess = true)
public void helpHelp() throws Throwable {
String message = "Hello, world!";
testUtils.listenOneShot(() -> client.sendMessage(message),
new StandaloneEventListener<>(MessageChannelEvent.Chat.class, (MessageChannelEvent.Chat event) -> {
Assert.assertEquals(message, event.getRawMessage().toPlain());
}));
}
@Test(expected = AssertionError.class)
public void deliberateFailure() throws Throwable {
testUtils.listenOneShot(() -> { client.sendMessage("blah"); }, new StandaloneEventListener<>(MessageChannelEvent.Chat.class, (MessageChannelEvent.Chat event) -> {
throw new AssertionError("Deliberate failure!");
}));
}
}
