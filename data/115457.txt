package org.gnucash.android.export;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.os.Environment;
import android.support.annotation.NonNull;
import android.util.Log;
import com.crashlytics.android.Crashlytics;
import org.gnucash.android.BuildConfig;
import org.gnucash.android.app.GnuCashApplication;
import org.gnucash.android.db.DatabaseSchema;
import org.gnucash.android.db.adapter.AccountsDbAdapter;
import org.gnucash.android.db.adapter.BooksDbAdapter;
import org.gnucash.android.db.adapter.BudgetAmountsDbAdapter;
import org.gnucash.android.db.adapter.BudgetsDbAdapter;
import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
import org.gnucash.android.db.adapter.PricesDbAdapter;
import org.gnucash.android.db.adapter.RecurrenceDbAdapter;
import org.gnucash.android.db.adapter.ScheduledActionDbAdapter;
import org.gnucash.android.db.adapter.SplitsDbAdapter;
import org.gnucash.android.db.adapter.TransactionsDbAdapter;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
public abstract class Exporter {
protected static String LOG_TAG = "Exporter";
@Deprecated
public static final String LEGACY_BASE_FOLDER_PATH = Environment.getExternalStorageDirectory() + "/" + BuildConfig.APPLICATION_ID;
public static final String BASE_FOLDER_PATH = GnuCashApplication.getAppContext().getExternalFilesDir(null).getAbsolutePath();
protected final ExportParams mExportParams;
private final File mCacheDir;
private static final SimpleDateFormat EXPORT_FILENAME_DATE_FORMAT = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US);
protected final AccountsDbAdapter mAccountsDbAdapter;
protected final TransactionsDbAdapter mTransactionsDbAdapter;
protected final SplitsDbAdapter mSplitsDbAdapter;
protected final ScheduledActionDbAdapter mScheduledActionDbAdapter;
protected final PricesDbAdapter mPricesDbAdapter;
protected final CommoditiesDbAdapter mCommoditiesDbAdapter;
protected final BudgetsDbAdapter mBudgetsDbAdapter;
protected final Context mContext;
private String mExportCacheFilePath;
protected final SQLiteDatabase mDb;
protected String mBookUID;
public Exporter(ExportParams params, SQLiteDatabase db) {
this.mExportParams = params;
mContext = GnuCashApplication.getAppContext();
if (db == null) {
mAccountsDbAdapter      = AccountsDbAdapter.getInstance();
mTransactionsDbAdapter  = TransactionsDbAdapter.getInstance();
mSplitsDbAdapter        = SplitsDbAdapter.getInstance();
mPricesDbAdapter        = PricesDbAdapter.getInstance();
mCommoditiesDbAdapter   = CommoditiesDbAdapter.getInstance();
mBudgetsDbAdapter       = BudgetsDbAdapter.getInstance();
mScheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
mDb = GnuCashApplication.getActiveDb();
} else {
mDb = db;
mSplitsDbAdapter        = new SplitsDbAdapter(db);
mTransactionsDbAdapter  = new TransactionsDbAdapter(db, mSplitsDbAdapter);
mAccountsDbAdapter      = new AccountsDbAdapter(db, mTransactionsDbAdapter);
mPricesDbAdapter        = new PricesDbAdapter(db);
mCommoditiesDbAdapter   = new CommoditiesDbAdapter(db);
RecurrenceDbAdapter recurrenceDbAdapter = new RecurrenceDbAdapter(db);
mBudgetsDbAdapter       = new BudgetsDbAdapter(db, new BudgetAmountsDbAdapter(db), recurrenceDbAdapter);
mScheduledActionDbAdapter = new ScheduledActionDbAdapter(db, recurrenceDbAdapter);
}
mBookUID = new File(mDb.getPath()).getName(); 
mExportCacheFilePath = null;
mCacheDir = new File(mContext.getCacheDir(), params.getExportFormat().name());
mCacheDir.mkdir();
purgeDirectory(mCacheDir);
}
public static String sanitizeFilename(String inputName) {
return inputName.replaceAll("[^a-zA-Z0-9-_\\.]", "_");
}
public static String buildExportFilename(ExportFormat format, String bookName) {
return EXPORT_FILENAME_DATE_FORMAT.format(new Date(System.currentTimeMillis()))
+ "_gnucash_export_" + sanitizeFilename(bookName) +
(format == ExportFormat.CSVA ? "_accounts" : "") +
(format == ExportFormat.CSVT ? "_transactions" : "") +
format.getExtension();
}
public static long getExportTime(String filename){
String[] tokens = filename.split("_");
long timeMillis = 0;
if (tokens.length < 2){
return timeMillis;
}
try {
Date date = EXPORT_FILENAME_DATE_FORMAT.parse(tokens[0] + "_" + tokens[1]);
timeMillis = date.getTime();
} catch (ParseException e) {
Log.e("Exporter", "Error parsing time from file name: " + e.getMessage());
Crashlytics.logException(e);
}
return timeMillis;
}
public abstract List<String> generateExport() throws ExporterException;
private void purgeDirectory(File directory){
for (File file : directory.listFiles()) {
if (file.isDirectory())
purgeDirectory(file);
else
file.delete();
}
}
protected String getExportCacheFilePath(){
if (mExportCacheFilePath == null) {
String cachePath = mCacheDir.getAbsolutePath();
if (!cachePath.endsWith("/"))
cachePath += "/";
String bookName = BooksDbAdapter.getInstance().getAttribute(mBookUID, DatabaseSchema.BookEntry.COLUMN_DISPLAY_NAME);
mExportCacheFilePath = cachePath + buildExportFilename(mExportParams.getExportFormat(), bookName);
}
return mExportCacheFilePath;
}
public static String getExportFolderPath(String bookUID){
String path = BASE_FOLDER_PATH + "/" + bookUID + "/exports/";
File file = new File(path);
if (!file.exists())
file.mkdirs();
return path;
}
public String getExportMimeType(){
return "text/plain";
}
public static class ExporterException extends RuntimeException{
public ExporterException(ExportParams params){
super("Failed to generate export with parameters:  " + params.toString());
}
public ExporterException(@NonNull ExportParams params, @NonNull String msg) {
super("Failed to generate export with parameters: " + params.toString() + " - " + msg);
}
public ExporterException(ExportParams params, Throwable throwable){
super("Failed to generate " + params.getExportFormat().toString() +"-"+ throwable.getMessage(),
throwable);
}
}
}
