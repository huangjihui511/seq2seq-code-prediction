package de.codecentric.boot.admin.server.cloud.discovery;
import java.util.HashMap;
import java.util.Map;
import org.junit.Test;
import org.springframework.cloud.client.DefaultServiceInstance;
import org.springframework.cloud.client.ServiceInstance;
import de.codecentric.boot.admin.server.domain.values.Registration;
import static org.assertj.core.api.Assertions.assertThat;
public class DefaultServiceInstanceConverterTest {
@Test
public void test_convert_with_defaults() {
ServiceInstance service = new DefaultServiceInstance("test-1", "test", "localhost", 80, false);
Registration registration = new DefaultServiceInstanceConverter().convert(service);
assertThat(registration.getName()).isEqualTo("test");
assertThat(registration.getServiceUrl()).isEqualTo("http:
assertThat(registration.getManagementUrl()).isEqualTo("http:
assertThat(registration.getHealthUrl()).isEqualTo("http:
}
@Test
public void test_convert_with_custom_defaults() {
DefaultServiceInstanceConverter converter = new DefaultServiceInstanceConverter();
converter.setHealthEndpointPath("ping");
converter.setManagementContextPath("mgmt");
ServiceInstance service = new DefaultServiceInstance("test-1", "test", "localhost", 80, false);
Registration registration = converter.convert(service);
assertThat(registration.getName()).isEqualTo("test");
assertThat(registration.getServiceUrl()).isEqualTo("http:
assertThat(registration.getManagementUrl()).isEqualTo("http:
assertThat(registration.getHealthUrl()).isEqualTo("http:
}
@Test
public void test_convert_with_metadata() {
ServiceInstance service = new DefaultServiceInstance("test-1", "test", "localhost", 80, false);
Map<String, String> metadata = new HashMap<>();
metadata.put("health.path", "ping");
metadata.put("management.context-path", "mgmt");
metadata.put("management.port", "1234");
metadata.put("management.address", "127.0.0.1");
service.getMetadata().putAll(metadata);
Registration registration = new DefaultServiceInstanceConverter().convert(service);
assertThat(registration.getName()).isEqualTo("test");
assertThat(registration.getServiceUrl()).isEqualTo("http:
assertThat(registration.getManagementUrl()).isEqualTo("http:
assertThat(registration.getHealthUrl()).isEqualTo("http:
assertThat(registration.getMetadata()).isEqualTo(metadata);
}
}
