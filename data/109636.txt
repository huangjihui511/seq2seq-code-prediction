package com.google.inject.internal;
import static com.google.common.base.Preconditions.checkNotNull;
import com.google.inject.Binder;
import com.google.inject.Key;
import com.google.inject.Scope;
import com.google.inject.spi.Element;
import com.google.inject.spi.InstanceBinding;
import java.lang.annotation.Annotation;
import java.util.List;
public abstract class AbstractBindingBuilder<T> {
public static final String IMPLEMENTATION_ALREADY_SET = "Implementation is set more than once.";
public static final String SINGLE_INSTANCE_AND_SCOPE =
"Setting the scope is not permitted when binding to a single instance.";
public static final String SCOPE_ALREADY_SET = "Scope is set more than once.";
public static final String BINDING_TO_NULL =
"Binding to null instances is not allowed. "
+ "Use toProvider(Providers.of(null)) if this is your intended behaviour.";
public static final String CONSTANT_VALUE_ALREADY_SET = "Constant value is set more than once.";
public static final String ANNOTATION_ALREADY_SPECIFIED =
"More than one annotation is specified for this binding.";
protected static final Key<?> NULL_KEY = Key.get(Void.class);
protected List<Element> elements;
protected int position;
protected final Binder binder;
private BindingImpl<T> binding;
public AbstractBindingBuilder(Binder binder, List<Element> elements, Object source, Key<T> key) {
this.binder = binder;
this.elements = elements;
this.position = elements.size();
this.binding = new UntargettedBindingImpl<>(source, key, Scoping.UNSCOPED);
elements.add(position, this.binding);
}
protected BindingImpl<T> getBinding() {
return binding;
}
protected BindingImpl<T> setBinding(BindingImpl<T> binding) {
this.binding = binding;
elements.set(position, binding);
return binding;
}
protected BindingImpl<T> annotatedWithInternal(Class<? extends Annotation> annotationType) {
checkNotNull(annotationType, "annotationType");
checkNotAnnotated();
return setBinding(
binding.withKey(Key.get(this.binding.getKey().getTypeLiteral(), annotationType)));
}
protected BindingImpl<T> annotatedWithInternal(Annotation annotation) {
checkNotNull(annotation, "annotation");
checkNotAnnotated();
return setBinding(binding.withKey(Key.get(this.binding.getKey().getTypeLiteral(), annotation)));
}
public void in(final Class<? extends Annotation> scopeAnnotation) {
checkNotNull(scopeAnnotation, "scopeAnnotation");
checkNotScoped();
setBinding(getBinding().withScoping(Scoping.forAnnotation(scopeAnnotation)));
}
public void in(final Scope scope) {
checkNotNull(scope, "scope");
checkNotScoped();
setBinding(getBinding().withScoping(Scoping.forInstance(scope)));
}
public void asEagerSingleton() {
checkNotScoped();
setBinding(getBinding().withScoping(Scoping.EAGER_SINGLETON));
}
protected boolean keyTypeIsSet() {
return !Void.class.equals(binding.getKey().getTypeLiteral().getType());
}
protected void checkNotTargetted() {
if (!(binding instanceof UntargettedBindingImpl)) {
binder.addError(IMPLEMENTATION_ALREADY_SET);
}
}
protected void checkNotAnnotated() {
if (binding.getKey().getAnnotationType() != null) {
binder.addError(ANNOTATION_ALREADY_SPECIFIED);
}
}
protected void checkNotScoped() {
if (binding instanceof InstanceBinding) {
binder.addError(SINGLE_INSTANCE_AND_SCOPE);
return;
}
if (binding.getScoping().isExplicitlyScoped()) {
binder.addError(SCOPE_ALREADY_SET);
}
}
}
