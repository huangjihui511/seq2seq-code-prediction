package com.github.benmanes.caffeine.cache;
import static java.util.Objects.requireNonNull;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import java.util.concurrent.Executor;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
@FunctionalInterface
@SuppressWarnings({"PMD.SignatureDeclareThrowsException", "FunctionalInterfaceMethodChanged"})
public interface CacheLoader<K, V> extends AsyncCacheLoader<K, V> {
@Nullable
V load(@NonNull K key) throws Exception;
@NonNull
default Map<@NonNull K, @NonNull V> loadAll(
@NonNull Iterable<? extends @NonNull K> keys) throws Exception {
throw new UnsupportedOperationException();
}
@Override @NonNull
default CompletableFuture<V> asyncLoad(@NonNull K key, @NonNull Executor executor) {
requireNonNull(key);
requireNonNull(executor);
return CompletableFuture.supplyAsync(() -> {
try {
return load(key);
} catch (RuntimeException e) {
throw e;
} catch (Exception e) {
throw new CompletionException(e);
}
}, executor);
}
@Override @NonNull
default CompletableFuture<Map<@NonNull K, @NonNull V>> asyncLoadAll(
@NonNull Iterable<? extends K> keys, @NonNull Executor executor) {
requireNonNull(keys);
requireNonNull(executor);
return CompletableFuture.supplyAsync(() -> {
try {
return loadAll(keys);
} catch (RuntimeException e) {
throw e;
} catch (Exception e) {
throw new CompletionException(e);
}
}, executor);
}
@Nullable
default V reload(@NonNull K key, @NonNull V oldValue) throws Exception {
return load(key);
}
@Override @NonNull
default CompletableFuture<V> asyncReload(
@NonNull K key, @NonNull V oldValue, @NonNull Executor executor) {
requireNonNull(key);
requireNonNull(executor);
return CompletableFuture.supplyAsync(() -> {
try {
return reload(key, oldValue);
} catch (RuntimeException e) {
throw e;
} catch (Exception e) {
throw new CompletionException(e);
}
}, executor);
}
}
