package com.oath.cyclops.internal.react.stream.traits.future.operators;
import static cyclops.data.tuple.Tuple.tuple;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;
import cyclops.futurestream.FutureStream;
import cyclops.data.tuple.Tuple3;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;
public class LazyFutureStreamUtils {
public static <T, X extends Throwable> Tuple3<CompletableFuture<Subscription>, Runnable, CompletableFuture<Boolean>> forEachX(
final FutureStream<T> stream, final long x, final Consumer<? super T> consumerElement) {
final CompletableFuture<Subscription> subscription = new CompletableFuture<>();
final CompletableFuture<Boolean> streamCompleted = new CompletableFuture<>();
return tuple(subscription, () -> {
stream.subscribe(new Subscriber<T>() {
@Override
public void onSubscribe(final Subscription s) {
Objects.requireNonNull(s);
if(x!=0)
s.request(x);
subscription.complete(s);
}
@Override
public void onNext(final T t) {
consumerElement.accept(t);
}
@Override
public void onError(final Throwable t) {
}
@Override
public void onComplete() {
streamCompleted.complete(true);
}
});
} , streamCompleted);
}
public static <T, X extends Throwable> Tuple3<CompletableFuture<Subscription>, Runnable, CompletableFuture<Boolean>> forEachXWithError(
final FutureStream<T> stream, final long x, final Consumer<? super T> consumerElement,
final Consumer<? super Throwable> consumerError) {
final CompletableFuture<Subscription> subscription = new CompletableFuture<>();
final CompletableFuture<Boolean> streamCompleted = new CompletableFuture<>();
return tuple(subscription, () -> {
stream.subscribe(new Subscriber<T>() {
@Override
public void onSubscribe(final Subscription s) {
Objects.requireNonNull(s);
if(x!=0)
s.request(x);
subscription.complete(s);
}
@Override
public void onNext(final T t) {
consumerElement.accept(t);
}
@Override
public void onError(final Throwable t) {
consumerError.accept(t);
}
@Override
public void onComplete() {
streamCompleted.complete(true);
}
});
} , streamCompleted);
}
public static <T, X extends Throwable> Tuple3<CompletableFuture<Subscription>, Runnable, CompletableFuture<Boolean>> forEachXEvents(
final FutureStream<T> stream, final long x, final Consumer<? super T> consumerElement,
final Consumer<? super Throwable> consumerError, final Runnable onComplete) {
final CompletableFuture<Subscription> subscription = new CompletableFuture<>();
final CompletableFuture<Boolean> streamCompleted = new CompletableFuture<>();
return tuple(subscription, () -> {
stream.subscribe(new Subscriber<T>() {
@Override
public void onSubscribe(final Subscription s) {
Objects.requireNonNull(s);
if(x!=0)
s.request(x);
subscription.complete(s);
}
@Override
public void onNext(final T t) {
consumerElement.accept(t);
}
@Override
public void onError(final Throwable t) {
consumerError.accept(t);
}
@Override
public void onComplete() {
streamCompleted.complete(true);
onComplete.run();
}
});
} , streamCompleted);
}
public static <T, X extends Throwable> Tuple3<CompletableFuture<Subscription>, Runnable, CompletableFuture<Boolean>> forEachWithError(
final FutureStream<T> stream, final Consumer<? super T> consumerElement, final Consumer<? super Throwable> consumerError) {
final CompletableFuture<Subscription> subscription = new CompletableFuture<>();
final CompletableFuture<Boolean> streamCompleted = new CompletableFuture<>();
return tuple(subscription, () -> {
stream.subscribe(new Subscriber<T>() {
@Override
public void onSubscribe(final Subscription s) {
Objects.requireNonNull(s);
subscription.complete(s);
s.request(Long.MAX_VALUE);
}
@Override
public void onNext(final T t) {
consumerElement.accept(t);
}
@Override
public void onError(final Throwable t) {
consumerError.accept(t);
}
@Override
public void onComplete() {
streamCompleted.complete(true);
}
});
} , streamCompleted);
}
public static <T, X extends Throwable> Tuple3<CompletableFuture<Subscription>, Runnable, CompletableFuture<Boolean>> forEachEvent(
final FutureStream<T> stream, final Consumer<? super T> consumerElement, final Consumer<? super Throwable> consumerError,
final Runnable onComplete) {
final CompletableFuture<Subscription> subscription = new CompletableFuture<>();
final CompletableFuture<Boolean> streamCompleted = new CompletableFuture<>();
return tuple(subscription, () -> {
stream.subscribe(new Subscriber<T>() {
@Override
public void onSubscribe(final Subscription s) {
Objects.requireNonNull(s);
subscription.complete(s);
s.request(Long.MAX_VALUE);
}
@Override
public void onNext(final T t) {
consumerElement.accept(t);
}
@Override
public void onError(final Throwable t) {
consumerError.accept(t);
}
@Override
public void onComplete() {
streamCompleted.complete(true);
onComplete.run();
}
});
} , streamCompleted);
}
}
