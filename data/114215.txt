package com.datumbox.framework.common.dataobjects;
import java.io.Serializable;
We follow the latter approach. The benefit of this is that we limit the number
of total Data Structures used internally in the framework, making the methods
and utility classes easier to reuse. Moreover the wrapped classes make possible
the conversion between different Data Structures without copying the data and
they provide a number of extra convenience methods. You should note that all
DataStructures store values as Objects. This is done deliberately because
the types of the data that we store is not always known at compile time but
rather on runtime. Moreover keeping everything stored as Objects helps us to
avoid copying the data while converting one collection type to the other. The
framework takes care of any conversion on the fly, so you don't need to worry
about it.
Note that this Abstract class is the parent class for all the common
internalDatastructures of the framework. Below we provide a mapping between the
AbstractDataStructure classes of the framework and the wrapped Java Collection:
AbstractDataStructure Class          Wrapped Java Collection
-------------------          -----------------------
FlatDataList			{@literal List<Object>}
public abstract class AbstractDataStructure<T> implements Serializable {
protected final T internalData;
public AbstractDataStructure(T data) {
this.internalData = data;
}
}
