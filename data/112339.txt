package io.jooby;
import org.apache.commons.io.FilenameUtils;
import javax.annotation.Nonnull;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Path;
public class AttachedFile {
private static final String CONTENT_DISPOSITION = "attachment;filename=\"%s\"";
private static final String FILENAME_STAR = ";filename*=%s''%s";
private static final String CHARSET = "UTF-8";
private final long fileSize;
private final MediaType contentType;
private String fileName;
private String contentDisposition;
private InputStream content;
public AttachedFile(@Nonnull InputStream content, @Nonnull String fileName, long fileSize) {
try {
this.fileName = FilenameUtils.getName(fileName);
this.contentType = MediaType.byFile(this.fileName);
String filenameStar = URLEncoder.encode(this.fileName, CHARSET).replaceAll("\\+", "%20");
if (this.fileName.equals(filenameStar)) {
this.contentDisposition = String.format(CONTENT_DISPOSITION, this.fileName);
} else {
this.contentDisposition = String.format(CONTENT_DISPOSITION, this.fileName) + String
.format(FILENAME_STAR, CHARSET, filenameStar);
}
this.content = content;
this.fileSize = fileSize;
} catch (UnsupportedEncodingException x) {
throw SneakyThrows.propagate(x);
}
}
public AttachedFile(@Nonnull InputStream content, @Nonnull String fileName) {
this(content, fileName, -1);
}
public AttachedFile(@Nonnull Path file, @Nonnull String fileName) throws IOException {
this(new FileInputStream(file.toFile()), fileName, Files.size(file));
}
public AttachedFile(@Nonnull Path file) throws IOException {
this(file, file.getFileName().toString());
}
public long getFileSize() {
return fileSize;
}
public MediaType getContentType() {
return contentType;
}
public String getFileName() {
return fileName;
}
public String getContentDisposition() {
return contentDisposition;
}
public InputStream stream() {
return content;
}
@Override public String toString() {
return fileName;
}
}
