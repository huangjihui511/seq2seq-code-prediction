package it.unimi.dsi.fastutil.io;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.WritableByteChannel;
import it.unimi.dsi.fastutil.bytes.ByteArrays;
public class InspectableFileCachedInputStream extends MeasurableInputStream implements RepositionableStream, WritableByteChannel {
public static final boolean DEBUG = false;
public static final int DEFAULT_BUFFER_SIZE = 64 * 1024;
public final byte[] buffer;
public int inspectable;
private final File overflowFile;
private final RandomAccessFile randomAccessFile;
private final FileChannel fileChannel;
private long position;
private long mark;
private long writePosition;
public InspectableFileCachedInputStream(final int bufferSize, final File overflowFile) throws IOException {
if (bufferSize <= 0) throw new IllegalArgumentException("Illegal buffer size " + bufferSize);
if (overflowFile != null) this.overflowFile = overflowFile;
else (this.overflowFile = File.createTempFile(getClass().getSimpleName(), "overflow")).deleteOnExit();
buffer = new byte[bufferSize];
randomAccessFile = new RandomAccessFile(this.overflowFile, "rw");
fileChannel = randomAccessFile.getChannel();
mark = -1;
}
public InspectableFileCachedInputStream(final int bufferSize) throws IOException {
this(bufferSize, null);
}
public InspectableFileCachedInputStream() throws IOException {
this(DEFAULT_BUFFER_SIZE);
}
private void ensureOpen() throws IOException {
if (position == -1) throw new IOException("This " + getClass().getSimpleName() + " is closed");
}
public void clear() throws IOException {
if (! fileChannel.isOpen()) throw new IOException("This " + getClass().getSimpleName() + " is closed");
writePosition = position = inspectable = 0;
mark = -1;
}
@Override
public int write(final ByteBuffer byteBuffer) throws IOException {
ensureOpen();
final int remaining = byteBuffer.remaining();
if (inspectable < buffer.length) {
final int toBuffer = Math.min(buffer.length - inspectable, remaining);
byteBuffer.get(buffer, inspectable, toBuffer);
inspectable += toBuffer;
}
if (byteBuffer.hasRemaining()) {
fileChannel.position(writePosition);
writePosition += fileChannel.write(byteBuffer);
}
return remaining;
}
public void truncate(final long size) throws FileNotFoundException, IOException {
fileChannel.truncate(Math.max(size, writePosition));
}
@Override
public void close() {
position = -1;
}
public void reopen() throws IOException {
if (! fileChannel.isOpen()) throw new IOException("This " + getClass().getSimpleName() + " is closed");
position = 0;
}
public void dispose() throws IOException {
position = -1;
randomAccessFile.close();
overflowFile.delete();
}
@SuppressWarnings("deprecation")
@Override
protected void finalize() throws Throwable {
try {
dispose();
}
finally {
super.finalize();
}
}
@Override
public int available() throws IOException {
ensureOpen();
return (int)Math.min(Integer.MAX_VALUE, length() - position);
}
@Override
public int read(final byte[] b, int offset, int length) throws IOException {
ensureOpen();
if (length == 0) return 0;
if (position == length()) return -1; 
ByteArrays.ensureOffsetLength(b, offset, length);
int read = 0;
if (position < inspectable) {
final int toCopy = Math.min(inspectable - (int)position, length);
System.arraycopy(buffer, (int)position, b, offset, toCopy);
length -= toCopy;
offset += toCopy;
position += toCopy;
read = toCopy;
}
if (length > 0) { 
if (position == length()) return read != 0 ? read : -1; 
fileChannel.position(position - inspectable);
final int toRead = (int)Math.min(length() - position, length);
final int t = randomAccessFile.read(b, offset, toRead);
position += t;
read += t;
}
return read;
}
@Override
public int read(final byte[] b) throws IOException {
return read(b, 0, b.length);
}
@Override
public long skip(final long n) throws IOException {
ensureOpen();
final long toSkip = Math.min(n, length() - position);
position += toSkip;
return toSkip;
}
@Override
public int read() throws IOException {
ensureOpen();
if (position == length()) return -1; 
if (position < inspectable) return buffer[(int)position++] & 0xFF;
fileChannel.position(position - inspectable);
position++;
return randomAccessFile.read();
}
@Override
public long length() throws IOException {
ensureOpen();
return inspectable + writePosition;
}
@Override
public long position() throws IOException {
ensureOpen();
return position;
}
@Override
public void position(final long position) throws IOException {
this.position = Math.min(position, length());
}
@Override
public boolean isOpen() {
return position != -1;
}
@Override
public void mark(final int readlimit) {
mark = position;
}
@Override
public void reset() throws IOException {
ensureOpen();
if (mark == -1) throw new IOException("Mark has not been set");
position(mark);
}
@Override
public boolean markSupported() {
return true;
}
}
