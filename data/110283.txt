package de.codecentric.boot.admin.client.config;
import org.junit.Test;
import org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration;
import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigurations;
import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;
import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;
import org.springframework.boot.test.context.runner.WebApplicationContextRunner;
import de.codecentric.boot.admin.client.registration.ApplicationFactory;
import de.codecentric.boot.admin.client.registration.CloudFoundryApplicationFactory;
import de.codecentric.boot.admin.client.registration.DefaultApplicationFactory;
import de.codecentric.boot.admin.client.registration.metadata.CloudFoundryMetadataContributor;
import static org.assertj.core.api.Assertions.assertThat;
public class SpringBootAdminClientCloudFoundryAutoConfigurationTest {
private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner().withConfiguration(
AutoConfigurations.of(EndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class,
WebMvcAutoConfiguration.class, DispatcherServletAutoConfiguration.class,
RestTemplateAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class,
SpringBootAdminClientCloudFoundryAutoConfiguration.class));
@Test
public void non_cloud_platform() {
this.contextRunner.withPropertyValues("spring.boot.admin.client.url:http:
assertThat(context).doesNotHaveBean(CloudFoundryMetadataContributor.class);
assertThat(context).getBean(ApplicationFactory.class).isInstanceOf(DefaultApplicationFactory.class);
});
}
@Test
public void cloudfoundry() {
this.contextRunner.withPropertyValues("spring.boot.admin.client.url:http:
.withPropertyValues("VCAP_APPLICATION:{}").run((context) -> {
assertThat(context).hasSingleBean(CloudFoundryMetadataContributor.class);
assertThat(context).getBean(ApplicationFactory.class)
.isInstanceOf(CloudFoundryApplicationFactory.class);
});
}
@Test
public void cloudfoundry_sba_disabled() {
this.contextRunner.withPropertyValues("VCAP_APPLICATION:{}").run((context) -> {
assertThat(context).doesNotHaveBean(CloudFoundryMetadataContributor.class);
assertThat(context).doesNotHaveBean(ApplicationFactory.class);
});
}
}
