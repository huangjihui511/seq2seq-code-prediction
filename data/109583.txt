package org.wltea.analyzer.core;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.wltea.analyzer.dic.Dictionary;
import org.wltea.analyzer.dic.Hit;
class CN_QuantifierSegmenter implements ISegmenter{
static final String SEGMENTER_NAME = "QUAN_SEGMENTER";
private static Set<Character> ChnNumberChars = new HashSet<Character>();
static{
char[] ca = Chn_Num.toCharArray();
for(char nChar : ca){
ChnNumberChars.add(nChar);
}
}
private int nStart;
private int nEnd;
private List<Hit> countHits;
CN_QuantifierSegmenter(){
nStart = -1;
nEnd = -1;
this.countHits  = new LinkedList<Hit>();
}
public void analyze(AnalyzeContext context) {
this.processCNumber(context);
this.processCount(context);
if(this.nStart == -1 && this.nEnd == -1 && countHits.isEmpty()){
context.unlockBuffer(SEGMENTER_NAME);
}else{
context.lockBuffer(SEGMENTER_NAME);
}
}
public void reset() {
nStart = -1;
nEnd = -1;
countHits.clear();
}
private void processCNumber(AnalyzeContext context){
if(CharacterUtil.CHAR_CHINESE == context.getCurrentCharType()
&& ChnNumberChars.contains(context.getCurrentChar())){
nStart = context.getCursor();
nEnd = context.getCursor();
}
if(CharacterUtil.CHAR_CHINESE == context.getCurrentCharType()
&& ChnNumberChars.contains(context.getCurrentChar())){
nEnd = context.getCursor();
}else{
this.outputNumLexeme(context);
nStart = -1;
nEnd = -1;
}
}
if(context.isBufferConsumed() && (nStart != -1 && nEnd != -1)){
outputNumLexeme(context);
nStart = -1;
nEnd = -1;
}
}
private void processCount(AnalyzeContext context){
if(!this.needCountScan(context)){
return;
}
if(CharacterUtil.CHAR_CHINESE == context.getCurrentCharType()){
if(!this.countHits.isEmpty()){
Hit[] tmpArray = this.countHits.toArray(new Hit[this.countHits.size()]);
for(Hit hit : tmpArray){
hit = Dictionary.getSingleton().matchWithHit(context.getSegmentBuff(), context.getCursor() , hit);
if(hit.isMatch()){
Lexeme newLexeme = new Lexeme(context.getBufferOffset() , hit.getBegin() , context.getCursor() - hit.getBegin() + 1 , Lexeme.TYPE_COUNT);
context.addLexeme(newLexeme);
this.countHits.remove(hit);
}
}else if(hit.isUnmatch()){
this.countHits.remove(hit);
}
}
}
Hit singleCharHit = Dictionary.getSingleton().matchInQuantifierDict(context.getSegmentBuff(), context.getCursor(), 1);
Lexeme newLexeme = new Lexeme(context.getBufferOffset() , context.getCursor() , 1 , Lexeme.TYPE_COUNT);
context.addLexeme(newLexeme);
if(singleCharHit.isPrefix()){
this.countHits.add(singleCharHit);
}
this.countHits.add(singleCharHit);
}
}else{
this.countHits.clear();
}
if(context.isBufferConsumed()){
this.countHits.clear();
}
}
private boolean needCountScan(AnalyzeContext context){
if((nStart != -1 && nEnd != -1 ) || !countHits.isEmpty()){
return true;
}else{
if(!context.getOrgLexemes().isEmpty()){
Lexeme l = context.getOrgLexemes().peekLast();
if((Lexeme.TYPE_CNUM == l.getLexemeType() || Lexeme.TYPE_ARABIC == l.getLexemeType())
&& (l.getBegin() + l.getLength() == context.getCursor())){
return true;
}
}
}
return false;
}
private void outputNumLexeme(AnalyzeContext context){
if(nStart > -1 && nEnd > -1){
Lexeme newLexeme = new Lexeme(context.getBufferOffset() , nStart , nEnd - nStart + 1 , Lexeme.TYPE_CNUM);
context.addLexeme(newLexeme);
}
}
}
