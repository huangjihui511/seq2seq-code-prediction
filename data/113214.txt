package org.pf4j;
import org.pf4j.util.FileUtils;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
public class BasePluginRepository implements PluginRepository {
protected final Path pluginsRoot;
protected FileFilter filter;
protected Comparator<File> comparator;
public BasePluginRepository(Path pluginsRoot) {
this(pluginsRoot, null);
}
public BasePluginRepository(Path pluginsRoot, FileFilter filter) {
this.pluginsRoot = pluginsRoot;
this.filter = filter;
this.comparator = (o1, o2) -> (int) (o2.lastModified() - o1.lastModified());
}
public void setFilter(FileFilter filter) {
this.filter = filter;
}
public void setComparator(Comparator<File> comparator) {
this.comparator = comparator;
}
@Override
public List<Path> getPluginPaths() {
File[] files = pluginsRoot.toFile().listFiles(filter);
if ((files == null) || files.length == 0) {
return Collections.emptyList();
}
if (comparator != null) {
Arrays.sort(files, comparator);
}
List<Path> paths = new ArrayList<>(files.length);
for (File file : files) {
paths.add(file.toPath());
}
return paths;
}
@Override
public boolean deletePluginPath(Path pluginPath) {
if (!filter.accept(pluginPath.toFile())) {
return false;
}
try {
FileUtils.delete(pluginPath);
return true;
} catch (NoSuchFileException e) {
return false; 
} catch (IOException e) {
throw new PluginRuntimeException(e);
}
}
}
