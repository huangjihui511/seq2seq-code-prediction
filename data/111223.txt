package com.github.benmanes.caffeine.cache;
import static com.github.benmanes.caffeine.cache.BoundedLocalCache.MAXIMUM_EXPIRY;
import static java.util.Objects.requireNonNull;
import java.io.Serializable;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import org.checkerframework.checker.nullness.qual.Nullable;
final class Async {
static final long ASYNC_EXPIRY = (Long.MAX_VALUE >> 1) + (Long.MAX_VALUE >> 2); 
private Async() {}
static boolean isReady(@Nullable CompletableFuture<?> future) {
return (future != null) && future.isDone()
&& !future.isCompletedExceptionally()
&& (future.join() != null);
}
@SuppressWarnings("NullAway")
static @Nullable <V> V getIfReady(@Nullable CompletableFuture<V> future) {
return isReady(future) ? future.join() : null;
}
static @Nullable <V> V getWhenSuccessful(@Nullable CompletableFuture<V> future) {
try {
return (future == null) ? null : future.get();
} catch (InterruptedException e) {
Thread.currentThread().interrupt();
return null;
} catch (ExecutionException e) {
return null;
}
}
static final class AsyncRemovalListener<K, V>
implements RemovalListener<K, CompletableFuture<V>>, Serializable {
private static final long serialVersionUID = 1L;
final RemovalListener<K, V> delegate;
final Executor executor;
AsyncRemovalListener(RemovalListener<K, V> delegate, Executor executor) {
this.delegate = requireNonNull(delegate);
this.executor = requireNonNull(executor);
}
@Override
@SuppressWarnings("FutureReturnValueIgnored")
public void onRemoval(@Nullable K key,
@Nullable CompletableFuture<V> future, RemovalCause cause) {
if (future != null) {
future.thenAcceptAsync(value -> delegate.onRemoval(key, value, cause), executor);
}
}
Object writeReplace() {
return delegate;
}
}
static final class AsyncWeigher<K, V> implements Weigher<K, CompletableFuture<V>>, Serializable {
private static final long serialVersionUID = 1L;
final Weigher<K, V> delegate;
AsyncWeigher(Weigher<K, V> delegate) {
this.delegate = requireNonNull(delegate);
}
@Override
public int weigh(K key, CompletableFuture<V> future) {
return isReady(future) ? delegate.weigh(key, future.join()) : 0;
}
Object writeReplace() {
return delegate;
}
}
static final class AsyncExpiry<K, V> implements Expiry<K, CompletableFuture<V>>, Serializable {
private static final long serialVersionUID = 1L;
final Expiry<K, V> delegate;
AsyncExpiry(Expiry<K, V> delegate) {
this.delegate = requireNonNull(delegate);
}
@Override
public long expireAfterCreate(K key, CompletableFuture<V> future, long currentTime) {
if (isReady(future)) {
long duration = delegate.expireAfterCreate(key, future.join(), currentTime);
return Math.min(duration, MAXIMUM_EXPIRY);
}
return ASYNC_EXPIRY;
}
@Override
public long expireAfterUpdate(K key, CompletableFuture<V> future,
long currentTime, long currentDuration) {
if (isReady(future)) {
long duration = (currentDuration > MAXIMUM_EXPIRY)
? delegate.expireAfterCreate(key, future.join(), currentTime)
: delegate.expireAfterUpdate(key, future.join(), currentTime, currentDuration);
return Math.min(duration, MAXIMUM_EXPIRY);
}
return ASYNC_EXPIRY;
}
@Override
public long expireAfterRead(K key, CompletableFuture<V> future,
long currentTime, long currentDuration) {
if (isReady(future)) {
long duration = delegate.expireAfterRead(key, future.join(), currentTime, currentDuration);
return Math.min(duration, MAXIMUM_EXPIRY);
}
return ASYNC_EXPIRY;
}
Object writeReplace() {
return delegate;
}
}
}
