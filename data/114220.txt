package com.datumbox.framework.common.dataobjects;
import com.datumbox.framework.common.interfaces.Copyable;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
public class AssociativeArray2D extends AbstractDataStructureMap<Map<Object, AssociativeArray>> implements Copyable<AssociativeArray2D> {
private static final long serialVersionUID = 1L;
public AssociativeArray2D() {
super(new LinkedHashMap<>());
}
public AssociativeArray2D(Map<Object, AssociativeArray> internalData) {
super(internalData);
}
@Override
public AssociativeArray2D copy() {
AssociativeArray2D aArray2D = new AssociativeArray2D();
for(Map.Entry<Object, AssociativeArray> entry: internalData.entrySet()) {
aArray2D.internalData.put(entry.getKey(), entry.getValue().copy());
}
return aArray2D;
}
public final AssociativeArray remove(Object key) {
return internalData.remove(key);
}
public final AssociativeArray get(Object key) {
return internalData.get(key);
}
public final AssociativeArray put(Object key, AssociativeArray value) {
return internalData.put(key, value);
}
public final Set<Map.Entry<Object, AssociativeArray>> entrySet() {
return internalData.entrySet();
}
public final Set<Object> keySet() {
return internalData.keySet();
}
public final Collection<AssociativeArray> values() {
return internalData.values();
}
public final Object get2d(Object key1, Object key2) {
AssociativeArray tmp = internalData.get(key1);
if(tmp == null) {
return null;
}
return tmp.internalData.get(key2);
}
public final Object put2d(Object key1, Object key2, Object value) {
AssociativeArray tmp = internalData.get(key1);
if(tmp == null) {
internalData.put(key1, new AssociativeArray());
}
return internalData.get(key1).internalData.put(key2, value);
}
@Override
public boolean equals(Object o) {
if(o == null) return false;
if ( this == o ) return true;
if ( !(o.getClass().equals(this.getClass())) ) return false;
return internalData.equals(((AssociativeArray2D)o).internalData);
}
@Override
public int hashCode() {
return internalData.hashCode();
}
}
