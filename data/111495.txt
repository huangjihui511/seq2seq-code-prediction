package io.grpc;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Param;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.Setup;
import org.openjdk.jmh.annotations.State;
@State(Scope.Benchmark)
public class CallOptionsBenchmark {
@Param({"1", "2", "4", "8"})
public int customOptionsCount;
private List<CallOptions.Key<String>> customOptions;
private CallOptions allOpts;
private List<CallOptions.Key<String>> shuffledCustomOptions;
@Setup
public void setUp() throws Exception {
customOptions = new ArrayList<>(customOptionsCount);
for (int i = 0; i < customOptionsCount; i++) {
customOptions.add(CallOptions.Key.createWithDefault("name " + i, "defaultvalue"));
}
allOpts = CallOptions.DEFAULT;
for (int i = 0; i < customOptionsCount; i++) {
allOpts = allOpts.withOption(customOptions.get(i), "value");
}
shuffledCustomOptions = new ArrayList<>(customOptions);
Collections.shuffle(shuffledCustomOptions, new Random(1));
}
@Benchmark
@BenchmarkMode(Mode.SampleTime)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
public CallOptions withOption() {
CallOptions opts = CallOptions.DEFAULT;
for (int i = 0; i < customOptions.size(); i++) {
opts = opts.withOption(customOptions.get(i), "value");
}
return opts;
}
@Benchmark
@BenchmarkMode(Mode.SampleTime)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
public CallOptions withOptionDuplicates() {
CallOptions opts = allOpts;
for (int i = 1; i < shuffledCustomOptions.size(); i++) {
opts = opts.withOption(shuffledCustomOptions.get(i), "value2");
}
return opts;
}
}
