package com.pokegoapi.api.inventory;
import POGOProtos.Inventory.EggIncubatorOuterClass;
import POGOProtos.Inventory.EggIncubatorTypeOuterClass.EggIncubatorType;
import POGOProtos.Networking.Requests.Messages.UseItemEggIncubatorMessageOuterClass.UseItemEggIncubatorMessage;
import POGOProtos.Networking.Requests.RequestTypeOuterClass.RequestType;
import POGOProtos.Networking.Responses.UseItemEggIncubatorResponseOuterClass.UseItemEggIncubatorResponse;
import POGOProtos.Settings.Master.Item.EggIncubatorAttributesOuterClass.EggIncubatorAttributes;
import POGOProtos.Settings.Master.ItemSettingsOuterClass.ItemSettings;
import com.google.protobuf.InvalidProtocolBufferException;
import com.pokegoapi.api.PokemonGo;
import com.pokegoapi.api.pokemon.EggPokemon;
import com.pokegoapi.exceptions.request.RequestFailedException;
import com.pokegoapi.main.ServerRequest;
public class EggIncubator {
private final EggIncubatorOuterClass.EggIncubator proto;
private final PokemonGo api;
public EggIncubator(PokemonGo api, EggIncubatorOuterClass.EggIncubator proto) {
this.api = api;
this.proto = proto;
}
public EggIncubatorAttributes getAttributes() {
ItemSettings settings = api.itemTemplates.getItemSettings(proto.getItemId());
if (settings != null) {
return settings.getEggIncubator();
}
return null;
}
public int getUsesRemaining() {
return proto.getUsesRemaining();
}
public UseItemEggIncubatorResponse.Result hatchEgg(EggPokemon egg) throws RequestFailedException {
UseItemEggIncubatorMessage reqMsg = UseItemEggIncubatorMessage.newBuilder()
.setItemId(proto.getId())
.setPokemonId(egg.getId())
.build();
ServerRequest serverRequest = new ServerRequest(RequestType.USE_ITEM_EGG_INCUBATOR, reqMsg);
api.requestHandler.sendServerRequests(serverRequest, true);
UseItemEggIncubatorResponse response;
try {
response = UseItemEggIncubatorResponse.parseFrom(serverRequest.getData());
} catch (InvalidProtocolBufferException e) {
throw new RequestFailedException(e);
}
api.inventories.updateInventories();
return response.getResult();
}
public String getId() {
return proto.getId();
}
public EggIncubatorType getType() {
return proto.getIncubatorType();
}
public double getKmTarget() {
return proto.getTargetKmWalked();
}
public double getKmWalked() {
return getKmStart();
}
public double getKmStart() {
return proto.getStartKmWalked();
}
public double getHatchDistance() {
return getKmTarget() - getKmStart();
}
public double getKmCurrentlyWalked() {
return api.playerProfile.getStats().getKmWalked() - getKmStart();
}
public double getKmLeftToWalk() {
return getKmTarget() - api.playerProfile.getStats().getKmWalked();
}
public boolean isInUse() {
return getKmTarget() > api.playerProfile.getStats().getKmWalked();
}
@Override
public boolean equals(Object obj) {
return obj instanceof EggIncubator && ((EggIncubator) obj).getId().equals(getId());
}
}
