package org.springframework.data.mongodb.config;
import static org.assertj.core.api.Assertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Collection;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfSystemProperty;
import com.mongodb.ServerAddress;
public class ServerAddressPropertyEditorUnitTests {
ServerAddressPropertyEditor editor;
@BeforeEach
public void setUp() {
editor = new ServerAddressPropertyEditor();
}
@Test 
public void rejectsAddressConfigWithoutASingleParsableAndResolvableServerAddress() {
String unknownHost1 = "gugu.nonexistant.example.org";
String unknownHost2 = "gaga.nonexistant.example.org";
assertUnresolveableHostnames(unknownHost1, unknownHost2);
assertThatExceptionOfType(IllegalArgumentException.class)
.isThrownBy(() -> editor.setAsText(unknownHost1 + "," + unknownHost2));
}
@Test 
@EnabledIfSystemProperty(named = "user.name", matches = "jenkins")
public void skipsUnparsableAddressIfAtLeastOneIsParsable() throws UnknownHostException {
editor.setAsText("foo, localhost");
assertSingleAddressOfLocalhost(editor.getValue());
}
@Test 
public void handlesEmptyAddressAsParseError() throws UnknownHostException {
editor.setAsText(", localhost");
assertSingleAddressOfLocalhost(editor.getValue());
}
@Test 
public void interpretEmptyStringAsNull() {
editor.setAsText("");
assertThat(editor.getValue()).isNull();
}
@Test 
public void handleIPv6HostaddressLoopbackShort() throws UnknownHostException {
String hostAddress = "::1";
editor.setAsText(hostAddress);
assertSingleAddressWithPort(hostAddress, null, editor.getValue());
}
@Test 
public void handleIPv6HostaddressLoopbackShortWithPort() throws UnknownHostException {
String hostAddress = "::1";
int port = 27017;
editor.setAsText(hostAddress + ":" + port);
assertSingleAddressWithPort(hostAddress, port, editor.getValue());
}
@Test 
public void handleIPv6HostaddressLoopbackLong() throws UnknownHostException {
String hostAddress = "0000:0000:0000:0000:0000:0000:0000:0001";
editor.setAsText(hostAddress);
assertSingleAddressWithPort(hostAddress, null, editor.getValue());
}
@Test 
public void handleIPv6HostaddressLoopbackLongWithBrackets() throws UnknownHostException {
String hostAddress = "[0000:0000:0000:0000:0000:0000:0000:0001]";
editor.setAsText(hostAddress);
assertSingleAddressWithPort(hostAddress, null, editor.getValue());
}
@Test 
public void shouldFailToHandleAmbiguousIPv6HostaddressLongWithoutPortAndWithoutBrackets() {
String hostAddress = "0000:0000:0000:0000:0000:0000:0000:128";
assertThatIllegalArgumentException().isThrownBy(() -> editor.setAsText(hostAddress));
}
@Test 
public void handleIPv6HostaddressExampleAddressWithPort() throws UnknownHostException {
String hostAddress = "0000:0000:0000:0000:0000:0000:0000:0001";
int port = 27017;
editor.setAsText(hostAddress + ":" + port);
assertSingleAddressWithPort(hostAddress, port, editor.getValue());
}
@Test 
public void handleIPv6HostaddressExampleAddressInBracketsWithPort() throws UnknownHostException {
String hostAddress = "[0000:0000:0000:0000:0000:0000:0000:0001]";
int port = 27017;
editor.setAsText(hostAddress + ":" + port);
assertSingleAddressWithPort(hostAddress, port, editor.getValue());
}
private static void assertSingleAddressOfLocalhost(Object result) throws UnknownHostException {
assertSingleAddressWithPort("localhost", null, result);
}
private static void assertSingleAddressWithPort(String hostAddress, Integer port, Object result)
throws UnknownHostException {
assertThat(result).isInstanceOf(ServerAddress[].class);
Collection<ServerAddress> addresses = Arrays.asList((ServerAddress[]) result);
assertThat(addresses).hasSize(1);
if (port == null) {
assertThat(addresses).contains(new ServerAddress(InetAddress.getByName(hostAddress)));
} else {
assertThat(addresses).contains(new ServerAddress(InetAddress.getByName(hostAddress), port));
}
}
private void assertUnresolveableHostnames(String... hostnames) {
for (String hostname : hostnames) {
try {
InetAddress.getByName(hostname).isReachable(1500);
fail("Supposedly unresolveable hostname '" + hostname + "' can be resolved.");
} catch (IOException expected) {
}
}
}
}
