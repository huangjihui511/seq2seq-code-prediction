package org.msgpack.jackson.dataformat;
import com.fasterxml.jackson.core.SerializableString;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
public class MessagePackSerializedString
implements SerializableString
{
private static final Charset UTF8 = Charset.forName("UTF-8");
private final Object value;
public MessagePackSerializedString(Object value)
{
this.value = value;
}
@Override
public String getValue()
{
return value.toString();
}
@Override
public int charLength()
{
return getValue().length();
}
@Override
public char[] asQuotedChars()
{
return getValue().toCharArray();
}
@Override
public byte[] asUnquotedUTF8()
{
return getValue().getBytes(UTF8);
}
@Override
public byte[] asQuotedUTF8()
{
return ("\"" + getValue() + "\"").getBytes(UTF8);
}
@Override
public int appendQuotedUTF8(byte[] bytes, int i)
{
return 0;
}
@Override
public int appendQuoted(char[] chars, int i)
{
return 0;
}
@Override
public int appendUnquotedUTF8(byte[] bytes, int i)
{
return 0;
}
@Override
public int appendUnquoted(char[] chars, int i)
{
return 0;
}
@Override
public int writeQuotedUTF8(OutputStream outputStream)
throws IOException
{
return 0;
}
@Override
public int writeUnquotedUTF8(OutputStream outputStream)
throws IOException
{
return 0;
}
@Override
public int putQuotedUTF8(ByteBuffer byteBuffer)
throws IOException
{
return 0;
}
@Override
public int putUnquotedUTF8(ByteBuffer byteBuffer)
throws IOException
{
return 0;
}
public Object getRawValue()
{
return value;
}
}
