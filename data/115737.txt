package org.springframework.integration.core;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.BeanFactoryAware;
import org.springframework.core.AttributeAccessor;
import org.springframework.integration.context.IntegrationContextUtils;
import org.springframework.integration.support.DefaultErrorMessageStrategy;
import org.springframework.integration.support.ErrorMessageStrategy;
import org.springframework.integration.support.ErrorMessageUtils;
import org.springframework.integration.support.channel.ChannelResolverUtils;
import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.MessagingException;
import org.springframework.messaging.core.DestinationResolver;
import org.springframework.messaging.support.ErrorMessage;
import org.springframework.util.Assert;
public class ErrorMessagePublisher implements BeanFactoryAware {
protected final Log logger = LogFactory.getLog(getClass()); 
protected final MessagingTemplate messagingTemplate = new MessagingTemplate(); 
private DestinationResolver<MessageChannel> channelResolver;
private MessageChannel channel;
private String channelName;
private ErrorMessageStrategy errorMessageStrategy = new DefaultErrorMessageStrategy();
public final void setErrorMessageStrategy(ErrorMessageStrategy errorMessageStrategy) {
Assert.notNull(errorMessageStrategy, "'errorMessageStrategy' must not be null");
this.errorMessageStrategy = errorMessageStrategy;
}
public final void setChannel(MessageChannel channel) {
this.channel = channel;
}
public void setChannelName(String channelName) {
this.channelName = channelName;
}
public ErrorMessageStrategy getErrorMessageStrategy() {
return this.errorMessageStrategy;
}
public MessageChannel getChannel() {
populateChannel();
return this.channel;
}
public final void setSendTimeout(long sendTimeout) {
this.messagingTemplate.setSendTimeout(sendTimeout);
}
public final void setChannelResolver(DestinationResolver<MessageChannel> channelResolver) {
Assert.notNull(channelResolver, "channelResolver must not be null");
this.channelResolver = channelResolver;
}
@Override
public void setBeanFactory(BeanFactory beanFactory) {
Assert.notNull(beanFactory, "beanFactory must not be null");
if (this.channelResolver == null) {
this.channelResolver = ChannelResolverUtils.getChannelResolver(beanFactory);
}
}
protected MessagingTemplate getMessagingTemplate() {
return this.messagingTemplate;
}
@Nullable
protected DestinationResolver<MessageChannel> getChannelResolver() {
return this.channelResolver;
}
public void publish(MessagingException exception) {
publish(null, exception.getFailedMessage(), exception);
}
public void publish(Message<?> failedMessage, Throwable throwable) {
publish(null, failedMessage, throwable);
}
public void publish(Message<?> inputMessage, MessagingException exception) {
publish(inputMessage, exception.getFailedMessage(), exception);
}
public void publish(@Nullable Message<?> inputMessage, Message<?> failedMessage, Throwable throwable) {
publish(throwable, ErrorMessageUtils.getAttributeAccessor(inputMessage, failedMessage));
}
public void publish(Throwable throwable, AttributeAccessor context) {
populateChannel();
Throwable payload = determinePayload(throwable, context);
ErrorMessage errorMessage = this.errorMessageStrategy.buildErrorMessage(payload, context);
if (this.logger.isDebugEnabled() && payload instanceof MessagingException) {
MessagingException exception = (MessagingException) errorMessage.getPayload();
this.logger.debug("Sending ErrorMessage: failedMessage: " + exception.getFailedMessage(), exception);
}
this.messagingTemplate.send(errorMessage);
}
protected Throwable determinePayload(Throwable throwable, AttributeAccessor context) {
Throwable lastThrowable = throwable;
if (lastThrowable == null) {
lastThrowable = payloadWhenNull(context);
}
else if (!(lastThrowable instanceof MessagingException)) {
Message<?> message = (Message<?>) context.getAttribute(ErrorMessageUtils.FAILED_MESSAGE_CONTEXT_KEY);
lastThrowable = message == null
? new MessagingException(lastThrowable.getMessage(), lastThrowable)
: new MessagingException(message, lastThrowable.getMessage(), lastThrowable);
}
return lastThrowable;
}
protected Throwable payloadWhenNull(AttributeAccessor context) {
Message<?> message = (Message<?>) context.getAttribute(ErrorMessageUtils.FAILED_MESSAGE_CONTEXT_KEY);
return message == null
? new MessagingException("No root cause exception available")
: new MessagingException(message, "No root cause exception available");
}
private void populateChannel() {
if (this.messagingTemplate.getDefaultDestination() == null) {
if (this.channel == null) {
String recoveryChannelName = this.channelName;
if (recoveryChannelName == null) {
recoveryChannelName = IntegrationContextUtils.ERROR_CHANNEL_BEAN_NAME;
}
if (this.channelResolver != null) {
this.channel = this.channelResolver.resolveDestination(recoveryChannelName);
}
}
this.messagingTemplate.setDefaultChannel(this.channel);
}
}
}
