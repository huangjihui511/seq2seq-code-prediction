package com.github.benmanes.caffeine;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Constructor;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.State;
@State(Scope.Benchmark)
public class FactoryBenchmark {
private final ReflectionFactory reflectionFactory = new ReflectionFactory();
private final MethodHandleFactory methodHandleFactory = new MethodHandleFactory();
@State(Scope.Thread)
public static class ThreadState {
int i;
}
@Benchmark
public Alpha direct(ThreadState state) {
return new Alpha(state.i++);
}
@Benchmark
public Alpha methodHandle_invoke(ThreadState state) {
return methodHandleFactory.invoke(state.i++);
}
@Benchmark
public Alpha methodHandle_invokeExact(ThreadState state) {
return methodHandleFactory.invokeExact(state.i++);
}
@Benchmark
public Alpha reflection(ThreadState state) {
return reflectionFactory.newInstance(state.i++);
}
static final class MethodHandleFactory {
private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();
private static final MethodType METHOD_TYPE = MethodType.methodType(void.class, int.class);
private final MethodHandle methodHandle;
MethodHandleFactory() {
try {
methodHandle = LOOKUP.findConstructor(Alpha.class, METHOD_TYPE);
} catch (NoSuchMethodException | IllegalAccessException e) {
throw new RuntimeException(e);
}
}
Alpha invoke(int x) {
try {
return (Alpha) methodHandle.invoke(x);
} catch (Throwable e) {
throw new RuntimeException(e);
}
}
Alpha invokeExact(int x) {
try {
return (Alpha) methodHandle.invokeExact(x);
} catch (Throwable e) {
throw new RuntimeException(e);
}
}
}
static final class ReflectionFactory {
private final Constructor<Alpha> constructor;
ReflectionFactory() {
try {
constructor = Alpha.class.getConstructor(int.class);
} catch (NoSuchMethodException | SecurityException e) {
throw new RuntimeException(e);
}
}
Alpha newInstance(int x) {
try {
return constructor.newInstance(x);
} catch (Throwable e) {
throw new RuntimeException(e);
}
}
}
static final class Alpha {
@SuppressWarnings("unused")
private final int x;
public Alpha(int x) {
this.x = x;
}
}
}
