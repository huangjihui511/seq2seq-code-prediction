package com.datumbox.framework.common.dataobjects;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
public class TransposeDataCollection extends AbstractDataStructureMap<Map<Object, FlatDataCollection>> {
private static final long serialVersionUID = 1L;
public TransposeDataCollection() {
super(new LinkedHashMap<>());
}
public TransposeDataCollection(Map<Object, FlatDataCollection> internalData) {
super(internalData);
}
public final FlatDataCollection remove(Object key) {
return internalData.remove(key);
}
public final FlatDataCollection get(Object key) {
return internalData.get(key);
}
public final FlatDataCollection put(Object key, FlatDataCollection value) {
return internalData.put(key, value);
}
public final Set<Map.Entry<Object, FlatDataCollection>> entrySet() {
return internalData.entrySet();
}
public final Set<Object> keySet() {
return internalData.keySet();
}
public final Collection<FlatDataCollection> values() {
return internalData.values();
}
@Override
public boolean equals(Object o) {
if ( this == o ) return true;
if ( !(o instanceof TransposeDataCollection) ) return false;
return internalData.equals(((TransposeDataCollection)o).internalData);
}
@Override
public int hashCode() {
return internalData.hashCode();
}
}
