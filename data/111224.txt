package com.github.benmanes.caffeine.cache;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import org.checkerframework.checker.nullness.qual.NonNull;
@FunctionalInterface
public interface AsyncCacheLoader<K, V> {
@NonNull
CompletableFuture<V> asyncLoad(@NonNull K key, @NonNull Executor executor);
@NonNull
default CompletableFuture<Map<@NonNull K, @NonNull V>> asyncLoadAll(
@NonNull Iterable<? extends @NonNull K> keys, @NonNull Executor executor) {
throw new UnsupportedOperationException();
}
@NonNull
default CompletableFuture<V> asyncReload(
@NonNull K key, @NonNull V oldValue, @NonNull Executor executor) {
return asyncLoad(key, executor);
}
}
