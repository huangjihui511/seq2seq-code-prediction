package net.pms.image;
import java.awt.color.ColorSpace;
import java.awt.image.ColorModel;
import java.io.Serializable;
import java.util.Arrays;
import javax.imageio.ImageIO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.drew.metadata.Metadata;
import net.pms.dlna.DLNAImage;
import net.pms.dlna.DLNAImageInputStream;
import net.pms.dlna.DLNAResource;
import net.pms.dlna.DLNAThumbnail;
import net.pms.dlna.DLNAThumbnailInputStream;
import net.pms.image.ExifInfo.ExifParseInfo;
import net.pms.util.InvalidStateException;
import net.pms.util.ParseException;
@SuppressWarnings("serial")
public abstract class ImageInfo implements Serializable {
private static final Logger LOGGER = LoggerFactory.getLogger(ImageInfo.class);
public static final long SIZE_UNKNOWN = Long.MIN_VALUE;
public static final int UNKNOWN = Integer.MIN_VALUE;
protected final int width;
protected final int height;
protected final ImageFormat format;
protected final long size;
protected final int bitDepth;
protected final int numComponents;
protected final ColorSpace colorSpace;
protected final ColorSpaceType colorSpaceType;
protected final boolean imageIOSupport;
protected transient ParseInfo parsedInfo = null;
protected abstract ParseInfo createParseInfo();
protected abstract void parseMetadata(Metadata metadata) throws ParseException;
public static ImageInfo create(
int width,
int height,
ImageFormat format,
long size,
ColorModel colorModel,
Metadata metadata,
boolean applyExifOrientation,
boolean imageIOSupport
) throws ParseException {
if (format == null && metadata != null) {
format = ImageFormat.toImageFormat(metadata);
if (format == null) {
throw new ParseException("Unable to determine image format from metadata");
}
}
if (format == null) {
throw new IllegalArgumentException("Both format and metadata cannot be null");
}
if (format.isRaw()) {
return new RAWInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
}
switch (format) {
case ICNS:
case IFF:
case PICT:
case PNM:
case RGBE:
case SGI:
case TGA:
case WBMP:
return new GenericImageInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case BMP:
return new BMPInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case CUR:
return new CURInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case DCX:
return new PCXInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case GIF:
return new GIFInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case ICO:
return new ICOInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case JPEG:
return new JPEGInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case PCX:
return new PCXInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case PNG:
return new PNGInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case PSD:
return new PSDInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case TIFF:
return new TIFFInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
case WEBP:
return new WebPInfo(
width, height, format, size, colorModel, metadata,
applyExifOrientation, imageIOSupport
);
default:
throw new IllegalStateException("Format " + format + " is unknown for ImageInfo.create()");
}
}
protected ImageInfo(
int width,
int height,
ImageFormat format,
long size,
ColorModel colorModel,
Metadata metadata,
boolean applyExifOrientation,
boolean imageIOSupport
) throws ParseException {
parsedInfo = createParseInfo();
parseMetadata(metadata);
compareResolution(width, height, parsedInfo);
if (
(width < 1 || height < 1) &&
parsedInfo.width != null && parsedInfo.height != null
) {
width = parsedInfo.width.intValue();
height = parsedInfo.height.intValue();
}
if (
applyExifOrientation &&
parsedInfo instanceof ExifParseInfo &&
((ExifParseInfo) parsedInfo).exifOrientation != null &&
ImagesUtil.isExifAxesSwapNeeded(((ExifParseInfo) parsedInfo).exifOrientation)
) {
this.width = height;
this.height = width;
} else {
this.width = width;
this.height = height;
}
compareFormat(format, parsedInfo);
this.format = format != null ? format : parsedInfo.format;
this.size =
!applyExifOrientation ||
!(parsedInfo instanceof ExifParseInfo) ||
((ExifParseInfo) parsedInfo).exifOrientation == ExifOrientation.TOP_LEFT ?
size :
SIZE_UNKNOWN;
if (colorModel == null ||
this instanceof JPEGInfo && parsedInfo.colorSpaceType == ColorSpaceType.TYPE_CMYK
) {
this.bitDepth = parsedInfo.bitDepth != null ? parsedInfo.bitDepth : UNKNOWN;
this.numComponents = parsedInfo.numComponents != null ? parsedInfo.numComponents : UNKNOWN;
this.colorSpace = null;
this.colorSpaceType = parsedInfo.colorSpaceType;
} else {
int bitDepth = UNKNOWN;
if (colorModel.getNumComponents() > 0) {
try {
bitDepth = ImagesUtil.getBitDepthFromArray(colorModel.getComponentSize());
} catch (InvalidStateException e) {
LOGGER.trace(
"Unexpected bit depth array retrieved from ColorModel: {}",
Arrays.toString(colorModel.getComponentSize())
);
}
}
int numComponents = colorModel.getNumComponents();
ColorSpaceType colorSpaceType = ColorSpaceType.toColorSpaceType(colorModel.getColorSpace().getType());
compareColorModel(bitDepth, numComponents, colorSpaceType, parsedInfo);
this.bitDepth =
bitDepth == UNKNOWN && parsedInfo.bitDepth != null ?
parsedInfo.bitDepth.intValue() :
bitDepth;
this.numComponents =
numComponents == UNKNOWN && parsedInfo.numComponents != null ?
parsedInfo.numComponents.intValue() :
numComponents;
this.colorSpace = colorModel.getColorSpace();
this.colorSpaceType =
colorSpaceType == null && parsedInfo.colorSpaceType != null ?
parsedInfo.colorSpaceType :
colorSpaceType;
}
this.imageIOSupport = imageIOSupport;
}
public static ImageInfo create(
int width,
int height,
ImageFormat format,
long size,
int bitDepth,
int numComponents,
ColorSpace colorSpace,
ColorSpaceType colorSpaceType,
Metadata metadata,
boolean applyExifOrientation,
boolean imageIOSupport
) throws ParseException {
if (format == null && metadata != null) {
format = ImageFormat.toImageFormat(metadata);
if (format == null) {
throw new ParseException("Unable to determine image format from metadata");
}
}
if (format == null) {
throw new IllegalArgumentException("Both format and metadata cannot be null");
}
if (format.isRaw()) {
return new RAWInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
}
switch (format) {
case ICNS:
case IFF:
case PICT:
case PNM:
case RGBE:
case SGI:
case TGA:
case WBMP:
return new GenericImageInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case BMP:
return new BMPInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case CUR:
return new CURInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case DCX:
return new PCXInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case GIF:
return new GIFInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case ICO:
return new ICOInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case JPEG:
return new JPEGInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case PCX:
return new PCXInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case PNG:
return new PNGInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case PSD:
return new PSDInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case TIFF:
return new TIFFInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
case WEBP:
return new WebPInfo(
width, height, format, size, bitDepth, numComponents,
colorSpace, colorSpaceType, metadata, applyExifOrientation,
imageIOSupport
);
default:
throw new IllegalStateException("Format " + format + " is unknown for this ImageInfo.create()");
}
}
protected ImageInfo(
int width,
int height,
ImageFormat format,
long size,
int bitDepth,
int numComponents,
ColorSpace colorSpace,
ColorSpaceType colorSpaceType,
Metadata metadata,
boolean applyExifOrientation,
boolean imageIOSupport
) throws ParseException {
parsedInfo = createParseInfo();
parseMetadata(metadata);
compareResolution(width, height, parsedInfo);
if (
(width < 1 || height < 1) &&
parsedInfo.width != null && parsedInfo.height != null
) {
width = parsedInfo.width.intValue();
height = parsedInfo.height.intValue();
}
if (
applyExifOrientation &&
parsedInfo instanceof ExifParseInfo &&
((ExifParseInfo) parsedInfo).exifOrientation != null &&
ImagesUtil.isExifAxesSwapNeeded(((ExifParseInfo) parsedInfo).exifOrientation)
) {
this.width = height;
this.height = width;
} else {
this.width = width;
this.height = height;
}
compareFormat(format, parsedInfo);
this.format = format != null ? format : parsedInfo.format;
this.size =
!applyExifOrientation ||
!(parsedInfo instanceof ExifParseInfo) ||
((ExifParseInfo) parsedInfo).exifOrientation == ExifOrientation.TOP_LEFT ?
size :
SIZE_UNKNOWN;
if (this instanceof JPEGInfo && parsedInfo.colorSpaceType == ColorSpaceType.TYPE_CMYK) {
this.bitDepth = parsedInfo.bitDepth != null ? parsedInfo.bitDepth.intValue() : bitDepth;
this.numComponents = parsedInfo.numComponents != null ? parsedInfo.numComponents.intValue() : numComponents;
this.colorSpace = null;
this.colorSpaceType = parsedInfo.colorSpaceType;
} else {
colorSpaceType = colorSpace != null ? ColorSpaceType.toColorSpaceType(colorSpace.getType()) : colorSpaceType;
compareColorModel(bitDepth, numComponents, colorSpaceType, parsedInfo);
this.bitDepth =
bitDepth == UNKNOWN && parsedInfo.bitDepth != null ?
parsedInfo.bitDepth.intValue() :
bitDepth;
this.numComponents =
numComponents == UNKNOWN && parsedInfo.numComponents != null ?
parsedInfo.numComponents.intValue() :
numComponents;
this.colorSpace = colorSpace;
this.colorSpaceType =
colorSpaceType == null && parsedInfo.colorSpaceType != null ?
parsedInfo.colorSpaceType :
colorSpaceType;
}
this.imageIOSupport = imageIOSupport;
}
public static ImageInfo create(
Metadata metadata,
ImageFormat format,
long size,
boolean applyExifOrientation,
boolean throwOnParseFailure
) throws ParseException {
return create(UNKNOWN, UNKNOWN, metadata, format, size, applyExifOrientation, throwOnParseFailure);
}
public static ImageInfo create(
int width,
int height,
Metadata metadata,
ImageFormat format,
long size,
boolean applyExifOrientation,
boolean throwOnParseFailure
) throws ParseException {
if (format == null && metadata != null) {
format = ImageFormat.toImageFormat(metadata);
if (format == null) {
throw new ParseException("Unable to determine image format from metadata");
}
}
if (format == null) {
throw new IllegalArgumentException("Both format and metadata cannot be null");
}
if (format.isRaw()) {
return new RAWInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
}
switch (format) {
case ICNS:
case IFF:
case PICT:
case PNM:
case RGBE:
case SGI:
case TGA:
case WBMP:
return new GenericImageInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case BMP:
return new BMPInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case CUR:
return new CURInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case DCX:
return new PCXInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case GIF:
return new GIFInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case ICO:
return new ICOInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case JPEG:
return new JPEGInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case PCX:
return new PCXInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case PNG:
return new PNGInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case PSD:
return new PSDInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case TIFF:
return new TIFFInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
case WEBP:
return new WebPInfo(
width, height, metadata, format, size,
applyExifOrientation, throwOnParseFailure
);
default:
throw new IllegalStateException("Format " + format + " is unknown for ImageInfo.create()");
}
}
protected ImageInfo(
int width,
int height,
Metadata metadata,
ImageFormat format,
long size,
boolean applyExifOrientation,
boolean throwOnParseFailure
) throws ParseException {
parsedInfo = createParseInfo();
parseMetadata(metadata);
compareResolution(width, height, parsedInfo);
if (
(width < 1 || height < 1) &&
parsedInfo.width != null && parsedInfo.height != null
) {
width = parsedInfo.width.intValue();
height = parsedInfo.height.intValue();
}
if (throwOnParseFailure && (width < 0 || height < 0)) {
throw new ParseException("Failed to parse image resolution from metadata");
}
if (
applyExifOrientation &&
parsedInfo instanceof ExifParseInfo &&
((ExifParseInfo) parsedInfo).exifOrientation != null &&
ImagesUtil.isExifAxesSwapNeeded(((ExifParseInfo) parsedInfo).exifOrientation)
) {
this.width = height;
this.height = width;
} else {
this.width = width;
this.height = height;
}
compareFormat(format, parsedInfo);
this.format = format != null ? format : parsedInfo.format;
this.size =
!applyExifOrientation ||
!(parsedInfo instanceof ExifParseInfo) ||
((ExifParseInfo) parsedInfo).exifOrientation == ExifOrientation.TOP_LEFT ?
size :
SIZE_UNKNOWN;
this.bitDepth = parsedInfo.bitDepth != null ? parsedInfo.bitDepth.intValue() : UNKNOWN;
this.numComponents = parsedInfo.numComponents != null ? parsedInfo.numComponents.intValue() : UNKNOWN;
this.colorSpace = null;
this.colorSpaceType = parsedInfo.colorSpaceType;
this.imageIOSupport = false; 
}
protected ImageInfo(
int width,
int height,
ImageFormat format,
long size,
int bitDepth,
int numComponents,
ColorSpace colorSpace,
ColorSpaceType colorSpaceType,
boolean imageIOSupport
) {
this.width = width;
this.height = height;
this.format = format;
this.size = size;
this.bitDepth = bitDepth;
this.numComponents = numComponents;
this.colorSpace = colorSpace;
this.colorSpaceType = colorSpaceType;
this.imageIOSupport = imageIOSupport;
}
public int getWidth() {
return width;
}
public int getHeight() {
return height;
}
public ImageFormat getFormat() {
return format;
}
public long getSize() {
return size;
}
public ColorSpace getColorSpace() {
return colorSpace;
}
public ColorSpaceType getColorSpaceType() {
if (colorSpace != null) {
return ColorSpaceType.toColorSpaceType(colorSpace.getType());
}
return colorSpaceType;
}
public int getBitsPerPixel() {
return bitDepth < 0 || numComponents < 0 ? UNKNOWN : bitDepth * numComponents;
}
public int getNumComponents() {
return numComponents;
}
public int getBitDepth() {
return bitDepth;
}
public boolean isImageIOSupported() {
return imageIOSupport;
}
public ExifOrientation getExifOrientation() {
if (!(this instanceof ExifInfo)) {
return ExifOrientation.TOP_LEFT;
}
return ((ExifInfo) this).exifOrientation != null ?
((ExifInfo) this).exifOrientation :
ExifOrientation.TOP_LEFT
;
}
public abstract ImageInfo copy();
protected abstract void buildToString(StringBuilder sb);
@Override
public String toString() {
StringBuilder sb = new StringBuilder(80);
sb.append(getClass().getSimpleName())
.append(": [Format = ").append(format)
.append(", Resolution = ").append(width == UNKNOWN ? "Unknown" : width)
.append("×").append(height == UNKNOWN ? "Unknown" : height)
.append(", Size = ").append(size == SIZE_UNKNOWN ? "Unknown" : size)
.append(", Bit Depth = ").append(bitDepth == UNKNOWN ? "Unknown" : bitDepth)
.append(", Number of Components = ").append(numComponents == UNKNOWN ? "Unknown" : numComponents);
if (colorSpace != null) {
sb.append(", Color Space = [");
for (int i = 0; i < colorSpace.getNumComponents(); i++) {
if (i != 0) {
sb.append(", ");
}
sb.append(colorSpace.getName(i));
}
sb.append("]");
}
if (colorSpaceType != null) {
sb.append(", Color Space Type = ").append(colorSpaceType);
}
sb.append(", ImageIO Support = ").append(imageIOSupport ? "True" : "False");
buildToString(sb);
sb.append("]");
return sb.toString();
}
protected void compareResolution(int width, int height, ParseInfo parsedInfo) {
if (parsedInfo == null) {
return;
}
int parsedWidth = parsedInfo.width != null ? parsedInfo.width.intValue() : UNKNOWN;
int parsedHeight = parsedInfo.height!= null ? parsedInfo.height.intValue() : UNKNOWN;
if (this instanceof RAWInfo) {
if (parsedInfo.width != null && width >= parsedInfo.width.intValue() && width <= (parsedInfo.width.intValue() + 40)) {
parsedWidth = Integer.valueOf(width);
}
if (parsedInfo.height != null && height >= parsedInfo.height.intValue() && height <= (parsedInfo.height.intValue() + 40)) {
parsedHeight = Integer.valueOf(height);
}
}
if (
width > 0 && parsedInfo.width != null && width != parsedWidth ||
height > 0 && parsedInfo.height != null && height != parsedHeight
) {
LOGGER.debug(
"Warning: Parsed image resolution ({} x {}) mismatches given image " +
"resolution ({} x {}) - using given resolution",
parsedInfo.width,
parsedInfo.height,
width,
height
);
}
}
protected void compareFormat(ImageFormat format, ParseInfo parsedInfo) {
if (parsedInfo == null) {
return;
}
if (parsedInfo.format != null && format != null && format != parsedInfo.format) {
LOGGER.debug(
"Warning: Parsed image format ({}) mismatches given image " +
"format ({}) - using given format",
parsedInfo.format,
format
);
}
}
protected void compareColorModel(int bitDepth, int numComponents, ColorSpaceType colorSpaceType, ParseInfo parsedInfo) {
if (parsedInfo == null) {
return;
}
if (bitDepth != UNKNOWN && parsedInfo.bitDepth != null && bitDepth != parsedInfo.bitDepth.intValue()) {
if (
!(this instanceof GIFInfo) ||
parsedInfo.bitDepth >= 8
) {
LOGGER.debug(
"Warning: Parsed image bit depth ({}) mismatches given color model " +
"bit depth ({}) - using given color model bit depth",
parsedInfo.bitDepth,
bitDepth
);
}
}
if (numComponents != UNKNOWN && parsedInfo.numComponents != null && numComponents != parsedInfo.numComponents.intValue()) {
LOGGER.debug(
"Warning: Parsed image number of components ({}) mismatches given color model " +
"number of components ({}) - using given color model number of components",
parsedInfo.numComponents,
numComponents
);
}
if (colorSpaceType != null && parsedInfo.colorSpaceType != null && colorSpaceType != parsedInfo.colorSpaceType) {
if (
!(this instanceof JPEGInfo) ||
parsedInfo.colorSpaceType != ColorSpaceType.TYPE_YCbCr &&
colorSpaceType != ColorSpaceType.TYPE_RGB
) {
LOGGER.debug(
"Warning: Parsed image color space type ({}) mismatches given color model " +
"color space type ({}) - using given color model color space type",
parsedInfo.colorSpaceType,
colorSpaceType
);
}
}
}
protected static class ParseInfo {
Integer width;
Integer height;
ImageFormat format;
Integer bitDepth;
Integer numComponents;
ColorSpaceType colorSpaceType;
}
}
