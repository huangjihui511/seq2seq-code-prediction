package com.google.inject;
import static com.google.common.base.Preconditions.checkArgument;
import com.google.common.collect.ImmutableSet;
import com.google.inject.internal.Messages;
import com.google.inject.spi.Message;
import java.util.Collection;
public final class ProvisionException extends RuntimeException {
private final ImmutableSet<Message> messages;
public ProvisionException(Iterable<Message> messages) {
this.messages = ImmutableSet.copyOf(messages);
checkArgument(!this.messages.isEmpty());
initCause(Messages.getOnlyCause(this.messages));
}
public ProvisionException(String message, Throwable cause) {
super(cause);
this.messages = ImmutableSet.of(new Message(message, cause));
}
public ProvisionException(String message) {
this.messages = ImmutableSet.of(new Message(message));
}
public Collection<Message> getErrorMessages() {
return messages;
}
@Override
public String getMessage() {
return Messages.formatMessages("Unable to provision, see the following errors", messages);
}
private static final long serialVersionUID = 0;
}
