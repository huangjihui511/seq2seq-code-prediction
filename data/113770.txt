package com.spazedog.lib.rootfw4.utils;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import android.content.Context;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import com.spazedog.lib.rootfw4.Common;
import com.spazedog.lib.rootfw4.Shell;
import com.spazedog.lib.rootfw4.Shell.Attempts;
import com.spazedog.lib.rootfw4.Shell.OnShellBroadcastListener;
import com.spazedog.lib.rootfw4.Shell.OnShellResultListener;
import com.spazedog.lib.rootfw4.Shell.OnShellValidateListener;
import com.spazedog.lib.rootfw4.Shell.Result;
import com.spazedog.lib.rootfw4.containers.BasicContainer;
import com.spazedog.lib.rootfw4.containers.Data;
import com.spazedog.lib.rootfw4.containers.Data.DataSorting;
import com.spazedog.lib.rootfw4.utils.Filesystem.DiskStat;
import com.spazedog.lib.rootfw4.utils.Filesystem.MountStat;
import com.spazedog.lib.rootfw4.utils.io.FileReader;
import com.spazedog.lib.rootfw4.utils.io.FileWriter;
public class File {
public static final String TAG = Common.TAG + ".File";
protected final static Pattern oPatternEscape = Pattern.compile("([\"\'`\\\\])");
protected final static Pattern oPatternColumnSearch = Pattern.compile("[ ]{2,}");
protected final static Pattern oPatternSpaceSearch = Pattern.compile("[ \t]+");
protected final static Pattern oPatternStatSplitter = Pattern.compile("\\|");
protected final static Pattern oPatternStatSearch = Pattern.compile("^([a-z-]+)(?:[ \t]+([0-9]+))?[ \t]+([0-9a-z_]+)[ \t]+([0-9a-z_]+)(?:[ \t]+(?:([0-9]+),[ \t]+)?([0-9]+))?[ \t]+([A-Za-z]+[ \t]+[0-9]+[ \t]+[0-9:]+|[0-9-/]+[ \t]+[0-9:]+)[ \t]+(?:(.*) -> )?(.*)$");
protected final static Map<String, Integer> oOctals = new HashMap<String, Integer>();
static {
oOctals.put("1:r", 400);
oOctals.put("2:w", 200);
oOctals.put("3:x", 100);
oOctals.put("3:s", 4100);
oOctals.put("3:S", 4000);
oOctals.put("4:r", 40);
oOctals.put("5:w", 20);
oOctals.put("6:x", 10);
oOctals.put("6:s", 2010);
oOctals.put("6:S", 2000);
oOctals.put("7:r", 4);
oOctals.put("8:w", 2);
oOctals.put("9:x", 1);
oOctals.put("9:t", 1001);
oOctals.put("9:T", 1000);
}
protected java.io.File mFile;
protected Shell mShell;
protected final Object mLock = new Object();
protected Integer mExistsLevel = -1;
protected Integer mFolderLevel = -1;
protected Integer mLinkLevel = -1;
public static class FileData extends Data<FileData> {
public FileData(String[] lines) {
super(lines);
}
}
public static class FileStat extends BasicContainer {
private String mName;
private String mLink;
private String mType;
private Integer mUser;
private Integer mGroup;
private String mAccess;
private Integer mPermission;
private String mMM;
private Long mSize;
public String name() {
return mName;
}
public String link() {
return mLink;
}
public String type() {
return mType;
}
public Integer user() {
return mUser;
}
public Integer group() {
return mGroup;
}
public String access() {
return mAccess;
}
public Integer permission() {
return mPermission;
}
public String mm() {
return mMM;
}
public Long size() {
return mSize;
}
}
public File(Shell shell, String file) {
mFile = new java.io.File(file);
mShell = shell;
mShell.addBroadcastListener(new OnShellBroadcastListener() {
@Override
public void onShellBroadcast(String key, Bundle data) {
if ("file".equals(key)) {
String action = data.getString("action");
String location = data.getString("location");
if ("exists".equals(action) && (getAbsolutePath().equals(location) || getAbsolutePath().startsWith(location + "/"))) {
mExistsLevel = -1;
mFolderLevel = -1;
mLinkLevel = -1;
} else if ("moved".equals(action) && getAbsolutePath().equals(location)) {
mFile = new java.io.File(data.getString("destination"));
}
}
}
});
}
public FileStat getDetails() {
synchronized (mLock) {
if (exists()) {
FileStat[] stat = getDetailedList(1);
if (stat != null && stat.length > 0) {
String name = mFile.getName();
if (stat[0].name().equals(".")) {
stat[0].mName = name;
return stat[0];
} else if (stat[0].name().equals(name)) {
return stat[0];
} else {
stat = getParentFile().getDetailedList();
if (stat != null && stat.length > 0) {
for (int i=0; i < stat.length; i++) {
if (stat[i].name().equals(name)) {
return stat[i];
}
}
}
}
}
}
return null;
}
}
public FileStat[] getDetailedList() {
return getDetailedList(0);
}
public FileStat[] getDetailedList(Integer maxLines) {
synchronized (mLock) {
if (exists()) {
String path = getAbsolutePath();
String[] attemptCommands = new String[]{"ls -lna '" + path + "'", "ls -la '" + path + "'", "ls -ln '" + path + "'", "ls -l '" + path + "'"};
for (String command : attemptCommands) {
Result result = mShell.createAttempts(command).execute();
if (result.wasSuccessful()) {
List<FileStat> list = new ArrayList<FileStat>();
String[] lines = result.trim().getArray();
Integer maxIndex = (maxLines == null || maxLines == 0 ? lines.length : (maxLines < 0 ? lines.length + maxLines : maxLines));
for (int i=0,indexCount=1; i < lines.length && indexCount <= maxIndex; i++) {
String[] parts = oPatternStatSplitter.split( oPatternStatSearch.matcher(lines[i]).replaceAll("$1|$3|$4|$5|$6|$8|$9") );
if (parts.length == 7) {
FileStat stat = new FileStat();
stat.mType = parts[0].substring(0, 1).equals("-") ? "f" : parts[0].substring(0, 1);
stat.mAccess = parts[0];
stat.mUser = Common.getUID(parts[1]);
stat.mGroup = Common.getUID(parts[2]);
stat.mSize = parts[4].equals("null") || !parts[3].equals("null") ? 0L : Long.parseLong(parts[4]);
stat.mMM = parts[3].equals("null") ? null : parts[3] + ":" + parts[4];
stat.mName = parts[5].equals("null") ? parts[6].substring( parts[6].lastIndexOf("/") + 1 ) : parts[5].substring( parts[5].lastIndexOf("/") + 1 );
stat.mLink = parts[5].equals("null") ? null : parts[6];
stat.mPermission = 0;
for (int x=1; x < stat.mAccess.length(); x++) {
Character ch = stat.mAccess.charAt(x);
Integer number = oOctals.get(x + ":" + ch);
if (number != null) {
stat.mPermission += number;
}
}
if (stat.mName.contains("/")) {
stat.mName = stat.mName.substring( stat.mName.lastIndexOf("/")+1 );
}
list.add(stat);
indexCount++;
}
}
return list.toArray( new FileStat[ list.size() ] );
}
}
}
return null;
}
}
public String[] getList() {
synchronized (mLock) {
if (isDirectory()) {
String[] list = mFile.list();
if (list == null) {
String path = getAbsolutePath();
String[] commands = new String[]{"ls -a1 '" + path + "'", "ls -a '" + path + "'", "ls '" + path + "'"};
for (int i=0; i < commands.length; i++) {
Result result = mShell.createAttempts(commands[i]).execute();
if (result != null && result.wasSuccessful()) {
if (i == 0) {
result.sort(new DataSorting(){
@Override
public Boolean test(String input) {
return !".".equals(input) && !"..".equals(input);
}
});
return result.getArray();
} else {
String[] lines = oPatternColumnSearch.split( result.trim().getString(" ").trim() );
List<String> output = new ArrayList<String>();
for (String line : lines) {
if (!".".equals(line) && !"..".equals(line)) {
output.add(line);
}
}
return output.toArray(new String[output.size()]);
}
}
}
}
return list;
}
return null;
}
}
public String readOneLine() {
synchronized (mLock) {
if (isFile()) {
try {
BufferedReader reader = new BufferedReader(new java.io.FileReader(mFile));
String line = reader.readLine();
reader.close();
return line;
} catch (Throwable e) {
String[] attemptCommands = new String[]{"sed -n '1p' '" + getAbsolutePath() + "' 2> /dev/null", "cat '" + getAbsolutePath() + "' 2> /dev/null"};
for (String command : attemptCommands) {
Result result = mShell.createAttempts(command).execute();
if (result != null && result.wasSuccessful()) {
return result.getLine(0);
}
}
}
}
return null;
}
}
public FileData read() {
synchronized (mLock) {
if (isFile()) {
try {
BufferedReader reader = new BufferedReader(new java.io.FileReader(mFile));
List<String> content = new ArrayList<String>();
String line;
while ((line = reader.readLine()) != null) {
content.add(line);
}
reader.close();
return new FileData( content.toArray( new String[ content.size() ] ) );
} catch(Throwable e) {
Result result = mShell.createAttempts("cat '" + getAbsolutePath() + "' 2> /dev/null").execute();
if (result != null && result.wasSuccessful()) {
return new FileData( result.getArray() );
}
}
}
return null;
}
}
public FileData readMatch(final String match, final Boolean invert) {
synchronized (mLock) {
if (isFile()) {
try {
BufferedReader reader = new BufferedReader(new java.io.FileReader(mFile));
List<String> content = new ArrayList<String>();
String line;
while ((line = reader.readLine()) != null) {
if (invert != line.contains(match)) {
content.add(line);
}
}
reader.close();
return new FileData( content.toArray( new String[ content.size() ] ) );
} catch (Throwable e) {
String escapedMatch = oPatternEscape.matcher(match).replaceAll("\\\\$1");
Result result = mShell.createAttempts("grep " + (invert ? "-v " : "") + "'" + escapedMatch + "' '" + getAbsolutePath() + "'").execute(new OnShellValidateListener(){
@Override
public Boolean onShellValidate(String command, Integer result, List<String> output, Set<Integer> resultCodes) {
return result.equals(0) || output.size() == 0;
}
});
if (result.wasSuccessful()) {
return new FileData( result.getArray() );
} else {
result = mShell.createAttempts("cat '" + getAbsolutePath() + "' 2> /dev/null").execute();
if (result != null && result.wasSuccessful()) {
result.sort(new DataSorting() {
@Override
public Boolean test(String input) {
return invert != input.contains(match);
}
});
return new FileData( result.getArray() );
}
}
}
}
return null;
}
}
public Boolean write(String input) {
return write(input.trim().split("\n"), false);
}
public Boolean write(String input, Boolean append) {
return write(input.trim().split("\n"), append);
}
public Boolean write(String[] input) {
return write(input, false);
}
public Boolean write(String[] input, Boolean append) {
synchronized (mLock) {
Boolean status = false;
if (input != null && !isDirectory()) {
try {
BufferedWriter output = new BufferedWriter(new java.io.FileWriter(mFile, append));
for (String line : input) {
output.write(line);
output.newLine();
}
output.close();
status = true;
} catch(Throwable e) {
String redirect = append ? ">>" : ">";
String path = getAbsolutePath();
for (String line : input) {
String escapedInput = oPatternEscape.matcher(line).replaceAll("\\\\$1");
Attempts attempts = mShell.createAttempts("echo '" + escapedInput + "' " + redirect + " '" + path + "' 2> /dev/null");
Result result = attempts.execute();
if (result != null && !(status = result.wasSuccessful())) {
break;
}
redirect = ">>";
}
}
if (status) {
Bundle bundle = new Bundle();
bundle.putString("action", "exists");
bundle.putString("location", getAbsolutePath());
Shell.sendBroadcast("file", bundle);
}
}
return status;
}
}
public Result writeResult(String input) {
return writeResult(input.trim().split("\n"), false);
}
public Result writeResult(String[] input, Boolean append) {
synchronized (mLock) {
Boolean status = false;
Result result = null;
if (input != null && !isDirectory()) {
try {
BufferedWriter output = new BufferedWriter(new java.io.FileWriter(mFile, append));
for (String line : input) {
output.write(line);
output.newLine();
}
output.close();
status = true;
} catch(Throwable e) {
String redirect = append ? ">>" : ">";
String path = getAbsolutePath();
for (String line : input) {
String escapedInput = oPatternEscape.matcher(line).replaceAll("\\\\$1");
Attempts attempts = mShell.createAttempts("echo '" + escapedInput + "' " + redirect + " '" + path + "' 2> /dev/null");
result = attempts.execute();
if (result != null && !(status = result.wasSuccessful())) {
break;
}
redirect = ">>";
}
}
if (status) {
Bundle bundle = new Bundle();
bundle.putString("action", "exists");
bundle.putString("location", getAbsolutePath());
Shell.sendBroadcast("file", bundle);
}
}
return result;
}
}
public Boolean remove() {
synchronized (mLock) {
Boolean status = false;
if (exists()) {
String[] fileList = getList();
String path = getAbsolutePath();
if (fileList != null) {
for (String intry : fileList) {
if(!getFile(path + "/" + intry).remove()) {
return false;
}
}
}
if (!(status = mFile.delete())) {
String rmCommand = isFile() || isLink() ? "unlink" : "rmdir";
String[] commands = new String[]{"rm -rf '" + path + "' 2> /dev/null", rmCommand + " '" + path + "' 2> /dev/null"};
for (String command : commands) {
Result result = mShell.createAttempts(command).execute();
if (result != null && (status = result.wasSuccessful())) {
break;
}
}
}
if (status) {
Bundle bundle = new Bundle();
bundle.putString("action", "exists");
bundle.putString("location", path);
Shell.sendBroadcast("file", bundle);
}
} else {
status = true;
}
return status;
}
}
public Boolean createDirectory() {
synchronized (mLock) {
Boolean status = false;
if (!exists()) {
if (!(status = mFile.mkdir())) {
Result result = mShell.createAttempts("mkdir '" + getAbsolutePath() + "' 2> /dev/null").execute();
if (result == null || !(status = result.wasSuccessful())) {
return false;
}
}
if (status) {
Bundle bundle = new Bundle();
bundle.putString("action", "exists");
bundle.putString("location", getAbsolutePath());
Shell.sendBroadcast("file", bundle);
}
} else {
status = isDirectory();
}
return status;
}
}
public Boolean createDirectories() {
synchronized (mLock) {
Boolean status = false;
if (!exists()) {
if (!(status = mFile.mkdirs())) {
Result result = mShell.createAttempts("mkdir -p '" + getAbsolutePath() + "' 2> /dev/null").execute();
if (result == null || !(status = result.wasSuccessful())) {
String[] dirs = getAbsolutePath().substring(1).split("/");
String path = "";
for (String dir : dirs) {
path = path + "/" + dir;
if (!(status = getFile(path).createDirectory())) {
return false;
}
}
}
}
if (status) {
Bundle bundle = new Bundle();
bundle.putString("action", "exists");
bundle.putString("location", getAbsolutePath());
Shell.sendBroadcast("file", bundle);
}
} else {
status = isDirectory();
}
return status;
}
}
public Boolean createLink(String linkPath) {
synchronized (mLock) {
File linkFile = getFile(linkPath);
Boolean status = false;
if (exists() && !linkFile.exists()) {
Result result = mShell.createAttempts("ln -s '" + getAbsolutePath() + "' '" + linkFile.getAbsolutePath() + "' 2> /dev/null").execute();
if (result == null || !(status = result.wasSuccessful())) {
return false;
}
if (status) {
Bundle bundle = new Bundle();
bundle.putString("action", "exists");
bundle.putString("location", linkFile.getAbsolutePath());
Shell.sendBroadcast("file", bundle);
}
} else if (exists() && linkFile.isLink()) {
status = getAbsolutePath().equals(linkFile.getCanonicalPath());
}
return status;
}
}
public Boolean createAsLink(String originalPath) {
return getFile(originalPath).createLink(getAbsolutePath());
}
public Boolean move(String dstPath) {
return move(dstPath, false);
}
public Boolean move(String dstPath, Boolean overwrite) {
synchronized (mLock) {
Boolean status = false;
if (exists()) {
File dstFile = getFile(dstPath);
if (!dstFile.exists() || (overwrite && dstFile.remove())) {
if (!(status = mFile.renameTo(dstFile.mFile))) {
Result result = mShell.createAttempts("mv '" + getAbsolutePath() + "' '" + dstFile.getAbsolutePath() + "'").execute();
if (result == null || !(status = result.wasSuccessful())) {
return false;
}
}
}
if (status) {
Bundle bundle = new Bundle();
bundle.putString("action", "exists");
bundle.putString("location", dstFile.getAbsolutePath());
Shell.sendBroadcast("file", bundle);
bundle.putString("action", "moved");
bundle.putString("location", getAbsolutePath());
bundle.putString("destination", dstFile.getAbsolutePath());
mFile = dstFile.mFile;
Shell.sendBroadcast("file", bundle);
}
}
return status;
}
}
public Boolean rename(String name) {
return move( (getParentPath() == null ? "" : getParentPath()) + "/" + name, false );
}
public Boolean copy(String dstPath) {
return copy(dstPath, false, false);
}
public Boolean copy(String dstPath, Boolean overwrite) {
return copy(dstPath, overwrite, false);
}
public Boolean copy(String dstPath, Boolean overwrite, Boolean preservePerms) {
synchronized (mLock) {
Boolean status = false;
if (exists()) {
File dstFile = getFile(dstPath);
FileStat stat = null;
if (isLink()) {
if (!dstFile.exists() || (overwrite && dstFile.remove())) {
stat = getDetails();
if (stat == null || stat.link() == null || !(status = dstFile.createAsLink(stat.link()))) {
return false;
}
}
} else if (isDirectory() && (!overwrite || (!dstFile.exists() || dstFile.remove())) && ((!dstFile.exists() && dstFile.createDirectories()) || dstFile.isDirectory())) {
String[] list = getList();
if (list != null) {
status = true;
String srcAbsPath = getAbsolutePath();
String dstAbsPath = dstFile.getAbsolutePath();
for (String entry : list) {
File entryFile = getFile(srcAbsPath + "/" + entry);
if (!(status = entryFile.copy(dstAbsPath + "/" + entry, overwrite, preservePerms))) {
if (entryFile.isDirectory() || overwrite == entryFile.exists()) {
return false;
} else {
status = true;
}
}
}
}
} else if (!isDirectory() && (!dstFile.exists() || (overwrite && dstFile.remove()))) {
try {
InputStream input = new FileInputStream(mFile);
OutputStream output = new FileOutputStream(dstFile.mFile);
byte[] buffer = new byte[1024];
Integer length;
while ((length = input.read(buffer)) > 0) {
output.write(buffer, 0, length);
}
input.close();
output.close();
status = true;
} catch (Throwable e) {
Result result = mShell.createAttempts("cat '" + getAbsolutePath() + "' > '" + dstFile.getAbsolutePath() + "' 2> /dev/null").execute();
if (result == null || !(status = result.wasSuccessful())) {
return false;
}
}
}
if (status) {
Bundle bundle = new Bundle();
bundle.putString("action", "exists");
bundle.putString("location", dstFile.getAbsolutePath());
Shell.sendBroadcast("file", bundle);
if (preservePerms) {
if (stat == null) {
stat = getDetails();
}
dstFile.changeAccess(stat.user(), stat.group(), stat.permission(), false);
}
}
}
return status;
}
}
public Boolean changeAccess(String user, String group, Integer mod) {
return changeAccess(Common.getUID(user), Common.getUID(group), mod, false);
}
public Boolean changeAccess(Integer user, Integer group, Integer mod) {
return changeAccess(user, group, mod, false);
}
public Boolean changeAccess(String user, String group, Integer mod, Boolean recursive) {
return changeAccess(Common.getUID(user), Common.getUID(group), mod, recursive);
}
public Boolean changeAccess(Integer user, Integer group, Integer mod, Boolean recursive) {
synchronized (mLock) {
StringBuilder builder = new StringBuilder();
if ((user != null && user >= 0) || (group != null && group >= 0)) {
builder.append("%binary chown ");
if (recursive)
builder.append("-R ");
if (user != null && user >= 0)
builder.append("" + user);
if (group != null && group >= 0)
builder.append("." + user);
}
if (mod != null && mod > 0) {
if (builder.length() > 0)
builder.append(" && ");
builder.append("%binary chmod ");
if (recursive)
builder.append("-R ");
builder.append((mod <= 777 ? "0" : "") + mod);
}
if (builder.length() > 0) {
builder.append(" '" + getAbsolutePath() + "'");
Result result = mShell.createAttempts(builder.toString()).execute();
if (result != null && result.wasSuccessful()) {
return true;
}
}
}
return false;
}
public Long size() {
synchronized (mLock) {
Long size = 0L;
if (exists()) {
if (isDirectory()) {
String[] list = getList();
if (list != null) {
String path = getAbsolutePath();
for (String entry : list) {
size += getFile(path + "/" + entry).size();
}
}
} else if ((size = mFile.length()) == 0) {
String path = getAbsolutePath();
String[] commands = new String[]{"wc -c < '" + path + "' 2> /dev/null", "wc < '" + path + "' 2> /dev/null"};
Result result = null;
for (int i=0; i < commands.length; i++) {
result = mShell.createAttempts(commands[i]).execute();
if (result != null && result.wasSuccessful()) {
try {
size = Long.parseLong( (i > 0 ? oPatternSpaceSearch.split(result.getLine().trim())[2] : result.getLine()) );
} catch (Throwable e) {
result = null;
}
break;
}
}
if (result == null || !result.wasSuccessful()) {
FileStat stat = getDetails();
if (stat != null) {
size = stat.size();
}
}
}
}
return size;
}
}
public Result runInShell() {
synchronized(mLock) {
if (isFile() && changeAccess(-1, -1, 777)) {
return mShell.execute(getAbsolutePath());
}
return null;
}
}
public void runInShell(OnShellResultListener listener) {
synchronized(mLock) {
if (isFile() && changeAccess(-1, -1, 777)) {
mShell.executeAsync(getAbsolutePath(), listener);
}
}
}
public Boolean runInRecovery(Context context, String... args) {
if (isFile()) {
String cacheLocation = "/cache";
MountStat mountStat = mShell.getDisk(cacheLocation).getFsDetails();
if (mountStat != null) {
DiskStat diskStat = mShell.getDisk( mountStat.device() ).getDiskDetails();
if (diskStat == null || !cacheLocation.equals(diskStat.location())) {
if (diskStat == null) {
mShell.getDisk("/").mount(new String[]{"rw"});
cacheLocation = "/cache-int";
if (!getFile(cacheLocation).createDirectory()) {
return false;
} else if (!mShell.getDisk(mountStat.device()).mount(cacheLocation)) {
return false;
}
mShell.getDisk("/").mount(new String[]{"ro"});
} else {
cacheLocation = diskStat.location();
}
}
}
if (getFile(cacheLocation + "/recovery").createDirectory()) {
if (getFile(cacheLocation + "/recovery/command").write("--update_package=" + getResolvedPath())) {
if (args != null && args.length > 0) {
String[] lines = new String[ args.length ];
for (int i=0; i < args.length; i++) {
lines[i] = "argument" + (i+1) + "=" + args[i];
}
if (!getFile(cacheLocation + "/recovery/rootfw.prop").write(lines)) {
getFile(cacheLocation + "/recovery/command").remove();
return false;
}
}
if (mShell.getDevice().rebootRecovery(context)) {
return true;
}
getFile(cacheLocation + "/recovery/command").remove();
}
}
}
return false;
}
public Boolean extractResource(Context context, String asset) {
try {
InputStream input = context.getAssets().open(asset);
Boolean status = extractResource(input);
input.close();
return status;
} catch(Throwable e) { return false; }
}
public Boolean extractResource(Context context, Integer resourceid) {
try {
InputStream input = context.getResources().openRawResource(resourceid);
Boolean status = extractResource(input);
input.close();
return status;
} catch(Throwable e) { return false; }
}
public Boolean extractResource(InputStream resource) {
synchronized(mLock) {
if (!isDirectory()) {
try {
FileWriter writer = getFileWriter();
if (writer != null) {
byte[] buffer = new byte[1024];
int loc = 0;
while ((loc = resource.read(buffer)) > 0) {
writer.write(buffer, 0, loc);
}
writer.close();
}
} catch (Throwable e) {
Log.e(TAG, e.getMessage(), e);
}
}
return false;
}
}
public FileWriter getFileWriter() {
if (isFile()) {
try {
return new FileWriter(mShell, getAbsolutePath(), false);
} catch (Throwable e) {
Log.e(TAG, e.getMessage(), e);
}
}
return null;
}
public FileReader getFileReader() {
if (isFile()) {
try {
return new FileReader(mShell, getAbsolutePath());
} catch (Throwable e) {
Log.e(TAG, e.getMessage(), e);
}
}
return null;
}
public Boolean exists() {
synchronized(mLock) {
if (mExistsLevel < 0) {
mExistsLevel = 0;
if (!mFile.exists()) {
Attempts attempts = mShell.createAttempts("( %binary test -e '" + getAbsolutePath() + "' && echo true ) || ( %binary test ! -e '" + getAbsolutePath() + "' && echo false )");
Result result = attempts.execute();
if (result != null && result.wasSuccessful()) {
mExistsLevel = "true".equals(result.getLine()) ? 1 : 0;
} else {
result = mShell.createAttempts("ls '" + getAbsolutePath() + "' > /dev/null 2>&1").execute();
if (result != null && result.wasSuccessful()) {
mExistsLevel = 1;
}
}
} else {
mExistsLevel = 1;
}
}
return mExistsLevel > 0;
}
}
public Boolean isDirectory() {
synchronized (mLock) {
if (mFolderLevel < 0) {
mFolderLevel = 0;
if (exists()) {
if (!mFile.isDirectory() && !mFile.isFile()) {
Attempts attempts = mShell.createAttempts("( %binary test -d '" + getAbsolutePath() + "' && echo true ) || ( %binary test ! -d '" + getAbsolutePath() + "' && echo false )");
Result result = attempts.execute();
if (result != null && result.wasSuccessful()) {
mFolderLevel = "true".equals(result.getLine()) ? 1 : 0;
} else {
FileStat stat = getCanonicalFile().getDetails();
if (stat != null) {
mFolderLevel = "d".equals(stat.type()) ? 1 : 0;
}
}
} else {
mFolderLevel = mFile.isDirectory() ? 1 : 0;
}
}
}
return mFolderLevel > 0;
}
}
public Boolean isLink() {
synchronized (mLock) {
if (mLinkLevel < 0) {
mLinkLevel = 0;
if (exists()) {
Attempts attempts = mShell.createAttempts("( %binary test -L '" + getAbsolutePath() + "' && echo true ) || ( %binary test ! -L '" + getAbsolutePath() + "' && echo false )");
Result result = attempts.execute();
if (result != null && result.wasSuccessful()) {
mLinkLevel = "true".equals(result.getLine()) ? 1 : 0;
} else {
FileStat stat = getDetails();
if (stat != null) {
mLinkLevel = "l".equals(stat.type()) ? 1 : 0;
}
}
}
}
return mLinkLevel > 0;
}
}
public Boolean isFile() {
synchronized (mLock) {
return exists() && !isDirectory();
}
}
public String getAbsolutePath() {
return mFile.getAbsolutePath();
}
public String getPath() {
return mFile.getPath();
}
public String getParentPath() {
return mFile.getParent();
}
public String getResolvedPath() {
synchronized (mLock) {
String path = getAbsolutePath();
if (path.contains(".")) {
String[] directories = ("/".equals(path) ? path : path.endsWith("/") ? path.substring(1, path.length() - 1) : path.substring(1)).split("/");
List<String> resolved = new ArrayList<String>();
for (int i=0; i < directories.length; i++) {
if (directories[i].equals("..")) {
if (resolved.size() > 0) {
resolved.remove( resolved.size()-1 );
}
} else if (!directories[i].equals(".")) {
resolved.add(directories[i]);
}
}
path = resolved.size() > 0 ? "/" + TextUtils.join("/", resolved) : "/";
}
return path;
}
}
public String getCanonicalPath() {
synchronized (mLock) {
if (exists()) {
try {
String canonical = mFile.getCanonicalPath();
if (canonical != null) {
return canonical;
}
} catch(Throwable e) {}
Result result = mShell.createAttempts("readlink -f '" + getAbsolutePath() + "' 2> /dev/null").execute();
if (result.wasSuccessful()) {
return result.getLine();
} else {
FileStat stat = getDetails();
if (stat != null && stat.link() != null) {
String realPath = stat.link();
while ((stat = getFile(realPath).getDetails()) != null && stat.link() != null) {
realPath = stat.link();
}
return realPath;
}
return getAbsolutePath();
}
}
return null;
}
}
public File getFile(String file) {
return new File(mShell, file);
}
public File getParentFile() {
return new File(mShell, getParentPath());
}
public File getCanonicalFile() {
return new File(mShell, getCanonicalPath());
}
public String getName() {
return mFile.getName();
}
}
