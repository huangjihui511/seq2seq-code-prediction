package io.vertx.core.datagram.impl;
import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.Promise;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.streams.WriteStream;
class PacketWriteStreamImpl implements WriteStream<Buffer>, Handler<AsyncResult<Void>> {
private DatagramSocketImpl datagramSocket;
private Handler<Throwable> exceptionHandler;
private final int port;
private final String host;
PacketWriteStreamImpl(DatagramSocketImpl datagramSocket, int port, String host) {
this.datagramSocket = datagramSocket;
this.port = port;
this.host = host;
}
@Override
public void handle(AsyncResult<Void> event) {
if (event.failed() && exceptionHandler != null) {
exceptionHandler.handle(event.cause());
}
}
@Override
public PacketWriteStreamImpl exceptionHandler(Handler<Throwable> handler) {
exceptionHandler = handler;
return this;
}
@Override
public Future<Void> write(Buffer data) {
Promise<Void> promise = Promise.promise();
write(data, promise);
return promise.future();
}
@Override
public void write(Buffer data, Handler<AsyncResult<Void>> handler) {
datagramSocket.send(data, port, host, ar -> {
PacketWriteStreamImpl.this.handle(ar);
if (handler != null) {
handler.handle(ar.mapEmpty());
}
});
}
@Override
public PacketWriteStreamImpl setWriteQueueMaxSize(int maxSize) {
return this;
}
@Override
public boolean writeQueueFull() {
return false;
}
@Override
public PacketWriteStreamImpl drainHandler(Handler<Void> handler) {
return this;
}
@Override
public Future<Void> end() {
Promise<Void> promide = Promise.promise();
end(promide);
return promide.future();
}
@Override
public void end(Handler<AsyncResult<Void>> handler) {
datagramSocket.close(handler);
}
}
