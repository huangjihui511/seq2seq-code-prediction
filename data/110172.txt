package com.google.auto.value.processor;
import static com.google.common.truth.Truth.assertThat;
import com.google.common.collect.ImmutableSet;
import com.google.common.reflect.ClassPath;
import com.google.common.truth.Expect;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Arrays;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
@RunWith(JUnit4.class)
public class GuavaCollectionBuildersTest {
private static final ImmutableSet<String> NON_BUILDABLE_COLLECTIONS =
ImmutableSet.of("ImmutableCollection");
@Rule public final Expect expect = Expect.create();
@Test
public void testImmutableBuilders() throws Exception {
ClassPath classPath = ClassPath.from(getClass().getClassLoader());
ImmutableSet<ClassPath.ClassInfo> classes = classPath.getAllClasses();
int checked = 0;
for (ClassPath.ClassInfo classInfo : classes) {
if (classInfo.getPackageName().equals("com.google.common.collect")
&& classInfo.getSimpleName().startsWith("Immutable")
&& !NON_BUILDABLE_COLLECTIONS.contains(classInfo.getSimpleName())) {
Class<?> c = Class.forName(classInfo.getName());
if (Modifier.isPublic(c.getModifiers())) {
checked++;
checkImmutableClass(c);
}
}
}
expect.that(checked).isGreaterThan(10);
}
private void checkImmutableClass(Class<?> c)
throws ClassNotFoundException, NoSuchMethodException {
if (!Modifier.isPublic(c.getModifiers())) {
return;
}
Method builderMethod = c.getMethod("builder");
assertThat(Modifier.isStatic(builderMethod.getModifiers())).isTrue();
Type builderMethodReturn = builderMethod.getGenericReturnType();
expect.that(builderMethodReturn).isInstanceOf(ParameterizedType.class);
ParameterizedType builderMethodParameterizedReturn = (ParameterizedType) builderMethodReturn;
Class<?> builderClass = Class.forName(c.getName() + "$Builder");
expect.that(builderMethod.getReturnType()).isEqualTo(builderClass);
expect
.withMessage(c.getName())
.that(Arrays.toString(builderMethodParameterizedReturn.getActualTypeArguments()))
.isEqualTo(Arrays.toString(builderClass.getTypeParameters()));
Method buildMethod = builderClass.getMethod("build");
expect.that(buildMethod.getReturnType()).isEqualTo(c);
boolean found = false;
for (Method m : builderClass.getMethods()) {
if ((m.getName().equals("addAll") || m.getName().equals("putAll"))
&& m.getParameterTypes().length == 1) {
Class<?> parameter = m.getParameterTypes()[0];
if (parameter.isAssignableFrom(c)) {
found = true;
break;
}
}
}
expect.withMessage(builderClass.getName() + " has addAll or putAll").that(found).isTrue();
}
}
