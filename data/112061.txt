package org.springframework.data.mongodb.gridfs;
import org.bson.Document;
import org.bson.types.ObjectId;
import org.reactivestreams.Publisher;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import com.mongodb.client.gridfs.model.GridFSFile;
public class ReactiveGridFsUpload<ID> implements GridFsObject<ID, Publisher<DataBuffer>> {
private final @Nullable ID id;
private final Publisher<DataBuffer> dataStream;
private final String filename;
private final Options options;
private ReactiveGridFsUpload(@Nullable ID id, Publisher<DataBuffer> dataStream, String filename, Options options) {
Assert.notNull(dataStream, "Data Stream must not be null");
Assert.notNull(filename, "Filename must not be null");
Assert.notNull(options, "Options must not be null");
this.id = id;
this.dataStream = dataStream;
this.filename = filename;
this.options = options;
}
@Override
@Nullable
public ID getFileId() {
return id;
}
@Override
public String getFilename() {
return filename;
}
@Override
public Publisher<DataBuffer> getContent() {
return dataStream;
}
@Override
public Options getOptions() {
return options;
}
public static ReactiveGridFsUploadBuilder<ObjectId> fromPublisher(Publisher<DataBuffer> source) {
return new ReactiveGridFsUploadBuilder<ObjectId>().content(source);
}
public static class ReactiveGridFsUploadBuilder<T> {
private @Nullable Object id;
private Publisher<DataBuffer> dataStream;
private String filename;
private Options options = Options.none();
private ReactiveGridFsUploadBuilder() {}
public ReactiveGridFsUploadBuilder<T> content(Publisher<DataBuffer> source) {
this.dataStream = source;
return this;
}
public <T1> ReactiveGridFsUploadBuilder<T1> id(T1 id) {
this.id = id;
return (ReactiveGridFsUploadBuilder<T1>) this;
}
public ReactiveGridFsUploadBuilder<T> filename(String filename) {
this.filename = filename;
return this;
}
public ReactiveGridFsUploadBuilder<T> options(Options options) {
Assert.notNull(options, "Options must not be null");
this.options = options;
return this;
}
public ReactiveGridFsUploadBuilder<T> metadata(Document metadata) {
this.options = this.options.metadata(metadata);
return this;
}
public ReactiveGridFsUploadBuilder<T> chunkSize(int chunkSize) {
this.options = this.options.chunkSize(chunkSize);
return this;
}
public ReactiveGridFsUploadBuilder<T> gridFsFile(GridFSFile gridFSFile) {
Assert.notNull(gridFSFile, "GridFSFile must not be null");
this.id = gridFSFile.getId();
this.filename = gridFSFile.getFilename();
this.options = this.options.metadata(gridFSFile.getMetadata());
this.options = this.options.chunkSize(gridFSFile.getChunkSize());
return this;
}
public ReactiveGridFsUploadBuilder<T> contentType(String contentType) {
this.options = this.options.contentType(contentType);
return this;
}
public ReactiveGridFsUpload<T> build() {
return new ReactiveGridFsUpload(id, dataStream, filename, options);
}
}
}
