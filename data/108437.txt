package com.oracle.truffle.tools.profiler;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.oracle.truffle.api.instrumentation.StandardTags.ExpressionTag;
import com.oracle.truffle.api.instrumentation.StandardTags.RootTag;
import com.oracle.truffle.api.instrumentation.StandardTags.StatementTag;
import com.oracle.truffle.api.nodes.RootNode;
import com.oracle.truffle.api.source.SourceSection;
public final class ProfilerNode<T> {
ProfilerNode(ProfilerNode<T> parent, StackTraceEntry sourceLocation, T payload) {
this.parent = parent;
this.sourceLocation = sourceLocation;
this.payload = payload;
}
ProfilerNode() {
this.parent = null;
this.sourceLocation = null;
this.payload = null;
}
private final T payload;
private final ProfilerNode<T> parent;
private final StackTraceEntry sourceLocation;
Map<StackTraceEntry, ProfilerNode<T>> children;
public Collection<ProfilerNode<T>> getChildren() {
if (children == null) {
return Collections.emptyList();
}
return Collections.unmodifiableCollection(children.values());
}
public ProfilerNode<T> getParent() {
return parent;
}
public boolean isRecursive() {
return isRecursiveImpl(this);
}
private boolean isRecursiveImpl(ProfilerNode<T> source) {
if (parent.sourceLocation == null) {
return false;
}
if (parent.sourceLocation.equals(source.sourceLocation)) {
return true;
}
return parent.isRecursiveImpl(source);
}
public SourceSection getSourceSection() {
return sourceLocation.getSourceSection();
}
public String getRootName() {
return sourceLocation.getRootName();
}
public Set<Class<?>> getTags() {
return sourceLocation.getTags();
}
public T getPayload() {
return payload;
}
ProfilerNode<T> findChild(StackTraceEntry childLocation) {
if (children != null) {
return children.get(childLocation);
}
return null;
}
void addChild(StackTraceEntry childLocation, ProfilerNode<T> child) {
if (children == null) {
children = new HashMap<>();
}
children.put(childLocation, child);
}
StackTraceEntry getSourceLocation() {
return sourceLocation;
}
void deepCopyChildrenFrom(ProfilerNode<T> node, Function<T, T> copyPayload) {
for (ProfilerNode<T> child : node.getChildren()) {
final StackTraceEntry childSourceLocation = child.getSourceLocation();
T childPayload = child.getPayload();
T destinationPayload = copyPayload.apply(childPayload);
ProfilerNode<T> destinationChild = new ProfilerNode<>(this, childSourceLocation, destinationPayload);
if (children == null) {
children = new HashMap<>();
}
children.put(childSourceLocation, destinationChild);
destinationChild.deepCopyChildrenFrom(child, copyPayload);
}
}
void deepMergeChildrenFrom(ProfilerNode<T> node, BiConsumer<T, T> mergePayload, Supplier<T> payloadFactory) {
for (ProfilerNode<T> child : node.getChildren()) {
final StackTraceEntry childSourceLocation = child.getSourceLocation();
final T childPayload = child.getPayload();
ProfilerNode<T> destinationChild = findBySourceLocation(childSourceLocation);
if (destinationChild == null) {
T destinationPayload = payloadFactory.get();
mergePayload.accept(childPayload, destinationPayload);
destinationChild = new ProfilerNode<>(this, childSourceLocation, destinationPayload);
if (children == null) {
children = new HashMap<>();
}
children.put(childSourceLocation, destinationChild);
} else {
mergePayload.accept(childPayload, destinationChild.getPayload());
}
destinationChild.deepMergeChildrenFrom(child, mergePayload, payloadFactory);
}
}
private ProfilerNode<T> findBySourceLocation(StackTraceEntry targetSourceLocation) {
if (children != null) {
for (ProfilerNode<T> child : children.values()) {
if (child.getSourceLocation().equals(targetSourceLocation)) {
return child;
}
}
}
return null;
}
}
