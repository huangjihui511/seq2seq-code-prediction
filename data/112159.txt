package org.menacheri.jetclient.util;
import static org.jboss.netty.buffer.ChannelBuffers.copiedBuffer;
import java.net.InetSocketAddress;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.util.NoSuchElementException;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffers;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.handler.codec.serialization.ClassResolvers;
import org.jboss.netty.handler.codec.serialization.ObjectDecoder;
import org.jboss.netty.handler.codec.serialization.ObjectEncoder;
import org.jboss.netty.util.CharsetUtil;
import org.menacheri.convert.Transform;
public class NettyUtils
{
private static final ObjectDecoderWrapper OBJECT_DECODER = new ObjectDecoderWrapper();
public static final String NETTY_CHANNEL = "NETTY_CHANNEL";
public static void clearPipeline(ChannelPipeline pipeline)
throws NoSuchElementException
{
while (pipeline.getFirst() != null)
{
pipeline.removeFirst();
}
}
public static ChannelBuffer createBufferForOpcode(int opcode)
{
ChannelBuffer buffer = ChannelBuffers.buffer(1);
buffer.writeByte(opcode);
return buffer;
}
public static String[] readStrings(ChannelBuffer buffer, int numOfStrings)
{
return readStrings(buffer,numOfStrings,CharsetUtil.UTF_8);
}
public static String[] readStrings(ChannelBuffer buffer, int numOfStrings,
Charset charset)
{
String[] strings = new String[numOfStrings];
for(int i=0;i<numOfStrings;i++)
{
String theStr = readString(buffer,charset);
if(null == theStr) break;
strings[i] = theStr;
}
return strings;
}
public static String readString(ChannelBuffer buffer)
{
return readString(buffer, CharsetUtil.UTF_8);
}
public static String readString(ChannelBuffer buffer, Charset charset)
{
String readString = null;
if (null != buffer && buffer.readableBytes() > 2)
{
int length = buffer.readUnsignedShort();
readString = readString(buffer, length, charset);
}
return readString;
}
public static String readString(ChannelBuffer buffer, int length)
{
return readString(buffer, length, CharsetUtil.UTF_8);
}
public static String readString(ChannelBuffer buffer, int length,
Charset charset)
{
String str = null;
if (null == charset)
{
charset = CharsetUtil.UTF_8;
}
try
{
ChannelBuffer stringBuffer = buffer.readSlice(length);
str = stringBuffer.toString(charset);
}
catch (Exception e)
{
throw new RuntimeException(e);
}
return str;
}
public static ChannelBuffer writeStrings(String... msgs)
{
return writeStrings(CharsetUtil.UTF_8, msgs);
}
public static ChannelBuffer writeStrings(Charset charset, String... msgs)
{
ChannelBuffer buffer = null;
for (String msg : msgs)
{
if (null == buffer)
{
buffer = writeString(msg, charset);
}
else
{
ChannelBuffer theBuffer = writeString(msg,charset);
if(null != theBuffer)
{
buffer = ChannelBuffers.wrappedBuffer(buffer,theBuffer);
}
}
}
return buffer;
}
public static ChannelBuffer writeString(String msg)
{
return writeString(msg, CharsetUtil.UTF_8);
}
public static ChannelBuffer writeString(String msg, Charset charset)
{
ChannelBuffer buffer = null;
try
{
ChannelBuffer stringBuffer = null;
if (null == charset)
{
charset = CharsetUtil.UTF_8;
}
stringBuffer = copiedBuffer(ByteOrder.BIG_ENDIAN, msg, charset);
int length = stringBuffer.readableBytes();
ChannelBuffer lengthBuffer = ChannelBuffers.buffer(2);
lengthBuffer.writeShort(length);
buffer = ChannelBuffers.wrappedBuffer(lengthBuffer, stringBuffer);
}
catch (Exception e)
{
throw new RuntimeException(e);
}
return buffer;
}
public static Object[] readObjects(ChannelBuffer buffer, int numOfObjects)
{
Object[] objects = new String[numOfObjects];
for (int i = 0; i < numOfObjects; i++)
{
Object theObject = readObject(buffer);
if (null == theObject)
break;
objects[i] = theObject;
}
return objects;
}
public static Object readObject(ChannelBuffer buffer)
{
Object readObj = null;
if (null != buffer && buffer.readableBytes() > 2)
{
int length = buffer.readUnsignedShort();
readObj = readObject(buffer, length);
}
return readObj;
}
public static Object readObject(ChannelBuffer buffer, int length)
{
ChannelBuffer objBuffer = buffer.readSlice(length);
Object obj;
try
{
obj = OBJECT_DECODER.decode(objBuffer);
}
catch (Exception e)
{
throw new RuntimeException(e);
}
return obj;
}
public static <T, V> V readObject(ChannelBuffer buffer,
Transform<ChannelBuffer, V> decoder)
{
int length = 0;
if (null != buffer && buffer.readableBytes() > 2)
{
length = buffer.readUnsignedShort();
}
else
{
return null;
}
ChannelBuffer objBuffer = buffer.readSlice(length);
V obj;
try
{
obj = decoder.convert(objBuffer);
}
catch (Exception e)
{
throw new RuntimeException(e);
}
;
return obj;
}
public static <V> ChannelBuffer writeObject(
Transform<V, ChannelBuffer> converter, V object)
{
ChannelBuffer buffer = null;
ChannelBuffer objectBuffer;
try
{
objectBuffer = converter.convert(object);
}
catch (Exception e)
{
throw new RuntimeException(e);
}
int length = objectBuffer.readableBytes();
ChannelBuffer lengthBuffer = ChannelBuffers.buffer(2);
lengthBuffer.writeShort(length);
buffer = ChannelBuffers.wrappedBuffer(lengthBuffer, objectBuffer);
return buffer;
}
public static InetSocketAddress readSocketAddress(ChannelBuffer buffer)
throws Exception
{
String remoteHost = NettyUtils.readString(buffer);
int remotePort = 0;
if (buffer.readableBytes() >= 4)
{
remotePort = buffer.readInt();
}
else
{
return null;
}
InetSocketAddress remoteAddress = null;
if (null != remoteHost)
{
remoteAddress = new InetSocketAddress(remoteHost, remotePort);
}
return remoteAddress;
}
public static ChannelBuffer writeSocketAddress(
InetSocketAddress socketAddress)
{
String host = socketAddress.getHostName();
int port = socketAddress.getPort();
ChannelBuffer hostName = writeString(host);
ChannelBuffer portNum = ChannelBuffers.buffer(4);
portNum.writeInt(port);
ChannelBuffer socketAddressBuffer = ChannelBuffers.wrappedBuffer(
hostName, portNum);
return socketAddressBuffer;
}
public static class ObjectDecoderWrapper extends ObjectDecoder
{
public ObjectDecoderWrapper()
{
super(ClassResolvers.weakCachingResolver(null));
}
public Object decode(ChannelBuffer buffer) throws Exception
{
return super.decode(null, null, buffer);
}
}
public static class ObjectEncoderWrapper extends ObjectEncoder
{
protected ChannelBuffer encode(Object msg) throws Exception
{
ChannelBuffer objBuffer = (ChannelBuffer) super.encode(null, null,
msg);
return objBuffer;
}
}
}
