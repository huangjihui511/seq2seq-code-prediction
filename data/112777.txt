package com.oath.cyclops.react.threads;
import java.util.Collection;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.function.Function;
import java.util.function.Supplier;
import com.oath.cyclops.internal.react.stream.ReactBuilder;
import com.oath.cyclops.util.ExceptionSoftener;
public class ReactPool<REACTOR extends ReactBuilder> {
private final BlockingQueue<REACTOR> queue;
private final Supplier<REACTOR> supplier;
private ReactPool(final int size) {
queue = new LinkedBlockingQueue<REACTOR>(
size);
supplier = null;
}
private ReactPool() {
queue = new LinkedBlockingQueue<REACTOR>();
supplier = null;
}
private ReactPool(final BlockingQueue<REACTOR> queue) {
this.queue = queue;
supplier = null;
}
private ReactPool(final Supplier<REACTOR> supplier) {
this.queue = new LinkedBlockingQueue<REACTOR>();
this.supplier = supplier;
}
public static <REACTOR extends ReactBuilder> ReactPool<REACTOR> boundedPool(final Collection<REACTOR> reactors) {
final ReactPool<REACTOR> r = new ReactPool<>(
reactors.size());
reactors.forEach(r::populate);
return r;
}
public static <REACTOR extends ReactBuilder> ReactPool<REACTOR> unboundedPool(final Collection<REACTOR> reactors) {
final ReactPool<REACTOR> r = new ReactPool<>();
reactors.forEach(r::populate);
return r;
}
public static <REACTOR extends ReactBuilder> ReactPool<REACTOR> elasticPool(final Supplier<REACTOR> supplier) {
return new ReactPool<>(
supplier);
}
public static <REACTOR extends ReactBuilder> ReactPool<REACTOR> syncrhonousPool() {
final ReactPool<REACTOR> r = new ReactPool<>(
new SynchronousQueue<>());
return r;
}
public void populate(final REACTOR next) {
try {
queue.put(next);
} catch (final InterruptedException e) {
Thread.currentThread()
.interrupt();
throw ExceptionSoftener.throwSoftenedException(e);
}
}
public <T> T react(final Function<? super REACTOR, ? extends T> fn) {
REACTOR reactor = null;
try {
reactor = nextReactor();
return fn.apply(reactor);
} finally {
if (reactor != null)
queue.offer(reactor);
}
}
public REACTOR nextReactor() {
REACTOR reactor = queue.poll();
try {
if (reactor == null) {
if (isElastic()) {
reactor = supplier.get();
} else
reactor = queue.take();
}
} catch (final InterruptedException e) {
Thread.currentThread()
.interrupt();
throw ExceptionSoftener.throwSoftenedException(e);
}
return reactor;
}
private boolean isElastic() {
return supplier != null;
}
}
