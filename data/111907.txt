package io.github.jhipster.sample.web.rest;
import io.github.jhipster.sample.domain.Operation;
import io.github.jhipster.sample.repository.OperationRepository;
import io.github.jhipster.sample.web.rest.errors.BadRequestAlertException;
import io.github.jhipster.web.util.HeaderUtil;
import io.github.jhipster.web.util.PaginationUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;
@RestController
@RequestMapping("/api")
@Transactional
public class OperationResource {
private final Logger log = LoggerFactory.getLogger(OperationResource.class);
private static final String ENTITY_NAME = "operation";
@Value("${jhipster.clientApp.name}")
private String applicationName;
private final OperationRepository operationRepository;
public OperationResource(OperationRepository operationRepository) {
this.operationRepository = operationRepository;
}
@PostMapping("/operations")
public ResponseEntity<Operation> createOperation(@Valid @RequestBody Operation operation) throws URISyntaxException {
log.debug("REST request to save Operation : {}", operation);
if (operation.getId() != null) {
throw new BadRequestAlertException("A new operation cannot already have an ID", ENTITY_NAME, "idexists");
}
Operation result = operationRepository.save(operation);
return ResponseEntity.created(new URI("/api/operations/" + result.getId()))
.headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))
.body(result);
}
@PutMapping("/operations")
public ResponseEntity<Operation> updateOperation(@Valid @RequestBody Operation operation) throws URISyntaxException {
log.debug("REST request to update Operation : {}", operation);
if (operation.getId() == null) {
throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
}
Operation result = operationRepository.save(operation);
return ResponseEntity.ok()
.headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, operation.getId().toString()))
.body(result);
}
@GetMapping("/operations")
public ResponseEntity<List<Operation>> getAllOperations(Pageable pageable, @RequestParam(required = false, defaultValue = "false") boolean eagerload) {
log.debug("REST request to get a page of Operations");
Page<Operation> page;
if (eagerload) {
page = operationRepository.findAllWithEagerRelationships(pageable);
} else {
page = operationRepository.findAll(pageable);
}
HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);
return ResponseEntity.ok().headers(headers).body(page.getContent());
}
@GetMapping("/operations/{id}")
public ResponseEntity<Operation> getOperation(@PathVariable Long id) {
log.debug("REST request to get Operation : {}", id);
Optional<Operation> operation = operationRepository.findOneWithEagerRelationships(id);
return ResponseUtil.wrapOrNotFound(operation);
}
@DeleteMapping("/operations/{id}")
public ResponseEntity<Void> deleteOperation(@PathVariable Long id) {
log.debug("REST request to delete Operation : {}", id);
operationRepository.deleteById(id);
return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();
}
}
