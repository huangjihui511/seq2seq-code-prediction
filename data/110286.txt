package de.codecentric.boot.admin.client.registration;
import org.junit.Test;
import org.springframework.web.client.RestClientException;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
public class ApplicationRegistratorTest {
private final Application application = Application.create("AppName").managementUrl("http:
.healthUrl("http:
private final RegistrationClient registrationClient = mock(RegistrationClient.class);
@Test
public void register_should_return_true_when_successful() {
ApplicationRegistrator registrator = new ApplicationRegistrator(() -> this.application, this.registrationClient,
new String[] { "http:
when(this.registrationClient.register(any(), eq(this.application))).thenReturn("-id-");
assertThat(registrator.register()).isTrue();
assertThat(registrator.getRegisteredId()).isEqualTo("-id-");
}
@Test
public void register_should_return_false_when_failed() {
ApplicationRegistrator registrator = new ApplicationRegistrator(() -> this.application, this.registrationClient,
new String[] { "http:
when(this.registrationClient.register(any(), eq(this.application))).thenThrow(new RestClientException("Error"));
assertThat(registrator.register()).isFalse();
assertThat(registrator.register()).isFalse();
assertThat(registrator.getRegisteredId()).isNull();
}
@Test
public void register_should_try_next_on_error() {
ApplicationRegistrator registrator = new ApplicationRegistrator(() -> this.application, this.registrationClient,
new String[] { "http:
when(this.registrationClient.register("http:
.thenThrow(new RestClientException("Error"));
when(this.registrationClient.register("http:
assertThat(registrator.register()).isTrue();
assertThat(registrator.getRegisteredId()).isEqualTo("-id-");
}
@Test
public void deregister_should_deregister_at_server() {
ApplicationRegistrator registrator = new ApplicationRegistrator(() -> this.application, this.registrationClient,
new String[] { "http:
when(this.registrationClient.register(any(), eq(this.application))).thenReturn("-id-");
registrator.register();
registrator.deregister();
assertThat(registrator.getRegisteredId()).isNull();
verify(this.registrationClient).deregister("http:
}
@Test
public void deregister_should_not_deregister_when_not_registered() {
ApplicationRegistrator registrator = new ApplicationRegistrator(() -> this.application, this.registrationClient,
new String[] { "http:
registrator.deregister();
verify(this.registrationClient, never()).deregister(any(), any());
}
@Test
public void deregister_should_try_next_on_error() {
ApplicationRegistrator registrator = new ApplicationRegistrator(() -> this.application, this.registrationClient,
new String[] { "http:
when(this.registrationClient.register(any(), eq(this.application))).thenReturn("-id-");
doThrow(new RestClientException("Error")).when(this.registrationClient).deregister("http:
"-id-");
registrator.register();
registrator.deregister();
assertThat(registrator.getRegisteredId()).isNull();
verify(this.registrationClient).deregister("http:
verify(this.registrationClient).deregister("http:
}
@Test
public void register_should_register_on_multiple_servers() {
ApplicationRegistrator registrator = new ApplicationRegistrator(() -> this.application, this.registrationClient,
new String[] { "http:
when(this.registrationClient.register(any(), eq(this.application))).thenReturn("-id-");
assertThat(registrator.register()).isTrue();
assertThat(registrator.getRegisteredId()).isEqualTo("-id-");
verify(this.registrationClient).register("http:
verify(this.registrationClient).register("http:
}
@Test
public void deregister_should_deregister_on_multiple_servers() {
ApplicationRegistrator registrator = new ApplicationRegistrator(() -> this.application, this.registrationClient,
new String[] { "http:
when(this.registrationClient.register(any(), eq(this.application))).thenReturn("-id-");
registrator.register();
registrator.deregister();
assertThat(registrator.getRegisteredId()).isNull();
verify(this.registrationClient).deregister("http:
verify(this.registrationClient).deregister("http:
}
}
