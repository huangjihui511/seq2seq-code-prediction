package org.springframework.data.mongodb.core;
import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.*;
import lombok.Data;
import org.bson.Document;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.mongodb.MongoDatabaseFactory;
import org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;
import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
import org.springframework.data.mongodb.core.index.HashedIndex;
import org.springframework.data.mongodb.core.index.Index;
import org.springframework.data.mongodb.core.mapping.Field;
import org.springframework.data.mongodb.core.mapping.MongoMappingContext;
import org.springframework.data.mongodb.core.query.Collation;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.IndexOptions;
@ExtendWith(MockitoExtension.class)
public class DefaultIndexOperationsUnitTests {
private MongoTemplate template;
@Mock MongoDatabaseFactory factory;
@Mock MongoDatabase db;
@Mock MongoCollection<Document> collection;
private MongoExceptionTranslator exceptionTranslator = new MongoExceptionTranslator();
private MappingMongoConverter converter;
private MongoMappingContext mappingContext;
@BeforeEach
void setUp() {
when(factory.getMongoDatabase()).thenReturn(db);
when(factory.getExceptionTranslator()).thenReturn(exceptionTranslator);
when(db.getCollection(any(), any(Class.class))).thenReturn(collection);
when(collection.createIndex(any(), any(IndexOptions.class))).thenReturn("OK");
this.mappingContext = new MongoMappingContext();
this.converter = spy(new MappingMongoConverter(new DefaultDbRefResolver(factory), mappingContext));
this.template = new MongoTemplate(factory, converter);
}
@Test 
void indexOperationsMapFieldNameCorrectly() {
indexOpsFor(Jedi.class).ensureIndex(new Index("name", Direction.DESC));
verify(collection).createIndex(eq(new Document("firstname", -1)), any());
}
@Test 
void ensureIndexDoesNotSetCollectionIfNoDefaultDefined() {
indexOpsFor(Jedi.class).ensureIndex(new Index("firstname", Direction.DESC));
ArgumentCaptor<IndexOptions> options = ArgumentCaptor.forClass(IndexOptions.class);
verify(collection).createIndex(any(), options.capture());
assertThat(options.getValue().getCollation()).isNull();
}
@Test 
void ensureIndexUsesDefaultCollationIfNoneDefinedInOptions() {
indexOpsFor(Sith.class).ensureIndex(new Index("firstname", Direction.DESC));
ArgumentCaptor<IndexOptions> options = ArgumentCaptor.forClass(IndexOptions.class);
verify(collection).createIndex(any(), options.capture());
assertThat(options.getValue().getCollation())
.isEqualTo(com.mongodb.client.model.Collation.builder().locale("de_AT").build());
}
@Test 
void ensureIndexDoesNotUseDefaultCollationIfExplicitlySpecifiedInTheIndex() {
indexOpsFor(Sith.class).ensureIndex(new Index("firstname", Direction.DESC).collation(Collation.of("en_US")));
ArgumentCaptor<IndexOptions> options = ArgumentCaptor.forClass(IndexOptions.class);
verify(collection).createIndex(any(), options.capture());
assertThat(options.getValue().getCollation())
.isEqualTo(com.mongodb.client.model.Collation.builder().locale("en_US").build());
}
@Test 
void shouldCreateHashedIndexCorrectly() {
indexOpsFor(Jedi.class).ensureIndex(HashedIndex.hashed("name"));
verify(collection).createIndex(eq(new Document("firstname", "hashed")), any());
}
private DefaultIndexOperations indexOpsFor(Class<?> type) {
return new DefaultIndexOperations(template, template.getCollectionName(type), type);
}
@Data
static class Jedi {
@Field("firstname") String name;
}
@org.springframework.data.mongodb.core.mapping.Document(collation = "de_AT")
static class Sith {
@Field("firstname") String name;
}
}
