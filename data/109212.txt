package io.realm.examples.newsreader.ui.main;
import android.content.Intent;
import android.support.annotation.NonNull;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import io.reactivex.disposables.Disposable;
import io.realm.examples.newsreader.model.Model;
import io.realm.examples.newsreader.model.entity.NYTimesStory;
import io.realm.examples.newsreader.ui.Presenter;
import io.realm.examples.newsreader.ui.details.DetailsActivity;
public class MainPresenter implements Presenter {
private final MainActivity view;
private final Model model;
private List<NYTimesStory> storiesData;
private Map<String, String> sections;
private Disposable loaderDisposable;
private Disposable listDataDisposable;
public MainPresenter(MainActivity mainActivity, Model model) {
this.view = mainActivity;
this.model = model;
}
@Override
public void onCreate() {
sections = model.getSections();
ArrayList<String> sectionList = new ArrayList<>(sections.values());
Collections.sort(sectionList, (lhs, rhs) -> {
if (lhs.equals("Home")) return -1;
if (rhs.equals("Home")) return 1;
return lhs.compareToIgnoreCase(rhs);
});
view.configureToolbar(sectionList);
}
@Override
public void onResume() {
loaderDisposable = model.isNetworkUsed().subscribe(networkInUse -> view.showNetworkLoading(networkInUse));
sectionSelected(model.getCurrentSectionKey());
}
@Override
public void onPause() {
loaderDisposable.dispose();
listDataDisposable.dispose();
}
@Override
public void onDestroy() {
}
public void refreshList() {
model.reloadNewsFeed();
view.hideRefreshing();
}
public void listItemSelected(int position) {
Intent intent = DetailsActivity.getIntent(view, storiesData.get(position));
view.startActivity(intent);
}
public void titleSpinnerSectionSelected(@NonNull String sectionLabel) {
for (String key : sections.keySet()) {
if (sections.get(key).equals(sectionLabel)) {
sectionSelected(key);
break;
}
}
}
private void sectionSelected(@NonNull String sectionKey) {
model.selectSection(sectionKey);
if (listDataDisposable != null) {
listDataDisposable.dispose();
}
listDataDisposable = model.getSelectedNewsFeed()
.subscribe(stories -> {
storiesData = stories;
view.showList(stories);
});
}
}
