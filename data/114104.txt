package org.apache.parquet.format.event;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TList;
import org.apache.thrift.protocol.TMap;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TSet;
import org.apache.thrift.protocol.TType;
import org.apache.parquet.format.event.TypedConsumer.ListConsumer;
import org.apache.parquet.format.event.TypedConsumer.MapConsumer;
import org.apache.parquet.format.event.TypedConsumer.SetConsumer;
public final class EventBasedThriftReader {
private final TProtocol protocol;
public EventBasedThriftReader(TProtocol protocol) {
this.protocol = protocol;
}
public void readStruct(FieldConsumer c) throws TException {
protocol.readStructBegin();
readStructContent(c);
protocol.readStructEnd();
}
public void readStructContent(FieldConsumer c) throws TException {
TField field;
while (true) {
field = protocol.readFieldBegin();
if (field.type == TType.STOP) {
break;
}
c.consumeField(protocol, this, field.id, field.type);
}
}
public void readSetContent(SetConsumer eventConsumer, TSet tSet)
throws TException {
for (int i = 0; i < tSet.size; i++) {
eventConsumer.consumeElement(protocol, this, tSet.elemType);
}
}
public void readMapContent(MapConsumer eventConsumer, TMap tMap)
throws TException {
for (int i = 0; i < tMap.size; i++) {
eventConsumer.consumeEntry(protocol, this, tMap.keyType, tMap.valueType);
}
}
public void readMapEntry(byte keyType, TypedConsumer keyConsumer, byte valueType, TypedConsumer valueConsumer)
throws TException {
keyConsumer.read(protocol, this, keyType);
valueConsumer.read(protocol, this, valueType);
}
public void readListContent(ListConsumer eventConsumer, TList tList)
throws TException {
for (int i = 0; i < tList.size; i++) {
eventConsumer.consumeElement(protocol, this, tList.elemType);
}
}
}
