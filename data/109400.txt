package com.facebook.presto.cost;
import com.facebook.presto.spi.relation.VariableReferenceExpression;
import java.util.function.BiFunction;
import static java.lang.Double.max;
import static java.lang.Double.min;
public final class SemiJoinStatsCalculator
{
private SemiJoinStatsCalculator() {}
private static final double MIN_ANTI_JOIN_FILTER_COEFFICIENT = 0.5;
public static PlanNodeStatsEstimate computeSemiJoin(PlanNodeStatsEstimate sourceStats, PlanNodeStatsEstimate filteringSourceStats, VariableReferenceExpression sourceJoinVariable, VariableReferenceExpression filteringSourceJoinVariable)
{
return compute(sourceStats, filteringSourceStats, sourceJoinVariable, filteringSourceJoinVariable,
(sourceJoinSymbolStats, filteringSourceJoinSymbolStats) ->
min(filteringSourceJoinSymbolStats.getDistinctValuesCount(), sourceJoinSymbolStats.getDistinctValuesCount()));
}
public static PlanNodeStatsEstimate computeAntiJoin(PlanNodeStatsEstimate sourceStats, PlanNodeStatsEstimate filteringSourceStats, VariableReferenceExpression sourceJoinVariable, VariableReferenceExpression filteringSourceJoinVariable)
{
return compute(sourceStats, filteringSourceStats, sourceJoinVariable, filteringSourceJoinVariable,
(sourceJoinSymbolStats, filteringSourceJoinSymbolStats) ->
max(sourceJoinSymbolStats.getDistinctValuesCount() * MIN_ANTI_JOIN_FILTER_COEFFICIENT,
sourceJoinSymbolStats.getDistinctValuesCount() - filteringSourceJoinSymbolStats.getDistinctValuesCount()));
}
private static PlanNodeStatsEstimate compute(
PlanNodeStatsEstimate sourceStats,
PlanNodeStatsEstimate filteringSourceStats,
VariableReferenceExpression sourceJoinVariable,
VariableReferenceExpression filteringSourceJoinVariable,
BiFunction<VariableStatsEstimate, VariableStatsEstimate, Double> retainedNdvProvider)
{
VariableStatsEstimate sourceJoinSymbolStats = sourceStats.getVariableStatistics(sourceJoinVariable);
VariableStatsEstimate filteringSourceJoinSymbolStats = filteringSourceStats.getVariableStatistics(filteringSourceJoinVariable);
double retainedNdv = retainedNdvProvider.apply(sourceJoinSymbolStats, filteringSourceJoinSymbolStats);
VariableStatsEstimate newSourceJoinSymbolStats = VariableStatsEstimate.buildFrom(sourceJoinSymbolStats)
.setNullsFraction(0)
.setDistinctValuesCount(retainedNdv)
.build();
double sourceDistinctValuesCount = sourceJoinSymbolStats.getDistinctValuesCount();
if (sourceDistinctValuesCount == 0) {
return PlanNodeStatsEstimate.buildFrom(sourceStats)
.addVariableStatistics(sourceJoinVariable, newSourceJoinSymbolStats)
.setOutputRowCount(0)
.build();
}
double filterFactor = sourceJoinSymbolStats.getValuesFraction() * retainedNdv / sourceDistinctValuesCount;
double outputRowCount = sourceStats.getOutputRowCount() * filterFactor;
return PlanNodeStatsEstimate.buildFrom(sourceStats)
.addVariableStatistics(sourceJoinVariable, newSourceJoinSymbolStats)
.setOutputRowCount(outputRowCount)
.build();
}
}
