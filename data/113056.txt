package org.apache.fontbox.ttf.model;
import java.util.List;
import java.util.Map;
import java.util.Set;
public class MapBackedScriptFeature implements ScriptFeature
{
private final String name;
private final Map<List<Integer>, Integer> featureMap;
public MapBackedScriptFeature(String name, Map<List<Integer>, Integer> featureMap)
{
this.name = name;
this.featureMap = featureMap;
}
@Override
public String getName()
{
return name;
}
@Override
public Set<List<Integer>> getAllGlyphIdsForSubstitution()
{
return featureMap.keySet();
}
@Override
public boolean canReplaceGlyphs(List<Integer> glyphIds)
{
return featureMap.containsKey(glyphIds);
}
@Override
public Integer getReplacementForGlyphs(List<Integer> glyphIds)
{
if (!canReplaceGlyphs(glyphIds))
{
throw new UnsupportedOperationException(
"The glyphs " + glyphIds + " cannot be replaced");
}
return featureMap.get(glyphIds);
}
@Override
public int hashCode()
{
final int prime = 31;
int result = 1;
result = prime * result + ((featureMap == null) ? 0 : featureMap.hashCode());
result = prime * result + ((name == null) ? 0 : name.hashCode());
return result;
}
@Override
public boolean equals(Object obj)
{
if (this == obj)
{
return true;
}
if (obj == null)
{
return false;
}
if (getClass() != obj.getClass())
{
return false;
}
MapBackedScriptFeature other = (MapBackedScriptFeature) obj;
if (featureMap == null)
{
if (other.featureMap != null)
{
return false;
}
}
else if (!featureMap.equals(other.featureMap))
{
return false;
}
if (name == null)
{
if (other.name != null)
{
return false;
}
}
else if (!name.equals(other.name))
{
return false;
}
return true;
}
}
