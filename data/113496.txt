package com.pokegoapi.api.map.fort;
import POGOProtos.Data.PokemonDataOuterClass.PokemonData;
import POGOProtos.Data.Raid.RaidInfoOuterClass.RaidInfo;
import POGOProtos.Enums.RaidLevelOuterClass.RaidLevel;
import com.pokegoapi.api.PokemonGo;
import com.pokegoapi.api.gym.Gym;
import lombok.Getter;
public class Raid {
private final PokemonGo api;
@Getter
private final Gym gym;
@Getter
private final RaidInfo raidInfo;
public Raid(PokemonGo api, Gym gym, RaidInfo raidInfo) {
this.api = api;
this.gym = gym;
this.raidInfo = raidInfo;
}
public long getRaidSeed() {
return raidInfo.getRaidSeed();
}
public long getRaidSpawnMs() {
return raidInfo.getRaidSpawnMs();
}
public long getRaidBattleMs() {
return raidInfo.getRaidBattleMs();
}
public long getRaidEndMs() {
return raidInfo.getRaidEndMs();
}
public boolean hasRaidPokemon() {
return raidInfo.hasRaidPokemon();
}
public PokemonData getRaidPokemon() {
return raidInfo.getRaidPokemon();
}
public RaidLevel getRaidLevel() {
return raidInfo.getRaidLevel();
}
public boolean getComplete() {
return raidInfo.getComplete();
}
public boolean getIsExclusive() {
return raidInfo.getIsExclusive();
}
public String getId() {
return gym.getId();
}
public double getLatitude() {
return gym.getLatitude();
}
public double getLongitude() {
return gym.getLongitude();
}
@Override
public int hashCode() {
return getId().hashCode();
}
@Override
public boolean equals(Object obj) {
return obj instanceof Raid && ((Raid) obj).getId().equals(getId());
}
}
