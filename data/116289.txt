package org.spongepowered.api.service.context;
import static com.google.common.base.Preconditions.checkNotNull;
import com.google.common.collect.Maps;
import java.util.Map;
public final class Context implements Map.Entry<String, String> {
public static final String USER_KEY = "user";
public static final String WORLD_KEY = "world";
public static final String DIMENSION_KEY = "dimension";
public static final String REMOTE_IP_KEY = "remoteip";
public static final String LOCAL_HOST_KEY = "localhost";
public static final String LOCAL_IP_KEY = "localip";
public static final String LOCAL_PORT_KEY = "localport"; 
private final Map.Entry<String, String> wrapped;
public Context(String key, String value) {
checkNotNull(key, "key");
checkNotNull(value, "value");
this.wrapped = Maps.immutableEntry(key, value);
}
@Override
public String getKey() {
return this.wrapped.getKey();
}
@Override
public String getValue() {
return this.wrapped.getValue();
}
@Deprecated
public String getType() {
return getKey();
}
@Deprecated
public String getName() {
return getValue();
}
@Override
@Deprecated
public String setValue(String value) {
throw new UnsupportedOperationException("Contexts are immutable");
}
@Override
public boolean equals(Object o) {
if (this == o) {
return true;
}
return o instanceof Map.Entry<?, ?> && this.wrapped.equals(o);
}
@Override
public int hashCode() {
return this.wrapped.hashCode();
}
@Override
public String toString() {
return getKey() + "=" + getValue();
}
}
