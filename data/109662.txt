package com.google.inject.internal;
import com.google.common.base.MoreObjects;
import com.google.inject.Key;
import com.google.inject.internal.InjectorImpl.JitLimitation;
import com.google.inject.spi.Dependency;
final class FactoryProxy<T> implements InternalFactory<T>, CreationListener {
private final InjectorImpl injector;
private final Key<T> key;
private final Key<? extends T> targetKey;
private final Object source;
private InternalFactory<? extends T> targetFactory;
FactoryProxy(InjectorImpl injector, Key<T> key, Key<? extends T> targetKey, Object source) {
this.injector = injector;
this.key = key;
this.targetKey = targetKey;
this.source = source;
}
@Override
public void notify(final Errors errors) {
try {
targetFactory =
injector.getInternalFactory(
targetKey, errors.withSource(source), JitLimitation.NEW_OR_EXISTING_JIT);
} catch (ErrorsException e) {
errors.merge(e.getErrors());
}
}
@Override
public T get(InternalContext context, Dependency<?> dependency, boolean linked)
throws InternalProvisionException {
Key<? extends T> localTargetKey = targetKey;
context.pushState(localTargetKey, source);
try {
return targetFactory.get(context, dependency, true);
} catch (InternalProvisionException ipe) {
throw ipe.addSource(localTargetKey);
} finally {
context.popState();
}
}
@Override
public String toString() {
return MoreObjects.toStringHelper(FactoryProxy.class)
.add("key", key)
.add("provider", targetFactory)
.toString();
}
}
