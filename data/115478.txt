package org.gnucash.android.model;
import android.support.annotation.NonNull;
import android.util.Log;
import com.crashlytics.android.Crashlytics;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;
public final class Money implements Comparable<Money>{
private Commodity mCommodity;
private BigDecimal mAmount;
protected RoundingMode ROUNDING_MODE = RoundingMode.HALF_EVEN;
public static String DEFAULT_CURRENCY_CODE = "USD";
private static Money sDefaultZero;
public static Money getZeroInstance(){
if (sDefaultZero == null) {
sDefaultZero = new Money(BigDecimal.ZERO, Commodity.DEFAULT_COMMODITY);
}
return sDefaultZero;
}
public static BigDecimal getBigDecimal(long numerator, long denominator) {
int scale;
if (numerator == 0 && denominator == 0) {
denominator = 1;
}
scale = Integer.numberOfTrailingZeros((int)denominator);
return new BigDecimal(BigInteger.valueOf(numerator), scale);
}
public Money(BigDecimal amount, Commodity commodity){
this.mCommodity = commodity;
setAmount(amount); 
}
public Money(String amount, String currencyCode){
mCommodity = Commodity.getInstance(currencyCode);
setAmount(new BigDecimal(amount));
}
public Money(long numerator, long denominator, String currencyCode){
mAmount = getBigDecimal(numerator, denominator);
setCommodity(currencyCode);
}
public Money(Money money){
setCommodity(money.getCommodity());
setAmount(money.asBigDecimal());
}
public static Money createZeroInstance(@NonNull String currencyCode){
Commodity commodity = Commodity.getInstance(currencyCode);
return new Money(BigDecimal.ZERO, commodity);
}
public Commodity getCommodity(){
return mCommodity;
}
public Money withCurrency(@NonNull Commodity commodity){
return new Money(mAmount, commodity);
}
private void setCommodity(@NonNull Commodity commodity){
this.mCommodity = commodity;
}
private void setCommodity(@NonNull String currencyCode){
mCommodity = Commodity.getInstance(currencyCode);
}
public long getNumerator() {
try {
return mAmount.scaleByPowerOfTen(getScale()).longValueExact();
} catch (ArithmeticException e) {
String msg = "Currency " + mCommodity.getCurrencyCode() +
" with scale " + getScale() +
" has amount " + mAmount.toString();
Crashlytics.log(msg);
Log.e(getClass().getName(), msg);
throw e;
}
}
public long getDenominator() {
int scale = getScale();
return BigDecimal.ONE.scaleByPowerOfTen(scale).longValueExact();
}
private int getScale() {
int scale = mCommodity.getSmallestFractionDigits();
if (scale < 0) {
scale = mAmount.scale();
}
if (scale < 0) {
scale = 0;
}
return scale;
}
public BigDecimal asBigDecimal() {
return mAmount.setScale(mCommodity.getSmallestFractionDigits(), RoundingMode.HALF_EVEN);
}
public double asDouble(){
return mAmount.doubleValue();
}
public String asString(){
return toPlainString();
}
public String formattedString(Locale locale){
NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(locale);
String symbol;
if (mCommodity.equals(Commodity.USD) && !locale.equals(Locale.US)) {
symbol = "US$";
} else {
symbol = mCommodity.getSymbol();
}
DecimalFormatSymbols decimalFormatSymbols = ((DecimalFormat)currencyFormat).getDecimalFormatSymbols();
decimalFormatSymbols.setCurrencySymbol(symbol);
((DecimalFormat)currencyFormat).setDecimalFormatSymbols(decimalFormatSymbols);
currencyFormat.setMinimumFractionDigits(mCommodity.getSmallestFractionDigits());
currencyFormat.setMaximumFractionDigits(mCommodity.getSmallestFractionDigits());
return currencyFormat.format(asDouble());
NumberFormat formatter = NumberFormat.getInstance(locale);
formatter.setMinimumFractionDigits(mCommodity.getSmallestFractionDigits());
formatter.setMaximumFractionDigits(mCommodity.getSmallestFractionDigits());
Currency currency = Currency.getInstance(mCommodity.getCurrencyCode());
return formatter.format(asDouble()) + " " + currency.getSymbol(locale);
}
public String formattedString(){
return formattedString(Locale.getDefault());
}
public Money negate(){
return new Money(mAmount.negate(), mCommodity);
}
private void setAmount(@NonNull BigDecimal amount) {
mAmount = amount.setScale(mCommodity.getSmallestFractionDigits(), ROUNDING_MODE);
}
public Money add(Money addend){
if (!mCommodity.equals(addend.mCommodity))
throw new CurrencyMismatchException();
BigDecimal bigD = mAmount.add(addend.mAmount);
return new Money(bigD, mCommodity);
}
public Money subtract(Money subtrahend){
if (!mCommodity.equals(subtrahend.mCommodity))
throw new CurrencyMismatchException();
BigDecimal bigD = mAmount.subtract(subtrahend.mAmount);
return new Money(bigD, mCommodity);
}
public Money divide(Money divisor){
if (!mCommodity.equals(divisor.mCommodity))
throw new CurrencyMismatchException();
BigDecimal bigD = mAmount.divide(divisor.mAmount, mCommodity.getSmallestFractionDigits(), ROUNDING_MODE);
return new Money(bigD, mCommodity);
}
public Money divide(int divisor){
Money moneyDiv = new Money(new BigDecimal(divisor), mCommodity);
return divide(moneyDiv);
}
public Money multiply(Money money){
if (!mCommodity.equals(money.mCommodity))
throw new CurrencyMismatchException();
BigDecimal bigD = mAmount.multiply(money.mAmount);
return new Money(bigD, mCommodity);
}
public Money multiply(int multiplier){
Money moneyFactor = new Money(new BigDecimal(multiplier), mCommodity);
return multiply(moneyFactor);
}
public Money multiply(@NonNull BigDecimal multiplier){
return new Money(mAmount.multiply(multiplier), mCommodity);
}
public boolean isNegative(){
return mAmount.compareTo(BigDecimal.ZERO) == -1;
}
public String toPlainString(){
return mAmount.setScale(mCommodity.getSmallestFractionDigits(), ROUNDING_MODE).toPlainString();
}
public String toLocaleString(){
return String.format(Locale.getDefault(), "%.2f", asDouble());
}
@Override
public String toString() {
return formattedString(Locale.getDefault());
}
@Override
public int hashCode() {
final int prime = 31;
int result = 1;
result = prime * result + (mAmount.hashCode());
result = prime * result + (mCommodity.hashCode());
return result;
}
@Override
public boolean equals(Object obj) {
if (this == obj)
return true;
if (obj == null)
return false;
if (getClass() != obj.getClass())
return false;
Money other = (Money) obj;
if (!mAmount.equals(other.mAmount))
return false;
if (!mCommodity.equals(other.mCommodity))
return false;
return true;
}
@Override
public int compareTo(@NonNull Money another) {
if (!mCommodity.equals(another.mCommodity))
throw new CurrencyMismatchException();
return mAmount.compareTo(another.mAmount);
}
public Money abs() {
return new Money(mAmount.abs(), mCommodity);
}
public boolean isAmountZero() {
return mAmount.compareTo(BigDecimal.ZERO) == 0;
}
public class CurrencyMismatchException extends IllegalArgumentException{
@Override
public String getMessage() {
return "Cannot perform operation on Money instances with different currencies";
}
}
}
