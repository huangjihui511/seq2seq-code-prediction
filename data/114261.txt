package com.datumbox.framework.core.common.text.parsers;
import com.datumbox.framework.core.common.text.StringCleaner;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
which can be used to sanitize, clean up and manipulate HTML documents.
public class HTMLParser {
private static final Pattern IMG_ALT_TITLE_PATTERN = Pattern.compile("<[\\s]*img[^>]*[alt|title]=[\\s]*[\\\"']?([^>\\\"']+)[\\\"']?[^>]*>", Pattern.DOTALL|Pattern.CASE_INSENSITIVE);
private static final Pattern NON_TEXT_TAGS_PATTERN = Pattern.compile("<[\\s]*(head|style|script|object|embed|applet|noframes|noscript|noembed|option)[^>]*?>.*?</\\1>", Pattern.DOTALL|Pattern.CASE_INSENSITIVE);
private static final Pattern REMOVE_ATTRIBUTES_PATTERN = Pattern.compile("<([a-z!][a-z0-9]*)[^>]*?(/?)>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
private static final Pattern TITLE_PATTERN = Pattern.compile("<title[^>]*>(.*?)</title>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
private static final Pattern HYPERLINK_PATTERN = Pattern.compile("<[\\s]*a[^>]*href[\\s]*=[\\s]*[\\\"']([^\\\"']*)[\\\"'][^>]*>(.*?)</a>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
private static final Pattern METATAG_PATTERN = Pattern.compile("<[\\s]*meta[^>]*name[\\s]*=[\\s]*[\\\"']([^\\\"']*)[\\\"'][^>]*content[\\s]*=[\\s]*[\\\"']([^\\\"']*)[\\\"'][^>]*>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
private static final Pattern HX_PATTERN = Pattern.compile("<[\\s]*(H[1-6])[^>]*?>(.*?)</\\1>", Pattern.DOTALL|Pattern.CASE_INSENSITIVE);
private static final String[][] ESCAPES = {
{"\"",     "quot"}, 
{"&",      "amp"}, 
{"<",      "lt"}, 
{">",      "gt"}, 
{"\u00A0", "nbsp"}, 
{"\u00A1", "iexcl"}, 
{"\u00A2", "cent"}, 
{"\u00A3", "pound"}, 
{"\u00A4", "curren"}, 
{"\u00A5", "yen"}, 
{"\u00A6", "brvbar"}, 
{"\u00A7", "sect"}, 
{"\u00A8", "uml"}, 
{"\u00A9", "copy"}, 
{"\u00AA", "ordf"}, 
{"\u00AB", "laquo"}, 
{"\u00AC", "not"}, 
{"\u00AD", "shy"}, 
{"\u00AE", "reg"}, 
{"\u00AF", "macr"}, 
{"\u00B0", "deg"}, 
{"\u00B1", "plusmn"}, 
{"\u00B2", "sup2"}, 
{"\u00B3", "sup3"}, 
{"\u00B4", "acute"}, 
{"\u00B5", "micro"}, 
{"\u00B6", "para"}, 
{"\u00B7", "middot"}, 
{"\u00B8", "cedil"}, 
{"\u00B9", "sup1"}, 
{"\u00BA", "ordm"}, 
{"\u00BB", "raquo"}, 
{"\u00BC", "frac14"}, 
{"\u00BD", "frac12"}, 
{"\u00BE", "frac34"}, 
{"\u00BF", "iquest"}, 
{"\u00C0", "Agrave"}, 
{"\u00C1", "Aacute"}, 
{"\u00C2", "Acirc"}, 
{"\u00C3", "Atilde"}, 
{"\u00C4", "Auml"}, 
{"\u00C5", "Aring"}, 
{"\u00C6", "AElig"}, 
{"\u00C7", "Ccedil"}, 
{"\u00C8", "Egrave"}, 
{"\u00C9", "Eacute"}, 
{"\u00CA", "Ecirc"}, 
{"\u00CB", "Euml"}, 
{"\u00CC", "Igrave"}, 
{"\u00CD", "Iacute"}, 
{"\u00CE", "Icirc"}, 
{"\u00CF", "Iuml"}, 
{"\u00D0", "ETH"}, 
{"\u00D1", "Ntilde"}, 
{"\u00D2", "Ograve"}, 
{"\u00D3", "Oacute"}, 
{"\u00D4", "Ocirc"}, 
{"\u00D5", "Otilde"}, 
{"\u00D6", "Ouml"}, 
{"\u00D7", "times"}, 
{"\u00D8", "Oslash"}, 
{"\u00D9", "Ugrave"}, 
{"\u00DA", "Uacute"}, 
{"\u00DB", "Ucirc"}, 
{"\u00DC", "Uuml"}, 
{"\u00DD", "Yacute"}, 
{"\u00DE", "THORN"}, 
{"\u00DF", "szlig"}, 
{"\u00E0", "agrave"}, 
{"\u00E1", "aacute"}, 
{"\u00E2", "acirc"}, 
{"\u00E3", "atilde"}, 
{"\u00E4", "auml"}, 
{"\u00E5", "aring"}, 
{"\u00E6", "aelig"}, 
{"\u00E7", "ccedil"}, 
{"\u00E8", "egrave"}, 
{"\u00E9", "eacute"}, 
{"\u00EA", "ecirc"}, 
{"\u00EB", "euml"}, 
{"\u00EC", "igrave"}, 
{"\u00ED", "iacute"}, 
{"\u00EE", "icirc"}, 
{"\u00EF", "iuml"}, 
{"\u00F0", "eth"}, 
{"\u00F1", "ntilde"}, 
{"\u00F2", "ograve"}, 
{"\u00F3", "oacute"}, 
{"\u00F4", "ocirc"}, 
{"\u00F5", "otilde"}, 
{"\u00F6", "ouml"}, 
{"\u00F7", "divide"}, 
{"\u00F8", "oslash"}, 
{"\u00F9", "ugrave"}, 
{"\u00FA", "uacute"}, 
{"\u00FB", "ucirc"}, 
{"\u00FC", "uuml"}, 
{"\u00FD", "yacute"}, 
{"\u00FE", "thorn"}, 
{"\u00FF", "yuml"}, 
};
private static final int MIN_ESCAPE = 2;
private static final int MAX_ESCAPE = 6;
private static final HashMap<String, CharSequence> LOOKUP_MAP;
static {
LOOKUP_MAP = new HashMap<>();
for (final CharSequence[] seq : ESCAPES) {
LOOKUP_MAP.put(seq[1].toString(), seq[0]);
}
}
private static String unescapeHtml(final String input) {
StringBuilder writer = null;
int len = input.length();
int i = 1;
int st = 0;
while (true) {
while (i < len && input.charAt(i-1) != '&') {
i++;
}
if (i >= len) {
break;
}
int j = i;
while (j < len && j < i + MAX_ESCAPE + 1 && input.charAt(j) != ';') {
j++;
}
if (j == len || j < i + MIN_ESCAPE || j == i + MAX_ESCAPE + 1) {
i++;
continue;
}
if (input.charAt(i) == '#') {
int k = i + 1;
int radix = 10;
final char firstChar = input.charAt(k);
if (firstChar == 'x' || firstChar == 'X') {
k++;
radix = 16;
}
try {
int entityValue = Integer.parseInt(input.substring(k, j), radix);
if (writer == null) {
writer = new StringBuilder(input.length());
}
writer.append(input.substring(st, i - 1));
if (entityValue > 0xFFFF) {
final char[] chrs = Character.toChars(entityValue);
writer.append(chrs[0]);
writer.append(chrs[1]);
}
else if(entityValue == 39) {
writer.append('\'');
}
else {
writer.append(entityValue);
}
}
catch (NumberFormatException ex) {
i++;
continue;
}
}
else {
CharSequence value = LOOKUP_MAP.get(input.substring(i, j));
if (value == null) {
i++;
continue;
}
if (writer == null) {
writer = new StringBuilder(input.length());
}
writer.append(input.substring(st, i - 1));
writer.append(value);
}
st = j + 1;
i = st;
}
if (writer != null) {
writer.append(input.substring(st, len));
return writer.toString();
}
return input;
}
public static String replaceImgWithAlt(String html) {
Matcher m = IMG_ALT_TITLE_PATTERN.matcher(html);
if (m.find()) {
return m.replaceAll(" $1 ");
}
return html;
}
public static String removeComments(String html) {
return html.replaceAll("(?s)<!--.*?-->", "");
}
public static String unsafeRemoveAllTags(String html) {
return html.replaceAll("\\<.*?>"," ");
}
public static String safeRemoveAllTags(String html) {
html = removeNonTextTags(html);
html = unsafeRemoveAllTags(html);
return html;
}
private static String removeNonTextTags(String html) {
html = removeComments(html);
Matcher m = NON_TEXT_TAGS_PATTERN.matcher(html);
if(m.find()) {
html = m.replaceAll(" ");
}
return html;
}
public static String removeNonTextTagsAndAttributes(String html) {
html = removeNonTextTags(html);
Matcher m = REMOVE_ATTRIBUTES_PATTERN.matcher(html);
if(m.find()) {
html = m.replaceAll("<$1$2>");
}
html = unescapeHtml(html);
return html;
}
public static String extractText(String html) {
html = replaceImgWithAlt(html);
html = safeRemoveAllTags(html);
html = unescapeHtml(html);
return html;
}
private static String clear(String html) {
return StringCleaner.removeExtraSpaces(unescapeHtml(unsafeRemoveAllTags(html)));
}
public static String extractTitle(String html) {
Matcher m = TITLE_PATTERN.matcher(html);
if (m.find()) {
return clear(m.group(0));
}
return null;
}
public enum HyperlinkPart {
HTMLTAG,
URL,
ANCHORTEXT
}
public static Map<HyperlinkPart, List<String>> extractHyperlinks(String html) {
Map<HyperlinkPart, List<String>> hyperlinksMap = new HashMap<>();
hyperlinksMap.put(HyperlinkPart.HTMLTAG, new ArrayList<>());
hyperlinksMap.put(HyperlinkPart.URL, new ArrayList<>());
hyperlinksMap.put(HyperlinkPart.ANCHORTEXT, new ArrayList<>());
Matcher m = HYPERLINK_PATTERN.matcher(html);
while (m.find()) {
if(m.groupCount()==2) {
String tag = m.group(0);
String url = m.group(1);
String anchortext = m.group(2);
hyperlinksMap.get(HyperlinkPart.HTMLTAG).add(tag);
hyperlinksMap.get(HyperlinkPart.URL).add(url);
hyperlinksMap.get(HyperlinkPart.ANCHORTEXT).add(anchortext);
}
}
return hyperlinksMap;
}
public static Map<String, String> extractMetatags(String html) {
Map<String, String> metatagsMap = new HashMap<>();
Matcher m = METATAG_PATTERN.matcher(html);
while (m.find()) {
if(m.groupCount()==2) {
String name = m.group(1);
String content = m.group(2);
metatagsMap.put(clear(name), clear(content));
}
}
return metatagsMap;
}
public static Map<String, List<String>> extractHTMLheaders(String html) {
Map<String, List<String>> hxtagsMap = new HashMap<>();
for(int i=1;i<=6;++i) {
hxtagsMap.put("H"+i, new ArrayList<>());
}
Matcher m = HX_PATTERN.matcher(html);
while (m.find()) {
if(m.groupCount()==2) {
String tagType = m.group(1).toUpperCase(Locale.ENGLISH);
String content = m.group(2);
hxtagsMap.get(tagType).add(clear(content));
}
}
return hxtagsMap;
}
}
