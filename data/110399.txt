package org.jd.gui.util.swing;
import org.jd.gui.util.exception.ExceptionUtil;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
public class SwingUtil {
public static void installGtkPopupBugWorkaround() {
LookAndFeel laf = UIManager.getLookAndFeel();
Class<?> lafClass = laf.getClass();
if (!lafClass.getName().equals("com.sun.java.swing.plaf.gtk.GTKLookAndFeel")) return;
try {
Field field = lafClass.getDeclaredField("styleFactory");
boolean accessible = field.isAccessible();
field.setAccessible(true);
Object styleFactory = field.get(laf);
field.setAccessible(accessible);
Object style = getGtkStyle(styleFactory, new JPopupMenu(), "POPUP_MENU");
fixGtkThickness(style, "yThickness");
fixGtkThickness(style, "xThickness");
style = getGtkStyle(styleFactory, new JSeparator(), "POPUP_MENU_SEPARATOR");
fixGtkThickness(style, "yThickness");
} catch (Exception e) {
assert ExceptionUtil.printStackTrace(e);
}
}
private static void fixGtkThickness(Object style, String fieldName) throws Exception {
Field field = style.getClass().getDeclaredField(fieldName);
boolean accessible = field.isAccessible();
field.setAccessible(true);
field.setInt(style, Math.max(1, field.getInt(style)));
field.setAccessible(accessible);
}
private static Object getGtkStyle(Object styleFactory, JComponent component, String regionName) throws Exception {
Class<?> regionClass = Class.forName("javax.swing.plaf.synth.Region");
Field field = regionClass.getField(regionName);
Object region = field.get(regionClass);
Class<?> styleFactoryClass = styleFactory.getClass();
Method method = styleFactoryClass.getMethod("getStyle", JComponent.class, regionClass);
boolean accessible = method.isAccessible();
method.setAccessible(true);
Object style = method.invoke(styleFactory, component, region);
method.setAccessible(accessible);
return style;
}
public static void invokeLater(Runnable runnable) {
if (SwingUtilities.isEventDispatchThread()) {
runnable.run();
} else {
SwingUtilities.invokeLater(runnable);
}
}
public static Image getImage(String iconPath) {
return Toolkit.getDefaultToolkit().getImage(SwingUtil.class.getResource(iconPath));
}
public static ImageIcon newImageIcon(String iconPath) {
return new ImageIcon(getImage(iconPath));
}
public static Action newAction(String name, boolean enable, ActionListener listener) {
Action action = new AbstractAction(name) {
@Override
public void actionPerformed(ActionEvent actionEvent) {
listener.actionPerformed(actionEvent);
}
};
action.setEnabled(enable);
return action;
}
public static Action newAction(String name, ImageIcon icon, boolean enable, ActionListener listener) {
Action action = newAction(name, enable, listener);
action.putValue(Action.SMALL_ICON, icon);
return action;
}
public static Action newAction(ImageIcon icon, boolean enable, ActionListener listener) {
Action action = newAction(null, icon, enable, listener);
action.putValue(Action.SMALL_ICON, icon);
return action;
}
public static Action newAction(String name, ImageIcon icon, boolean enable, String shortDescription, ActionListener listener) {
Action action = newAction(name, icon, enable, listener);
action.putValue(Action.SHORT_DESCRIPTION, shortDescription);
return action;
}
public static Action newAction(String name, boolean enable, String shortDescription, ActionListener listener) {
Action action = newAction(name, enable, listener);
action.putValue(Action.SHORT_DESCRIPTION, shortDescription);
return action;
}
}
