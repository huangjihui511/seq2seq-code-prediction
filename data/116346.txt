package org.spongepowered.api.data.manipulator.mutable.common;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.data.DataContainer;
import org.spongepowered.api.data.key.Key;
import org.spongepowered.api.data.manipulator.DataManipulator;
import org.spongepowered.api.data.manipulator.ImmutableDataManipulator;
import org.spongepowered.api.data.value.BaseValue;
import org.spongepowered.api.data.value.mutable.Value;
public abstract class AbstractSingleEnumData<E extends Enum<E>, M extends DataManipulator<M, I>, I extends ImmutableDataManipulator<I, M>>
extends AbstractSingleData<E, M, I> {
@SuppressWarnings("unchecked")
@Deprecated
protected AbstractSingleEnumData(E value, Key<? extends BaseValue<E>> usedKey, E defaultValue) {
this((Key<Value<E>>) usedKey, value, defaultValue);
}
protected AbstractSingleEnumData(Key<Value<E>> usedKey, E value) {
this(usedKey, value, value);
}
protected AbstractSingleEnumData(Key<Value<E>> usedKey, E value, E defaultValue) {
super(usedKey, value, defaultValue);
}
@Override
public DataContainer toContainer() {
return super.toContainer();
}
@Override
protected DataContainer fillContainer(DataContainer dataContainer) {
return dataContainer.set(this.usedKey.getQuery(), this.value.name());
}
@SuppressWarnings("unchecked")
@Override
protected Value<E> getValueGetter() {
return Sponge.getRegistry().getValueFactory().createValue((Key<Value<E>>) this.usedKey, this.value, this.defaultValue);
}
}
