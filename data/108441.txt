package com.oracle.svm.agent;
import java.io.Closeable;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
public abstract class TraceWriter implements Closeable {
public static final String EXPLICIT_NULL = new String("null");
public static final String UNKNOWN_VALUE = new String("\0");
static Object handleSpecialValue(Object obj) {
if (obj == EXPLICIT_NULL) {
return null;
}
if (obj instanceof Object[]) {
Object[] array = (Object[]) obj;
Object[] newArray = null;
for (int i = 0; i < array.length; i++) {
Object newValue = handleSpecialValue(array[i]);
if (newValue != array[i]) {
if (newArray == null) {
newArray = Arrays.copyOf(array, array.length);
}
newArray[i] = newValue;
}
}
return (newArray != null) ? newArray : array;
}
return obj;
}
void traceInitialization() {
Map<String, Object> entry = new HashMap<>();
entry.put("tracer", "meta");
entry.put("event", "initialization");
entry.put("version", "1");
traceEntry(entry);
}
public void tracePhaseChange(String phase) {
Map<String, Object> entry = new HashMap<>();
entry.put("tracer", "meta");
entry.put("event", "phase_change");
entry.put("phase", phase);
traceEntry(entry);
}
public void traceCall(String tracer, String function, Object clazz, Object declaringClass, Object callerClass, Object result, Object... args) {
Map<String, Object> entry = new HashMap<>();
entry.put("tracer", tracer);
entry.put("function", function);
if (clazz != null) {
entry.put("class", handleSpecialValue(clazz));
}
if (declaringClass != null) {
entry.put("declaring_class", handleSpecialValue(declaringClass));
}
if (callerClass != null) {
entry.put("caller_class", handleSpecialValue(callerClass));
}
if (result != null) {
entry.put("result", handleSpecialValue(result));
}
if (args != null) {
entry.put("args", handleSpecialValue(args));
}
traceEntry(entry);
}
abstract void traceEntry(Map<String, Object> entry);
@Override
public abstract void close();
}
