package org.apache.zookeeper.server.jersey;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeSet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.ZooKeeper;
import org.apache.zookeeper.Watcher.Event.KeeperState;
import org.apache.zookeeper.server.jersey.cfg.Endpoint;
public class ZooKeeperService {
private static Logger LOG = LoggerFactory.getLogger(ZooKeeperService.class);
private static Map<String, Endpoint> contextMap = new HashMap<String, Endpoint>();
private static Map<String, ZooKeeper> zkMap = new HashMap<String, ZooKeeper>();
private static Map<String, SessionTimerTask> zkSessionTimers = new HashMap<String, SessionTimerTask>();
private static Timer timer = new Timer();
private static class MyWatcher implements Watcher {
final String contextPath;
public MyWatcher(String contextPath) {
this.contextPath = contextPath;
}
synchronized public void process(WatchedEvent event) {
if (event.getState() == KeeperState.Expired) {
close(contextPath);
}
}
}
private static class SessionTimerTask extends TimerTask {
private int delay;
private String contextPath, session;
private Timer timer;
public SessionTimerTask(int delayInSeconds, String session,
String contextPath, Timer timer) {
delay = delayInSeconds * 1000; 
this.contextPath = contextPath;
this.session = session;
this.timer = timer;
reset();
}
public SessionTimerTask(SessionTimerTask t) {
this(t.delay / 1000, t.session, t.contextPath, t.timer);
}
@Override
public void run() {
if (LOG.isInfoEnabled()) {
LOG.info(String.format("Session '%s' expired after "
+ "'%d' milliseconds.", session, delay));
}
ZooKeeperService.close(contextPath, session);
}
public void reset() {
timer.schedule(this, delay);
}
}
synchronized public static void mapContext(String contextPath, Endpoint e) {
contextMap.put(contextPath, e);
}
synchronized public static void resetTimer(String contextPath,
String session) {
if (session != null) {
String uri = concat(contextPath, session);
SessionTimerTask t = zkSessionTimers.remove(uri);
t.cancel();
zkSessionTimers.put(uri, new SessionTimerTask(t));
}
}
public static void close(String contextPath) {
close(contextPath, null);
}
synchronized public static void close(String contextPath, String session) {
String uri = concat(contextPath, session);
TimerTask t = zkSessionTimers.remove(uri);
if (t != null) {
t.cancel();
}
ZooKeeper zk = zkMap.remove(uri);
if (zk == null) {
return;
}
try {
zk.close();
} catch (InterruptedException e) {
LOG.error("Interrupted while closing ZooKeeper connection.", e);
}
}
synchronized public static void closeAll() {
Set<String> sessions = new TreeSet<String>(zkMap.keySet());
for (String key : sessions) {
close(key);
}
}
synchronized public static boolean isConnected(String contextPath,
String session) {
return zkMap.containsKey(concat(contextPath, session));
}
public static ZooKeeper getClient(String contextPath) throws IOException {
return getClient(contextPath, null);
}
public static ZooKeeper getClient(String contextPath, String session)
throws IOException {
return getClient(contextPath, session, 5);
}
synchronized public static ZooKeeper getClient(String contextPath,
String session, int expireTime) throws IOException {
final String connectionId = concat(contextPath, session);
ZooKeeper zk = zkMap.get(connectionId);
if (zk == null) {
if (LOG.isInfoEnabled()) {
LOG.info(String.format("creating new "
+ "connection for : '%s'", connectionId));
}
Endpoint e = contextMap.get(contextPath);
zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(
connectionId));
for (Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {
zk.addAuthInfo("digest", String.format("%s:%s", p.getKey(),
p.getValue()).getBytes());
}
zkMap.put(connectionId, zk);
if (session != null) {
zkSessionTimers.put(connectionId, new SessionTimerTask(
expireTime, session, contextPath, timer));
}
}
return zk;
}
private static String concat(String contextPath, String session) {
if (session != null) {
return String.format("%s@%s", contextPath, session);
}
return contextPath;
}
}
