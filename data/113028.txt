package org.apache.pdfbox.examples.pdmodel;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;
import org.apache.pdfbox.pdmodel.font.PDType0Font;
import org.apache.pdfbox.pdmodel.font.encoding.WinAnsiEncoding;
import org.apache.pdfbox.util.Matrix;
public class ShowTextWithPositioning
{
private static final float FONT_SIZE = 20.0f;
private ShowTextWithPositioning()
{
}
public static void main(String[] args) throws IOException
{
doIt("Hello World, this is a test!", "justify-example.pdf");
}
public static void doIt(String message, String outfile) throws IOException
{
try (PDDocument doc = new PDDocument();
InputStream is = PDDocument.class.getResourceAsStream("/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"))
{
PDFont font = PDType0Font.load(doc, is, true);
PDPage page = new PDPage(PDRectangle.A4);
doc.addPage(page);
float stringWidth = font.getStringWidth(message) * FONT_SIZE;
float stringHeight = font.getFontDescriptor().getFontBoundingBox().getHeight() * FONT_SIZE;
PDRectangle pageSize = page.getMediaBox();
try (PDPageContentStream contentStream = new PDPageContentStream(doc,
page, AppendMode.OVERWRITE, false))
{
contentStream.beginText();
contentStream.setFont(font, FONT_SIZE);
contentStream.setTextMatrix(
Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f));
contentStream.showText(message);
contentStream.setTextMatrix(
Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 2));
float justifyWidth = pageSize.getWidth() * 1000f - stringWidth;
List<Object> text = new ArrayList<>();
String[] parts = message.split("\\s");
float spaceWidth = (justifyWidth / (parts.length - 1)) / FONT_SIZE;
for (int i = 0; i < parts.length; i++)
{
if (i != 0)
{
text.add(" ");
text.add(-spaceWidth);
}
text.add(parts[i]);
}
contentStream.showTextWithPositioning(text.toArray());
contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 3));
text = new ArrayList<>();
justifyWidth = pageSize.getWidth() * 1000f - stringWidth;
float extraLetterWidth = (justifyWidth / (message.codePointCount(0, message.length()) - 1)) / FONT_SIZE;
for (int i = 0; i < message.length(); i += Character.charCount(message.codePointAt(i)))
{
if (i != 0)
{
text.add(-extraLetterWidth);
}
text.add(String.valueOf(Character.toChars(message.codePointAt(i))));
}
contentStream.showTextWithPositioning(text.toArray());
contentStream.setTextMatrix(
Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 4));
font = PDTrueTypeFont.load(doc, PDDocument.class.getResourceAsStream(
"/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"), WinAnsiEncoding.INSTANCE);
contentStream.setFont(font, FONT_SIZE);
contentStream.showText(message);
float wordSpacing = (pageSize.getWidth() * 1000f - stringWidth) / (parts.length - 1) / 1000;
contentStream.setTextMatrix(
Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 5));
font = PDTrueTypeFont.load(doc, PDDocument.class.getResourceAsStream(
"/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"), WinAnsiEncoding.INSTANCE);
contentStream.setFont(font, FONT_SIZE);
contentStream.setWordSpacing(wordSpacing);
contentStream.showText(message);
contentStream.setTextMatrix(
Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 6));
font = PDType0Font.load(doc, PDDocument.class.getResourceAsStream(
"/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"));
contentStream.setFont(font, FONT_SIZE);
contentStream.setWordSpacing(wordSpacing);
contentStream.showText(message);
contentStream.endText();
}
doc.save(outfile);
}
}
}
