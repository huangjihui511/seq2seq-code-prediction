package org.apache.pdfbox.pdmodel.encryption;
import java.io.IOException;
import org.apache.pdfbox.cos.COSArray;
import org.apache.pdfbox.cos.COSBase;
import org.apache.pdfbox.cos.COSBoolean;
import org.apache.pdfbox.cos.COSDictionary;
import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.cos.COSString;
import org.apache.pdfbox.pdmodel.common.COSObjectable;
public class PDEncryption implements COSObjectable
{
public static final int VERSION0_UNDOCUMENTED_UNSUPPORTED = 0;
public static final int VERSION1_40_BIT_ALGORITHM = 1;
public static final int VERSION2_VARIABLE_LENGTH_ALGORITHM = 2;
public static final int VERSION3_UNPUBLISHED_ALGORITHM = 3;
public static final int VERSION4_SECURITY_HANDLER = 4;
public static final String DEFAULT_NAME = "Standard";
public static final int DEFAULT_LENGTH = 40;
public static final int DEFAULT_VERSION = VERSION0_UNDOCUMENTED_UNSUPPORTED;
private final COSDictionary dictionary;
private SecurityHandler securityHandler;
public PDEncryption()
{
dictionary = new COSDictionary();
}
public PDEncryption(COSDictionary dictionary)
{
this.dictionary = dictionary;
securityHandler = SecurityHandlerFactory.INSTANCE.newSecurityHandlerForFilter(getFilter());
}
public SecurityHandler getSecurityHandler() throws IOException
{
if (securityHandler == null)
{
throw new IOException("No security handler for filter " + getFilter());
}
return securityHandler;
}
public void setSecurityHandler(SecurityHandler securityHandler)
{
this.securityHandler = securityHandler;
}
public boolean hasSecurityHandler()
{
return securityHandler == null;
}
@Override
public COSDictionary getCOSObject()
{
return dictionary;
}
public void setFilter(String filter)
{
dictionary.setItem(COSName.FILTER, COSName.getPDFName(filter));
}
public final String getFilter()
{
return dictionary.getNameAsString( COSName.FILTER );
}
public String getSubFilter()
{
return dictionary.getNameAsString( COSName.SUB_FILTER );
}
public void setSubFilter(String subfilter)
{
dictionary.setName(COSName.SUB_FILTER, subfilter);
}
public void setVersion(int version)
{
dictionary.setInt(COSName.V, version);
}
public int getVersion()
{
return dictionary.getInt( COSName.V, 0 );
}
public void setLength(int length)
{
dictionary.setInt(COSName.LENGTH, length);
}
public int getLength()
{
return dictionary.getInt( COSName.LENGTH, 40 );
}
public void setRevision(int revision)
{
dictionary.setInt(COSName.R, revision);
}
public int getRevision()
{
return dictionary.getInt( COSName.R, DEFAULT_VERSION );
}
public void setOwnerKey(byte[] o) throws IOException
{
dictionary.setItem(COSName.O, new COSString(o));
}
public byte[] getOwnerKey() throws IOException
{
byte[] o = null;
COSString owner = (COSString) dictionary.getDictionaryObject( COSName.O );
if( owner != null )
{
o = owner.getBytes();
}
return o;
}
public void setUserKey(byte[] u) throws IOException
{
dictionary.setItem(COSName.U, new COSString(u));
}
public byte[] getUserKey() throws IOException
{
byte[] u = null;
COSString user = (COSString) dictionary.getDictionaryObject( COSName.U );
if( user != null )
{
u = user.getBytes();
}
return u;
}
public void setOwnerEncryptionKey(byte[] oe) throws IOException
{
dictionary.setItem( COSName.OE, new COSString(oe) );
}
public byte[] getOwnerEncryptionKey() throws IOException
{
byte[] oe = null;
COSString ownerEncryptionKey = (COSString)dictionary.getDictionaryObject( COSName.OE );
if( ownerEncryptionKey != null )
{
oe = ownerEncryptionKey.getBytes();
}
return oe;
}
public void setUserEncryptionKey(byte[] ue) throws IOException
{
dictionary.setItem( COSName.UE, new COSString(ue) );
}
public byte[] getUserEncryptionKey() throws IOException
{
byte[] ue = null;
COSString userEncryptionKey = (COSString)dictionary.getDictionaryObject( COSName.UE );
if( userEncryptionKey != null )
{
ue = userEncryptionKey.getBytes();
}
return ue;
}
public void setPermissions(int permissions)
{
dictionary.setInt(COSName.P, permissions);
}
public int getPermissions()
{
return dictionary.getInt( COSName.P, 0 );
}
public boolean isEncryptMetaData()
{
boolean encryptMetaData = true;
COSBase value = dictionary.getDictionaryObject(COSName.ENCRYPT_META_DATA);
if (value instanceof COSBoolean)
{
encryptMetaData = ((COSBoolean)value).getValue();
}
return encryptMetaData;
}
public void setRecipients(byte[][] recipients) throws IOException
{
COSArray array = new COSArray();
for (byte[] recipient : recipients)
{
COSString recip = new COSString(recipient);
array.add(recip);
}
dictionary.setItem(COSName.RECIPIENTS, array);
array.setDirect(true);
}
public int getRecipientsLength()
{
COSArray array = (COSArray) dictionary.getItem(COSName.RECIPIENTS);
return array.size();
}
public COSString getRecipientStringAt(int i)
{
COSArray array = (COSArray) dictionary.getItem(COSName.RECIPIENTS);
return (COSString)array.get(i);
}
public PDCryptFilterDictionary getStdCryptFilterDictionary()
{
return getCryptFilterDictionary(COSName.STD_CF);
}
public PDCryptFilterDictionary getDefaultCryptFilterDictionary()
{
return getCryptFilterDictionary(COSName.DEFAULT_CRYPT_FILTER);
}
public PDCryptFilterDictionary getCryptFilterDictionary(COSName cryptFilterName)
{
COSBase base = dictionary.getDictionaryObject(COSName.CF);
if (base instanceof COSDictionary)
{
COSBase base2 = ((COSDictionary) base).getDictionaryObject(cryptFilterName);
if (base2 instanceof COSDictionary)
{
return new PDCryptFilterDictionary((COSDictionary) base2);
}
}
return null;
}
public void setCryptFilterDictionary(COSName cryptFilterName, PDCryptFilterDictionary cryptFilterDictionary)
{
COSDictionary cfDictionary = dictionary.getCOSDictionary(COSName.CF);
if (cfDictionary == null)
{
cfDictionary = new COSDictionary();
dictionary.setItem(COSName.CF, cfDictionary);
}
cfDictionary.setDirect(true); 
cfDictionary.setItem(cryptFilterName, cryptFilterDictionary.getCOSObject());
}
public void setStdCryptFilterDictionary(PDCryptFilterDictionary cryptFilterDictionary)
{
cryptFilterDictionary.getCOSObject().setDirect(true); 
setCryptFilterDictionary(COSName.STD_CF, cryptFilterDictionary);
}
public void setDefaultCryptFilterDictionary(PDCryptFilterDictionary defaultFilterDictionary)
{
defaultFilterDictionary.getCOSObject().setDirect(true); 
setCryptFilterDictionary(COSName.DEFAULT_CRYPT_FILTER, defaultFilterDictionary);
}
public COSName getStreamFilterName()
{
COSName stmF = (COSName) dictionary.getDictionaryObject( COSName.STM_F );
if (stmF == null)
{
stmF = COSName.IDENTITY;
}
return stmF;
}
public void setStreamFilterName(COSName streamFilterName)
{
dictionary.setItem(COSName.STM_F, streamFilterName);
}
public COSName getStringFilterName()
{
COSName strF = (COSName) dictionary.getDictionaryObject( COSName.STR_F );
if (strF == null)
{
strF = COSName.IDENTITY;
}
return strF;
}
public void setStringFilterName(COSName stringFilterName)
{
dictionary.setItem(COSName.STR_F, stringFilterName);
}
public void setPerms(byte[] perms) throws IOException
{
dictionary.setItem( COSName.PERMS, new COSString(perms) );
}
public byte[] getPerms() throws IOException
{
byte[] perms = null;
COSString permsCosString = (COSString)dictionary.getDictionaryObject( COSName.PERMS );
if( permsCosString != null )
{
perms = permsCosString.getBytes();
}
return perms;
}
public void removeV45filters()
{
dictionary.setItem(COSName.CF, null);
dictionary.setItem(COSName.STM_F, null);
dictionary.setItem(COSName.STR_F, null);
}
}
