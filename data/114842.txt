package com.google.api.client.test.util.store;
import com.google.api.client.util.Beta;
import com.google.api.client.util.store.DataStore;
import com.google.api.client.util.store.DataStoreFactory;
import com.google.common.collect.Sets;
import java.util.Arrays;
import java.util.Collection;
import java.util.Set;
import junit.framework.TestCase;
@Beta
public abstract class AbstractDataStoreFactoryTest extends TestCase {
private static final String STRING_ID = "String";
private static final String BOOLEAN_ID = "Boolean";
DataStoreFactory dataStore;
DataStore<String> stringTyped;
DataStore<Boolean> boolTyped;
protected abstract DataStoreFactory newDataStoreFactory() throws Exception;
@Override
public void setUp() throws Exception {
dataStore = newDataStoreFactory();
stringTyped = dataStore.getDataStore(STRING_ID);
boolTyped = dataStore.getDataStore(BOOLEAN_ID);
}
@Override
public void tearDown() throws Exception {
stringTyped.clear();
assertTrue(stringTyped.values().isEmpty());
boolTyped.clear();
assertTrue(boolTyped.values().isEmpty());
}
private static void assertContentsAnyOrder(Collection<?> c, Object... elts) {
assertEquals(Sets.newHashSet(c), Sets.newHashSet(Arrays.asList(elts)));
}
public void testId() throws Exception {
subtestIdNoException("1");
subtestIdNoException("123456789012345678901234567890");
subtestIdNoException("abcdefghijklmnopqrstuvwxyz");
subtestIdNoException("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
subtestIdException("");
subtestIdException(".");
subtestIdException(" ");
subtestIdException("1234567890123456789012345678901");
}
private void subtestIdException(String id) throws Exception {
try {
subtestIdNoException(id);
fail("expected " + IllegalArgumentException.class);
} catch (IllegalArgumentException e) {
}
}
private void subtestIdNoException(String id) throws Exception {
newDataStoreFactory().getDataStore(id);
}
public void testSet() throws Exception {
assertNull(stringTyped.get(null));
assertNull(stringTyped.get("k"));
stringTyped.set("k", "v");
assertEquals("v", stringTyped.get("k"));
stringTyped = dataStore.getDataStore(STRING_ID);
assertEquals("v", stringTyped.get("k"));
stringTyped = dataStore.getDataStore(STRING_ID);
assertEquals("v", stringTyped.get("k"));
stringTyped.set("k", "new");
assertEquals("new", stringTyped.get("k"));
stringTyped.set("k2", "other");
assertEquals("new", stringTyped.get("k"));
assertEquals("other", stringTyped.get("k2"));
try {
stringTyped.set("k", null);
fail("expected " + NullPointerException.class);
} catch (NullPointerException e) {
}
try {
stringTyped.set(null, "v");
fail("expected " + NullPointerException.class);
} catch (NullPointerException e) {
}
stringTyped.set("k", "v");
assertNull(boolTyped.get("k"));
boolTyped.set("k", true);
assertEquals("v", stringTyped.get("k"));
assertTrue(boolTyped.get("k"));
}
public void testValues() throws Exception {
assertTrue(stringTyped.values().isEmpty());
stringTyped.set("k", "new");
stringTyped.set("k2", "other");
assertContentsAnyOrder(stringTyped.values(), "new", "other");
stringTyped.delete("k");
assertNull(stringTyped.get("k"));
assertContentsAnyOrder(stringTyped.values(), "other");
stringTyped.delete("k2");
stringTyped.set("k", "v");
assertTrue(boolTyped.values().isEmpty());
boolTyped.set("k", true);
assertContentsAnyOrder(stringTyped.values(), "v");
assertContentsAnyOrder(boolTyped.values(), true);
}
public void testKeySet() throws Exception {
assertTrue(stringTyped.keySet().isEmpty());
stringTyped.set("k", "new");
Set<String> expected = Sets.newTreeSet();
expected.add("k");
assertEquals(expected, Sets.newTreeSet(stringTyped.keySet()));
stringTyped.set("k2", "other");
expected.add("k2");
assertEquals(expected, Sets.newTreeSet(stringTyped.keySet()));
stringTyped.delete("k2");
expected.remove("k2");
assertEquals(expected, Sets.newTreeSet(stringTyped.keySet()));
stringTyped.delete("k");
assertTrue(stringTyped.keySet().isEmpty());
}
public void testDelete() throws Exception {
stringTyped.set("k", "v").set("k2", "v2");
assertFalse(stringTyped.isEmpty());
assertEquals(2, stringTyped.size());
stringTyped.delete("k2");
assertNull(stringTyped.get("k2"));
stringTyped.delete("k2");
assertNull(stringTyped.get("k2"));
assertEquals("v", stringTyped.get("k"));
assertFalse(stringTyped.isEmpty());
assertEquals(1, stringTyped.size());
stringTyped.delete("k");
assertNull(stringTyped.get("k"));
stringTyped.delete(null);
assertTrue(stringTyped.isEmpty());
assertEquals(0, stringTyped.size());
}
public void testClear() throws Exception {
stringTyped.set("k", "v").set("k2", "v2");
stringTyped.clear();
assertTrue(stringTyped.isEmpty());
assertEquals(0, stringTyped.size());
stringTyped.clear();
assertTrue(stringTyped.isEmpty());
assertEquals(0, stringTyped.size());
}
public void testLarge() throws Exception {
int size = 100;
for (int i = 0; i < size; i++) {
stringTyped.set(String.valueOf(i), "hello" + i);
}
assertEquals(size, stringTyped.size());
int mid = size / 2;
assertEquals("hello" + mid, stringTyped.get(String.valueOf(mid)));
}
public void testContainsKeyAndValue() throws Exception {
assertFalse(stringTyped.containsKey("k"));
assertFalse(stringTyped.containsValue("new"));
assertFalse(stringTyped.containsKey("k2"));
assertFalse(stringTyped.containsValue("other"));
stringTyped.set("k", "new");
assertTrue(stringTyped.containsKey("k"));
assertFalse(stringTyped.containsKey("k2"));
assertTrue(stringTyped.containsValue("new"));
assertFalse(stringTyped.containsValue("other"));
stringTyped.set("k2", "other");
assertTrue(stringTyped.containsKey("k"));
assertTrue(stringTyped.containsKey("k2"));
assertTrue(stringTyped.containsValue("new"));
assertTrue(stringTyped.containsValue("other"));
stringTyped.delete("k");
assertFalse(stringTyped.containsKey("k"));
assertTrue(stringTyped.containsKey("k2"));
assertFalse(stringTyped.containsValue("new"));
assertTrue(stringTyped.containsValue("other"));
stringTyped.clear();
assertFalse(stringTyped.containsKey("k"));
assertFalse(stringTyped.containsKey("k2"));
assertFalse(stringTyped.containsValue("new"));
assertFalse(stringTyped.containsValue("other"));
}
}
