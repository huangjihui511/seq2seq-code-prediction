package com.facebook.presto.operator;
import com.facebook.presto.spi.relation.VariableReferenceExpression;
import com.facebook.presto.spi.type.Type;
import com.google.common.util.concurrent.ListenableFuture;
import java.util.List;
import java.util.Map;
import java.util.OptionalInt;
import java.util.function.Supplier;
import static com.google.common.util.concurrent.Futures.immediateFuture;
import static java.util.Collections.emptyList;
public interface LookupSourceFactory
extends JoinBridge
{
List<Type> getTypes();
List<Type> getOutputTypes();
ListenableFuture<LookupSourceProvider> createLookupSourceProvider();
int partitions();
default ListenableFuture<PartitionedConsumption<Supplier<LookupSource>>> finishProbeOperator(OptionalInt lookupJoinsCount)
{
return immediateFuture(new PartitionedConsumption<>(
1,
emptyList(),
i -> {
throw new UnsupportedOperationException();
},
i -> {}));
}
@Override
OuterPositionIterator getOuterPositionIterator();
Map<VariableReferenceExpression, Integer> getLayout();
default void setTaskContext(TaskContext taskContext) {}
@Override
void destroy();
default ListenableFuture<?> isDestroyed()
{
throw new UnsupportedOperationException();
}
}
