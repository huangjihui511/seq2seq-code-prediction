package mobi.hsz.idea.gitignore.psi;
import com.intellij.openapi.util.TextRange;
import com.intellij.psi.AbstractElementManipulator;
import com.intellij.psi.PsiFile;
import com.intellij.psi.PsiFileFactory;
import com.intellij.psi.util.PsiTreeUtil;
import com.intellij.util.IncorrectOperationException;
import mobi.hsz.idea.gitignore.file.type.IgnoreFileType;
import mobi.hsz.idea.gitignore.lang.IgnoreLanguage;
import org.jetbrains.annotations.NotNull;
public class IgnoreEntryManipulator extends AbstractElementManipulator<IgnoreEntry> {
@Override
public IgnoreEntry handleContentChange(@NotNull IgnoreEntry entry, @NotNull TextRange range, String newContent)
throws IncorrectOperationException {
if (!(entry.getLanguage() instanceof IgnoreLanguage)) {
return entry;
}
IgnoreLanguage language = (IgnoreLanguage) entry.getLanguage();
IgnoreFileType fileType = (IgnoreFileType) language.getAssociatedFileType();
assert fileType != null;
PsiFile file = PsiFileFactory.getInstance(entry.getProject())
.createFileFromText(language.getFilename(), fileType, range.replace(entry.getText(), newContent));
IgnoreEntry newEntry = PsiTreeUtil.findChildOfType(file, IgnoreEntry.class);
return newEntry != null ? (IgnoreEntry) entry.replace(newEntry) : entry;
}
@NotNull
@Override
public TextRange getRangeInElement(@NotNull IgnoreEntry element) {
IgnoreNegation negation = element.getNegation();
if (negation != null) {
return TextRange.create(
negation.getStartOffsetInParent() + negation.getTextLength(),
element.getTextLength()
);
}
return super.getRangeInElement(element);
}
}
