package com.baomidou.mybatisplus.core.parser;
import com.baomidou.mybatisplus.annotation.SqlParser;
import com.baomidou.mybatisplus.core.toolkit.StringPool;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.reflection.MetaObject;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
public class SqlParserHelper {
public static final String DELEGATE_MAPPED_STATEMENT = "delegate.mappedStatement";
private static final Map<String, Boolean> SQL_PARSER_INFO_CACHE = new ConcurrentHashMap<>();
public synchronized static void initSqlParserInfoCache(Class<?> mapperClass) {
SqlParser sqlParser = mapperClass.getAnnotation(SqlParser.class);
if (sqlParser != null) {
SQL_PARSER_INFO_CACHE.put(mapperClass.getName(), sqlParser.filter());
}
}
public static void initSqlParserInfoCache(String mapperClassName, Method method) {
SqlParser sqlParser = method.getAnnotation(SqlParser.class);
if (sqlParser != null) {
if (SQL_PARSER_INFO_CACHE.containsKey(mapperClassName)) {
Boolean value = SQL_PARSER_INFO_CACHE.get(mapperClassName);
if (!value.equals(sqlParser.filter())) {
String sid = mapperClassName + StringPool.DOT + method.getName();
SQL_PARSER_INFO_CACHE.putIfAbsent(sid, sqlParser.filter());
}
} else {
String sid = mapperClassName + StringPool.DOT + method.getName();
SQL_PARSER_INFO_CACHE.putIfAbsent(sid, sqlParser.filter());
}
}
}
public static boolean getSqlParserInfo(MetaObject metaObject) {
String id = getMappedStatement(metaObject).getId();
Boolean value = SQL_PARSER_INFO_CACHE.get(id);
if (value != null) {
return value;
}
String mapperName = id.substring(0, id.lastIndexOf(StringPool.DOT));
return SQL_PARSER_INFO_CACHE.getOrDefault(mapperName, false);
}
public static MappedStatement getMappedStatement(MetaObject metaObject) {
return (MappedStatement) metaObject.getValue(DELEGATE_MAPPED_STATEMENT);
}
}
