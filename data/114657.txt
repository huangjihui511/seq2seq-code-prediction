package com.twelvemonkeys.lang;
import com.twelvemonkeys.io.FileUtil;
import com.twelvemonkeys.util.FilterIterator;
import com.twelvemonkeys.util.service.ServiceRegistry;
import java.io.*;
import java.util.Collections;
import java.util.Iterator;
final class NativeLoader {
static final NativeResourceRegistry sRegistry = new NativeResourceRegistry();
private NativeLoader() {
}
private static Architecture normalizeArchitecture() {
String arch = System.getProperty("os.arch");
if (arch == null) {
throw new IllegalStateException("System property \"os.arch\" == null");
}
arch = arch.toLowerCase();
if (OS_NAME == OperatingSystem.Windows
&& (arch.startsWith("x86") || arch.startsWith("i386"))) {
return Architecture.X86;
}
else if (OS_NAME == OperatingSystem.Linux) {
if  (arch.startsWith("x86") || arch.startsWith("i386")) {
return Architecture.I386;
}
else if (arch.startsWith("i686")) {
return Architecture.I686;
}
}
else if (OS_NAME == OperatingSystem.MacOS) {
if (arch.startsWith("power") || arch.startsWith("ppc")) {
return Architecture.PPC;
}
else if (arch.startsWith("i386")) {
return Architecture.I386;
}
}
else if (OS_NAME == OperatingSystem.Solaris) {
if (arch.startsWith("sparc")) {
return Architecture.SPARC;
}
if (arch.startsWith("x86")) {
return Architecture.X86;
}
}
return Architecture.Unknown;
}
private static OperatingSystem normalizeOperatingSystem() {
String os = System.getProperty("os.name");
if (os == null) {
throw new IllegalStateException("System property \"os.name\" == null");
}
os = os.toLowerCase();
if (os.startsWith("windows")) {
return OperatingSystem.Windows;
}
else if (os.startsWith("linux")) {
return OperatingSystem.Linux;
}
else if (os.startsWith("mac os")) {
return OperatingSystem.MacOS;
}
else if (os.startsWith("solaris") || os.startsWith("sunos")) {
return OperatingSystem.Solaris;
}
return OperatingSystem.Unknown;
}
private static String getResourceFor(String pLibrary) {
Iterator<NativeResourceSPI> providers = sRegistry.providers(pLibrary);
while (providers.hasNext()) {
NativeResourceSPI resourceSPI = providers.next();
try {
return resourceSPI.getClassPathResource(Platform.get());
}
catch (Throwable t) {
sRegistry.deregister(resourceSPI);
}
}
return null;
}
public static void loadLibrary(String pLibrary) {
loadLibrary0(pLibrary, null, null);
}
public static void loadLibrary(String pLibrary, ClassLoader pLoader) {
loadLibrary0(pLibrary, null, pLoader);
}
static void loadLibrary0(String pLibrary, String pResource, ClassLoader pLoader) {
if (pLibrary == null) {
throw new IllegalArgumentException("library == null");
}
UnsatisfiedLinkError unsatisfied;
try {
System.loadLibrary(pLibrary);
return;
}
catch (UnsatisfiedLinkError err) {
unsatisfied = err;
}
final ClassLoader loader = pLoader != null ? pLoader : Thread.currentThread().getContextClassLoader();
final String resource = pResource != null ? pResource : getResourceFor(pLibrary);
if (resource == null) {
throw unsatisfied;
}
File dir = new File(System.getProperty("user.home") + "/.twelvemonkeys/lib");
dir.mkdirs();
File libraryFile = new File(dir.getAbsolutePath(), pLibrary + "." + FileUtil.getExtension(resource));
if (!libraryFile.exists()) {
try {
extractToUserDir(resource, libraryFile, loader);
}
catch (IOException ioe) {
UnsatisfiedLinkError err = new UnsatisfiedLinkError("Unable to extract resource to dir: " + libraryFile.getAbsolutePath());
err.initCause(ioe);
throw err;
}
}
System.load(libraryFile.getAbsolutePath());
}
private static void extractToUserDir(String pResource, File pLibraryFile, ClassLoader pLoader) throws IOException {
InputStream in = pLoader.getResourceAsStream(pResource);
if (in == null) {
throw new FileNotFoundException("Unable to locate classpath resource: " + pResource);
}
FileOutputStream fileOut = null;
try {
fileOut = new FileOutputStream(pLibraryFile);
byte[] tmp = new byte[1024];
int bytesRead = in.read(tmp);
while (bytesRead != -1) {
fileOut.write(tmp, 0, bytesRead);
bytesRead = in.read(tmp);
}
}
finally {
FileUtil.close(fileOut);
FileUtil.close(in);
}
}
public static class NativeResource {
private Map mMap;
public NativeResource(String[] pOSNames, String[] pReourceNames) {
if (pOSNames == null) {
throw new IllegalArgumentException("osNames == null");
}
if (pReourceNames == null) {
throw new IllegalArgumentException("resourceNames == null");
}
if (pOSNames.length != pReourceNames.length) {
throw new IllegalArgumentException("osNames.length != resourceNames.length");
}
Map map = new HashMap();
for (int i = 0; i < pOSNames.length; i++) {
map.put(pOSNames[i], pReourceNames[i]);
}
mMap = Collections.unmodifiableMap(map);
}
public NativeResource(Map pMap) {
if (pMap == null) {
throw new IllegalArgumentException("map == null");
}
Map map = new HashMap(pMap);
Iterator it = map.keySet().iterator();
while (it.hasNext()) {
Map.Entry entry = (Map.Entry) it.next();
if (!(entry.getKey() instanceof String && entry.getValue() instanceof String)) {
throw new IllegalArgumentException("map contains non-string entries: " + entry);
}
}
mMap = Collections.unmodifiableMap(map);
}
protected NativeResource() {
}
public final String resourceForCurrentOS() {
throw new UnsupportedOperationException();
}
protected String getResourceName(String pOSName) {
return (String) mMap.get(pOSName);
}
}
private static class NativeResourceRegistry extends ServiceRegistry {
public NativeResourceRegistry() {
super(Collections.singletonList(NativeResourceSPI.class).iterator());
registerApplicationClasspathSPIs();
}
Iterator<NativeResourceSPI> providers(final String nativeResource) {
return new FilterIterator<NativeResourceSPI>(
providers(NativeResourceSPI.class),
new NameFilter(nativeResource)
);
}
}
private static class NameFilter implements FilterIterator.Filter<NativeResourceSPI> {
private final String name;
NameFilter(String pName) {
if (pName == null) {
throw new IllegalArgumentException("name == null");
}
name = pName;
}
public boolean accept(NativeResourceSPI pElement) {
return name.equals(pElement.getResourceName());
}
}
}
