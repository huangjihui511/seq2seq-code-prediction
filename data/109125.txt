package io.realm;
import android.os.SystemClock;
import android.support.test.runner.AndroidJUnit4;
import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import io.realm.entities.StringOnly;
import io.realm.exceptions.RealmFileException;
import io.realm.log.LogLevel;
import io.realm.log.RealmLog;
import io.realm.objectserver.utils.Constants;
import io.realm.rule.RunTestInLooperThread;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
@RunWith(AndroidJUnit4.class)
public class SSLConfigurationTests extends StandardIntegrationTest {
@Rule
public Timeout globalTimeout = Timeout.seconds(120);
@Test
@RunTestInLooperThread
@Ignore("FIXME: https:
public void trustedRootCA() throws InterruptedException {
String username = UUID.randomUUID().toString();
String password = "password";
SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
.fullSynchronization()
.schema(StringOnly.class)
.build();
Realm realm = Realm.getInstance(syncConfig);
realm.beginTransaction();
realm.createObject(StringOnly.class).setChars("Foo");
realm.commitTransaction();
SyncManager.getSession(syncConfig).uploadAllLocalChanges();
realm.close();
user.logOut();
user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
SyncConfiguration syncConfigSSL = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
.fullSynchronization()
.name("useSsl")
.schema(StringOnly.class)
.waitForInitialRemoteData()
.trustedRootCA("trusted_ca.pem")
.build();
realm = Realm.getInstance(syncConfigSSL);
RealmResults<StringOnly> all = realm.where(StringOnly.class).findAll();
try {
assertEquals(1, all.size());
assertEquals("Foo", all.get(0).getChars());
} finally {
realm.close();
}
looperThread.testComplete();
}
@Test
@RunTestInLooperThread
public void withoutSSLVerification() throws InterruptedException {
String username = UUID.randomUUID().toString();
String password = "password";
SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
.fullSynchronization()
.schema(StringOnly.class)
.build();
Realm realm = Realm.getInstance(syncConfig);
realm.beginTransaction();
realm.createObject(StringOnly.class).setChars("Foo");
realm.commitTransaction();
SyncManager.getSession(syncConfig).uploadAllLocalChanges();
realm.close();
user.logOut();
user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
SyncConfiguration syncConfigSSL = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
.fullSynchronization()
.name("useSsl")
.schema(StringOnly.class)
.waitForInitialRemoteData()
.disableSSLVerification()
.build();
realm = Realm.getInstance(syncConfigSSL);
RealmResults<StringOnly> all = realm.where(StringOnly.class).findAll();
try {
assertEquals(1, all.size());
assertEquals("Foo", all.get(0).getChars());
} finally {
realm.close();
}
looperThread.testComplete();
}
@Test
@RunTestInLooperThread
public void trustedRootCA_syncShouldFailWithoutTrustedCA() throws InterruptedException {
String username = UUID.randomUUID().toString();
String password = "password";
SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
.schema(StringOnly.class)
.build();
Realm realm = Realm.getInstance(syncConfig);
realm.beginTransaction();
realm.createObject(StringOnly.class).setChars("Foo");
realm.commitTransaction();
SyncManager.getSession(syncConfig).uploadAllLocalChanges();
realm.close();
user.logOut();
user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
SyncConfiguration syncConfigSSL = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
.name("useSsl")
.schema(StringOnly.class)
.trustedRootCA("untrusted_ca.pem")
.build();
SystemClock.sleep(TimeUnit.SECONDS.toMillis(2));
realm = Realm.getInstance(syncConfigSSL);
try {
assertTrue(realm.isEmpty());
} finally {
realm.close();
}
looperThread.testComplete();
}
@Test
@RunTestInLooperThread
public void combining_trustedRootCA_and_withoutSSLVerification_willThrow() {
String username = UUID.randomUUID().toString();
String password = "password";
SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
TestHelper.TestLogger testLogger = new TestHelper.TestLogger();
int originalLevel = RealmLog.getLevel();
RealmLog.add(testLogger);
RealmLog.setLevel(LogLevel.WARN);
configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
.name("useSsl")
.schema(StringOnly.class)
.trustedRootCA("trusted_ca.pem")
.disableSSLVerification()
.build();
assertEquals("SSL Verification is disabled, the provided server certificate will not be used.",
testLogger.message);
RealmLog.remove(testLogger);
RealmLog.setLevel(originalLevel);
looperThread.testComplete();
}
@Test
@RunTestInLooperThread
@Ignore("FIXME: https:
public void trustedRootCA_notExisting_certificate_willThrow() {
String username = UUID.randomUUID().toString();
String password = "password";
SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
.schema(StringOnly.class)
.trustedRootCA("none_existing_file.pem")
.build();
try {
Realm.getInstance(syncConfig);
fail();
} catch (RealmFileException ignored) {
}
looperThread.testComplete();
}
@Test
@RunTestInLooperThread
@Ignore("FIXME: https:
public void combiningTrustedRootCA_and_disableSSLVerification() throws InterruptedException {
String username = UUID.randomUUID().toString();
String password = "password";
SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
final SyncConfiguration syncConfigWithCertificate = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
.fullSynchronization()
.schema(StringOnly.class)
.trustedRootCA("trusted_ca.pem")
.build();
Realm realm = Realm.getInstance(syncConfigWithCertificate);
realm.beginTransaction();
realm.createObject(StringOnly.class).setChars("Foo");
realm.commitTransaction();
SyncManager.getSession(syncConfigWithCertificate).uploadAllLocalChanges();
realm.close();
user.logOut();
user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
SyncConfiguration syncConfigDisableSSL = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
.fullSynchronization()
.name("useSsl")
.schema(StringOnly.class)
.waitForInitialRemoteData()
.disableSSLVerification()
.build();
realm = Realm.getInstance(syncConfigDisableSSL);
RealmResults<StringOnly> all = realm.where(StringOnly.class).findAll();
try {
assertEquals(1, all.size());
assertEquals("Foo", all.get(0).getChars());
} finally {
realm.close();
}
looperThread.testComplete();
}
@Test
@RunTestInLooperThread
@Ignore("FIXME: https:
public void sslVerifyCallback_isUsed() throws InterruptedException {
String username = UUID.randomUUID().toString();
String password = "password";
SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
.fullSynchronization()
.schema(StringOnly.class)
.build();
Realm realm = Realm.getInstance(syncConfig);
realm.beginTransaction();
realm.createObject(StringOnly.class).setChars("Foo");
realm.commitTransaction();
SyncManager.getSession(syncConfig).uploadAllLocalChanges();
realm.close();
user.logOut();
user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
SyncConfiguration syncConfigSecure = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
.name("useSsl")
.fullSynchronization()
.schema(StringOnly.class)
.waitForInitialRemoteData()
.build();
realm = Realm.getInstance(syncConfigSecure);
RealmResults<StringOnly> all = realm.where(StringOnly.class).findAll();
try {
assertEquals(1, all.size());
assertEquals("Foo", all.get(0).getChars());
} finally {
realm.close();
}
looperThread.testComplete();
}
}
