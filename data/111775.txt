package org.jupiter.common.util;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import org.jupiter.common.util.internal.InternalThreadLocal;
class IntLhsPadding {
@SuppressWarnings("unused")
protected long p01, p02, p03, p04, p05, p06, p07;
}
class IntValue extends IntLhsPadding {
protected volatile int value;
}
class IntRhsPadding extends IntValue {
@SuppressWarnings("unused")
protected long p09, p10, p11, p12, p13, p14, p15;
}
public class IntSequence extends IntRhsPadding {
private static final int DEFAULT_STEP = 64;
private static final AtomicIntegerFieldUpdater<IntValue> updater = AtomicIntegerFieldUpdater.newUpdater(IntValue.class, "value");
private final InternalThreadLocal<LocalSequence> localSequence = new InternalThreadLocal<LocalSequence>() {
@Override
protected LocalSequence initialValue() throws Exception {
return new LocalSequence();
}
};
private final int step;
public IntSequence() {
this(DEFAULT_STEP);
}
public IntSequence(int step) {
this.step = step;
}
public IntSequence(int initialValue, int step) {
updater.set(this, initialValue);
this.step = step;
}
public int next() {
return localSequence.get().next();
}
private int getNextBaseValue() {
return updater.getAndAdd(this, step);
}
private final class LocalSequence {
private int localBase = getNextBaseValue();
private int localValue = 0;
public int next() {
int realVal = ++localValue + localBase;
if (localValue == step) {
localBase = getNextBaseValue();
localValue = 0;
}
return realVal;
}
}
}
