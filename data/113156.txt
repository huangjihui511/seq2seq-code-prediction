package org.msgpack.value.impl;
import org.msgpack.core.MessagePacker;
import org.msgpack.value.ImmutableBooleanValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;
import java.io.IOException;
public class ImmutableBooleanValueImpl
extends AbstractImmutableValue
implements ImmutableBooleanValue
{
public static final ImmutableBooleanValue TRUE = new ImmutableBooleanValueImpl(true);
public static final ImmutableBooleanValue FALSE = new ImmutableBooleanValueImpl(false);
private final boolean value;
private ImmutableBooleanValueImpl(boolean value)
{
this.value = value;
}
@Override
public ValueType getValueType()
{
return ValueType.BOOLEAN;
}
@Override
public ImmutableBooleanValue asBooleanValue()
{
return this;
}
@Override
public ImmutableBooleanValue immutableValue()
{
return this;
}
@Override
public boolean getBoolean()
{
return value;
}
@Override
public void writeTo(MessagePacker packer)
throws IOException
{
packer.packBoolean(value);
}
@Override
public boolean equals(Object o)
{
if (o == this) {
return true;
}
if (!(o instanceof Value)) {
return false;
}
Value v = (Value) o;
if (!v.isBooleanValue()) {
return false;
}
return value == v.asBooleanValue().getBoolean();
}
@Override
public int hashCode()
{
if (value) {
return 1231;
}
else {
return 1237;
}
}
@Override
public String toJson()
{
return Boolean.toString(value);
}
@Override
public String toString()
{
return toJson();
}
}
