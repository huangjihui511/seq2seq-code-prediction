package io.flutter.run.bazelTest;
import com.intellij.util.xmlb.XmlSerializer;
import org.jdom.Element;
import org.junit.Test;
import java.util.Set;
import java.util.TreeSet;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
public class BazelTestFieldsTest {
@Test
public void shouldReadFieldsFromXml() {
final Element elt = new Element("test");
addOption(elt, "testName", "Test number one");
addOption(elt, "entryFile", "/tmp/test/dir/lib/main.dart");
addOption(elt, "bazelTarget", "
addOption(elt, "additionalArgs", "--no-watch --some-other-args 75");
final BazelTestFields fields = BazelTestFields.readFrom(elt);
assertEquals("Test number one", fields.getTestName());
assertEquals("/tmp/test/dir/lib/main.dart", fields.getEntryFile());
assertEquals("
assertEquals("--no-watch --some-other-args 75", fields.getAdditionalArgs());
}
@Test
public void shouldUpgradeFieldsFromOldXml() {
final Element elt = new Element("test");
addOption(elt, "launchingScript", "path/to/bazel-run.sh"); 
addOption(elt, "entryFile", "/tmp/test/dir/lib/main.dart"); 
addOption(elt, "bazelTarget", "
final BazelTestFields fields = BazelTestFields.readFrom(elt);
XmlSerializer.deserializeInto(fields, elt);
assertEquals(null, fields.getTestName());
assertEquals("/tmp/test/dir/lib/main.dart", fields.getEntryFile());
assertEquals("
assertEquals(null, fields.getAdditionalArgs());
}
@Test
public void roundTripShouldPreserveFields() {
final BazelTestFields before = new BazelTestFields(
"Test number two",
"/tmp/foo/lib/main_two.dart",
"
"--no-watch --other-args"
);
final Element elt = new Element("test");
before.writeTo(elt);
assertArrayEquals(
new String[]{"additionalArgs", "bazelTarget", "entryFile", "testName"},
getOptionNames(elt).toArray());
final BazelTestFields after = BazelTestFields.readFrom(elt);
assertEquals("Test number two", after.getTestName());
assertEquals("/tmp/foo/lib/main_two.dart", after.getEntryFile());
assertEquals("
assertEquals("--no-watch --other-args", after.getAdditionalArgs());
}
private void addOption(Element elt, String name, String value) {
final Element child = new Element("option");
child.setAttribute("name", name);
child.setAttribute("value", value);
elt.addContent(child);
}
private Set<String> getOptionNames(Element elt) {
final Set<String> result = new TreeSet<>();
for (Element child : elt.getChildren()) {
result.add(child.getAttributeValue("name"));
}
return result;
}
}
