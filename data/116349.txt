package org.spongepowered.api.data.manipulator.immutable.common;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.data.key.Key;
import org.spongepowered.api.data.manipulator.DataManipulator;
import org.spongepowered.api.data.manipulator.ImmutableDataManipulator;
import org.spongepowered.api.data.value.immutable.ImmutableValue;
import org.spongepowered.api.data.value.mutable.Value;
public abstract class AbstractImmutableBooleanData<I extends ImmutableDataManipulator<I, M>, M extends DataManipulator<M, I>> extends
AbstractImmutableSingleData<Boolean, I, M> {
private final ImmutableValue<Boolean> immutableValue;
@Deprecated
protected AbstractImmutableBooleanData(boolean value, Key<Value<Boolean>> usedKey, boolean defaultValue) {
this(usedKey, value, defaultValue);
}
protected AbstractImmutableBooleanData(Key<Value<Boolean>> usedKey, boolean value) {
this(usedKey, value, value);
}
protected AbstractImmutableBooleanData(Key<Value<Boolean>> usedKey, boolean value, boolean defaultValue) {
super(usedKey, value, defaultValue);
this.immutableValue = Sponge.getRegistry().getValueFactory().createValue(usedKey, value, defaultValue).asImmutable();
}
@Override
protected final ImmutableValue<Boolean> getValueGetter() {
return this.immutableValue;
}
}
