package org.msgpack.core;
import org.msgpack.core.buffer.ArrayBufferInput;
import org.msgpack.core.buffer.ByteBufferInput;
import org.msgpack.core.buffer.ChannelBufferInput;
import org.msgpack.core.buffer.ChannelBufferOutput;
import org.msgpack.core.buffer.InputStreamBufferInput;
import org.msgpack.core.buffer.MessageBufferInput;
import org.msgpack.core.buffer.MessageBufferOutput;
import org.msgpack.core.buffer.OutputStreamBufferOutput;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.charset.Charset;
import java.nio.charset.CodingErrorAction;
public class MessagePack
{
public static final Charset UTF8 = Charset.forName("UTF-8");
public static final PackerConfig DEFAULT_PACKER_CONFIG = new PackerConfig();
public static final UnpackerConfig DEFAULT_UNPACKER_CONFIG = new UnpackerConfig();
public static final class Code
{
public static final boolean isFixInt(byte b)
{
int v = b & 0xFF;
return v <= 0x7f || v >= 0xe0;
}
public static final boolean isPosFixInt(byte b)
{
return (b & POSFIXINT_MASK) == 0;
}
public static final boolean isNegFixInt(byte b)
{
return (b & NEGFIXINT_PREFIX) == NEGFIXINT_PREFIX;
}
public static final boolean isFixStr(byte b)
{
return (b & (byte) 0xe0) == Code.FIXSTR_PREFIX;
}
public static final boolean isFixedArray(byte b)
{
return (b & (byte) 0xf0) == Code.FIXARRAY_PREFIX;
}
public static final boolean isFixedMap(byte b)
{
return (b & (byte) 0xf0) == Code.FIXMAP_PREFIX;
}
public static final boolean isFixedRaw(byte b)
{
return (b & (byte) 0xe0) == Code.FIXSTR_PREFIX;
}
public static final byte POSFIXINT_MASK = (byte) 0x80;
public static final byte FIXMAP_PREFIX = (byte) 0x80;
public static final byte FIXARRAY_PREFIX = (byte) 0x90;
public static final byte FIXSTR_PREFIX = (byte) 0xa0;
public static final byte NIL = (byte) 0xc0;
public static final byte NEVER_USED = (byte) 0xc1;
public static final byte FALSE = (byte) 0xc2;
public static final byte TRUE = (byte) 0xc3;
public static final byte BIN8 = (byte) 0xc4;
public static final byte BIN16 = (byte) 0xc5;
public static final byte BIN32 = (byte) 0xc6;
public static final byte EXT8 = (byte) 0xc7;
public static final byte EXT16 = (byte) 0xc8;
public static final byte EXT32 = (byte) 0xc9;
public static final byte FLOAT32 = (byte) 0xca;
public static final byte FLOAT64 = (byte) 0xcb;
public static final byte UINT8 = (byte) 0xcc;
public static final byte UINT16 = (byte) 0xcd;
public static final byte UINT32 = (byte) 0xce;
public static final byte UINT64 = (byte) 0xcf;
public static final byte INT8 = (byte) 0xd0;
public static final byte INT16 = (byte) 0xd1;
public static final byte INT32 = (byte) 0xd2;
public static final byte INT64 = (byte) 0xd3;
public static final byte FIXEXT1 = (byte) 0xd4;
public static final byte FIXEXT2 = (byte) 0xd5;
public static final byte FIXEXT4 = (byte) 0xd6;
public static final byte FIXEXT8 = (byte) 0xd7;
public static final byte FIXEXT16 = (byte) 0xd8;
public static final byte STR8 = (byte) 0xd9;
public static final byte STR16 = (byte) 0xda;
public static final byte STR32 = (byte) 0xdb;
public static final byte ARRAY16 = (byte) 0xdc;
public static final byte ARRAY32 = (byte) 0xdd;
public static final byte MAP16 = (byte) 0xde;
public static final byte MAP32 = (byte) 0xdf;
public static final byte NEGFIXINT_PREFIX = (byte) 0xe0;
}
private MessagePack()
{
}
public static MessagePacker newDefaultPacker(MessageBufferOutput out)
{
return DEFAULT_PACKER_CONFIG.newPacker(out);
}
public static MessagePacker newDefaultPacker(OutputStream out)
{
return DEFAULT_PACKER_CONFIG.newPacker(out);
}
public static MessagePacker newDefaultPacker(WritableByteChannel channel)
{
return DEFAULT_PACKER_CONFIG.newPacker(channel);
}
public static MessageBufferPacker newDefaultBufferPacker()
{
return DEFAULT_PACKER_CONFIG.newBufferPacker();
}
public static MessageUnpacker newDefaultUnpacker(MessageBufferInput in)
{
return DEFAULT_UNPACKER_CONFIG.newUnpacker(in);
}
public static MessageUnpacker newDefaultUnpacker(InputStream in)
{
return DEFAULT_UNPACKER_CONFIG.newUnpacker(in);
}
public static MessageUnpacker newDefaultUnpacker(ReadableByteChannel channel)
{
return DEFAULT_UNPACKER_CONFIG.newUnpacker(channel);
}
public static MessageUnpacker newDefaultUnpacker(byte[] contents)
{
return DEFAULT_UNPACKER_CONFIG.newUnpacker(contents);
}
public static MessageUnpacker newDefaultUnpacker(byte[] contents, int offset, int length)
{
return DEFAULT_UNPACKER_CONFIG.newUnpacker(contents, offset, length);
}
public static MessageUnpacker newDefaultUnpacker(ByteBuffer contents)
{
return DEFAULT_UNPACKER_CONFIG.newUnpacker(contents);
}
public static class PackerConfig
implements Cloneable
{
private int smallStringOptimizationThreshold = 512;
private int bufferFlushThreshold = 8192;
private int bufferSize = 8192;
private boolean str8FormatSupport = true;
public PackerConfig()
{
}
private PackerConfig(PackerConfig copy)
{
this.smallStringOptimizationThreshold = copy.smallStringOptimizationThreshold;
this.bufferFlushThreshold = copy.bufferFlushThreshold;
this.bufferSize = copy.bufferSize;
this.str8FormatSupport = copy.str8FormatSupport;
}
@Override
public PackerConfig clone()
{
return new PackerConfig(this);
}
@Override
public int hashCode()
{
int result = smallStringOptimizationThreshold;
result = 31 * result + bufferFlushThreshold;
result = 31 * result + bufferSize;
result = 31 * result + (str8FormatSupport ? 1 : 0);
return result;
}
@Override
public boolean equals(Object obj)
{
if (!(obj instanceof PackerConfig)) {
return false;
}
PackerConfig o = (PackerConfig) obj;
return this.smallStringOptimizationThreshold == o.smallStringOptimizationThreshold
&& this.bufferFlushThreshold == o.bufferFlushThreshold
&& this.bufferSize == o.bufferSize
&& this.str8FormatSupport == o.str8FormatSupport;
}
public MessagePacker newPacker(MessageBufferOutput out)
{
return new MessagePacker(out, this);
}
public MessagePacker newPacker(OutputStream out)
{
return newPacker(new OutputStreamBufferOutput(out, bufferSize));
}
public MessagePacker newPacker(WritableByteChannel channel)
{
return newPacker(new ChannelBufferOutput(channel, bufferSize));
}
public MessageBufferPacker newBufferPacker()
{
return new MessageBufferPacker(this);
}
public PackerConfig withSmallStringOptimizationThreshold(int length)
{
PackerConfig copy = clone();
copy.smallStringOptimizationThreshold = length;
return copy;
}
public int getSmallStringOptimizationThreshold()
{
return smallStringOptimizationThreshold;
}
public PackerConfig withBufferFlushThreshold(int bytes)
{
PackerConfig copy = clone();
copy.bufferFlushThreshold = bytes;
return copy;
}
public int getBufferFlushThreshold()
{
return bufferFlushThreshold;
}
public PackerConfig withBufferSize(int bytes)
{
PackerConfig copy = clone();
copy.bufferSize = bytes;
return copy;
}
public int getBufferSize()
{
return bufferSize;
}
public PackerConfig withStr8FormatSupport(boolean str8FormatSupport)
{
PackerConfig copy = clone();
copy.str8FormatSupport = str8FormatSupport;
return copy;
}
public boolean isStr8FormatSupport()
{
return str8FormatSupport;
}
}
public static class UnpackerConfig
implements Cloneable
{
private boolean allowReadingStringAsBinary = true;
private boolean allowReadingBinaryAsString = true;
private CodingErrorAction actionOnMalformedString = CodingErrorAction.REPLACE;
private CodingErrorAction actionOnUnmappableString = CodingErrorAction.REPLACE;
private int stringSizeLimit = Integer.MAX_VALUE;
private int bufferSize = 8192;
private int stringDecoderBufferSize = 8192;
public UnpackerConfig()
{
}
private UnpackerConfig(UnpackerConfig copy)
{
this.allowReadingStringAsBinary = copy.allowReadingStringAsBinary;
this.allowReadingBinaryAsString = copy.allowReadingBinaryAsString;
this.actionOnMalformedString = copy.actionOnMalformedString;
this.actionOnUnmappableString = copy.actionOnUnmappableString;
this.stringSizeLimit = copy.stringSizeLimit;
this.bufferSize = copy.bufferSize;
}
@Override
public UnpackerConfig clone()
{
return new UnpackerConfig(this);
}
@Override
public int hashCode()
{
int result = (allowReadingStringAsBinary ? 1 : 0);
result = 31 * result + (allowReadingBinaryAsString ? 1 : 0);
result = 31 * result + (actionOnMalformedString != null ? actionOnMalformedString.hashCode() : 0);
result = 31 * result + (actionOnUnmappableString != null ? actionOnUnmappableString.hashCode() : 0);
result = 31 * result + stringSizeLimit;
result = 31 * result + bufferSize;
result = 31 * result + stringDecoderBufferSize;
return result;
}
@Override
public boolean equals(Object obj)
{
if (!(obj instanceof UnpackerConfig)) {
return false;
}
UnpackerConfig o = (UnpackerConfig) obj;
return this.allowReadingStringAsBinary == o.allowReadingStringAsBinary
&& this.allowReadingBinaryAsString == o.allowReadingBinaryAsString
&& this.actionOnMalformedString == o.actionOnMalformedString
&& this.actionOnUnmappableString == o.actionOnUnmappableString
&& this.stringSizeLimit == o.stringSizeLimit
&& this.stringDecoderBufferSize == o.stringDecoderBufferSize
&& this.bufferSize == o.bufferSize;
}
public MessageUnpacker newUnpacker(MessageBufferInput in)
{
return new MessageUnpacker(in, this);
}
public MessageUnpacker newUnpacker(InputStream in)
{
return newUnpacker(new InputStreamBufferInput(in, bufferSize));
}
public MessageUnpacker newUnpacker(ReadableByteChannel channel)
{
return newUnpacker(new ChannelBufferInput(channel, bufferSize));
}
public MessageUnpacker newUnpacker(byte[] contents)
{
return newUnpacker(new ArrayBufferInput(contents));
}
public MessageUnpacker newUnpacker(byte[] contents, int offset, int length)
{
return newUnpacker(new ArrayBufferInput(contents, offset, length));
}
public MessageUnpacker newUnpacker(ByteBuffer contents)
{
return newUnpacker(new ByteBufferInput(contents));
}
public UnpackerConfig withAllowReadingStringAsBinary(boolean enable)
{
UnpackerConfig copy = clone();
copy.allowReadingStringAsBinary = enable;
return copy;
}
public boolean getAllowReadingStringAsBinary()
{
return allowReadingStringAsBinary;
}
public UnpackerConfig withAllowReadingBinaryAsString(boolean enable)
{
UnpackerConfig copy = clone();
copy.allowReadingBinaryAsString = enable;
return copy;
}
public boolean getAllowReadingBinaryAsString()
{
return allowReadingBinaryAsString;
}
public UnpackerConfig withActionOnMalformedString(CodingErrorAction action)
{
UnpackerConfig copy = clone();
copy.actionOnMalformedString = action;
return copy;
}
public CodingErrorAction getActionOnMalformedString()
{
return actionOnMalformedString;
}
public UnpackerConfig withActionOnUnmappableString(CodingErrorAction action)
{
UnpackerConfig copy = clone();
copy.actionOnUnmappableString = action;
return copy;
}
public CodingErrorAction getActionOnUnmappableString()
{
return actionOnUnmappableString;
}
public UnpackerConfig withStringSizeLimit(int bytes)
{
UnpackerConfig copy = clone();
copy.stringSizeLimit = bytes;
return copy;
}
public int getStringSizeLimit()
{
return stringSizeLimit;
}
public UnpackerConfig withStringDecoderBufferSize(int bytes)
{
UnpackerConfig copy = clone();
copy.stringDecoderBufferSize = bytes;
return copy;
}
public int getStringDecoderBufferSize()
{
return stringDecoderBufferSize;
}
public UnpackerConfig withBufferSize(int bytes)
{
UnpackerConfig copy = clone();
copy.bufferSize = bytes;
return copy;
}
public int getBufferSize()
{
return bufferSize;
}
}
}
