package org.graalvm.compiler.truffle.compiler.phases;
import java.util.function.Predicate;
import org.graalvm.compiler.nodes.AbstractBeginNode;
import org.graalvm.compiler.nodes.FixedWithNextNode;
import org.graalvm.compiler.nodes.Invoke;
import org.graalvm.compiler.nodes.InvokeWithExceptionNode;
import org.graalvm.compiler.nodes.StructuredGraph;
import org.graalvm.compiler.phases.Phase;
import org.graalvm.compiler.truffle.compiler.nodes.SpeculativeExceptionAnchorNode;
import jdk.vm.ci.meta.DeoptimizationAction;
import jdk.vm.ci.meta.DeoptimizationReason;
import jdk.vm.ci.meta.ResolvedJavaMethod;
public class DeoptimizeOnExceptionPhase extends Phase {
private final Predicate<ResolvedJavaMethod> deoptimizeOnExceptionPredicate;
public DeoptimizeOnExceptionPhase(Predicate<ResolvedJavaMethod> deoptimizeOnExceptionPredicate) {
this.deoptimizeOnExceptionPredicate = deoptimizeOnExceptionPredicate;
}
@Override
protected void run(StructuredGraph graph) {
for (Invoke invoke : graph.getInvokes()) {
if (invoke instanceof InvokeWithExceptionNode) {
InvokeWithExceptionNode invokeWithException = (InvokeWithExceptionNode) invoke;
ResolvedJavaMethod targetMethod = invokeWithException.callTarget().targetMethod();
if (deoptimizeOnExceptionPredicate.test(targetMethod)) {
AbstractBeginNode exceptionEdge = invokeWithException.exceptionEdge();
FixedWithNextNode newNode = graph.add(new SpeculativeExceptionAnchorNode(DeoptimizationReason.TransferToInterpreter, DeoptimizationAction.InvalidateRecompile, targetMethod));
graph.addAfterFixed(exceptionEdge, newNode);
}
}
}
}
}
