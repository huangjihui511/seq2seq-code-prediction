package io.flutter.utils;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.function.Consumer;
public class EventStream<T> {
protected final HashSet<StreamSubscription<T>> subscriptions = new LinkedHashSet<>();
private volatile T currentValue;
public EventStream() {
this(null);
}
public EventStream(T initialValue) {
currentValue = initialValue;
}
public T getValue() {
return currentValue;
}
public boolean setValue(T value) {
final List<StreamSubscription<T>> regularSubscriptions = new ArrayList<>();
final List<StreamSubscription<T>> uiThreadSubscriptions = new ArrayList<>();
synchronized (this) {
if (currentValue == value) {
return false;
}
currentValue = value;
for (StreamSubscription<T> subscription : subscriptions) {
if (subscription.onUIThread) {
uiThreadSubscriptions.add(subscription);
}
else {
regularSubscriptions.add(subscription);
}
}
for (StreamSubscription<T> subscription : regularSubscriptions) {
subscription.notify(value);
}
}
if (!uiThreadSubscriptions.isEmpty()) {
AsyncUtils.invokeLater(() -> {
synchronized (this) {
if (value != currentValue) {
return;
}
for (StreamSubscription<T> subscription : uiThreadSubscriptions) {
subscription.notify(value);
}
}
});
}
return true;
}
public StreamSubscription<T> listen(Consumer<T> onData) {
return listen(onData, false);
}
public StreamSubscription<T> listen(Consumer<T> onData, boolean onUIThread) {
final StreamSubscription<T> subscription = new StreamSubscription<>(onData, onUIThread, this);
final T cachedCurrentValue;
synchronized (this) {
cachedCurrentValue = currentValue;
subscriptions.add(subscription);
}
onData.accept(cachedCurrentValue);
return subscription;
}
protected void removeSubscription(StreamSubscription<T> subscription) {
synchronized (this) {
subscriptions.remove(subscription);
}
}
}
