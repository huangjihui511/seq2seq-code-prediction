package com.google.samples;
import com.google.api.services.jobs.v3.CloudTalentSolution;
import com.google.api.services.jobs.v3.model.Company;
import com.google.api.services.jobs.v3.model.CompensationEntry;
import com.google.api.services.jobs.v3.model.CompensationFilter;
import com.google.api.services.jobs.v3.model.CompensationInfo;
import com.google.api.services.jobs.v3.model.CompensationRange;
import com.google.api.services.jobs.v3.model.Job;
import com.google.api.services.jobs.v3.model.JobQuery;
import com.google.api.services.jobs.v3.model.Money;
import com.google.api.services.jobs.v3.model.RequestMetadata;
import com.google.api.services.jobs.v3.model.SearchJobsRequest;
import com.google.api.services.jobs.v3.model.SearchJobsResponse;
import com.google.api.services.jobs.v3.model.TimestampRange;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
public final class GeneralSearchSample {
private static final String DEFAULT_PROJECT_ID =
"projects/" + System.getenv("GOOGLE_CLOUD_PROJECT");
private static CloudTalentSolution talentSolutionClient = JobServiceQuickstart
.getTalentSolutionClient();
public static void basicSearcJobs(String companyName, String query) throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
JobQuery jobQuery = new JobQuery().setQuery(query);
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest searchJobsRequest =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery) 
.setSearchMode("JOB_SEARCH"); 
SearchJobsResponse searchJobsResponse =
talentSolutionClient
.projects()
.jobs()
.search(DEFAULT_PROJECT_ID, searchJobsRequest)
.execute();
System.out.println(searchJobsResponse);
}
public static void categoryFilterSearch(String companyName, List<String> categories)
throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
JobQuery jobQuery = new JobQuery().setJobCategories(categories);
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest searchJobsRequest =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery) 
.setSearchMode("JOB_SEARCH"); 
SearchJobsResponse searchJobsResponse =
talentSolutionClient
.projects()
.jobs()
.search(DEFAULT_PROJECT_ID, searchJobsRequest)
.execute();
System.out.println(searchJobsResponse);
}
public static void employmentTypesSearch(String companyName, List<String> employmentTypes)
throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
JobQuery jobQuery = new JobQuery().setEmploymentTypes(employmentTypes);
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest searchJobsRequest =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery) 
.setSearchMode("JOB_SEARCH"); 
SearchJobsResponse searchJobsResponse =
talentSolutionClient
.projects()
.jobs()
.search(DEFAULT_PROJECT_ID, searchJobsRequest)
.execute();
System.out.println(searchJobsResponse);
}
public static void dateRangeSearch(String companyName, String startTime, String endTime)
throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
TimestampRange timestampRange =
new TimestampRange().setStartTime(startTime).setEndTime(endTime);
JobQuery jobQuery = new JobQuery().setPublishTimeRange(timestampRange);
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest searchJobsRequest =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery) 
.setSearchMode("JOB_SEARCH"); 
SearchJobsResponse searchJobsResponse =
talentSolutionClient
.projects()
.jobs()
.search(DEFAULT_PROJECT_ID, searchJobsRequest)
.execute();
System.out.println(searchJobsResponse);
}
public static void languageCodeSearch(String companyName, List<String> languageCodes)
throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
JobQuery jobQuery = new JobQuery().setLanguageCodes(languageCodes);
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest searchJobsRequest =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery) 
.setSearchMode("JOB_SEARCH"); 
SearchJobsResponse searchJobsResponse =
talentSolutionClient
.projects()
.jobs()
.search(DEFAULT_PROJECT_ID, searchJobsRequest)
.execute();
System.out.println(searchJobsResponse);
}
public static void companyDisplayNameSearch(String companyName, List<String> companyDisplayNames)
throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
JobQuery jobQuery = new JobQuery().setCompanyDisplayNames(companyDisplayNames);
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest searchJobsRequest =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery) 
.setSearchMode("JOB_SEARCH"); 
SearchJobsResponse searchJobsResponse =
talentSolutionClient
.projects()
.jobs()
.search(DEFAULT_PROJECT_ID, searchJobsRequest)
.execute();
System.out.println(searchJobsResponse);
}
public static void compensationSearch(String companyName) throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
JobQuery jobQuery =
new JobQuery()
.setCompensationFilter(
new CompensationFilter()
.setType("UNIT_AND_AMOUNT")
.setUnits(Arrays.asList("HOURLY"))
.setRange(
new CompensationRange()
.setMaxCompensation(new Money().setCurrencyCode("USD")
.setUnits(15L))
.setMinCompensation(
new Money()
.setCurrencyCode("USD")
.setUnits(10L)
.setNanos(500000000))));
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest searchJobsRequest =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery) 
.setSearchMode("JOB_SEARCH"); 
SearchJobsResponse searchJobsResponse =
talentSolutionClient
.projects()
.jobs()
.search(DEFAULT_PROJECT_ID, searchJobsRequest)
.execute();
System.out.println(searchJobsResponse);
}
public static void main(String... args) throws Exception {
Company companyToBeCreated = BasicCompanySample.generateCompany().setDisplayName("Google");
String companyName = BasicCompanySample.createCompany(companyToBeCreated).getName();
Job jobToBeCreated = BasicJobSample.generateJobWithRequiredFields(companyName)
.setTitle("Systems Administrator")
.setEmploymentTypes(Arrays.asList("FULL_TIME"))
.setLanguageCode("en-US")
.setCompensationInfo(
new CompensationInfo().setEntries(Arrays.asList(
new CompensationEntry()
.setType("BASE")
.setUnit("HOURLY")
.setAmount(new Money().setCurrencyCode("USD").setUnits(12L)))));
final String jobName = BasicJobSample.createJob(jobToBeCreated).getName();
Thread.sleep(10000);
basicSearcJobs(companyName, "Systems Administrator");
categoryFilterSearch(companyName, Arrays.asList("COMPUTER_AND_IT"));
dateRangeSearch(companyName,
"1980-01-15T01:30:15.01Z",
"2099-01-15T01:30:15.01Z");
employmentTypesSearch(companyName, Arrays.asList("FULL_TIME", "CONTRACTOR", "PER_DIEM"));
companyDisplayNameSearch(companyName, Arrays.asList("Google"));
compensationSearch(companyName);
languageCodeSearch(companyName, Arrays.asList("pt-BR", "en-US"));
BasicJobSample.deleteJob(jobName);
BasicCompanySample.deleteCompany(companyName);
}
}
