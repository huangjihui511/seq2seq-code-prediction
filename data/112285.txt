package com.github.jknack.handlebars.context;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Modifier;
import java.util.LinkedHashSet;
import java.util.Set;
import com.github.jknack.handlebars.ValueResolver;
import com.github.jknack.handlebars.context.FieldValueResolver.FieldWrapper;
public class FieldValueResolver extends MemberValueResolver<FieldWrapper> {
public interface FieldWrapper extends Member {
Object get(Object obj) throws IllegalAccessException;
}
private static class FieldMember extends AccessibleObject implements FieldWrapper {
private Field field;
public FieldMember(final Field field) {
this.field = field;
}
@Override
public Class<?> getDeclaringClass() {
return field.getDeclaringClass();
}
@Override
public String getName() {
return field.getName();
}
@Override
public int getModifiers() {
return field.getModifiers();
}
@Override
public boolean isSynthetic() {
return field.isSynthetic();
}
@Override
public Object get(final Object obj) throws IllegalAccessException {
return field.get(obj);
}
@Override
public String toString() {
return field.toString();
}
@Override
public boolean isAccessible() {
return field.isAccessible();
}
@Override
public void setAccessible(final boolean flag) {
field.setAccessible(flag);
}
}
private static final class ArrayLengthMember implements FieldWrapper {
public static final FieldWrapper LENGTH = new ArrayLengthMember();
private ArrayLengthMember() {
}
@Override
public Class<?> getDeclaringClass() {
return null;
}
@Override
public String getName() {
return "length";
}
@Override
public int getModifiers() {
return Modifier.PUBLIC;
}
@Override
public boolean isSynthetic() {
return false;
}
@Override
public Object get(final Object obj) throws IllegalAccessException {
return Array.getLength(obj);
}
}
public static final ValueResolver INSTANCE = new FieldValueResolver();
@Override
public boolean matches(final FieldWrapper field, final String name) {
return !isStatic(field) && field.getName().equals(name);
}
@Override
protected Object invokeMember(final FieldWrapper field, final Object context) {
try {
return field.get(context);
} catch (Exception ex) {
throw new IllegalStateException(
"Shouldn't be illegal to access field '" + field.getName()
+ "'", ex);
}
}
@Override
protected Set<FieldWrapper> members(final Class<?> clazz) {
Set<FieldWrapper> members = new LinkedHashSet<>();
if (clazz.isArray()) {
members.add(ArrayLengthMember.LENGTH);
} else {
Class<?> targetClass = clazz;
do {
Field[] fields = targetClass.getDeclaredFields();
for (Field field : fields) {
FieldWrapper wrapper = new FieldMember(field);
if (matches(wrapper, memberName(wrapper))) {
members.add(wrapper);
}
}
targetClass = targetClass.getSuperclass();
} while (targetClass != null && targetClass != Object.class);
}
return members;
}
@Override
protected String memberName(final FieldWrapper member) {
return member.getName();
}
}
