package com.google.cloud.tools.jib.event.progress;
import com.google.cloud.tools.jib.MultithreadedExecutor;
import com.google.cloud.tools.jib.event.EventHandlers;
import com.google.cloud.tools.jib.event.events.ProgressEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.DoubleAccumulator;
import org.junit.Assert;
import org.junit.Test;
public class ProgressEventHandlerTest {
private static class AllocationTree {
private static final Allocation root = Allocation.newRoot("root", 2);
private static final Allocation child1 = root.newChild("child1", 1);
private static final Allocation child1Child = child1.newChild("child1Child", 100);
private static final Allocation child2 = root.newChild("child2", 200);
private AllocationTree() {}
}
private static final double DOUBLE_ERROR_MARGIN = 1e-10;
@Test
public void testAccept() throws ExecutionException, InterruptedException, IOException {
try (MultithreadedExecutor multithreadedExecutor = new MultithreadedExecutor()) {
DoubleAccumulator maxProgress = new DoubleAccumulator(Double::max, 0);
ProgressEventHandler progressEventHandler =
new ProgressEventHandler(update -> maxProgress.accumulate(update.getProgress()));
EventHandlers eventHandlers =
EventHandlers.builder().add(ProgressEvent.class, progressEventHandler).build();
multithreadedExecutor.invoke(
() -> {
eventHandlers.dispatch(new ProgressEvent(AllocationTree.root, 0L));
return null;
});
multithreadedExecutor.invoke(
() -> {
eventHandlers.dispatch(new ProgressEvent(AllocationTree.child1, 0L));
return null;
});
multithreadedExecutor.invoke(
() -> {
eventHandlers.dispatch(new ProgressEvent(AllocationTree.child1Child, 0L));
return null;
});
Assert.assertEquals(0.0, maxProgress.get(), DOUBLE_ERROR_MARGIN);
List<Callable<Void>> callables = new ArrayList<>(150);
callables.addAll(
Collections.nCopies(
50,
() -> {
eventHandlers.dispatch(new ProgressEvent(AllocationTree.child1Child, 1L));
return null;
}));
callables.addAll(
Collections.nCopies(
100,
() -> {
eventHandlers.dispatch(new ProgressEvent(AllocationTree.child2, 1L));
return null;
}));
multithreadedExecutor.invokeAll(callables);
Assert.assertEquals(
1.0 / 2 / 100 * 50 + 1.0 / 2 / 200 * 100, maxProgress.get(), DOUBLE_ERROR_MARGIN);
multithreadedExecutor.invokeAll(
Collections.nCopies(
100,
() -> {
eventHandlers.dispatch(new ProgressEvent(AllocationTree.child1, 0L));
return null;
}));
Assert.assertEquals(
1.0 / 2 / 100 * 50 + 1.0 / 2 / 200 * 100, maxProgress.get(), DOUBLE_ERROR_MARGIN);
multithreadedExecutor.invokeAll(callables);
Assert.assertEquals(1.0, maxProgress.get(), DOUBLE_ERROR_MARGIN);
}
}
}
