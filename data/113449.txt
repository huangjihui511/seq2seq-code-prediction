package com.pokegoapi.api.device;
import POGOProtos.Networking.Envelopes.SignatureOuterClass;
import com.pokegoapi.api.PokemonGo;
import lombok.Getter;
import lombok.Setter;
import java.util.Random;
public class SensorInfo {
private SignatureOuterClass.Signature.SensorInfo.Builder sensorInfoBuilder;
@Setter
@Getter
public long timestampCreate;
public SensorInfo() {
sensorInfoBuilder = SignatureOuterClass.Signature.SensorInfo.newBuilder();
}
public SensorInfo(SensorInfos sensorInfos) {
this();
sensorInfoBuilder
.setTimestampSnapshot(sensorInfos.getTimestampSnapshot())
.setStatus((int) sensorInfos.getAccelerometerAxes())
.setGravityX(sensorInfos.getAccelNormalizedX())
.setGravityY(sensorInfos.getAccelNormalizedY())
.setGravityZ(sensorInfos.getAccelNormalizedZ())
.setAttitudePitch(sensorInfos.getAccelRawX())
.setAttitudeYaw(sensorInfos.getAccelRawY())
.setAttitudeRoll(sensorInfos.getAccelRawZ())
.setRotationRateX(sensorInfos.getAngleNormalizedX())
.setRotationRateY(sensorInfos.getAngleNormalizedY())
.setRotationRateZ(sensorInfos.getAngleNormalizedZ())
.setAttitudePitch(sensorInfos.getGyroscopeRawX())
.setAttitudeYaw(sensorInfos.getGyroscopeRawY())
.setAttitudeRoll(sensorInfos.getGyroscopeRawZ())
.build();
}
public static SignatureOuterClass.Signature.SensorInfo getDefault(PokemonGo api, long currentTime, Random random) {
SensorInfo sensorInfo;
if (api.sensorInfo == null) {
sensorInfo = new SensorInfo();
sensorInfo.getBuilder()
.setTimestampSnapshot(currentTime - api.startTime + random.nextInt(500))
.setRotationRateX(0.1 + 0.6 * random.nextDouble())
.setRotationRateY(0.1 + 0.7000000000000001 * random.nextDouble())
.setRotationRateZ(0.1 + 0.7000000000000001 * random.nextDouble())
.setAttitudePitch(-1.0 + random.nextDouble() * 2.0)
.setAttitudeRoll(-1.0 + random.nextDouble() * 2.0)
.setAttitudeYaw(-1.0 + random.nextDouble() * 2.0)
.setGravityX(-1.0 + random.nextDouble() * 2.0)
.setGravityY(-1.0 + random.nextDouble() * 2.0)
.setGravityZ(-1.0 + random.nextDouble() * 2.0)
.setMagneticFieldAccuracy(-1)
.setStatus(3);
api.sensorInfo = sensorInfo;
} else {
sensorInfo = api.sensorInfo;
sensorInfo.getBuilder()
.setTimestampSnapshot(currentTime - api.startTime + random.nextInt(500))
.setLinearAccelerationX(-0.7 + random.nextDouble() * 1.4)
.setLinearAccelerationY(-0.7 + random.nextDouble() * 1.4)
.setLinearAccelerationZ(-0.7 + random.nextDouble() * 1.4)
.setRotationRateX(0.1 + 0.6 * random.nextDouble())
.setRotationRateY(0.1 + 0.7000000000000001 * random.nextDouble())
.setRotationRateZ(0.1 + 0.7000000000000001 * random.nextDouble())
.setAttitudePitch(-1.0 + random.nextDouble() * 2.0)
.setAttitudeRoll(-1.0 + random.nextDouble() * 2.0)
.setAttitudeYaw(-1.0 + random.nextDouble() * 2.0)
.setGravityX(-1.0 + random.nextDouble() * 2.0)
.setGravityY(-1.0 + random.nextDouble() * 2.0)
.setGravityZ(-1.0 + random.nextDouble() * 2.0)
.setMagneticFieldAccuracy(-1)
.setStatus(3);
}
if (currentTime - sensorInfo.timestampCreate > (random.nextInt(10000) + 5000)) {
sensorInfo.timestampCreate = currentTime;
return sensorInfo.getSensorInfo();
}
return null;
}
public void setTimestampSnapshot(long timestampSnapshot) {
sensorInfoBuilder.setTimestampSnapshot(timestampSnapshot);
}
public void setStatus(int status) {
sensorInfoBuilder.setStatus(status);
}
public void setLinearAccelerationX(double linearAccelerationX) {
sensorInfoBuilder.setLinearAccelerationX(linearAccelerationX);
}
public void setLinearAccelerationY(double linearAccelerationY) {
sensorInfoBuilder.setLinearAccelerationY(linearAccelerationY);
}
public void setLinearAccelerationZ(double linearAccelerationZ) {
sensorInfoBuilder.setLinearAccelerationZ(linearAccelerationZ);
}
public void setGravityX(double gravityX) {
sensorInfoBuilder.setGravityX(gravityX);
}
public void setGravityY(double gravityY) {
sensorInfoBuilder.setGravityY(gravityY);
}
public void setGravityZ(double gravityZ) {
sensorInfoBuilder.setGravityZ(gravityZ);
}
public void setRotationRateX(double rotationRateX) {
sensorInfoBuilder.setRotationRateX(rotationRateX);
}
public void setRotationRateY(double rotationRateY) {
sensorInfoBuilder.setRotationRateY(rotationRateY);
}
public void setRotationRateZ(double rotationRateZ) {
sensorInfoBuilder.setRotationRateZ(rotationRateZ);
}
public void setAttitudePitch(double attitudePitch) {
sensorInfoBuilder.setAttitudePitch(attitudePitch);
}
public void setAttitudeYaw(double attitudeYaw) {
sensorInfoBuilder.setAttitudeYaw(attitudeYaw);
}
public void setAttitudeRoll(double attitudeRoll) {
sensorInfoBuilder.setAttitudeRoll(attitudeRoll);
}
public SignatureOuterClass.Signature.SensorInfo.Builder getBuilder() {
return sensorInfoBuilder;
}
public SignatureOuterClass.Signature.SensorInfo getSensorInfo() {
return sensorInfoBuilder.build();
}
}
