package com.google.auto.common;
import static com.google.common.base.Preconditions.checkNotNull;
import static javax.lang.model.element.ElementKind.PACKAGE;
import com.google.common.base.Enums;
import com.google.common.collect.Ordering;
import java.util.Set;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
public enum Visibility {
PRIVATE,
DEFAULT,
PROTECTED,
PUBLIC;
private static final ElementKind MODULE =
Enums.getIfPresent(ElementKind.class, "MODULE").orNull();
public static Visibility ofElement(Element element) {
checkNotNull(element);
if (element.getKind().equals(PACKAGE) || element.getKind().equals(MODULE)) {
return PUBLIC;
}
Set<Modifier> modifiers = element.getModifiers();
if (modifiers.contains(Modifier.PRIVATE)) {
return PRIVATE;
} else if (modifiers.contains(Modifier.PROTECTED)) {
return PROTECTED;
} else if (modifiers.contains(Modifier.PUBLIC)) {
return PUBLIC;
} else {
return DEFAULT;
}
}
public static Visibility effectiveVisibilityOfElement(Element element) {
checkNotNull(element);
Visibility effectiveVisibility = PUBLIC;
Element currentElement = element;
while (currentElement != null) {
effectiveVisibility =
Ordering.natural().min(effectiveVisibility, ofElement(currentElement));
currentElement = currentElement.getEnclosingElement();
}
return effectiveVisibility;
}
}
