package io.grpc.alts;
import io.grpc.BindableService;
import io.grpc.Channel;
import io.grpc.CompressorRegistry;
import io.grpc.DecompressorRegistry;
import io.grpc.ExperimentalApi;
import io.grpc.HandlerRegistry;
import io.grpc.Metadata;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.ServerCall;
import io.grpc.ServerCall.Listener;
import io.grpc.ServerCallHandler;
import io.grpc.ServerInterceptor;
import io.grpc.ServerServiceDefinition;
import io.grpc.ServerStreamTracer.Factory;
import io.grpc.ServerTransportFilter;
import io.grpc.Status;
import io.grpc.alts.internal.AltsProtocolNegotiator;
import io.grpc.internal.ObjectPool;
import io.grpc.internal.SharedResourcePool;
import io.grpc.netty.NettyServerBuilder;
import java.io.File;
import java.net.InetSocketAddress;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
@ExperimentalApi("https:
public final class AltsServerBuilder extends ServerBuilder<AltsServerBuilder> {
private static final Logger logger = Logger.getLogger(AltsServerBuilder.class.getName());
private final NettyServerBuilder delegate;
private ObjectPool<Channel> handshakerChannelPool =
SharedResourcePool.forResource(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL);
private boolean enableUntrustedAlts;
private AltsServerBuilder(NettyServerBuilder nettyDelegate) {
this.delegate = nettyDelegate;
}
public static AltsServerBuilder forPort(int port) {
NettyServerBuilder nettyDelegate = NettyServerBuilder.forAddress(new InetSocketAddress(port));
return new AltsServerBuilder(nettyDelegate);
}
public AltsServerBuilder enableUntrustedAltsForTesting() {
enableUntrustedAlts = true;
return this;
}
public AltsServerBuilder setHandshakerAddressForTesting(String handshakerAddress) {
handshakerChannelPool =
SharedResourcePool.forResource(
HandshakerServiceChannel.getHandshakerChannelForTesting(handshakerAddress));
return this;
}
@Override
public AltsServerBuilder handshakeTimeout(long timeout, TimeUnit unit) {
delegate.handshakeTimeout(timeout, unit);
return this;
}
@Override
public AltsServerBuilder directExecutor() {
delegate.directExecutor();
return this;
}
@Override
public AltsServerBuilder addStreamTracerFactory(Factory factory) {
delegate.addStreamTracerFactory(factory);
return this;
}
@Override
public AltsServerBuilder addTransportFilter(ServerTransportFilter filter) {
delegate.addTransportFilter(filter);
return this;
}
@Override
public AltsServerBuilder executor(Executor executor) {
delegate.executor(executor);
return this;
}
@Override
public AltsServerBuilder addService(ServerServiceDefinition service) {
delegate.addService(service);
return this;
}
@Override
public AltsServerBuilder addService(BindableService bindableService) {
delegate.addService(bindableService);
return this;
}
@Override
public AltsServerBuilder fallbackHandlerRegistry(HandlerRegistry fallbackRegistry) {
delegate.fallbackHandlerRegistry(fallbackRegistry);
return this;
}
@Override
public AltsServerBuilder useTransportSecurity(File certChain, File privateKey) {
throw new UnsupportedOperationException("Can't set TLS settings for ALTS");
}
@Override
public AltsServerBuilder decompressorRegistry(DecompressorRegistry registry) {
delegate.decompressorRegistry(registry);
return this;
}
@Override
public AltsServerBuilder compressorRegistry(CompressorRegistry registry) {
delegate.compressorRegistry(registry);
return this;
}
@Override
public AltsServerBuilder intercept(ServerInterceptor interceptor) {
delegate.intercept(interceptor);
return this;
}
@Override
public Server build() {
if (!CheckGcpEnvironment.isOnGcp()) {
if (enableUntrustedAlts) {
logger.log(
Level.WARNING,
"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the "
+ "ALTS handshaker service");
} else {
Status status =
Status.INTERNAL.withDescription("ALTS is only allowed to run on Google Cloud Platform");
delegate.intercept(new FailingServerInterceptor(status));
}
}
delegate.protocolNegotiator(
AltsProtocolNegotiator.serverAltsProtocolNegotiator(handshakerChannelPool));
return delegate.build();
}
static final class FailingServerInterceptor implements ServerInterceptor {
private final Status status;
public FailingServerInterceptor(Status status) {
this.status = status;
}
@Override
public <ReqT, RespT> Listener<ReqT> interceptCall(
ServerCall<ReqT, RespT> serverCall,
Metadata metadata,
ServerCallHandler<ReqT, RespT> nextHandler) {
serverCall.close(status, new Metadata());
return new Listener<ReqT>() {};
}
}
}
