package com.datumbox.framework.common.concurrency;
import java.util.Comparator;
import java.util.Optional;
import java.util.concurrent.Callable;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.stream.Collector;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
public class ForkJoinStream {
private final ConcurrencyConfiguration concurrencyConfiguration;
public ForkJoinStream(ConcurrencyConfiguration concurrencyConfiguration) {
this.concurrencyConfiguration = concurrencyConfiguration;
}
public <T> void forEach(Stream<T> stream, Consumer<? super T> action) {
Runnable runnable = () -> stream.forEach(action);
ThreadMethods.forkJoinExecution(runnable, concurrencyConfiguration, stream.isParallel());
}
public <T, R> Stream<R> map(Stream<T> stream, Function<? super T, ? extends R> mapper) {
Callable<Stream<R>> callable = () -> stream.map(mapper);
return ThreadMethods.forkJoinExecution(callable, concurrencyConfiguration, stream.isParallel());
}
public <T, R, A> R collect(Stream<T> stream, Collector<? super T, A, R> collector) {
Callable<R> callable = () -> stream.collect(collector);
return ThreadMethods.forkJoinExecution(callable, concurrencyConfiguration, stream.isParallel());
}
public <T> Optional<T> min(Stream<T> stream, Comparator<? super T> comparator) {
Callable<Optional<T>> callable = () -> stream.min(comparator);
return ThreadMethods.forkJoinExecution(callable, concurrencyConfiguration, stream.isParallel());
}
public <T> Optional<T> max(Stream<T> stream, Comparator<? super T> comparator) {
Callable<Optional<T>> callable = () -> stream.max(comparator);
return ThreadMethods.forkJoinExecution(callable, concurrencyConfiguration, stream.isParallel());
}
public double sum(DoubleStream stream) {
Callable<Double> callable = () -> stream.sum();
return ThreadMethods.forkJoinExecution(callable, concurrencyConfiguration, stream.isParallel());
}
}
