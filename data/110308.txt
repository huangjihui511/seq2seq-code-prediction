package de.codecentric.boot.admin.server.cloud.discovery;
import java.net.URI;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.web.util.UriComponentsBuilder;
import de.codecentric.boot.admin.server.domain.entities.Instance;
import de.codecentric.boot.admin.server.domain.values.Registration;
import static java.util.Collections.emptyMap;
import static org.springframework.util.StringUtils.isEmpty;
public class DefaultServiceInstanceConverter implements ServiceInstanceConverter {
private static final Logger LOGGER = LoggerFactory.getLogger(DefaultServiceInstanceConverter.class);
private static final String KEY_MANAGEMENT_PORT = "management.port";
private static final String KEY_MANAGEMENT_PATH = "management.context-path";
private static final String KEY_MANAGEMENT_ADDRESS = "management.address";
private static final String KEY_HEALTH_PATH = "health.path";
private String managementContextPath = "/actuator";
private String healthEndpointPath = "health";
@Override
public Registration convert(ServiceInstance instance) {
LOGGER.debug("Converting service '{}' running at '{}' with metadata {}", instance.getServiceId(),
instance.getUri(), instance.getMetadata());
return Registration.create(instance.getServiceId(), getHealthUrl(instance).toString())
.managementUrl(getManagementUrl(instance).toString()).serviceUrl(getServiceUrl(instance).toString())
.metadata(getMetadata(instance)).build();
}
protected URI getHealthUrl(ServiceInstance instance) {
return UriComponentsBuilder.fromUri(getManagementUrl(instance)).path("/").path(getHealthPath(instance)).build()
.toUri();
}
protected String getHealthPath(ServiceInstance instance) {
String healthPath = instance.getMetadata().get(KEY_HEALTH_PATH);
if (!isEmpty(healthPath)) {
return healthPath;
}
return this.healthEndpointPath;
}
protected URI getManagementUrl(ServiceInstance instance) {
return UriComponentsBuilder.newInstance().scheme(getManagementScheme(instance))
.host(getManagementHost(instance)).port(getManagementPort(instance)).path("/")
.path(getManagementPath(instance)).build().toUri();
}
private String getManagementScheme(ServiceInstance instance) {
return this.getServiceUrl(instance).getScheme();
}
protected String getManagementHost(ServiceInstance instance) {
String managementServerHost = instance.getMetadata().get(KEY_MANAGEMENT_ADDRESS);
if (!isEmpty(managementServerHost)) {
return managementServerHost;
}
return getServiceUrl(instance).getHost();
}
protected String getManagementPort(ServiceInstance instance) {
String managementPort = instance.getMetadata().get(KEY_MANAGEMENT_PORT);
if (!isEmpty(managementPort)) {
return managementPort;
}
return String.valueOf(getServiceUrl(instance).getPort());
}
protected String getManagementPath(ServiceInstance instance) {
String managementPath = instance.getMetadata().get(DefaultServiceInstanceConverter.KEY_MANAGEMENT_PATH);
if (!isEmpty(managementPath)) {
return managementPath;
}
return this.managementContextPath;
}
protected URI getServiceUrl(ServiceInstance instance) {
return UriComponentsBuilder.fromUri(instance.getUri()).path("/").build().toUri();
}
protected Map<String, String> getMetadata(ServiceInstance instance) {
return (instance.getMetadata() != null) ? instance.getMetadata() : emptyMap();
}
public void setManagementContextPath(String managementContextPath) {
this.managementContextPath = managementContextPath;
}
public String getManagementContextPath() {
return this.managementContextPath;
}
public void setHealthEndpointPath(String healthEndpointPath) {
this.healthEndpointPath = healthEndpointPath;
}
public String getHealthEndpointPath() {
return this.healthEndpointPath;
}
}
