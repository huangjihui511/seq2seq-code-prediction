package org.apache.struts2.osgi.interceptor;
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.inject.Inject;
import com.opensymphony.xwork2.interceptor.AbstractInterceptor;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.struts2.osgi.host.OsgiHost;
import org.osgi.framework.BundleContext;
import org.osgi.framework.InvalidSyntaxException;
import org.osgi.framework.ServiceReference;
import javax.servlet.ServletContext;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
public class OsgiInterceptor extends AbstractInterceptor {
private static final Logger LOG = LogManager.getLogger(OsgiInterceptor.class);
private BundleContext bundleContext;
public String intercept(ActionInvocation invocation) throws Exception {
if (bundleContext != null) {
Object action = invocation.getAction();
injectBundleContext(action);
injectServicesUsingDeprecatedInterface(action);
injectServices(action);
} else if (LOG.isWarnEnabled()) {
LOG.warn("The OSGi interceptor was not able to find the BundleContext in the ServletContext");
}
return invocation.invoke();
}
private void injectBundleContext(Object action) {
if (action instanceof BundleContextAware)
((BundleContextAware) action).setBundleContext(bundleContext);
if (action instanceof org.apache.struts2.osgi.action.BundleContextAware) {
((org.apache.struts2.osgi.action.BundleContextAware) action).withBundleContext(bundleContext);
}
}
@Deprecated
private void injectServicesUsingDeprecatedInterface(Object action) throws InvalidSyntaxException {
if (action instanceof ServiceAware) {
Type[] types = action.getClass().getGenericInterfaces();
if (types != null) {
for (Type type : types) {
if (type instanceof ParameterizedType) {
ParameterizedType parameterizedType = (ParameterizedType) type;
if (parameterizedType.getRawType() instanceof Class) {
Class clazz = (Class) parameterizedType.getRawType();
if (ServiceAware.class.equals(clazz)) {
Class serviceClass = (Class) parameterizedType.getActualTypeArguments()[0];
ServiceReference[] refs = bundleContext.getAllServiceReferences(serviceClass.getName(), null);
if (refs != null) {
List services = new ArrayList(refs.length);
for (ServiceReference ref : refs) {
Object service = bundleContext.getService(ref);
if (service != null)
services.add(service);
}
if (!services.isEmpty())
((ServiceAware) action).setServices(services);
}
}
}
}
}
}
}
}
private void injectServices(Object action) throws InvalidSyntaxException {
if (action instanceof org.apache.struts2.osgi.action.ServiceAware) {
Type[] types = action.getClass().getGenericInterfaces();
if (types != null) {
for (Type type : types) {
if (type instanceof ParameterizedType) {
ParameterizedType parameterizedType = (ParameterizedType) type;
if (parameterizedType.getRawType() instanceof Class) {
Class clazz = (Class) parameterizedType.getRawType();
if (org.apache.struts2.osgi.action.ServiceAware.class.equals(clazz)) {
Class serviceClass = (Class) parameterizedType.getActualTypeArguments()[0];
ServiceReference[] refs = bundleContext.getAllServiceReferences(serviceClass.getName(), null);
if (refs != null) {
List<Object> services = new ArrayList<>(refs.length);
for (ServiceReference ref : refs) {
Object service = bundleContext.getService(ref);
if (service != null)
services.add(service);
}
if (!services.isEmpty()) {
((org.apache.struts2.osgi.action.ServiceAware) action).withServices(services);
}
}
}
}
}
}
}
}
}
@Inject
public void setServletContext(ServletContext servletContext) {
this.bundleContext = (BundleContext) servletContext.getAttribute(OsgiHost.OSGI_BUNDLE_CONTEXT);
}
}
