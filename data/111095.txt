package org.apereo.cas.adaptors.x509.authentication.handler.support;
import org.apereo.cas.adaptors.x509.authentication.principal.X509CertificateCredential;
import org.apereo.cas.adaptors.x509.authentication.revocation.checker.NoOpRevocationChecker;
import org.apereo.cas.adaptors.x509.authentication.revocation.checker.RevocationChecker;
import org.apereo.cas.authentication.AuthenticationHandlerExecutionResult;
import org.apereo.cas.authentication.Credential;
import org.apereo.cas.authentication.DefaultAuthenticationHandlerExecutionResult;
import org.apereo.cas.authentication.handler.support.AbstractPreAndPostProcessingAuthenticationHandler;
import org.apereo.cas.authentication.principal.PrincipalFactory;
import org.apereo.cas.services.ServicesManager;
import org.apereo.cas.util.crypto.CertUtils;
import org.apereo.cas.util.function.FunctionUtils;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.apache.commons.lang3.StringUtils;
import javax.security.auth.login.FailedLoginException;
import java.security.GeneralSecurityException;
import java.security.Principal;
import java.security.cert.X509Certificate;
import java.util.regex.Pattern;
@Slf4j
public class X509CredentialsAuthenticationHandler extends AbstractPreAndPostProcessingAuthenticationHandler {
private static final String KEY_USAGE_OID = "2.5.29.15";
private final Pattern regExTrustedIssuerDnPattern;
private final int maxPathLength;
private final boolean maxPathLengthAllowUnspecified;
private final boolean checkKeyUsage;
private final boolean requireKeyUsage;
private final Pattern regExSubjectDnPattern;
private final RevocationChecker revocationChecker;
public X509CredentialsAuthenticationHandler(final String name,
final ServicesManager servicesManager,
final PrincipalFactory principalFactory,
final Pattern regExTrustedIssuerDnPattern,
final int maxPathLength,
final boolean maxPathLengthAllowUnspecified,
final boolean checkKeyUsage,
final boolean requireKeyUsage,
final Pattern regExSubjectDnPattern,
final RevocationChecker revocationChecker,
final Integer order) {
super(name, servicesManager, principalFactory, order);
this.regExTrustedIssuerDnPattern = regExTrustedIssuerDnPattern;
this.maxPathLength = maxPathLength;
this.maxPathLengthAllowUnspecified = maxPathLengthAllowUnspecified;
this.checkKeyUsage = checkKeyUsage;
this.requireKeyUsage = requireKeyUsage;
this.regExSubjectDnPattern = regExSubjectDnPattern;
this.revocationChecker = revocationChecker;
}
public X509CredentialsAuthenticationHandler(final Pattern regExTrustedIssuerDnPattern) {
this(regExTrustedIssuerDnPattern, new NoOpRevocationChecker());
}
public X509CredentialsAuthenticationHandler(final Pattern regExTrustedIssuerDnPattern,
final boolean maxPathLengthAllowUnspecified,
final Pattern regExSubjectDnPattern) {
this(StringUtils.EMPTY, null, null, regExTrustedIssuerDnPattern,
Integer.MAX_VALUE, maxPathLengthAllowUnspecified, false,
false, regExSubjectDnPattern,
new NoOpRevocationChecker(),
null);
}
public X509CredentialsAuthenticationHandler(final Pattern regExTrustedIssuerDnPattern,
final boolean maxPathLengthAllowUnspecified,
final boolean checkKeyUsage,
final boolean requireKeyUsage) {
this(StringUtils.EMPTY, null, null, regExTrustedIssuerDnPattern,
Integer.MAX_VALUE, maxPathLengthAllowUnspecified,
checkKeyUsage, requireKeyUsage, null,
new NoOpRevocationChecker(),
null);
}
public X509CredentialsAuthenticationHandler(final Pattern regExTrustedIssuerDnPattern, final RevocationChecker revocationChecker) {
this(StringUtils.EMPTY, null, null,
regExTrustedIssuerDnPattern, Integer.MAX_VALUE, false,
false, false, null,
revocationChecker,
null);
}
private static boolean isCritical(final X509Certificate certificate, final String extensionOid) {
val criticalOids = certificate.getCriticalExtensionOIDs();
return criticalOids != null && !criticalOids.isEmpty() && criticalOids.contains(extensionOid);
}
private static boolean doesNameMatchPattern(final Principal principal, final Pattern pattern) {
if (pattern != null) {
val name = principal.getName();
val result = pattern.matcher(name).matches();
LOGGER.debug("[{}] matches [{}] == [{}]", pattern.pattern(), name, result);
return result;
}
return true;
}
@Override
public boolean supports(final Credential credential) {
return credential != null && X509CertificateCredential.class.isAssignableFrom(credential.getClass());
}
@Override
public boolean supports(final Class<? extends Credential> clazz) {
return X509CertificateCredential.class.isAssignableFrom(clazz);
}
@Override
protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) throws GeneralSecurityException {
val x509Credential = (X509CertificateCredential) credential;
val certificates = x509Credential.getCertificates();
var clientCert = (X509Certificate) null;
var hasTrustedIssuer = false;
for (var i = certificates.length - 1; i >= 0; i--) {
val certificate = certificates[i];
LOGGER.debug("Evaluating [{}]", CertUtils.toString(certificate));
validate(certificate);
if (!hasTrustedIssuer) {
hasTrustedIssuer = isCertificateFromTrustedIssuer(certificate);
}
val pathLength = certificate.getBasicConstraints();
if (pathLength < 0) {
LOGGER.debug("Found valid client certificate");
clientCert = certificate;
} else {
LOGGER.debug("Found valid CA certificate");
}
}
if (hasTrustedIssuer && clientCert != null) {
x509Credential.setCertificate(clientCert);
return new DefaultAuthenticationHandlerExecutionResult(this, x509Credential,
this.principalFactory.createPrincipal(x509Credential.getId()));
}
LOGGER.warn("Either client certificate could not be determined, or a trusted issuer could not be located");
throw new FailedLoginException();
}
private void validate(final X509Certificate cert) throws GeneralSecurityException {
cert.checkValidity();
this.revocationChecker.check(cert);
val pathLength = cert.getBasicConstraints();
if (pathLength < 0) {
if (!isCertificateAllowed(cert)) {
throw new FailedLoginException("Certificate subject does not match pattern " + this.regExSubjectDnPattern.pattern());
}
if (this.checkKeyUsage && !isValidKeyUsage(cert)) {
throw new FailedLoginException("Certificate keyUsage constraint forbids SSL client authentication.");
}
} else {
if (pathLength == Integer.MAX_VALUE && !this.maxPathLengthAllowUnspecified) {
throw new FailedLoginException("Unlimited certificate path length not allowed by configuration.");
}
if (pathLength > this.maxPathLength && pathLength < Integer.MAX_VALUE) {
throw new FailedLoginException(String.format(
"Certificate path length %s exceeds maximum value %s.", pathLength, this.maxPathLength));
}
}
}
private boolean isValidKeyUsage(final X509Certificate certificate) {
LOGGER.debug("Checking certificate keyUsage extension");
val keyUsage = certificate.getKeyUsage();
if (keyUsage == null) {
LOGGER.warn("Configuration specifies checkKeyUsage but keyUsage extension not found in certificate.");
return !this.requireKeyUsage;
}
val func = FunctionUtils.doIf(c -> isCritical(certificate, KEY_USAGE_OID) || requireKeyUsage,
t -> {
LOGGER.debug("KeyUsage extension is marked critical or required by configuration.");
return keyUsage[0];
},
f -> {
LOGGER.debug("KeyUsage digitalSignature=%s, Returning true since keyUsage validation not required by configuration.");
return Boolean.TRUE;
});
return func.apply(certificate);
}
private boolean isCertificateAllowed(final X509Certificate cert) {
return doesNameMatchPattern(cert.getSubjectDN(), this.regExSubjectDnPattern);
}
private boolean isCertificateFromTrustedIssuer(final X509Certificate cert) {
return doesNameMatchPattern(cert.getIssuerDN(), this.regExTrustedIssuerDnPattern);
}
}
