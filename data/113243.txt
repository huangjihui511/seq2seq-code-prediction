package org.pf4j;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.pf4j.plugin.FailTestPlugin;
import org.pf4j.plugin.TestExtensionPoint;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
public class AbstractExtensionFinderTest {
private PluginManager pluginManager;
@BeforeEach
public void setUp() {
PluginWrapper pluginStarted = mock(PluginWrapper.class);
when(pluginStarted.getPluginClassLoader()).thenReturn(getClass().getClassLoader());
when(pluginStarted.getPluginState()).thenReturn(PluginState.STARTED);
PluginWrapper pluginStopped = mock(PluginWrapper.class);
when(pluginStopped.getPluginClassLoader()).thenReturn(getClass().getClassLoader());
when(pluginStopped.getPluginState()).thenReturn(PluginState.STOPPED);
pluginManager = mock(PluginManager.class);
when(pluginManager.getPlugin(eq("plugin1"))).thenReturn(pluginStarted);
when(pluginManager.getPlugin(eq("plugin2"))).thenReturn(pluginStopped);
when(pluginManager.getPluginClassLoader(eq("plugin1"))).thenReturn(getClass().getClassLoader());
when(pluginManager.getExtensionFactory()).thenReturn(new DefaultExtensionFactory());
}
@AfterEach
public void tearDown() {
pluginManager = null;
}
@Test
public void testFindFailType() {
ExtensionFinder instance = new AbstractExtensionFinder(pluginManager) {
@Override
public Map<String, Set<String>> readPluginsStorages() {
return Collections.emptyMap();
}
@Override
public Map<String, Set<String>> readClasspathStorages() {
return Collections.emptyMap();
}
};
List<ExtensionWrapper<FailTestPlugin>> list = instance.find(FailTestPlugin.class);
assertEquals(0, list.size());
}
@Test
public void testFindFromClasspath() {
ExtensionFinder instance = new AbstractExtensionFinder(pluginManager) {
@Override
public Map<String, Set<String>> readPluginsStorages() {
return Collections.emptyMap();
}
@Override
public Map<String, Set<String>> readClasspathStorages() {
Map<String, Set<String>> entries = new LinkedHashMap<>();
Set<String> bucket = new HashSet<>();
bucket.add("org.pf4j.plugin.TestExtension");
bucket.add("org.pf4j.plugin.FailTestExtension");
entries.put(null, bucket);
return entries;
}
};
List<ExtensionWrapper<TestExtensionPoint>> list = instance.find(TestExtensionPoint.class);
assertEquals(2, list.size());
}
@Test
public void testFindFromPlugin() {
ExtensionFinder instance = new AbstractExtensionFinder(pluginManager) {
@Override
public Map<String, Set<String>> readPluginsStorages() {
Map<String, Set<String>> entries = new LinkedHashMap<>();
Set<String> bucket = new HashSet<>();
bucket.add("org.pf4j.plugin.TestExtension");
bucket.add("org.pf4j.plugin.FailTestExtension");
entries.put("plugin1", bucket);
bucket = new HashSet<>();
bucket.add("org.pf4j.plugin.TestExtension");
entries.put("plugin2", bucket);
return entries;
}
@Override
public Map<String, Set<String>> readClasspathStorages() {
return Collections.emptyMap();
}
};
List<ExtensionWrapper<TestExtensionPoint>> list = instance.find(TestExtensionPoint.class);
assertEquals(2, list.size());
list = instance.find(TestExtensionPoint.class, "plugin1");
assertEquals(2, list.size());
list = instance.find(TestExtensionPoint.class, "plugin2");
assertEquals(0, list.size());
}
@Test
public void testFindClassNames() {
ExtensionFinder instance = new AbstractExtensionFinder(pluginManager) {
@Override
public Map<String, Set<String>> readPluginsStorages() {
Map<String, Set<String>> entries = new LinkedHashMap<>();
Set<String> bucket = new HashSet<>();
bucket.add("org.pf4j.plugin.TestExtension");
entries.put("plugin1", bucket);
return entries;
}
@Override
public Map<String, Set<String>> readClasspathStorages() {
Map<String, Set<String>> entries = new LinkedHashMap<>();
Set<String> bucket = new HashSet<>();
bucket.add("org.pf4j.plugin.TestExtension");
bucket.add("org.pf4j.plugin.FailTestExtension");
entries.put(null, bucket);
return entries;
}
};
Set<String> result = instance.findClassNames(null);
assertEquals(2, result.size());
result = instance.findClassNames("plugin1");
assertEquals(1, result.size());
}
}
