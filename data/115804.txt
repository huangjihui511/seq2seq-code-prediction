package org.springframework.integration.store;
import java.util.concurrent.locks.ReentrantLock;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.context.SmartLifecycle;
import org.springframework.util.Assert;
public class MessageGroupStoreReaper implements Runnable, DisposableBean, InitializingBean, SmartLifecycle {
private static Log logger = LogFactory.getLog(MessageGroupStoreReaper.class);
private final ReentrantLock lifecycleLock = new ReentrantLock();
private MessageGroupStore messageGroupStore;
private boolean expireOnDestroy = false;
private long timeout = -1;
private int phase = 0;
private boolean autoStartup = true;
private volatile boolean running;
public MessageGroupStoreReaper(MessageGroupStore messageGroupStore) {
this.messageGroupStore = messageGroupStore;
}
public MessageGroupStoreReaper() {
}
public void setExpireOnDestroy(boolean expireOnDestroy) {
this.expireOnDestroy = expireOnDestroy;
}
public void setTimeout(long timeout) {
this.timeout = timeout;
}
public void setMessageGroupStore(MessageGroupStore messageGroupStore) {
this.messageGroupStore = messageGroupStore;
}
@Override
public void afterPropertiesSet() {
Assert.state(this.messageGroupStore != null, "A MessageGroupStore must be provided");
}
@Override
public void destroy() {
if (this.expireOnDestroy) {
if (this.isRunning()) {
logger.info("Expiring all messages from message group store: " + this.messageGroupStore);
this.messageGroupStore.expireMessageGroups(0);
}
else {
logger.debug("'expireOnDestroy' is set to 'true' but the reaper is not currently running");
}
}
}
@Override
public void run() {
if (this.timeout >= 0 && this.isRunning()) {
if (logger.isDebugEnabled()) {
logger.debug("Expiring all messages older than timeout=" + this.timeout + " from message group store: "
+ this.messageGroupStore);
}
this.messageGroupStore.expireMessageGroups(this.timeout);
}
}
@Override
public final void start() {
this.lifecycleLock.lock();
try {
if (!this.running) {
this.running = true;
if (logger.isInfoEnabled()) {
logger.info("started " + this);
}
}
}
finally {
this.lifecycleLock.unlock();
}
}
@Override
public void stop() {
this.lifecycleLock.lock();
try {
if (this.running) {
this.destroy();
if (logger.isInfoEnabled()) {
logger.info("stopped " + this);
}
}
this.running = false;
}
catch (Exception e) {
logger.error("failed to stop bean", e);
}
finally {
this.lifecycleLock.unlock();
}
}
@Override
public final boolean isRunning() {
this.lifecycleLock.lock();
try {
return this.running;
}
finally {
this.lifecycleLock.unlock();
}
}
@Override
public int getPhase() {
return this.phase;
}
public void setPhase(int phase) {
this.phase = phase;
}
@Override
public boolean isAutoStartup() {
return this.autoStartup;
}
public void setAutoStartup(boolean autoStartup) {
this.autoStartup = autoStartup;
}
}
