package com.pokegoapi.api.map.pokemon;
import POGOProtos.Enums.PokemonIdOuterClass.PokemonId;
import POGOProtos.Map.Fort.FortDataOuterClass.FortData;
import POGOProtos.Map.Pokemon.MapPokemonOuterClass.MapPokemon;
import POGOProtos.Map.Pokemon.WildPokemonOuterClass.WildPokemon;
import POGOProtos.Networking.Responses.GetIncensePokemonResponseOuterClass.GetIncensePokemonResponse;
import com.pokegoapi.api.PokemonGo;
import com.pokegoapi.exceptions.request.RequestFailedException;
import com.pokegoapi.util.MapPoint;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
@ToString
public class CatchablePokemon implements MapPoint {
private final PokemonGo api;
@Getter
public String spawnPointId = null;
@Getter
public long encounterId = 0;
@Getter
public PokemonId pokemonId = POGOProtos.Enums.PokemonIdOuterClass.PokemonId.MISSINGNO;
@Getter
private int pokemonIdValue = 0;
@Getter
public long expirationTimestampMs = 0;
private final double latitude;
private final double longitude;
private final EncounterKind encounterKind;
private Encounter encounter = null;
@Getter
@Setter
public boolean despawned = false;
public CatchablePokemon(PokemonGo api, MapPokemon proto) {
this.api = api;
this.encounterKind = EncounterKind.NORMAL;
this.spawnPointId = proto.getSpawnPointId();
this.encounterId = proto.getEncounterId();
this.pokemonId = proto.getPokedexTypeId();
this.pokemonIdValue = proto.getPokedexTypeIdValue();
this.expirationTimestampMs = proto.getExpirationTimeMs();
this.latitude = proto.getLatitude();
this.longitude = proto.getLongitude();
}
public CatchablePokemon(PokemonGo api, WildPokemon proto) {
this.api = api;
this.encounterKind = EncounterKind.NORMAL;
this.spawnPointId = proto.getSpawnPointId();
this.encounterId = proto.getEncounterId();
this.pokemonId = proto.getPokemonData().getPokemonId();
this.pokemonIdValue = proto.getPokemonData().getPokemonIdValue();
this.expirationTimestampMs = proto.getTimeTillHiddenMs();
this.latitude = proto.getLatitude();
this.longitude = proto.getLongitude();
}
public CatchablePokemon(PokemonGo api, FortData proto) {
this.api = api;
this.latitude = proto.getLatitude();
this.longitude = proto.getLongitude();
this.encounterKind = EncounterKind.DISK;
}
public CatchablePokemon(PokemonGo api, GetIncensePokemonResponse proto) {
this.api = api;
this.spawnPointId = proto.getEncounterLocation();
this.encounterId = proto.getEncounterId();
this.pokemonId = proto.getPokemonId();
this.pokemonIdValue = proto.getPokemonIdValue();
this.expirationTimestampMs = proto.getDisappearTimestampMs();
this.latitude = proto.getLatitude();
this.longitude = proto.getLongitude();
this.encounterKind = EncounterKind.INCENSE;
}
public Encounter encounter() throws RequestFailedException {
if (encounter == null) {
encounter = createEncounter();
encounter.encounter();
}
return encounter;
}
protected Encounter createEncounter() {
switch (encounterKind) {
case DISK:
return new DiskEncounter(api, this);
case INCENSE:
return new IncenseEncounter(api, this);
default:
return new Encounter(api, this);
}
}
@Override
public boolean equals(Object obj) {
if (obj == this) {
return true;
} else if (obj instanceof CatchablePokemon) {
return this.encounterId == ((CatchablePokemon) obj).encounterId;
}
return false;
}
@Override
public int hashCode() {
return (int) this.encounterId;
}
public boolean hasEncountered() {
return encounter != null;
}
public boolean isLured() {
return encounterKind == EncounterKind.DISK;
}
public boolean isFromIncense() {
return encounterKind == EncounterKind.INCENSE;
}
private enum EncounterKind {
NORMAL,
DISK,
INCENSE
}
public double getLatitude() {
return this.latitude;
}
public double getLongitude() {
return this.longitude;
}
}
