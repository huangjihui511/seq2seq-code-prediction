package io.realm.examples.newsreader.model;
import android.support.annotation.NonNull;
import android.text.TextUtils;
import java.util.HashMap;
import java.util.Map;
import io.reactivex.Flowable;
import io.reactivex.Observable;
import io.realm.RealmResults;
import io.realm.examples.newsreader.model.entity.NYTimesStory;
public class Model {
private static final Map<String, String> sections;
static {
sections = new HashMap<>();
sections.put("home", "Home");
sections.put("world", "World");
sections.put("national", "National");
sections.put("politics", "Politics");
sections.put("nyregion", "NY Region");
sections.put("business", "Business");
sections.put("opinion", "Opinion");
sections.put("technology", "Technology");
sections.put("science", "Science");
sections.put("health", "Health");
sections.put("sports", "Sports");
sections.put("arts", "Arts");
sections.put("fashion", "Fashion");
sections.put("dining", "Dining");
sections.put("travel", "Travel");
sections.put("magazine", "Magazine");
sections.put("realestate", "Real Estate");
}
private static Model instance = null;
private final Repository repository;
private String selectedSection;
public static synchronized Model getInstance() {
if (instance == null) {
Repository repository = new Repository();
instance = new Model(repository);
}
return instance;
}
private Model(Repository repository) {
this.repository = repository;
this.selectedSection = "home";
}
public Flowable<RealmResults<NYTimesStory>> getSelectedNewsFeed() {
return repository.loadNewsFeed(selectedSection, false);
}
public void reloadNewsFeed() {
repository.loadNewsFeed(selectedSection, true);
}
public Observable<Boolean> isNetworkUsed() {
return repository.networkInUse().distinctUntilChanged();
}
public void markAsRead(@NonNull String storyId, boolean read) {
repository.updateStoryReadState(storyId, read);
}
public Flowable<NYTimesStory> getStory(@NonNull final String storyId) {
if (TextUtils.isEmpty(storyId)) {
throw new IllegalArgumentException("Invalid storyId: " + storyId);
}
return repository.loadStory(storyId).filter(story -> story.isValid());
}
public Map<String, String> getSections() {
return sections;
}
public void selectSection(@NonNull String key) {
selectedSection = key;
repository.loadNewsFeed(selectedSection, false);
}
@Override
protected void finalize() throws Throwable {
super.finalize();
repository.close();
}
public @NonNull String getCurrentSectionKey() {
return selectedSection;
}
}
