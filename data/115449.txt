package org.gnucash.android.db.adapter;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import org.gnucash.android.app.GnuCashApplication;
import org.gnucash.android.model.PeriodType;
import org.gnucash.android.model.Recurrence;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import static org.gnucash.android.db.DatabaseSchema.RecurrenceEntry;
public class RecurrenceDbAdapter extends DatabaseAdapter<Recurrence> {
public RecurrenceDbAdapter(SQLiteDatabase db) {
super(db, RecurrenceEntry.TABLE_NAME, new String[]{
RecurrenceEntry.COLUMN_MULTIPLIER,
RecurrenceEntry.COLUMN_PERIOD_TYPE,
RecurrenceEntry.COLUMN_BYDAY,
RecurrenceEntry.COLUMN_PERIOD_START,
RecurrenceEntry.COLUMN_PERIOD_END
});
}
public static RecurrenceDbAdapter getInstance(){
return GnuCashApplication.getRecurrenceDbAdapter();
}
@Override
public Recurrence buildModelInstance(@NonNull Cursor cursor) {
String type = cursor.getString(cursor.getColumnIndexOrThrow(RecurrenceEntry.COLUMN_PERIOD_TYPE));
long multiplier = cursor.getLong(cursor.getColumnIndexOrThrow(RecurrenceEntry.COLUMN_MULTIPLIER));
String periodStart = cursor.getString(cursor.getColumnIndexOrThrow(RecurrenceEntry.COLUMN_PERIOD_START));
String periodEnd = cursor.getString(cursor.getColumnIndexOrThrow(RecurrenceEntry.COLUMN_PERIOD_END));
String byDays = cursor.getString(cursor.getColumnIndexOrThrow(RecurrenceEntry.COLUMN_BYDAY));
PeriodType periodType = PeriodType.valueOf(type);
Recurrence recurrence = new Recurrence(periodType);
recurrence.setMultiplier((int) multiplier);
recurrence.setPeriodStart(Timestamp.valueOf(periodStart));
if (periodEnd != null)
recurrence.setPeriodEnd(Timestamp.valueOf(periodEnd));
recurrence.setByDays(stringToByDays(byDays));
populateBaseModelAttributes(cursor, recurrence);
return recurrence;
}
@Override
protected @NonNull SQLiteStatement setBindings(@NonNull SQLiteStatement stmt, @NonNull final Recurrence recurrence) {
stmt.clearBindings();
stmt.bindLong(1, recurrence.getMultiplier());
stmt.bindString(2, recurrence.getPeriodType().name());
if (!recurrence.getByDays().isEmpty())
stmt.bindString(3, byDaysToString(recurrence.getByDays()));
stmt.bindString(4, recurrence.getPeriodStart().toString());
if (recurrence.getPeriodEnd() != null)
stmt.bindString(5, recurrence.getPeriodEnd().toString());
stmt.bindString(6, recurrence.getUID());
return stmt;
}
private static @NonNull String byDaysToString(@NonNull List<Integer> byDays) {
StringBuilder builder = new StringBuilder();
for (int day : byDays) {
switch (day) {
case Calendar.MONDAY:
builder.append("MO");
break;
case Calendar.TUESDAY:
builder.append("TU");
break;
case Calendar.WEDNESDAY:
builder.append("WE");
break;
case Calendar.THURSDAY:
builder.append("TH");
break;
case Calendar.FRIDAY:
builder.append("FR");
break;
case Calendar.SATURDAY:
builder.append("SA");
break;
case Calendar.SUNDAY:
builder.append("SU");
break;
default:
throw new RuntimeException("bad day of week: " + day);
}
builder.append(",");
}
builder.deleteCharAt(builder.length()-1);
return builder.toString();
}
private static @NonNull List<Integer> stringToByDays(@Nullable String byDaysString) {
if (byDaysString == null)
return Collections.emptyList();
List<Integer> byDaysList = new ArrayList<>();
for (String day : byDaysString.split(",")) {
switch (day) {
case "MO":
byDaysList.add(Calendar.MONDAY);
break;
case "TU":
byDaysList.add(Calendar.TUESDAY);
break;
case "WE":
byDaysList.add(Calendar.WEDNESDAY);
break;
case "TH":
byDaysList.add(Calendar.THURSDAY);
break;
case "FR":
byDaysList.add(Calendar.FRIDAY);
break;
case "SA":
byDaysList.add(Calendar.SATURDAY);
break;
case "SU":
byDaysList.add(Calendar.SUNDAY);
break;
default:
throw new RuntimeException("bad day of week: " + day);
}
}
return byDaysList;
}
}
