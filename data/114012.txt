package com.flipkart.android.proteus;
import android.content.res.XmlResourceParser;
import android.view.View;
import android.view.ViewGroup;
import com.flipkart.android.proteus.managers.ViewManager;
import com.flipkart.android.proteus.processor.AttributeProcessor;
import com.flipkart.android.proteus.value.Layout;
import com.flipkart.android.proteus.value.ObjectValue;
import com.flipkart.android.proteus.value.Value;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
public abstract class ViewTypeParser<V extends View> {
private static XmlResourceParser sParser = null;
@Nullable
public ViewTypeParser parent;
private AttributeProcessor[] processors = new AttributeProcessor[0];
private Map<String, AttributeSet.Attribute> attributes = new HashMap<>();
private int offset = 0;
private AttributeSet attributeSet;
@NonNull
public abstract String getType();
@Nullable
public abstract String getParentType();
@NonNull
public abstract ProteusView createView(@NonNull ProteusContext context, @NonNull Layout layout,
@NonNull ObjectValue data, @Nullable ViewGroup parent, int dataIndex);
@NonNull
public ProteusView.Manager createViewManager(@NonNull ProteusContext context, @NonNull ProteusView view,
@NonNull Layout layout, @NonNull ObjectValue data,
@Nullable ViewTypeParser caller, @Nullable ViewGroup parent,
int dataIndex) {
if (null != this.parent && caller != this.parent) {
return this.parent.createViewManager(context, view, layout, data, caller, parent, dataIndex);
} else {
DataContext dataContext = createDataContext(context, layout, data, parent, dataIndex);
return new ViewManager(context, caller != null ? caller : this, view.getAsView(), layout, dataContext);
}
}
@NonNull
protected DataContext createDataContext(ProteusContext context, @NonNull Layout layout, @NonNull ObjectValue data,
@Nullable ViewGroup parent, int dataIndex) {
DataContext dataContext, parentDataContext = null;
Map<String, Value> map = layout.data;
if (parent instanceof ProteusView) {
parentDataContext = ((ProteusView) parent).getViewManager().getDataContext();
}
if (map == null) {
if (parentDataContext == null) {
dataContext = DataContext.create(context, data, dataIndex);
} else {
dataContext = parentDataContext.copy();
}
} else {
if (parentDataContext == null) {
dataContext = DataContext.create(context, data, dataIndex, map);
} else {
dataContext = parentDataContext.createChild(context, map, dataIndex);
}
}
return dataContext;
}
public void onAfterCreateView(@NonNull ProteusView view, @Nullable ViewGroup parent, int dataIndex) {
View v = view.getAsView();
if (null == v.getLayoutParams()) {
ViewGroup.LayoutParams layoutParams;
if (parent != null) {
layoutParams = generateDefaultLayoutParams(parent);
} else {
layoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
}
v.setLayoutParams(layoutParams);
}
}
protected abstract void addAttributeProcessors();
public boolean handleAttribute(V view, int attributeId, Value value) {
int position = getPosition(attributeId);
if (position < 0) {
return null != parent && parent.handleAttribute(view, attributeId, value);
}
AttributeProcessor attributeProcessor = processors[position];
attributeProcessor.process(view, value);
return true;
}
public boolean handleChildren(V view, Value children) {
return null != parent && parent.handleChildren(view, children);
}
public boolean addView(ProteusView parent, ProteusView view) {
return null != this.parent && this.parent.addView(parent, view);
}
@NonNull
public AttributeSet prepare(@Nullable ViewTypeParser parent, @Nullable Map<String, AttributeProcessor<V>> extras) {
this.parent = parent;
this.processors = new AttributeProcessor[0];
this.attributes = new HashMap<>();
this.offset = null != parent ? parent.getAttributeSet().getOffset() : 0;
addAttributeProcessors();
if (extras != null) {
addAttributeProcessors(extras);
}
this.attributeSet = new AttributeSet(attributes.size() > 0 ? attributes : null, null != parent ? parent.getAttributeSet() : null, processors.length);
return attributeSet;
}
public int getAttributeId(String name) {
AttributeSet.Attribute attribute = attributeSet.getAttribute(name);
return null != attribute ? attribute.id : -1;
}
@NonNull
public AttributeSet getAttributeSet() {
return this.attributeSet;
}
protected void addAttributeProcessors(@NonNull Map<String, AttributeProcessor<V>> processors) {
for (Map.Entry<String, AttributeProcessor<V>> entry : processors.entrySet()) {
addAttributeProcessor(entry.getKey(), entry.getValue());
}
}
protected void addAttributeProcessor(String name, AttributeProcessor<V> processor) {
addAttributeProcessor(processor);
attributes.put(name, new AttributeSet.Attribute(getAttributeId(processors.length - 1), processor));
}
private void addAttributeProcessor(AttributeProcessor<V> handler) {
processors = Arrays.copyOf(processors, processors.length + 1);
processors[processors.length - 1] = handler;
}
private int getOffset() {
return offset;
}
private int getPosition(int attributeId) {
return attributeId + getOffset();
}
private int getAttributeId(int position) {
return position - getOffset();
}
private ViewGroup.LayoutParams generateDefaultLayoutParams(@NonNull ViewGroup parent) {
if (null == sParser) {
synchronized (ViewTypeParser.class) {
if (null == sParser) {
initializeAttributeSet(parent);
}
}
}
return parent.generateLayoutParams(sParser);
}
private void initializeAttributeSet(@NonNull ViewGroup parent) {
sParser = parent.getResources().getLayout(R.layout.layout_params_hack);
try {
while (sParser.nextToken() != XmlPullParser.START_TAG) {
}
} catch (XmlPullParserException | IOException e) {
e.printStackTrace();
}
}
public static class AttributeSet {
@Nullable
private final Map<String, Attribute> attributes;
@Nullable
private final AttributeSet parent;
private final int offset;
AttributeSet(@Nullable Map<String, Attribute> attributes, @Nullable AttributeSet parent, int offset) {
this.attributes = attributes;
this.parent = parent;
int parentOffset = null != parent ? parent.getOffset() : 0;
this.offset = parentOffset - offset;
}
@Nullable
public Attribute getAttribute(String name) {
Attribute attribute = null != attributes ? attributes.get(name) : null;
if (null != attribute) {
return attribute;
} else if (null != parent) {
return parent.getAttribute(name);
} else {
return null;
}
}
int getOffset() {
return offset;
}
public static class Attribute {
public final int id;
@NonNull
public final AttributeProcessor processor;
Attribute(int id, @NonNull AttributeProcessor processor) {
this.processor = processor;
this.id = id;
}
}
}
}
