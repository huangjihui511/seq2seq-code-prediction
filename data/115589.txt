package com.netflix.astyanax.mapping;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.netflix.astyanax.ColumnListMutation;
import com.netflix.astyanax.model.ColumnList;
import com.netflix.astyanax.model.Row;
import com.netflix.astyanax.model.Rows;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
@Deprecated
@SuppressWarnings({ "SuspiciousMethodCalls" })
public class Mapping<T> {
private final ImmutableMap<String, Field> fields;
private final String idFieldName;
private final Class<T> clazz;
public static final String DEFAULT_ID_COLUMN_NAME = "ID";
public static <T> Mapping<T> make(Class<T> clazz, boolean includeParentFields) {
return new Mapping<T>(clazz, new DefaultAnnotationSet(), includeParentFields);
}
public static <T> Mapping<T> make(Class<T> clazz) {
return new Mapping<T>(clazz, new DefaultAnnotationSet(), false);
}
public static <T> Mapping<T> make(Class<T> clazz, AnnotationSet<?, ?> annotationSet, boolean includeParentFields) {
return new Mapping<T>(clazz, annotationSet, includeParentFields);
}
public static <T> Mapping<T> make(Class<T> clazz, AnnotationSet<?, ?> annotationSet) {
return new Mapping(clazz, annotationSet, false);
}
public Mapping(Class<T> clazz, boolean includeParentFields) {
this(clazz, new DefaultAnnotationSet(), includeParentFields);
}
public Mapping(Class<T> clazz) {
this(clazz, new DefaultAnnotationSet(), false);
}
public Mapping(Class<T> clazz, AnnotationSet<?, ?> annotationSet, boolean includeParentFields) {
this.clazz = clazz;
String localKeyFieldName = null;
ImmutableMap.Builder<String, Field> builder = ImmutableMap.builder();
AtomicBoolean isKey = new AtomicBoolean();
Set<String> usedNames = Sets.newHashSet();
List<Field> allFields = getFields(clazz, includeParentFields);
for (Field field : allFields) {
String name = mapField(field, annotationSet, builder, usedNames, isKey);
if (isKey.get()) {
Preconditions.checkArgument(localKeyFieldName == null);
localKeyFieldName = name;
}
}
Preconditions.checkNotNull(localKeyFieldName);
fields = builder.build();
idFieldName = localKeyFieldName;
}
public Mapping(Class<T> clazz, AnnotationSet<?, ?> annotationSet) {
this(clazz, annotationSet, false);
}
private List<Field> getFields(Class clazz, boolean recursuvely) {
List<Field> allFields = new ArrayList<Field>();
if (clazz.getDeclaredFields() != null && clazz.getDeclaredFields().length > 0) {
for (Field field : clazz.getDeclaredFields()) {
allFields.add(field);
}
if (recursuvely && clazz.getSuperclass() != null) {
allFields.addAll(getFields(clazz.getSuperclass(), true));
}
}
return allFields;
}
public <V> V getIdValue(T instance, Class<V> valueClass) {
return getColumnValue(instance, idFieldName, valueClass);
}
public <V> V getColumnValue(T instance, String columnName,
Class<V> valueClass) {
Field field = fields.get(columnName);
if (field == null) {
throw new IllegalArgumentException("Column not found: "
+ columnName);
}
try {
return valueClass.cast(field.get(instance));
} catch (IllegalAccessException e) {
throw new RuntimeException(e); 
}
}
public <V> void setIdValue(T instance, V value) {
setColumnValue(instance, idFieldName, value);
}
public <V> void setColumnValue(T instance, String columnName, V value) {
Field field = fields.get(columnName);
if (field == null) {
throw new IllegalArgumentException("Column not found: "
+ columnName);
}
try {
field.set(instance, value);
} catch (IllegalAccessException e) {
throw new RuntimeException(e); 
}
}
public void fillMutation(T instance, ColumnListMutation<String> mutation) {
for (String fieldName : getNames()) {
Coercions.setColumnMutationFromField(instance, fields.get(fieldName), fieldName, mutation);
}
}
public T newInstance(ColumnList<String> columns)
throws IllegalAccessException, InstantiationException {
return initInstance(clazz.newInstance(), columns);
}
public T initInstance(T instance, ColumnList<String> columns) {
for (com.netflix.astyanax.model.Column<String> column : columns) {
Field field = fields.get(column.getName());
if (field != null) { 
Coercions.setFieldFromColumn(instance, field, column);
}
}
return instance;
}
public List<T> getAll(Rows<?, String> rows) throws InstantiationException,
IllegalAccessException {
List<T> list = Lists.newArrayList();
for (Row<?, String> row : rows) {
if (!row.getColumns().isEmpty()) {
list.add(newInstance(row.getColumns()));
}
}
return list;
}
public Collection<String> getNames() {
return fields.keySet();
}
Class<?> getIdFieldClass() {
return fields.get(idFieldName).getType();
}
private <ID extends Annotation, COLUMN extends Annotation> String mapField(
Field field, AnnotationSet<ID, COLUMN> annotationSet,
ImmutableMap.Builder<String, Field> builder, Set<String> usedNames,
AtomicBoolean isKey) {
String mappingName = null;
ID idAnnotation = field.getAnnotation(annotationSet.getIdAnnotation());
COLUMN columnAnnotation = field.getAnnotation(annotationSet
.getColumnAnnotation());
if ((idAnnotation != null) && (columnAnnotation != null)) {
throw new IllegalStateException(
"A field cannot be marked as both an ID and a Column: "
+ field.getName());
}
if (idAnnotation != null) {
mappingName = annotationSet.getIdName(field, idAnnotation);
isKey.set(true);
} else {
isKey.set(false);
}
if ((columnAnnotation != null)) {
mappingName = annotationSet.getColumnName(field, columnAnnotation);
}
if (mappingName != null) {
Preconditions.checkArgument(
!usedNames.contains(mappingName.toLowerCase()), mappingName
+ " has already been used for this column family");
usedNames.add(mappingName.toLowerCase());
field.setAccessible(true);
builder.put(mappingName, field);
}
return mappingName;
}
}
