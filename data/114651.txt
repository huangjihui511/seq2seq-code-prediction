package com.twelvemonkeys.io.enc;
import java.io.OutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.zip.Deflater;
final class DeflateEncoder implements Encoder {
private final Deflater deflater;
private final byte[] buffer = new byte[1024];
public DeflateEncoder() {
this(new Deflater(Deflater.DEFAULT_COMPRESSION, true)); 
}
public DeflateEncoder(final Deflater pDeflater) {
if (pDeflater == null) {
throw new IllegalArgumentException("deflater == null");
}
deflater = pDeflater;
}
public void encode(final OutputStream stream, ByteBuffer buffer)
throws IOException
{
System.out.println("DeflateEncoder.encode");
deflater.setInput(buffer.array(), buffer.arrayOffset() + buffer.position(), buffer.remaining());
flushInputToStream(stream);
}
private void flushInputToStream(final OutputStream pStream) throws IOException {
System.out.println("DeflateEncoder.flushInputToStream");
if (deflater.needsInput()) {
System.out.println("Foo");
}
while (!deflater.needsInput()) {
int deflated = deflater.deflate(buffer, 0, buffer.length);
pStream.write(buffer, 0, deflated);
System.out.println("flushed " + deflated);
}
}
}
