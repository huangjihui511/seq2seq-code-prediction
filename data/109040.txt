package io.vertx.core.net.impl.pkcs1;
import io.vertx.core.VertxException;
import io.vertx.core.buffer.Buffer;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPrivateCrtKeySpec;
import java.util.Arrays;
public class PrivateKeyParser {
private static final byte[] OID_RSA_PUBLIC_KEY = { 0x2A, (byte) 0x86, 0x48, (byte) 0x86, (byte) 0xF7, 0x0D, 0x01,
0x01, 0x01 };
private static final byte[] OID_EC_PUBLIC_KEY = { 0x2A, (byte) 0x86, 0x48, (byte) 0xCE, 0x3D, 0x02, 0x01 };
public static String getPKCS8EncodedKeyAlgorithm(byte[] encodedKey) {
DerParser parser = new DerParser(encodedKey);
Asn1Object sequence = parser.read();
if (sequence.getType() != DerParser.SEQUENCE) {
throw new VertxException("Invalid PKCS8 encoding: not a sequence");
}
parser = sequence.getParser();
BigInteger version = parser.read().getInteger();
if (version.intValue() != 0) {
throw new VertxException("Unsupported version, expected 0 but found " + version.intValue());
}
sequence = parser.read();
if (sequence.getType() != DerParser.SEQUENCE) {
throw new VertxException("Invalid PKCS8 encoding: could not read Algorithm Identifier");
}
parser = sequence.getParser();
byte[] algorithmIdentifier = parser.read().getObjectIdentifier();
if (Arrays.equals(OID_RSA_PUBLIC_KEY, algorithmIdentifier)) {
return "RSA";
} else if (Arrays.equals(OID_EC_PUBLIC_KEY, algorithmIdentifier)) {
return "EC";
} else {
throw new VertxException("Unsupported algorithm identifier");
}
}
public static RSAPrivateCrtKeySpec getRSAKeySpec(byte[] keyBytes) throws VertxException {
DerParser parser = new DerParser(keyBytes);
Asn1Object sequence = parser.read();
if (sequence.getType() != DerParser.SEQUENCE) {
throw new VertxException("Invalid DER: not a sequence");
}
parser = sequence.getParser();
parser.read(); 
BigInteger modulus = parser.read().getInteger();
BigInteger publicExp = parser.read().getInteger();
BigInteger privateExp = parser.read().getInteger();
BigInteger prime1 = parser.read().getInteger();
BigInteger prime2 = parser.read().getInteger();
BigInteger exp1 = parser.read().getInteger();
BigInteger exp2 = parser.read().getInteger();
BigInteger crtCoef = parser.read().getInteger();
return new RSAPrivateCrtKeySpec(
modulus, publicExp, privateExp, prime1, prime2,
exp1, exp2, crtCoef);
}
static class DerParser {
private final static int UNIVERSAL = 0x00;
private final static int APPLICATION = 0x40;
private final static int CONTEXT = 0x80;
private final static int PRIVATE = 0xC0;
private final static int CONSTRUCTED = 0x20;
private final static int ANY = 0x00;
private final static int BOOLEAN = 0x01;
private final static int INTEGER = 0x02;
private final static int BIT_STRING = 0x03;
private final static int OCTET_STRING = 0x04;
private final static int NULL = 0x05;
private final static int OBJECT_IDENTIFIER = 0x06;
private final static int REAL = 0x09;
private final static int ENUMERATED = 0x0a;
private final static int SEQUENCE = 0x10;
private final static int SET = 0x11;
private final static int NUMERIC_STRING = 0x12;
private final static int PRINTABLE_STRING = 0x13;
private final static int VIDEOTEX_STRING = 0x15;
private final static int IA5_STRING = 0x16;
private final static int GRAPHIC_STRING = 0x19;
private final static int ISO646_STRING = 0x1A;
private final static int GENERAL_STRING = 0x1B;
private final static int UTF8_STRING = 0x0C;
private final static int UNIVERSAL_STRING = 0x1C;
private final static int BMP_STRING = 0x1E;
private final static int UTC_TIME = 0x17;
private Buffer in;
private int pos;
DerParser(Buffer in) throws VertxException {
this.in = in;
}
DerParser(byte[] bytes) throws VertxException {
this(Buffer.buffer(bytes));
}
private int readByte() throws VertxException {
if (pos + 1 >= in.length()) {
throw new VertxException("Invalid DER: stream too short, missing tag");
}
return in.getUnsignedByte(pos++);
}
private byte[] readBytes(int len) throws VertxException {
if (pos + len > in.length()) {
throw new VertxException("Invalid DER: stream too short, missing tag");
}
Buffer s = in.slice(pos, pos + len);
pos += len;
return s.getBytes();
}
public Asn1Object read() throws VertxException {
int tag = readByte();
int length = getLength();
byte[] value = readBytes(length);
return new Asn1Object(tag, length, value);
}
private int getLength() throws VertxException {
int i = readByte();
if ((i & ~0x7F) == 0) {
return i;
}
int num = i & 0x7F;
if (i >= 0xFF || num > 4) {
throw new VertxException("Invalid DER: length field too big ("
+ i + ")");
}
byte[] bytes = readBytes(num);
return new BigInteger(1, bytes).intValue();
}
}
static class Asn1Object {
protected final int type;
protected final int length;
protected final byte[] value;
protected final int tag;
public Asn1Object(int tag, int length, byte[] value) {
this.tag = tag;
this.type = tag & 0x1F;
this.length = length;
this.value = value;
}
public int getType() {
return type;
}
public int getLength() {
return length;
}
public byte[] getValue() {
return value;
}
public boolean isConstructed() {
return (tag & DerParser.CONSTRUCTED) == DerParser.CONSTRUCTED;
}
public DerParser getParser() throws VertxException {
if (!isConstructed()) {
throw new VertxException("Invalid DER: can't parse primitive entity");
}
return new DerParser(value);
}
public BigInteger getInteger() throws VertxException {
if (type != DerParser.INTEGER) {
throw new VertxException("Invalid DER: object is not integer");
}
return new BigInteger(value);
}
public byte[] getObjectIdentifier() throws VertxException {
switch(type) {
case DerParser.OBJECT_IDENTIFIER:
return value;
default:
throw new VertxException("Invalid DER: object is not an Object Identifier");
}
}
public String getString() throws VertxException {
String encoding;
switch (type) {
case DerParser.NUMERIC_STRING:
case DerParser.PRINTABLE_STRING:
case DerParser.VIDEOTEX_STRING:
case DerParser.IA5_STRING:
case DerParser.GRAPHIC_STRING:
case DerParser.ISO646_STRING:
case DerParser.GENERAL_STRING:
encoding = "ISO-8859-1";
break;
case DerParser.BMP_STRING:
encoding = "UTF-16BE";
break;
case DerParser.UTF8_STRING:
encoding = "UTF-8";
break;
case DerParser.UNIVERSAL_STRING:
throw new VertxException("Invalid DER: can't handle UCS-4 string");
default:
throw new VertxException("Invalid DER: object is not a string");
}
try {
return new String(value, encoding);
} catch (UnsupportedEncodingException e) {
throw new VertxException(e);
}
}
}
}
