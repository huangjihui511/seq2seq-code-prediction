package com.example.gaefirebaseeventproxy;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.appengine.api.utils.SystemProperty;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;
public class FirebaseEventProxy {
private static final Logger log = Logger.getLogger(FirebaseEventProxy.class.getName());
public FirebaseEventProxy() {
String firebaseLocation = "https:
Map<String, Object> databaseAuthVariableOverride = new HashMap<String, Object>();
databaseAuthVariableOverride.put("uid", "gae-firebase-event-proxy");
databaseAuthVariableOverride.put("provider", "com.example");
try {
FirebaseOptions options =
new FirebaseOptions.Builder()
.setServiceAccount(new FileInputStream("gae-firebase-secrets.json"))
.setDatabaseUrl(firebaseLocation)
.setDatabaseAuthVariableOverride(databaseAuthVariableOverride)
.build();
FirebaseApp.initializeApp(options);
} catch (IOException e) {
throw new RuntimeException(
"Error reading firebase secrets from file: src/main/webapp/gae-firebase-secrets.json: "
+ e.getMessage());
}
}
@SuppressWarnings("VariableDeclarationUsageDistance")
public void start() {
DatabaseReference firebase = FirebaseDatabase.getInstance().getReference();
firebase.addValueEventListener(
new ValueEventListener() {
@Override
public void onDataChange(DataSnapshot snapshot) {
if (snapshot.exists()) {
try {
URL dest = new URL("http:
HttpURLConnection connection = (HttpURLConnection) dest.openConnection();
connection.setRequestMethod("POST");
connection.setDoOutput(true);
connection.setInstanceFollowRedirects(false);
if (SystemProperty.environment.value()
!= SystemProperty.Environment.Value.Production) {
connection.setRequestProperty("X-Appengine-Inbound-Appid", "dev-instance");
}
String json = new ObjectMapper().writeValueAsString(snapshot.getValue(false));
StringBuilder stringBuilder = new StringBuilder();
stringBuilder.append("&fbSnapshot=");
stringBuilder.append(URLEncoder.encode(json, "UTF-8"));
connection.getOutputStream().write(stringBuilder.toString().getBytes());
if (connection.getResponseCode() != 200) {
log.severe("Forwarding failed");
} else {
log.info("Sent: " + json);
}
} catch (JsonProcessingException e) {
log.severe("Unable to convert Firebase response to JSON: " + e.getMessage());
} catch (IOException e) {
log.severe("Error in connecting to app engine: " + e.getMessage());
}
}
}
@Override
public void onCancelled(DatabaseError error) {
log.severe("Firebase connection cancelled: " + error.getMessage());
}
});
}
}
