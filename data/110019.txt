package com.google.cloud.tools.jib.gradle;
import com.google.cloud.tools.jib.Command;
import java.io.IOException;
import java.security.DigestException;
import org.gradle.testkit.runner.UnexpectedBuildFailure;
import org.hamcrest.CoreMatchers;
import org.junit.Assert;
import org.junit.ClassRule;
import org.junit.Test;
public class DefaultTargetProjectIntegrationTest {
@ClassRule
public static final TestProject defaultTargetTestProject = new TestProject("default-target");
private static void assertDockerInspect(String imageReference)
throws IOException, InterruptedException {
String dockerInspect = new Command("docker", "inspect", imageReference).run();
Assert.assertThat(
dockerInspect,
CoreMatchers.containsString(
" \"ExposedPorts\": {\n"
+ " \"1000/tcp\": {},\n"
+ " \"2000/udp\": {},\n"
+ " \"2001/udp\": {},\n"
+ " \"2002/udp\": {},\n"
+ " \"2003/udp\": {}"));
Assert.assertThat(
dockerInspect,
CoreMatchers.containsString(
" \"Labels\": {\n"
+ " \"key1\": \"value1\",\n"
+ " \"key2\": \"value2\"\n"
+ "            }"));
}
@Test
public void testBuild_defaultTarget() {
try {
defaultTargetTestProject.build(
"clean", "jib", "-Djib.useOnlyProjectCache=true", "-x=classes");
Assert.fail();
} catch (UnexpectedBuildFailure ex) {
Assert.assertThat(
ex.getMessage(),
CoreMatchers.containsString(
"Missing target image parameter, perhaps you should add a 'jib.to.image' "
+ "configuration parameter to your build.gradle or set the parameter via the "
+ "commandline (e.g. 'gradle jib --image <your image name>')."));
}
}
@Test
public void testDockerDaemon_defaultTarget()
throws IOException, InterruptedException, DigestException {
Assert.assertEquals(
"Hello, world. An argument.\n",
JibRunHelper.buildToDockerDaemonAndRun(
defaultTargetTestProject,
"default-target-name:default-target-version",
"build.gradle"));
assertDockerInspect("default-target-name:default-target-version");
}
}
