package com.twelvemonkeys.sql;
import com.twelvemonkeys.lang.*;
import java.lang.reflect.*;
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;
import java.util.StringTokenizer;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
public class ObjectMapper {
final static String DIRECTMAP = "direct";
final static String OBJECTMAP = "object";
final static String COLLECTIONMAP = "collection";
final static String OBJCOLLMAP = "objectcollection";
Class mInstanceClass = null;
Hashtable mMethods = null;
Hashtable mColumnMap = null;
Hashtable mPropertiesMap = null;
Hashtable mJoins = null;
private Hashtable mTables = null;
private Vector mColumns = null;
Hashtable mForeignKeys = null;
Hashtable mPrimaryKeys = null;
Hashtable mMapTypes = null;
Hashtable mClasses = null;
String mPrimaryKey = null;
String mForeignKey = null;
String mIdentityJoin = null;
Log mLog = null;
public ObjectMapper(DatabaseReadable obj) {
this(obj.getClass(), obj.getMapping());
}
public ObjectMapper(Class pObjClass, Hashtable pMapping) {
mLog = new Log(this);
mInstanceClass = pObjClass;
mJoins = new Hashtable();
mPropertiesMap = new Hashtable();
mColumnMap = new Hashtable();
mClasses = new Hashtable();
mMapTypes = new Hashtable();
mForeignKeys = new Hashtable();
mPrimaryKeys = new Hashtable();
for (Enumeration keys = pMapping.keys(); keys.hasMoreElements();) {
String key  = (String) keys.nextElement();
String value = (String) pMapping.get(key);
int dotIdx = key.indexOf(".");
if (dotIdx >= 0) {
if (key.equals(".primaryKey")) {
mPrimaryKey = (String) pMapping.get(value);
}
else if (key.equals(".foreignKey")) {
mForeignKey = (String) pMapping.get(value);
}
else if (key.equals(".join")) {
mIdentityJoin = (String) pMapping.get(key);
}
else if (key.endsWith(".primaryKey")) {
mPrimaryKeys.put(key.substring(0, dotIdx), value);
}
else if (key.endsWith(".foreignKey")) {
mForeignKeys.put(key.substring(0, dotIdx), value);
}
else if (key.endsWith(".join")) {
mJoins.put(key.substring(0, dotIdx), value);
}
else if (key.endsWith(".mapType")) {
value = value.toLowerCase();
if (value.equals(DIRECTMAP) || value.equals(OBJECTMAP) ||
value.equals(COLLECTIONMAP) ||
value.equals(OBJCOLLMAP)) {
mMapTypes.put(key.substring(0, dotIdx), value);
}
else {
mLog.logError("Illegal mapType: \"" + value + "\"! "
+ "Legal types are: direct, object, "
+ "collection and objectCollection.");
}
}
else if (key.endsWith(".class")) {
try {
mClasses.put(key.substring(0, dotIdx),
Class.forName(value));
}
catch (ClassNotFoundException e) {
mLog.logError(e);
}
}
else if (key.endsWith(".collection")) {
}
}
else {
mPropertiesMap.put(key, value);
mColumnMap.put(value.substring(value.lastIndexOf(".") + 1),
key);
}
}
mMethods = new Hashtable();
Method[] methods = mInstanceClass.getMethods();
for (int i = 0; i < methods.length; i++) {
mMethods.put(methods[i].getName(), methods[i]);
}
}
public void setPrimaryKey(String pPrimaryKey) {
mPrimaryKey = pPrimaryKey;
}
public String getPrimaryKey() {
return mPrimaryKey;
}
public String getForeignKey() {
return mForeignKey;
}
public String getIdentityJoin() {
return mIdentityJoin;
}
Hashtable getPropertyMapping(String pProperty) {
Hashtable mapping = new Hashtable();
if (pProperty != null) {
if (mPropertiesMap.containsKey(pProperty))
mapping.put("object", mPropertiesMap.get(pProperty));
if (mPrimaryKeys.containsKey(pProperty)) {
mapping.put(".primaryKey", "id");
mapping.put("id", mPrimaryKeys.get(pProperty));
}
if (mForeignKeys.containsKey(pProperty))
mapping.put(".foreignKey", mPropertiesMap.get(mForeignKeys.get(pProperty)));
if (mJoins.containsKey(pProperty))
mapping.put(".join", mJoins.get(pProperty));
mapping.put(".mapType", "object");
}
return mapping;
}
public String getColumn(String pProperty) {
if (mPropertiesMap == null || pProperty == null)
return null;
return (String) mPropertiesMap.get(pProperty);
}
public String getTable(String pProperty) {
String table = getColumn(pProperty);
if (table != null) {
int dotIdx = 0;
if ((dotIdx = table.lastIndexOf(".")) >= 0)
table = table.substring(0, dotIdx);
else
return null;
}
return table;
}
public String getProperty(String pColumn) {
if (mColumnMap == null || pColumn == null)
return null;
String property = (String) mColumnMap.get(pColumn);
int dotIdx = 0;
if (property == null && (dotIdx = pColumn.lastIndexOf(".")) >= 0)
property = (String) mColumnMap.get(pColumn.substring(dotIdx + 1));
return property;
}
public synchronized Object[] mapObjects(ResultSet pRSet) throws SQLException {
Vector result = new Vector();
ResultSetMetaData meta = pRSet.getMetaData();
int cols = meta.getColumnCount();
String[] colNames = new String[cols];
for (int i = 0; i < cols; i++) {
colNames[i] = meta.getColumnName(i + 1); 
System.out.println(meta.getColumnLabel(i + 1));
System.out.println(meta.getColumnName(i + 1));
System.out.println(meta.getColumnType(i + 1));
System.out.println(meta.getColumnTypeName(i + 1));
}
while (pRSet.next()) {
Object obj = null;
try {
obj = mInstanceClass.newInstance(); 
}
catch (IllegalAccessException iae) {
mLog.logError(iae);
}
catch (InstantiationException ie) {
mLog.logError(ie);
}
for (int i = 0; i < cols; i++) {
String property = (String) mColumnMap.get(colNames[i]);
if (property != null) {
mapColumnProperty(pRSet, i + 1, property, obj);
}
}
result.addElement(obj);
}
return result.toArray((Object[]) Array.newInstance(mInstanceClass,
result.size()));
}
void mapColumnProperty(ResultSet pRSet, int pIndex, String pProperty,
Object pObj) {
if (pRSet == null || pProperty == null || pObj == null)
throw new IllegalArgumentException("ResultSet, Property or Object"
+ " arguments cannot be null!");
if (pIndex <= 0)
throw new IllegalArgumentException("Index parameter must be > 0!");
String methodName = "set" + StringUtil.capitalize(pProperty);
Method setMethod = (Method) mMethods.get(methodName);
if (setMethod == null) {
mLog.logError("No set method for property \""
+ pProperty + "\" in " + pObj.getClass() + "!");
return;
}
Method getMethod = null;
String type = "";
try {
Class[] cl = {Integer.TYPE};
type = setMethod.getParameterTypes()[0].getName();
type = type.substring(type.lastIndexOf(".") + 1);
if (type.equals("Integer")) {
type = "int";
}
getMethod = pRSet.getClass().
getMethod("get" + StringUtil.capitalize(type), cl);
}
catch (Exception e) {
mLog.logError("Can't find method \"get"
+ StringUtil.capitalize(type) + "(int)\" "
+ "(for class " + StringUtil.capitalize(type)
+ ") in ResultSet", e);
return;
}
try {
Object[] colIdx = {new Integer(pIndex)};
Object[] arg = {getMethod.invoke(pRSet, colIdx)};
setMethod.invoke(pObj, arg);
}
catch (InvocationTargetException ite) {
mLog.logError(ite);
}
catch (IllegalAccessException iae) {
mLog.logError(iae);
}
}
String buildIdentitySQL(String[] pKeys) {
mTables = new Hashtable();
mColumns = new Vector();
mColumns.addElement(getPrimaryKey());
tableJoins(null, false);
for (int i = 0; i < pKeys.length; i++) {
tableJoins(getColumn(pKeys[i]), true);
}
return "SELECT " + getPrimaryKey() + " " + buildFromClause()
+ buildWhereClause();
}
public String buildSQL() {
mTables = new Hashtable();
mColumns = new Vector();
String key = null;
for (Enumeration keys = mPropertiesMap.keys(); keys.hasMoreElements();) {
key = (String) keys.nextElement();
String column = (String) mPropertiesMap.get(key);
mColumns.addElement(column);
tableJoins(column, false);
}
return buildSelectClause() + buildFromClause()
+ buildWhereClause();
}
private String buildSelectClause() {
StringBuilder sqlBuf = new StringBuilder();
sqlBuf.append("SELECT ");
String column = null;
for (Enumeration select = mColumns.elements(); select.hasMoreElements();) {
column = (String) select.nextElement();
String subColumn = column.substring(column.indexOf(".") + 1);
String mapType = (String) mMapTypes.get(mColumnMap.get(subColumn));
String mapType = (String) mMapTypes.get(getProperty(column));
if (mapType == null || mapType.equals(DIRECTMAP)) {
sqlBuf.append(column);
sqlBuf.append(select.hasMoreElements() ? ", " : " ");
}
}
return sqlBuf.toString();
}
private String buildFromClause() {
StringBuilder sqlBuf = new StringBuilder();
sqlBuf.append("FROM ");
String table = null;
String schema = null;
for (Enumeration from = mTables.keys(); from.hasMoreElements();) {
table = (String) from.nextElement();
schema = (String) schemas.get(table);
if (schema != null)
sqlBuf.append(schema + ".");
sqlBuf.append(table);
sqlBuf.append(from.hasMoreElements() ? ", " : " ");
}
return sqlBuf.toString();
}
private String buildWhereClause() {
StringBuilder sqlBuf = new StringBuilder();
String join = null;
boolean first = true;
for (Enumeration where = mTables.elements(); where.hasMoreElements();) {
join = (String) where.nextElement();
if (join.length() > 0) {
if (first) {
first = false;
}
else {
sqlBuf.append(" AND ");
}
}
sqlBuf.append(join);
}
if (sqlBuf.length() > 0)
return "WHERE " + sqlBuf.toString();
return "WHERE 1 = 1"; 
}
private void tableJoins(String pColumn, boolean pWhereJoin) {
String join = null;
String table = null;
if (pColumn == null) {
join = getIdentityJoin();
table = getTable(getProperty(getPrimaryKey()));
}
else {
int dotIndex = -1;
if ((dotIndex = pColumn.lastIndexOf(".")) <= 0) {
return;
}
table = pColumn.substring(0, dotIndex);
String property = (String) getProperty(pColumn);
if (property != null) {
String mapType = (String) mMapTypes.get(property);
if (!pWhereJoin && mapType != null && !mapType.equals(DIRECTMAP)) {
return;
}
join = (String) mJoins.get(property);
}
}
if (mTables.get(table) == null) {
if (join != null) {
mTables.put(table, join);
StringTokenizer tok = new StringTokenizer(join, "= ");
String next = null;
while(tok.hasMoreElements()) {
next = tok.nextToken();
if (next.equals("AND") || next.equals("OR")
|| next.equals("NOT") || next.equals("IN")) {
continue;
}
tableJoins(next, false);
}
}
else {
join = "";
mTables.put(table, join);
}
}
}
}
