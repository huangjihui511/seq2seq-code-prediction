package com.pokegoapi.main;
import POGOProtos.Networking.Platform.PlatformRequestTypeOuterClass.PlatformRequestType;
import POGOProtos.Networking.Requests.RequestTypeOuterClass.RequestType;
import com.google.protobuf.ByteString;
import com.google.protobuf.Message;
import com.pokegoapi.api.PokemonGo;
import lombok.Getter;
import lombok.Setter;
import rx.Observable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
public class ServerRequestEnvelope {
@Getter
@Setter
public ServerRequest request;
@Getter
public List<ServerPlatformRequest> platformRequests = new ArrayList<>();
@Getter
public List<ServerRequest> commons;
private Observable<ServerResponse> observable;
private ServerResponse response;
private final Object responseLock = new Object();
private ServerRequestEnvelope(ServerRequest request, List<ServerRequest> commons) {
this.request = request;
this.commons = commons;
this.observable = Observable.from(new Future<ServerResponse>() {
@Override
public boolean cancel(boolean mayInterruptIfRunning) {
return false;
}
@Override
public boolean isCancelled() {
return false;
}
@Override
public boolean isDone() {
synchronized (responseLock) {
return response != null;
}
}
@Override
public ServerResponse get() throws InterruptedException, ExecutionException {
if (!isDone()) {
synchronized (responseLock) {
responseLock.wait();
}
}
if (response != null && response.exception != null) {
throw new RuntimeException(response.exception);
}
return response;
}
@Override
public ServerResponse get(long timeout, TimeUnit unit)
throws InterruptedException, ExecutionException, TimeoutException {
return get();
}
});
}
public static ServerRequestEnvelope create() {
return new ServerRequestEnvelope(null, new ArrayList<ServerRequest>());
}
public static ServerRequestEnvelope create(ServerRequest request) {
return new ServerRequestEnvelope(request, new ArrayList<ServerRequest>());
}
public static ServerRequestEnvelope create(ServerRequest request, PokemonGo api, boolean commons) {
List<ServerRequest> commonRequests = new ArrayList<>();
if (commons) {
commonRequests.addAll(CommonRequests.getDefaultCommons(api, request.type));
}
return new ServerRequestEnvelope(request, commonRequests);
}
public static ServerRequestEnvelope createCommons(ServerRequest request, PokemonGo api) {
return new ServerRequestEnvelope(request, CommonRequests.getDefaultCommons(api, request.type));
}
public void includeCommons(ServerRequest... commons) {
Collections.addAll(this.commons, commons);
}
public void removeCommons(ServerRequest... commons) {
for (ServerRequest common : commons) {
this.commons.remove(common);
}
}
public ServerPlatformRequest addPlatform(ServerPlatformRequest request) {
this.platformRequests.add(request);
return request;
}
public ServerPlatformRequest addPlatform(PlatformRequestType requestType, ByteString request) {
return this.addPlatform(new ServerPlatformRequest(requestType, request));
}
public void handleResponse(ServerResponse response) {
if (request != null && response.has(request.type)) {
request.handleResponse(response.get(request.type));
}
for (ServerRequest request : commons) {
RequestType type = request.type;
if (response.has(type)) {
request.handleResponse(response.get(type));
}
}
for (ServerPlatformRequest request : platformRequests) {
PlatformRequestType type = request.type;
if (response.has(type)) {
request.handleResponse(response.get(type));
}
}
}
public void notifyResponse(ServerResponse response) {
synchronized (responseLock) {
this.response = response;
this.responseLock.notifyAll();
}
}
public Observable<ServerResponse> observable() {
return observable;
}
}
