package psiprobe;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.servlet.ServletContext;
import org.apache.catalina.Context;
import org.apache.catalina.Valve;
import org.apache.catalina.WebResource;
import org.apache.catalina.deploy.NamingResourcesImpl;
import org.apache.jasper.JspCompilationContext;
import org.apache.jasper.Options;
import org.apache.jasper.compiler.JspRuntimeContext;
import org.apache.naming.ContextAccessController;
import org.apache.tomcat.util.descriptor.web.ApplicationParameter;
import org.apache.tomcat.util.descriptor.web.ContextResource;
import org.apache.tomcat.util.descriptor.web.ContextResourceLink;
import org.apache.tomcat.util.descriptor.web.FilterDef;
import org.apache.tomcat.util.descriptor.web.FilterMap;
import psiprobe.model.ApplicationParam;
import psiprobe.model.ApplicationResource;
import psiprobe.model.FilterInfo;
import psiprobe.model.FilterMapping;
public class Tomcat85ContainerAdapter extends AbstractTomcatContainer {
@Override
protected Valve createValve() {
return new Tomcat85AgentValve();
}
@Override
public boolean canBoundTo(String binding) {
if (binding == null) {
return false;
}
return binding.startsWith("Apache Tomcat/8.5")
|| binding.startsWith("Apache Tomcat (TomEE)/8.5")
|| binding.startsWith("NonStop(tm) Servlets For JavaServer Pages(tm) v8.5")
|| binding.startsWith("Pivotal tc") && binding.contains("/8.5");
}
protected List<FilterMapping> getFilterMappings(FilterMap fmap, String dm, String filterClass) {
String[] urls = fmap.getURLPatterns();
String[] servlets = fmap.getServletNames();
List<FilterMapping> results = new ArrayList<>(urls.length + servlets.length);
addFilterMapping(fmap.getFilterName(), dm, filterClass, urls, results, FilterMapType.URL);
addFilterMapping(fmap.getFilterName(), dm, filterClass, servlets, results,
FilterMapType.SERVLET_NAME);
return results;
}
@Override
protected JspCompilationContext createJspCompilationContext(String name, Options opt,
ServletContext sctx, JspRuntimeContext jrctx, ClassLoader classLoader) {
JspCompilationContext jcctx = new JspCompilationContext(name, opt, sctx, null, jrctx);
jcctx.setClassLoader(classLoader);
return jcctx;
}
@Override
public void addContextResourceLink(Context context, List<ApplicationResource> resourceList,
boolean contextBound) {
NamingResourcesImpl namingResources = context.getNamingResources();
for (ContextResourceLink link : namingResources.findResourceLinks()) {
ApplicationResource resource = new ApplicationResource();
logger.debug("reading resourceLink: {}", link.getName());
resource.setApplicationName(context.getName());
resource.setName(link.getName());
resource.setType(link.getType());
resource.setLinkTo(link.getGlobal());
registerGlobalResourceAccess(link);
resourceList.add(resource);
}
}
@Override
public void addContextResource(Context context, List<ApplicationResource> resourceList,
boolean contextBound) {
NamingResourcesImpl namingResources = context.getNamingResources();
for (ContextResource contextResource : namingResources.findResources()) {
ApplicationResource resource = new ApplicationResource();
logger.info("reading resource: {}", contextResource.getName());
resource.setApplicationName(context.getName());
resource.setName(contextResource.getName());
resource.setType(contextResource.getType());
resource.setScope(contextResource.getScope());
resource.setAuth(contextResource.getAuth());
resource.setDescription(contextResource.getDescription());
resourceList.add(resource);
}
}
@Override
public List<FilterMapping> getApplicationFilterMaps(Context context) {
FilterMap[] fms = context.findFilterMaps();
List<FilterMapping> filterMaps = new ArrayList<>(fms.length);
for (FilterMap filterMap : fms) {
if (filterMap != null) {
String dm;
switch (filterMap.getDispatcherMapping()) {
case FilterMap.ASYNC:
dm = "ASYNC";
break;
case FilterMap.ERROR:
dm = "ERROR";
break;
case FilterMap.FORWARD:
dm = "FORWARD";
break;
case FilterMap.INCLUDE:
dm = "INCLUDE";
break;
case FilterMap.REQUEST:
dm = "REQUEST";
break;
default:
dm = "";
}
String filterClass = "";
FilterDef fd = context.findFilterDef(filterMap.getFilterName());
if (fd != null) {
filterClass = fd.getFilterClass();
}
List<FilterMapping> filterMappings = getFilterMappings(filterMap, dm, filterClass);
filterMaps.addAll(filterMappings);
}
}
return filterMaps;
}
@Override
public List<FilterInfo> getApplicationFilters(Context context) {
FilterDef[] fds = context.findFilterDefs();
List<FilterInfo> filterDefs = new ArrayList<>(fds.length);
for (FilterDef filterDef : fds) {
if (filterDef != null) {
FilterInfo fi = getFilterInfo(filterDef);
filterDefs.add(fi);
}
}
return filterDefs;
}
private static FilterInfo getFilterInfo(FilterDef fd) {
FilterInfo fi = new FilterInfo();
fi.setFilterName(fd.getFilterName());
fi.setFilterClass(fd.getFilterClass());
fi.setFilterDesc(fd.getDescription());
return fi;
}
@Override
public List<ApplicationParam> getApplicationInitParams(Context context) {
Set<String> nonOverridableParams = new HashSet<>();
for (ApplicationParameter appParam : context.findApplicationParameters()) {
if (appParam != null && !appParam.getOverride()) {
nonOverridableParams.add(appParam.getName());
}
}
List<ApplicationParam> initParams = new ArrayList<>(20);
ServletContext servletCtx = context.getServletContext();
for (String paramName : Collections.list(servletCtx.getInitParameterNames())) {
ApplicationParam param = new ApplicationParam();
param.setName(paramName);
param.setValue(servletCtx.getInitParameter(paramName));
param.setFromDeplDescr(
context.findParameter(paramName) != null && !nonOverridableParams.contains(paramName));
initParams.add(param);
}
return initParams;
}
@Override
public boolean resourceExists(String name, Context context) {
return context.getResources().getResource(name) != null;
}
@Override
public InputStream getResourceStream(String name, Context context) throws IOException {
WebResource resource = context.getResources().getResource(name);
return resource.getInputStream();
}
@Override
public Long[] getResourceAttributes(String name, Context context) {
Long[] result = new Long[2];
WebResource resource = context.getResources().getResource(name);
result[0] = resource.getContentLength();
result[1] = resource.getLastModified();
return result;
}
@Override
protected Object getNamingToken(Context context) {
Object token = context.getNamingToken();
if (!ContextAccessController.checkSecurityToken(context, token)) {
logger.error("Couldn't get a valid security token. ClassLoader binding will fail.");
}
return token;
}
}
