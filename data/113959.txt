package org.spongepowered.mod;
import com.google.common.collect.ImmutableMap;
import net.minecraftforge.fml.common.MetadataCollection;
import net.minecraftforge.fml.common.ModMetadata;
import org.spongepowered.common.SpongeImpl;
import org.spongepowered.common.SpongeImplHooks;
import org.spongepowered.plugin.meta.McModInfo;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Enumeration;
import javax.annotation.Nullable;
public final class SpongeModMetadata {
@Nullable
private static MetadataCollection metadata;
private SpongeModMetadata() {
}
public static void load() {
if (metadata != null) {
return;
}
try {
String source = SpongeCoremod.modFile.toURI().toString();
boolean isJar = source.endsWith(".jar");
Enumeration<URL> urls = SpongeModMetadata.class.getClassLoader().getResources(McModInfo.STANDARD_FILENAME);
while (urls.hasMoreElements()) {
URL url = urls.nextElement();
if (isJar) {
if (!"jar".equals(url.getProtocol())) {
continue;
}
if (!url.getPath().startsWith(source)) {
continue;
}
} else if (!"file".equals(url.getProtocol())) {
continue;
}
try (InputStream in = url.openStream()) {
metadata = MetadataCollection.from(in, url.toString());
ModMetadata meta = getSpongeForgeMetadata();
if (!meta.autogenerated) {
SpongeImpl.getLogger().info("Found mcmod.info at {}", url);
return;
}
}
}
} catch (IOException e) {
SpongeImpl.getLogger().warn("Failed to load metadata", e);
}
if (metadata == null) {
metadata = new MetadataCollection();
}
}
public static ModMetadata get(String modId, String name) {
load();
ModMetadata meta = metadata.getMetadataForId(modId, ImmutableMap.of(
"name", name,
"version", ""
));
if (!meta.autogenerated) {
if (meta.name == null) {
meta.name = name;
}
if (meta.version == null) {
meta.version = "";
}
}
return meta;
}
public static ModMetadata getSpongeForgeMetadata() {
return get(SpongeImplHooks.getImplementationId(), "SpongeForge");
}
}
