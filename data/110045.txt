package com.google.cloud.tools.jib.configuration;
import com.google.common.collect.ImmutableList;
import java.time.Duration;
import java.util.Arrays;
import org.junit.Assert;
import org.junit.Test;
public class DockerHealthCheckTest {
@Test
public void testBuild() {
DockerHealthCheck healthCheck =
DockerHealthCheck.fromCommand(ImmutableList.of("echo", "hi"))
.setInterval(Duration.ofNanos(123))
.setTimeout(Duration.ofNanos(456))
.setStartPeriod(Duration.ofNanos(789))
.setRetries(10)
.build();
Assert.assertTrue(healthCheck.getInterval().isPresent());
Assert.assertEquals(Duration.ofNanos(123), healthCheck.getInterval().get());
Assert.assertTrue(healthCheck.getTimeout().isPresent());
Assert.assertEquals(Duration.ofNanos(456), healthCheck.getTimeout().get());
Assert.assertTrue(healthCheck.getStartPeriod().isPresent());
Assert.assertEquals(Duration.ofNanos(789), healthCheck.getStartPeriod().get());
Assert.assertTrue(healthCheck.getRetries().isPresent());
Assert.assertEquals(10, (int) healthCheck.getRetries().get());
}
@Test
public void testBuild_invalidCommand() {
try {
DockerHealthCheck.fromCommand(ImmutableList.of());
Assert.fail();
} catch (IllegalArgumentException ex) {
Assert.assertEquals("command must not be empty", ex.getMessage());
}
try {
DockerHealthCheck.fromCommand(Arrays.asList("CMD", null));
Assert.fail();
} catch (IllegalArgumentException ex) {
Assert.assertEquals("command must not contain null elements", ex.getMessage());
}
}
}
