package io.grpc.internal;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Preconditions.checkState;
import com.google.common.annotations.VisibleForTesting;
import io.grpc.Attributes;
import io.grpc.Compressor;
import io.grpc.Deadline;
import io.grpc.DecompressorRegistry;
import io.grpc.Metadata;
import io.grpc.Status;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.concurrent.GuardedBy;
class DelayedStream implements ClientStream {
private volatile boolean passThrough;
private ClientStreamListener listener;
private ClientStream realStream;
@GuardedBy("this")
private Status error;
@GuardedBy("this")
private List<Runnable> pendingCalls = new ArrayList<>();
@GuardedBy("this")
private DelayedStreamListener delayedListener;
@GuardedBy("this")
private long startTimeNanos;
@GuardedBy("this")
private long streamSetTimeNanos;
@Override
public void setMaxInboundMessageSize(final int maxSize) {
if (passThrough) {
realStream.setMaxInboundMessageSize(maxSize);
} else {
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.setMaxInboundMessageSize(maxSize);
}
});
}
}
@Override
public void setMaxOutboundMessageSize(final int maxSize) {
if (passThrough) {
realStream.setMaxOutboundMessageSize(maxSize);
} else {
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.setMaxOutboundMessageSize(maxSize);
}
});
}
}
@Override
public void setDeadline(final Deadline deadline) {
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.setDeadline(deadline);
}
});
}
@Override
public void appendTimeoutInsight(InsightBuilder insight) {
synchronized (this) {
if (listener == null) {
return;
}
if (realStream != null) {
insight.appendKeyValue("buffered_nanos", streamSetTimeNanos - startTimeNanos);
realStream.appendTimeoutInsight(insight);
} else {
insight.appendKeyValue("buffered_nanos", System.nanoTime() - startTimeNanos);
insight.append("waiting_for_connection");
}
}
}
final void setStream(ClientStream stream) {
synchronized (this) {
if (realStream != null) {
return;
}
setRealStream(checkNotNull(stream, "stream"));
}
drainPendingCalls();
}
private void drainPendingCalls() {
assert realStream != null;
assert !passThrough;
List<Runnable> toRun = new ArrayList<>();
DelayedStreamListener delayedListener = null;
while (true) {
synchronized (this) {
if (pendingCalls.isEmpty()) {
pendingCalls = null;
passThrough = true;
delayedListener = this.delayedListener;
break;
}
List<Runnable> tmp = toRun;
toRun = pendingCalls;
pendingCalls = tmp;
}
for (Runnable runnable : toRun) {
runnable.run();
}
toRun.clear();
}
if (delayedListener != null) {
delayedListener.drainPendingCallbacks();
}
}
private void delayOrExecute(Runnable runnable) {
synchronized (this) {
if (!passThrough) {
pendingCalls.add(runnable);
return;
}
}
runnable.run();
}
@Override
public void setAuthority(final String authority) {
checkState(listener == null, "May only be called before start");
checkNotNull(authority, "authority");
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.setAuthority(authority);
}
});
}
@Override
public void start(ClientStreamListener listener) {
checkState(this.listener == null, "already started");
Status savedError;
boolean savedPassThrough;
synchronized (this) {
this.listener = checkNotNull(listener, "listener");
savedError = error;
savedPassThrough = passThrough;
if (!savedPassThrough) {
listener = delayedListener = new DelayedStreamListener(listener);
}
startTimeNanos = System.nanoTime();
}
if (savedError != null) {
listener.closed(savedError, new Metadata());
return;
}
if (savedPassThrough) {
realStream.start(listener);
} else {
final ClientStreamListener finalListener = listener;
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.start(finalListener);
}
});
}
}
@Override
public Attributes getAttributes() {
ClientStream savedRealStream;
synchronized (this) {
savedRealStream = realStream;
}
if (savedRealStream != null) {
return savedRealStream.getAttributes();
} else {
return Attributes.EMPTY;
}
}
@Override
public void writeMessage(final InputStream message) {
checkNotNull(message, "message");
if (passThrough) {
realStream.writeMessage(message);
} else {
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.writeMessage(message);
}
});
}
}
@Override
public void flush() {
if (passThrough) {
realStream.flush();
} else {
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.flush();
}
});
}
}
@Override
public void cancel(final Status reason) {
checkNotNull(reason, "reason");
boolean delegateToRealStream = true;
ClientStreamListener listenerToClose = null;
synchronized (this) {
if (realStream == null) {
setRealStream(NoopClientStream.INSTANCE);
delegateToRealStream = false;
listenerToClose = listener;
error = reason;
}
}
if (delegateToRealStream) {
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.cancel(reason);
}
});
} else {
if (listenerToClose != null) {
listenerToClose.closed(reason, new Metadata());
}
drainPendingCalls();
}
}
@GuardedBy("this")
private void setRealStream(ClientStream realStream) {
checkState(this.realStream == null, "realStream already set to %s", this.realStream);
this.realStream = realStream;
streamSetTimeNanos = System.nanoTime();
}
@Override
public void halfClose() {
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.halfClose();
}
});
}
@Override
public void request(final int numMessages) {
if (passThrough) {
realStream.request(numMessages);
} else {
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.request(numMessages);
}
});
}
}
@Override
public void setCompressor(final Compressor compressor) {
checkNotNull(compressor, "compressor");
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.setCompressor(compressor);
}
});
}
@Override
public void setFullStreamDecompression(final boolean fullStreamDecompression) {
delayOrExecute(
new Runnable() {
@Override
public void run() {
realStream.setFullStreamDecompression(fullStreamDecompression);
}
});
}
@Override
public void setDecompressorRegistry(final DecompressorRegistry decompressorRegistry) {
checkNotNull(decompressorRegistry, "decompressorRegistry");
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.setDecompressorRegistry(decompressorRegistry);
}
});
}
@Override
public boolean isReady() {
if (passThrough) {
return realStream.isReady();
} else {
return false;
}
}
@Override
public void setMessageCompression(final boolean enable) {
if (passThrough) {
realStream.setMessageCompression(enable);
} else {
delayOrExecute(new Runnable() {
@Override
public void run() {
realStream.setMessageCompression(enable);
}
});
}
}
@VisibleForTesting
ClientStream getRealStream() {
return realStream;
}
private static class DelayedStreamListener implements ClientStreamListener {
private final ClientStreamListener realListener;
private volatile boolean passThrough;
@GuardedBy("this")
private List<Runnable> pendingCallbacks = new ArrayList<>();
public DelayedStreamListener(ClientStreamListener listener) {
this.realListener = listener;
}
private void delayOrExecute(Runnable runnable) {
synchronized (this) {
if (!passThrough) {
pendingCallbacks.add(runnable);
return;
}
}
runnable.run();
}
@Override
public void messagesAvailable(final MessageProducer producer) {
if (passThrough) {
realListener.messagesAvailable(producer);
} else {
delayOrExecute(new Runnable() {
@Override
public void run() {
realListener.messagesAvailable(producer);
}
});
}
}
@Override
public void onReady() {
if (passThrough) {
realListener.onReady();
} else {
delayOrExecute(new Runnable() {
@Override
public void run() {
realListener.onReady();
}
});
}
}
@Override
public void headersRead(final Metadata headers) {
delayOrExecute(new Runnable() {
@Override
public void run() {
realListener.headersRead(headers);
}
});
}
@Override
public void closed(final Status status, final Metadata trailers) {
delayOrExecute(new Runnable() {
@Override
public void run() {
realListener.closed(status, trailers);
}
});
}
@Override
public void closed(
final Status status, final RpcProgress rpcProgress,
final Metadata trailers) {
delayOrExecute(new Runnable() {
@Override
public void run() {
realListener.closed(status, rpcProgress, trailers);
}
});
}
public void drainPendingCallbacks() {
assert !passThrough;
List<Runnable> toRun = new ArrayList<>();
while (true) {
synchronized (this) {
if (pendingCallbacks.isEmpty()) {
pendingCallbacks = null;
passThrough = true;
break;
}
List<Runnable> tmp = toRun;
toRun = pendingCallbacks;
pendingCallbacks = tmp;
}
for (Runnable runnable : toRun) {
runnable.run();
}
toRun.clear();
}
}
}
}
