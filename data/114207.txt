package com.datumbox.framework.common;
import com.datumbox.framework.common.interfaces.Configurable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Locale;
import java.util.Properties;
public class ConfigurableFactory {
private static final String DEFAULT_POSTFIX = ".default";
private static final Logger logger = LoggerFactory.getLogger(ConfigurableFactory.class);
public static <C extends Configurable> C getConfiguration(Class<C> klass) {
String defaultPropertyFile = "datumbox." + klass.getSimpleName().toLowerCase(Locale.ENGLISH) + DEFAULT_POSTFIX + ".properties";
Properties properties = new Properties();
ClassLoader cl = klass.getClassLoader();
try (InputStream in = cl.getResourceAsStream(defaultPropertyFile)) {
properties.load(in);
}
catch(IOException ex) {
throw new UncheckedIOException(ex);
}
String propertyFile = defaultPropertyFile.replaceFirst(DEFAULT_POSTFIX, "");
if(cl.getResource(propertyFile)!=null) {
try (InputStream in = cl.getResourceAsStream(propertyFile)) {
properties.load(in);
}
catch(IOException ex) {
throw new UncheckedIOException(ex);
}
logger.trace("Loading properties file {}: {}", propertyFile, properties);
}
else {
logger.warn("Using default properties file {}: {}", defaultPropertyFile, properties);
}
return getConfiguration(klass, properties);
}
public static <C extends Configurable> C getConfiguration(Class<C> klass, Properties properties) {
C configuration;
try {
Constructor<C> constructor = klass.getDeclaredConstructor();
constructor.setAccessible(true);
configuration = constructor.newInstance();
}
catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException ex) {
throw new RuntimeException(ex);
}
configuration.load(properties);
return configuration;
}
}
