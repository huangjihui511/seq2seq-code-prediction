package org.apache.pdfbox.util;
import java.io.InputStream;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.xml.sax.SAXException;
public final class XMLUtil
{
private XMLUtil()
{
}
public static Document parse(InputStream is) throws IOException
{
return parse(is, false);
}
public static Document parse(InputStream is, boolean nsAware) throws IOException
{
try
{
DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
builderFactory.setFeature("http:
builderFactory.setFeature("http:
false);
builderFactory.setFeature("http:
false);
builderFactory.setFeature(
"http:
builderFactory.setXIncludeAware(false);
builderFactory.setExpandEntityReferences(false);
builderFactory.setNamespaceAware(nsAware);
DocumentBuilder builder = builderFactory.newDocumentBuilder();
return builder.parse(is);
}
catch (FactoryConfigurationError | ParserConfigurationException | SAXException e)
{
throw new IOException(e.getMessage(), e);
}
}
public static String getNodeValue(Element node)
{
StringBuilder sb = new StringBuilder();
NodeList children = node.getChildNodes();
int numNodes = children.getLength();
for (int i = 0; i < numNodes; i++)
{
Node next = children.item(i);
if (next instanceof Text)
{
sb.append(next.getNodeValue());
}
}
return sb.toString();
}
}
