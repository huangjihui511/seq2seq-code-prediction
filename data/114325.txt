package mobi.hsz.idea.gitignore.codeInspection;
import com.intellij.codeInspection.InspectionManager;
import com.intellij.codeInspection.LocalInspectionTool;
import com.intellij.codeInspection.ProblemDescriptor;
import com.intellij.codeInspection.ProblemsHolder;
import com.intellij.psi.PsiFile;
import mobi.hsz.idea.gitignore.IgnoreBundle;
import mobi.hsz.idea.gitignore.psi.IgnoreEntry;
import mobi.hsz.idea.gitignore.psi.IgnoreFile;
import mobi.hsz.idea.gitignore.psi.IgnoreVisitor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
public class IgnoreRelativeEntryInspection extends LocalInspectionTool {
@Nullable
@Override
public ProblemDescriptor[] checkFile(@NotNull PsiFile file,
@NotNull InspectionManager manager, boolean isOnTheFly) {
if (!(file instanceof IgnoreFile)) {
return null;
}
final ProblemsHolder problemsHolder = new ProblemsHolder(manager, file, isOnTheFly);
file.acceptChildren(new IgnoreVisitor() {
@Override
public void visitEntry(@NotNull IgnoreEntry entry) {
String path = entry.getText().replaceAll("\\\\(.)", "$1");
if (path.contains("./")) {
problemsHolder.registerProblem(entry, IgnoreBundle.message("codeInspection.relativeEntry.message"),
new IgnoreRelativeEntryFix(entry));
}
super.visitEntry(entry);
}
});
return problemsHolder.getResultsArray();
}
@Override
public boolean runForWholeFile() {
return true;
}
}
