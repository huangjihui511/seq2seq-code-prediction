package cn.hutool.aop.proxy;
import java.io.Serializable;
import cn.hutool.aop.aspects.Aspect;
import cn.hutool.core.util.ReflectUtil;
public abstract class ProxyFactory implements Serializable{
private static final long serialVersionUID = 1L;
public abstract <T> T proxy(T target, Aspect aspect);
public static <T> T createProxy(T target, Class<? extends Aspect> aspectClass){
return createProxy(target, ReflectUtil.newInstance(aspectClass));
}
public static <T> T createProxy(T target, Aspect aspect) {
return create().proxy(target, aspect);
}
public static ProxyFactory create() {
try {
return new CglibProxyFactory();
} catch (NoClassDefFoundError e) {
}
return new JdkProxyFactory();
}
}
