package psiprobe.beans;
import com.maxmind.db.CHMCache;
import com.maxmind.geoip2.DatabaseReader;
import com.maxmind.geoip2.exception.AddressNotFoundException;
import com.maxmind.geoip2.model.CountryResponse;
import com.maxmind.geoip2.record.Country;
import java.io.File;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.inject.Inject;
import javax.management.InstanceNotFoundException;
import javax.management.MBeanServer;
import javax.management.MBeanServerNotification;
import javax.management.Notification;
import javax.management.NotificationListener;
import javax.management.ObjectInstance;
import javax.management.ObjectName;
import javax.management.RuntimeOperationsException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import psiprobe.model.Connector;
import psiprobe.model.RequestProcessor;
import psiprobe.model.ThreadPool;
import psiprobe.model.jmx.ThreadPoolObjectName;
import psiprobe.tools.JmxTools;
public class ContainerListenerBean implements NotificationListener {
private static final Logger logger = LoggerFactory.getLogger(ContainerListenerBean.class);
private Set<String> allowedOperation =
new HashSet<>(Arrays.asList("start", "stop", "pause", "resume"));
private List<ThreadPoolObjectName> poolNames;
private List<ObjectName> executorNames;
@Inject
private ContainerWrapperBean containerWrapper;
public ContainerWrapperBean getContainerWrapper() {
return containerWrapper;
}
public void setContainerWrapper(ContainerWrapperBean containerWrapper) {
this.containerWrapper = containerWrapper;
}
private boolean isInitialized() {
return poolNames != null && !poolNames.isEmpty();
}
private ThreadPoolObjectName findPool(String name) {
if (name != null && isInitialized()) {
for (ThreadPoolObjectName threadPoolObjectName : poolNames) {
if (name.equals(threadPoolObjectName.getThreadPoolName().getKeyProperty("name"))) {
return threadPoolObjectName;
}
}
}
return null;
}
@Override
public synchronized void handleNotification(Notification notification, Object object) {
if (notification instanceof MBeanServerNotification
&& MBeanServerNotification.REGISTRATION_NOTIFICATION.equals(notification.getType())
|| MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {
ObjectName objectName = ((MBeanServerNotification) notification).getMBeanName();
if ("RequestProcessor".equals(objectName.getKeyProperty("type"))) {
ThreadPoolObjectName threadPoolObjectName = findPool(objectName.getKeyProperty("worker"));
if (threadPoolObjectName != null) {
if (MBeanServerNotification.REGISTRATION_NOTIFICATION.equals(notification.getType())) {
threadPoolObjectName.getRequestProcessorNames().add(objectName);
} else {
threadPoolObjectName.getRequestProcessorNames().remove(objectName);
}
}
}
}
}
private synchronized void initialize() throws Exception {
MBeanServer server = getContainerWrapper().getResourceResolver().getMBeanServer();
String serverName = getContainerWrapper().getTomcatContainer().getName();
Set<ObjectInstance> threadPools =
server.queryMBeans(new ObjectName(serverName + ":type=ThreadPool,name=\"*\""), null);
poolNames = new ArrayList<>(threadPools.size());
for (ObjectInstance threadPool : threadPools) {
ThreadPoolObjectName threadPoolObjectName = new ThreadPoolObjectName();
ObjectName threadPoolName = threadPool.getObjectName();
String name = threadPoolName.getKeyProperty("name");
threadPoolObjectName.setThreadPoolName(threadPoolName);
ObjectName grpName = server
.getObjectInstance(new ObjectName(
threadPoolName.getDomain() + ":type=GlobalRequestProcessor,name=" + name))
.getObjectName();
threadPoolObjectName.setGlobalRequestProcessorName(grpName);
Set<ObjectInstance> workers = server.queryMBeans(
new ObjectName(threadPoolName.getDomain() + ":type=RequestProcessor,*"), null);
for (ObjectInstance worker : workers) {
ObjectName wrkName = worker.getObjectName();
if (name.equals(wrkName.getKeyProperty("worker"))) {
threadPoolObjectName.getRequestProcessorNames().add(wrkName);
}
}
poolNames.add(threadPoolObjectName);
}
Set<ObjectInstance> executors =
server.queryMBeans(new ObjectName(serverName + ":type=Executor,*"), null);
executorNames = new ArrayList<>(executors.size());
for (ObjectInstance executor : executors) {
ObjectName executorName = executor.getObjectName();
executorNames.add(executorName);
}
server.addNotificationListener(new ObjectName("JMImplementation:type=MBeanServerDelegate"),
this, null, null);
}
public synchronized List<ThreadPool> getThreadPools() throws Exception {
if (!isInitialized()) {
initialize();
}
List<ThreadPool> threadPools = new ArrayList<>(poolNames.size());
MBeanServer server = getContainerWrapper().getResourceResolver().getMBeanServer();
for (ObjectName executorName : executorNames) {
ThreadPool threadPool = new ThreadPool();
threadPool.setName(executorName.getKeyProperty("name"));
threadPool.setMaxThreads(JmxTools.getIntAttr(server, executorName, "maxThreads"));
threadPool.setMaxSpareThreads(JmxTools.getIntAttr(server, executorName, "largestPoolSize"));
threadPool.setMinSpareThreads(JmxTools.getIntAttr(server, executorName, "minSpareThreads"));
threadPool.setCurrentThreadsBusy(JmxTools.getIntAttr(server, executorName, "activeCount"));
threadPool.setCurrentThreadCount(JmxTools.getIntAttr(server, executorName, "poolSize"));
threadPools.add(threadPool);
}
for (ThreadPoolObjectName threadPoolObjectName : poolNames) {
try {
ObjectName poolName = threadPoolObjectName.getThreadPoolName();
ThreadPool threadPool = new ThreadPool();
threadPool.setName(poolName.getKeyProperty("name"));
threadPool.setMaxThreads(JmxTools.getIntAttr(server, poolName, "maxThreads"));
if (JmxTools.hasAttribute(server, poolName, "maxSpareThreads")) {
threadPool.setMaxSpareThreads(JmxTools.getIntAttr(server, poolName, "maxSpareThreads"));
threadPool.setMinSpareThreads(JmxTools.getIntAttr(server, poolName, "minSpareThreads"));
}
threadPool
.setCurrentThreadsBusy(JmxTools.getIntAttr(server, poolName, "currentThreadsBusy"));
threadPool
.setCurrentThreadCount(JmxTools.getIntAttr(server, poolName, "currentThreadCount"));
if (threadPool.getMaxThreads() > -1) {
threadPools.add(threadPool);
}
} catch (InstanceNotFoundException e) {
logger.error("Failed to query entire thread pool {}", threadPoolObjectName);
logger.debug("", e);
}
}
return threadPools;
}
public synchronized void toggleConnectorStatus(String operation, String port) throws Exception {
if (!allowedOperation.contains(operation)) {
logger.error("operation {} not supported", operation);
throw new IllegalArgumentException("Not support operation");
}
ObjectName objectName = new ObjectName("Catalina:type=Connector,port=" + port);
MBeanServer server = getContainerWrapper().getResourceResolver().getMBeanServer();
JmxTools.invoke(server, objectName, operation, null, null);
logger.info("operation {} on Connector {} invoked success", operation, objectName);
}
public synchronized List<Connector> getConnectors(boolean includeRequestProcessors)
throws Exception {
boolean workerThreadNameSupported = true;
if (!isInitialized()) {
initialize();
}
List<Connector> connectors = new ArrayList<>(poolNames.size());
MBeanServer server = getContainerWrapper().getResourceResolver().getMBeanServer();
for (ThreadPoolObjectName threadPoolObjectName : poolNames) {
try {
ObjectName poolName = threadPoolObjectName.getThreadPoolName();
Connector connector = new Connector();
String name = poolName.getKeyProperty("name");
connector.setProtocolHandler(poolName.getKeyProperty("name"));
if (name.startsWith("\"") && name.endsWith("\"")) {
name = name.substring(1, name.length() - 1);
}
String[] arr = name.split("-");
String port = "-1";
if (arr.length == 3) {
port = arr[2];
}
if (!"-1".equals(port)) {
String str = "Catalina:type=Connector,port=" + port;
ObjectName objectName = new ObjectName(str);
connector.setStatus(JmxTools.getStringAttr(server, objectName, "stateName"));
connector.setProtocol(JmxTools.getStringAttr(server, objectName, "protocol"));
connector.setSecure(
Boolean.parseBoolean(JmxTools.getStringAttr(server, objectName, "secure")));
connector.setPort(JmxTools.getIntAttr(server, objectName, "port"));
connector.setLocalPort(JmxTools.getIntAttr(server, objectName, "localPort"));
connector.setSchema(JmxTools.getStringAttr(server, objectName, "schema"));
}
ObjectName grpName = threadPoolObjectName.getGlobalRequestProcessorName();
connector.setMaxTime(JmxTools.getLongAttr(server, grpName, "maxTime"));
connector.setProcessingTime(JmxTools.getLongAttr(server, grpName, "processingTime"));
connector.setBytesReceived(JmxTools.getLongAttr(server, grpName, "bytesReceived"));
connector.setBytesSent(JmxTools.getLongAttr(server, grpName, "bytesSent"));
connector.setRequestCount(JmxTools.getIntAttr(server, grpName, "requestCount"));
connector.setErrorCount(JmxTools.getIntAttr(server, grpName, "errorCount"));
if (includeRequestProcessors) {
List<ObjectName> wrkNames = threadPoolObjectName.getRequestProcessorNames();
for (ObjectName wrkName : wrkNames) {
try {
RequestProcessor rp = new RequestProcessor();
rp.setName(wrkName.getKeyProperty("name"));
rp.setStage(JmxTools.getIntAttr(server, wrkName, "stage"));
rp.setProcessingTime(JmxTools.getLongAttr(server, wrkName, "requestProcessingTime"));
rp.setBytesSent(JmxTools.getLongAttr(server, wrkName, "requestBytesSent"));
rp.setBytesReceived(JmxTools.getLongAttr(server, wrkName, "requestBytesReceived"));
try {
rp.setRemoteAddr(JmxTools.getStringAttr(server, wrkName, "remoteAddr"));
} catch (RuntimeOperationsException ex) {
logger.trace("", ex);
}
if (rp.getRemoteAddr() != null) {
if (InetAddress.getByName(rp.getRemoteAddr()).isLoopbackAddress()) {
rp.setRemoteAddrLocale(new Locale(System.getProperty("user.language"),
System.getProperty("user.country")));
} else {
try (DatabaseReader reader = new DatabaseReader.Builder(new File(
getClass().getClassLoader().getResource("GeoLite2-Country.mmdb").toURI()))
.withCache(new CHMCache()).build()) {
CountryResponse response =
reader.country(InetAddress.getByName(rp.getRemoteAddr()));
Country country = response.getCountry();
rp.setRemoteAddrLocale(new Locale("", country.getIsoCode()));
} catch (AddressNotFoundException e) {
logger.debug("Address Not Found: {}", e.getMessage());
logger.trace("", e);
}
}
}
rp.setVirtualHost(JmxTools.getStringAttr(server, wrkName, "virtualHost"));
rp.setMethod(JmxTools.getStringAttr(server, wrkName, "method"));
rp.setCurrentUri(JmxTools.getStringAttr(server, wrkName, "currentUri"));
rp.setCurrentQueryString(
JmxTools.getStringAttr(server, wrkName, "currentQueryString"));
rp.setProtocol(JmxTools.getStringAttr(server, wrkName, "protocol"));
if (workerThreadNameSupported
&& JmxTools.hasAttribute(server, wrkName, "workerThreadName")) {
rp.setWorkerThreadName(JmxTools.getStringAttr(server, wrkName, "workerThreadName"));
rp.setWorkerThreadNameSupported(true);
} else {
rp.setWorkerThreadNameSupported(false);
workerThreadNameSupported = false;
}
connector.addRequestProcessor(rp);
} catch (InstanceNotFoundException e) {
logger.info("Failed to query RequestProcessor {}", wrkName);
logger.debug("", e);
}
}
}
connectors.add(connector);
} catch (InstanceNotFoundException e) {
logger.error("Failed to query entire thread pool {}", threadPoolObjectName);
logger.debug("  Stack trace:", e);
}
}
return connectors;
}
}
