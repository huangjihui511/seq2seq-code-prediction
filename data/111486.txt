package io.grpc.netty;
import java.lang.reflect.Method;
import java.security.AccessController;
import java.security.PrivilegedExceptionAction;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;
final class JettyTlsUtil {
private JettyTlsUtil() {
}
private static Throwable jettyAlpnUnavailabilityCause;
private static Throwable jettyNpnUnavailabilityCause;
private static class Java9AlpnUnavailabilityCauseHolder {
static final Throwable cause = checkAlpnAvailability();
static Throwable checkAlpnAvailability() {
try {
SSLContext context = SSLContext.getInstance("TLS");
context.init(null, null, null);
SSLEngine engine = context.createSSLEngine();
Method getApplicationProtocol =
AccessController.doPrivileged(new PrivilegedExceptionAction<Method>() {
@Override
public Method run() throws Exception {
return SSLEngine.class.getMethod("getApplicationProtocol");
}
});
getApplicationProtocol.invoke(engine);
return null;
} catch (Throwable t) {
return t;
}
}
}
static synchronized boolean isJettyAlpnConfigured() {
try {
Class.forName("org.eclipse.jetty.alpn.ALPN", true, null);
return true;
} catch (ClassNotFoundException e) {
jettyAlpnUnavailabilityCause = e;
return false;
}
}
static synchronized Throwable getJettyAlpnUnavailabilityCause() {
if (jettyAlpnUnavailabilityCause == null) {
@SuppressWarnings("UnusedVariable")
boolean discard = isJettyAlpnConfigured();
}
return jettyAlpnUnavailabilityCause;
}
static synchronized boolean isJettyNpnConfigured() {
try {
Class.forName("org.eclipse.jetty.npn.NextProtoNego", true, null);
return true;
} catch (ClassNotFoundException e) {
jettyNpnUnavailabilityCause = e;
return false;
}
}
static synchronized Throwable getJettyNpnUnavailabilityCause() {
if (jettyNpnUnavailabilityCause == null) {
@SuppressWarnings("UnusedVariable")
boolean discard = isJettyNpnConfigured();
}
return jettyNpnUnavailabilityCause;
}
static boolean isJava9AlpnAvailable() {
return getJava9AlpnUnavailabilityCause() == null;
}
static Throwable getJava9AlpnUnavailabilityCause() {
return Java9AlpnUnavailabilityCauseHolder.cause;
}
}
