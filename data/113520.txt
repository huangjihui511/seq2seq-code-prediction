package com.pokegoapi.api.map.fort;
import POGOProtos.Enums.TutorialStateOuterClass.TutorialState;
import POGOProtos.Inventory.Item.ItemIdOuterClass.ItemId;
import POGOProtos.Map.Fort.FortDataOuterClass;
import POGOProtos.Networking.Requests.Messages.AddFortModifierMessageOuterClass.AddFortModifierMessage;
import POGOProtos.Networking.Requests.Messages.FortDetailsMessageOuterClass.FortDetailsMessage;
import POGOProtos.Networking.Requests.Messages.FortSearchMessageOuterClass.FortSearchMessage;
import POGOProtos.Networking.Requests.RequestTypeOuterClass;
import POGOProtos.Networking.Requests.RequestTypeOuterClass.RequestType;
import POGOProtos.Networking.Responses.AddFortModifierResponseOuterClass.AddFortModifierResponse;
import POGOProtos.Networking.Responses.AddFortModifierResponseOuterClass.AddFortModifierResponse.Result;
import POGOProtos.Networking.Responses.FortDetailsResponseOuterClass;
import POGOProtos.Networking.Responses.FortSearchResponseOuterClass;
import com.google.protobuf.ByteString;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.ProtocolStringList;
import com.pokegoapi.api.PokemonGo;
import com.pokegoapi.api.listener.PokestopListener;
import com.pokegoapi.exceptions.request.RequestFailedException;
import com.pokegoapi.google.common.geometry.S2LatLng;
import com.pokegoapi.main.ServerRequest;
import com.pokegoapi.util.AsyncHelper;
import lombok.Getter;
import lombok.Setter;
import rx.Observable;
import rx.exceptions.Exceptions;
import rx.functions.Func1;
import java.util.List;
public class Fort {
@Getter
public final PokemonGo api;
@Getter
@Setter
public FortDataOuterClass.FortData fortData;
@Getter
private long cooldownCompleteTimestampMs;
public Fort(PokemonGo api, FortDataOuterClass.FortData fortData) {
this.api = api;
this.fortData = fortData;
this.cooldownCompleteTimestampMs = fortData.getCooldownCompleteMs();
}
public double getDistance() {
S2LatLng pokestop = S2LatLng.fromDegrees(getLatitude(), getLongitude());
S2LatLng player = S2LatLng.fromDegrees(api.latitude, api.longitude);
return pokestop.getEarthDistance(player);
}
public boolean inRange() {
return getDistance() <= api.settings.fortSettings.interactionRangeInMeters;
}
public boolean canLoot() {
return canLoot(false);
}
public boolean canLoot(boolean ignoreDistance) {
boolean active = cooldownCompleteTimestampMs < api.currentTimeMillis();
if (!ignoreDistance) {
return active && inRange();
}
return active;
}
public String getId() {
return fortData.getId();
}
public double getLatitude() {
return fortData.getLatitude();
}
public double getLongitude() {
return fortData.getLongitude();
}
public Observable<PokestopLootResult> lootAsync() {
FortSearchMessage searchMessage = FortSearchMessage.newBuilder()
.setFortId(getId())
.setFortLatitude(getLatitude())
.setFortLongitude(getLongitude())
.setPlayerLatitude(api.latitude)
.setPlayerLongitude(api.longitude)
.build();
ServerRequest serverRequest = new ServerRequest(RequestTypeOuterClass.RequestType.FORT_SEARCH,
searchMessage);
return api.requestHandler.sendAsyncServerRequests(serverRequest, true).map(
new Func1<ByteString, PokestopLootResult>() {
@Override
public PokestopLootResult call(ByteString result) {
FortSearchResponseOuterClass.FortSearchResponse response;
try {
response = FortSearchResponseOuterClass.FortSearchResponse.parseFrom(result);
} catch (InvalidProtocolBufferException e) {
throw Exceptions.propagate(e);
}
cooldownCompleteTimestampMs = response.getCooldownCompleteTimestampMs();
PokestopLootResult lootResult = new PokestopLootResult(response);
List<PokestopListener> listeners = api.getListeners(PokestopListener.class);
for (PokestopListener listener : listeners) {
listener.onLoot(lootResult, Fort.this);
}
return lootResult;
}
});
}
public PokestopLootResult loot() throws RequestFailedException {
return AsyncHelper.toBlocking(lootAsync());
}
public Observable<Boolean> addModifierAsync(ItemId item) {
AddFortModifierMessage msg = AddFortModifierMessage.newBuilder()
.setModifierType(item)
.setFortId(getId())
.setPlayerLatitude(api.latitude)
.setPlayerLongitude(api.longitude)
.build();
ServerRequest serverRequest = new ServerRequest(RequestType.ADD_FORT_MODIFIER, msg);
return api.requestHandler.sendAsyncServerRequests(serverRequest).map(new Func1<ByteString, Boolean>() {
@Override
public Boolean call(ByteString result) {
try {
AddFortModifierResponse response = AddFortModifierResponse.parseFrom(result);
return response.getResult() == Result.SUCCESS;
} catch (InvalidProtocolBufferException e) {
throw Exceptions.propagate(e);
}
}
});
}
public void addModifier(ItemId item) throws RequestFailedException {
AsyncHelper.toBlocking(addModifierAsync(item));
}
public Observable<FortDetails> getDetailsAsync() {
FortDetailsMessage reqMsg = FortDetailsMessage.newBuilder()
.setFortId(getId())
.setLatitude(getLatitude())
.setLongitude(getLongitude())
.build();
ServerRequest serverRequest = new ServerRequest(RequestTypeOuterClass.RequestType.FORT_DETAILS,
reqMsg);
return api.requestHandler.sendAsyncServerRequests(serverRequest, true).map(
new Func1<ByteString, FortDetails>() {
@Override
public FortDetails call(ByteString result) {
FortDetailsResponseOuterClass.FortDetailsResponse response = null;
try {
response = FortDetailsResponseOuterClass.FortDetailsResponse.parseFrom(result);
} catch (InvalidProtocolBufferException e) {
throw Exceptions.propagate(e);
}
return new FortDetails(response);
}
});
}
public FortDetails getDetails() throws RequestFailedException {
List<TutorialState> tutorialStates = api.playerProfile.getTutorialState().getTutorialStates();
if (!tutorialStates.contains(TutorialState.POKESTOP_TUTORIAL)) {
api.playerProfile.visitPokestopComplete();
}
return AsyncHelper.toBlocking(getDetailsAsync());
}
public ProtocolStringList getUrl() throws RequestFailedException {
return getDetails().getImageUrl();
}
public String getDescription() throws RequestFailedException {
return getDetails().getDescription();
}
public String getName() throws RequestFailedException {
return getDetails().getName();
}
@Override
public int hashCode() {
return getId().hashCode();
}
@Override
public boolean equals(Object obj) {
return obj instanceof Fort && ((Fort) obj).getId().equals(getId());
}
}
