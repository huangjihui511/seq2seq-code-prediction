package org.msgpack.core.buffer;
import sun.misc.Unsafe;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import static org.msgpack.core.Preconditions.checkArgument;
import static org.msgpack.core.Preconditions.checkNotNull;
public class MessageBuffer
{
static final boolean isUniversalBuffer;
static final Unsafe unsafe;
static final int javaVersion = getJavaVersion();
private static final Constructor<?> mbArrConstructor;
private static final Constructor<?> mbBBConstructor;
static final int ARRAY_BYTE_BASE_OFFSET;
private static final String UNIVERSAL_MESSAGE_BUFFER = "org.msgpack.core.buffer.MessageBufferU";
private static final String BIGENDIAN_MESSAGE_BUFFER = "org.msgpack.core.buffer.MessageBufferBE";
private static final String DEFAULT_MESSAGE_BUFFER = "org.msgpack.core.buffer.MessageBuffer";
static {
boolean useUniversalBuffer = false;
Unsafe unsafeInstance = null;
int arrayByteBaseOffset = 16;
try {
boolean hasUnsafe = false;
try {
hasUnsafe = Class.forName("sun.misc.Unsafe") != null;
}
catch (Exception e) {
}
boolean isAndroid = System.getProperty("java.runtime.name", "").toLowerCase().contains("android");
boolean isGAE = System.getProperty("com.google.appengine.runtime.version") != null;
useUniversalBuffer =
Boolean.parseBoolean(System.getProperty("msgpack.universal-buffer", "false"))
|| isAndroid
|| isGAE
|| javaVersion < 7
|| !hasUnsafe;
if (!useUniversalBuffer) {
Field field = Unsafe.class.getDeclaredField("theUnsafe");
field.setAccessible(true);
unsafeInstance = (Unsafe) field.get(null);
if (unsafeInstance == null) {
throw new RuntimeException("Unsafe is unavailable");
}
arrayByteBaseOffset = unsafeInstance.arrayBaseOffset(byte[].class);
int arrayByteIndexScale = unsafeInstance.arrayIndexScale(byte[].class);
if (arrayByteIndexScale != 1) {
throw new IllegalStateException("Byte array index scale must be 1, but is " + arrayByteIndexScale);
}
}
}
catch (Exception e) {
e.printStackTrace(System.err);
useUniversalBuffer = true;
}
finally {
unsafe = unsafeInstance;
ARRAY_BYTE_BASE_OFFSET = arrayByteBaseOffset;
isUniversalBuffer = useUniversalBuffer;
String bufferClsName;
if (isUniversalBuffer) {
bufferClsName = UNIVERSAL_MESSAGE_BUFFER;
}
else {
boolean isLittleEndian = ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN;
bufferClsName = isLittleEndian ? DEFAULT_MESSAGE_BUFFER : BIGENDIAN_MESSAGE_BUFFER;
}
if (DEFAULT_MESSAGE_BUFFER.equals(bufferClsName)) {
mbArrConstructor = null;
mbBBConstructor = null;
}
else {
try {
Class<?> bufferCls = Class.forName(bufferClsName);
Constructor<?> mbArrCstr = bufferCls.getDeclaredConstructor(byte[].class, int.class, int.class);
mbArrCstr.setAccessible(true);
mbArrConstructor = mbArrCstr;
Constructor<?> mbBBCstr = bufferCls.getDeclaredConstructor(ByteBuffer.class);
mbBBCstr.setAccessible(true);
mbBBConstructor = mbBBCstr;
}
catch (Exception e) {
e.printStackTrace(System.err);
throw new RuntimeException(e); 
}
}
}
}
private static int getJavaVersion()
{
String javaVersion = System.getProperty("java.specification.version", "");
int dotPos = javaVersion.indexOf('.');
if (dotPos != -1) {
try {
int major = Integer.parseInt(javaVersion.substring(0, dotPos));
int minor = Integer.parseInt(javaVersion.substring(dotPos + 1));
return major > 1 ? major : minor;
}
catch (NumberFormatException e) {
e.printStackTrace(System.err);
}
}
else {
try {
return Integer.parseInt(javaVersion);
}
catch (NumberFormatException e) {
e.printStackTrace(System.err);
}
}
return 6;
}
protected final Object base;
protected final long address;
protected final int size;
protected final ByteBuffer reference;
public static MessageBuffer allocate(int size)
{
if (size < 0) {
throw new IllegalArgumentException("size must not be negative");
}
return wrap(new byte[size]);
}
public static MessageBuffer wrap(byte[] array)
{
return newMessageBuffer(array, 0, array.length);
}
public static MessageBuffer wrap(byte[] array, int offset, int length)
{
return newMessageBuffer(array, offset, length);
}
public static MessageBuffer wrap(ByteBuffer bb)
{
return newMessageBuffer(bb);
}
private static MessageBuffer newMessageBuffer(byte[] arr, int off, int len)
{
checkNotNull(arr);
if (mbArrConstructor != null) {
return newInstance(mbArrConstructor, arr, off, len);
}
return new MessageBuffer(arr, off, len);
}
private static MessageBuffer newMessageBuffer(ByteBuffer bb)
{
checkNotNull(bb);
if (mbBBConstructor != null) {
return newInstance(mbBBConstructor, bb);
}
return new MessageBuffer(bb);
}
private static MessageBuffer newInstance(Constructor<?> constructor, Object... args)
{
try {
return (MessageBuffer) constructor.newInstance(args);
}
catch (InstantiationException e) {
throw new IllegalStateException(e);
}
catch (IllegalAccessException e) {
throw new IllegalStateException(e);
}
catch (InvocationTargetException e) {
if (e.getCause() instanceof RuntimeException) {
throw (RuntimeException) e.getCause();
}
else if (e.getCause() instanceof Error) {
throw (Error) e.getCause();
}
throw new IllegalStateException(e.getCause());
}
}
public static void releaseBuffer(MessageBuffer buffer)
{
if (isUniversalBuffer || buffer.hasArray()) {
}
else if (DirectBufferAccess.isDirectByteBufferInstance(buffer.reference)) {
DirectBufferAccess.clean(buffer.reference);
}
else {
unsafe.freeMemory(buffer.address);
}
}
MessageBuffer(byte[] arr, int offset, int length)
{
this.base = arr;  
this.address = ARRAY_BYTE_BASE_OFFSET + offset;
this.size = length;
this.reference = null;
}
MessageBuffer(ByteBuffer bb)
{
if (bb.isDirect()) {
if (isUniversalBuffer) {
this.base = null;
this.address = 0;
this.size = bb.remaining();
this.reference = null;
return;
}
this.base = null;
this.address = DirectBufferAccess.getAddress(bb) + bb.position();
this.size = bb.remaining();
this.reference = bb;
}
else if (bb.hasArray()) {
this.base = bb.array();
this.address = ARRAY_BYTE_BASE_OFFSET + bb.arrayOffset() + bb.position();
this.size = bb.remaining();
this.reference = null;
}
else {
throw new IllegalArgumentException("Only the array-backed ByteBuffer or DirectBuffer is supported");
}
}
protected MessageBuffer(Object base, long address, int length)
{
this.base = base;
this.address = address;
this.size = length;
this.reference = null;
}
public int size()
{
return size;
}
public MessageBuffer slice(int offset, int length)
{
if (offset == 0 && length == size()) {
return this;
}
else {
checkArgument(offset + length <= size());
return new MessageBuffer(base, address + offset, length);
}
}
public byte getByte(int index)
{
return unsafe.getByte(base, address + index);
}
public boolean getBoolean(int index)
{
return unsafe.getBoolean(base, address + index);
}
public short getShort(int index)
{
short v = unsafe.getShort(base, address + index);
return Short.reverseBytes(v);
}
public int getInt(int index)
{
int i = unsafe.getInt(base, address + index);
return Integer.reverseBytes(i);
}
public float getFloat(int index)
{
return Float.intBitsToFloat(getInt(index));
}
public long getLong(int index)
{
long l = unsafe.getLong(base, address + index);
return Long.reverseBytes(l);
}
public double getDouble(int index)
{
return Double.longBitsToDouble(getLong(index));
}
public void getBytes(int index, byte[] dst, int dstOffset, int length)
{
unsafe.copyMemory(base, address + index, dst, ARRAY_BYTE_BASE_OFFSET + dstOffset, length);
}
public void getBytes(int index, int len, ByteBuffer dst)
{
if (dst.remaining() < len) {
throw new BufferOverflowException();
}
ByteBuffer src = sliceAsByteBuffer(index, len);
dst.put(src);
}
public void putByte(int index, byte v)
{
unsafe.putByte(base, address + index, v);
}
public void putBoolean(int index, boolean v)
{
unsafe.putBoolean(base, address + index, v);
}
public void putShort(int index, short v)
{
v = Short.reverseBytes(v);
unsafe.putShort(base, address + index, v);
}
public void putInt(int index, int v)
{
v = Integer.reverseBytes(v);
unsafe.putInt(base, address + index, v);
}
public void putFloat(int index, float v)
{
putInt(index, Float.floatToRawIntBits(v));
}
public void putLong(int index, long l)
{
l = Long.reverseBytes(l);
unsafe.putLong(base, address + index, l);
}
public void putDouble(int index, double v)
{
putLong(index, Double.doubleToRawLongBits(v));
}
public void putBytes(int index, byte[] src, int srcOffset, int length)
{
unsafe.copyMemory(src, ARRAY_BYTE_BASE_OFFSET + srcOffset, base, address + index, length);
}
public void putByteBuffer(int index, ByteBuffer src, int len)
{
assert (len <= src.remaining());
assert (!isUniversalBuffer);
if (src.isDirect()) {
unsafe.copyMemory(null, DirectBufferAccess.getAddress(src) + src.position(), base, address + index, len);
src.position(src.position() + len);
}
else if (src.hasArray()) {
byte[] srcArray = src.array();
unsafe.copyMemory(srcArray, ARRAY_BYTE_BASE_OFFSET + src.position(), base, address + index, len);
src.position(src.position() + len);
}
else {
if (hasArray()) {
src.get((byte[]) base, index, len);
}
else {
for (int i = 0; i < len; ++i) {
unsafe.putByte(base, address + index, src.get());
}
}
}
}
public void putMessageBuffer(int index, MessageBuffer src, int srcOffset, int len)
{
unsafe.copyMemory(src.base, src.address + srcOffset, base, address + index, len);
}
public ByteBuffer sliceAsByteBuffer(int index, int length)
{
if (hasArray()) {
return ByteBuffer.wrap((byte[]) base, (int) ((address - ARRAY_BYTE_BASE_OFFSET) + index), length);
}
else {
assert (!isUniversalBuffer);
return DirectBufferAccess.newByteBuffer(address, index, length, reference);
}
}
public ByteBuffer sliceAsByteBuffer()
{
return sliceAsByteBuffer(0, size());
}
public boolean hasArray()
{
return base != null;
}
public byte[] toByteArray()
{
byte[] b = new byte[size()];
unsafe.copyMemory(base, address, b, ARRAY_BYTE_BASE_OFFSET, size());
return b;
}
public byte[] array()
{
return (byte[]) base;
}
public int arrayOffset()
{
return (int) address - ARRAY_BYTE_BASE_OFFSET;
}
public void copyTo(int index, MessageBuffer dst, int offset, int length)
{
unsafe.copyMemory(base, address + index, dst.base, dst.address + offset, length);
}
public String toHexString(int offset, int length)
{
StringBuilder s = new StringBuilder();
for (int i = offset; i < length; ++i) {
if (i != offset) {
s.append(" ");
}
s.append(String.format("%02x", getByte(i)));
}
return s.toString();
}
}
