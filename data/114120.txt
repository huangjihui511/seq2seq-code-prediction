package org.apache.parquet.avro;
import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.generic.GenericData;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.parquet.hadoop.api.ReadSupport;
import org.apache.parquet.io.api.RecordMaterializer;
import org.apache.parquet.schema.MessageType;
public class AvroReadSupport<T> extends ReadSupport<T> {
public static String AVRO_REQUESTED_PROJECTION = "parquet.avro.projection";
private static final String AVRO_READ_SCHEMA = "parquet.avro.read.schema";
static final String AVRO_SCHEMA_METADATA_KEY = "parquet.avro.schema";
static final String OLD_AVRO_SCHEMA_METADATA_KEY = "avro.schema";
private static final String AVRO_READ_SCHEMA_METADATA_KEY = "avro.read.schema";
public static String AVRO_DATA_SUPPLIER = "parquet.avro.data.supplier";
public static final String AVRO_COMPATIBILITY = "parquet.avro.compatible";
public static final boolean AVRO_DEFAULT_COMPATIBILITY = true;
public static void setRequestedProjection(Configuration configuration, Schema requestedProjection) {
configuration.set(AVRO_REQUESTED_PROJECTION, requestedProjection.toString());
}
public static void setAvroReadSchema(Configuration configuration, Schema avroReadSchema) {
configuration.set(AVRO_READ_SCHEMA, avroReadSchema.toString());
}
public static void setAvroDataSupplier(Configuration configuration,
Class<? extends AvroDataSupplier> clazz) {
configuration.set(AVRO_DATA_SUPPLIER, clazz.getName());
}
private GenericData model = null;
public AvroReadSupport() {
}
public AvroReadSupport(GenericData model) {
this.model = model;
}
@Override
public ReadContext init(Configuration configuration,
Map<String, String> keyValueMetaData,
MessageType fileSchema) {
MessageType projection = fileSchema;
Map<String, String> metadata = new LinkedHashMap<String, String>();
String requestedProjectionString = configuration.get(AVRO_REQUESTED_PROJECTION);
if (requestedProjectionString != null) {
Schema avroRequestedProjection = new Schema.Parser().parse(requestedProjectionString);
projection = new AvroSchemaConverter(configuration).convert(avroRequestedProjection);
}
String avroReadSchema = configuration.get(AVRO_READ_SCHEMA);
if (avroReadSchema != null) {
metadata.put(AVRO_READ_SCHEMA_METADATA_KEY, avroReadSchema);
}
if (configuration.getBoolean(AVRO_COMPATIBILITY, AVRO_DEFAULT_COMPATIBILITY)) {
metadata.put(AVRO_COMPATIBILITY, "true");
}
return new ReadContext(projection, metadata);
}
@Override
public RecordMaterializer<T> prepareForRead(
Configuration configuration, Map<String, String> keyValueMetaData,
MessageType fileSchema, ReadContext readContext) {
Map<String, String> metadata = readContext.getReadSupportMetadata();
MessageType parquetSchema = readContext.getRequestedSchema();
Schema avroSchema;
if (metadata.get(AVRO_READ_SCHEMA_METADATA_KEY) != null) {
avroSchema = new Schema.Parser().parse(metadata.get(AVRO_READ_SCHEMA_METADATA_KEY));
} else if (keyValueMetaData.get(AVRO_SCHEMA_METADATA_KEY) != null) {
avroSchema = new Schema.Parser().parse(keyValueMetaData.get(AVRO_SCHEMA_METADATA_KEY));
} else if (keyValueMetaData.get(OLD_AVRO_SCHEMA_METADATA_KEY) != null) {
avroSchema = new Schema.Parser().parse(keyValueMetaData.get(OLD_AVRO_SCHEMA_METADATA_KEY));
} else {
avroSchema = new AvroSchemaConverter(configuration).convert(parquetSchema);
}
GenericData model = getDataModel(configuration);
String compatEnabled = metadata.get(AvroReadSupport.AVRO_COMPATIBILITY);
if (compatEnabled != null && Boolean.valueOf(compatEnabled)) {
return newCompatMaterializer(parquetSchema, avroSchema, model);
}
return new AvroRecordMaterializer<T>(parquetSchema, avroSchema, model);
}
@SuppressWarnings("unchecked")
private static <T> RecordMaterializer<T> newCompatMaterializer(
MessageType parquetSchema, Schema avroSchema, GenericData model) {
return (RecordMaterializer<T>) new AvroCompatRecordMaterializer(
parquetSchema, avroSchema, model);
}
private GenericData getDataModel(Configuration conf) {
if (model != null) {
return model;
}
Class<? extends AvroDataSupplier> suppClass = conf.getClass(
AVRO_DATA_SUPPLIER, SpecificDataSupplier.class, AvroDataSupplier.class);
return ReflectionUtils.newInstance(suppClass, conf).get();
}
}
