package org.gnucash.android.ui.account;
import android.app.Activity;
import android.app.SearchManager;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.database.Cursor;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.Loader;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.PopupMenu;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import org.gnucash.android.R;
import org.gnucash.android.app.GnuCashApplication;
import org.gnucash.android.db.DatabaseCursorLoader;
import org.gnucash.android.db.DatabaseSchema;
import org.gnucash.android.db.adapter.AccountsDbAdapter;
import org.gnucash.android.db.adapter.BudgetsDbAdapter;
import org.gnucash.android.model.Account;
import org.gnucash.android.model.Budget;
import org.gnucash.android.model.Money;
import org.gnucash.android.ui.common.FormActivity;
import org.gnucash.android.ui.common.Refreshable;
import org.gnucash.android.ui.common.UxArgument;
import org.gnucash.android.ui.util.AccountBalanceTask;
import org.gnucash.android.ui.util.CursorRecyclerAdapter;
import org.gnucash.android.ui.util.widget.EmptyRecyclerView;
import org.gnucash.android.util.BackupManager;
import java.util.List;
import butterknife.BindView;
import butterknife.ButterKnife;
public class AccountsListFragment extends Fragment implements
Refreshable,
LoaderCallbacks<Cursor>,
android.support.v7.widget.SearchView.OnQueryTextListener,
android.support.v7.widget.SearchView.OnCloseListener {
AccountRecyclerAdapter mAccountRecyclerAdapter;
@BindView(R.id.account_recycler_view)  EmptyRecyclerView mRecyclerView;
@BindView(R.id.empty_view) TextView mEmptyTextView;
public enum DisplayMode {
TOP_LEVEL, RECENT, FAVORITES
}
private DisplayMode mDisplayMode = DisplayMode.TOP_LEVEL;
protected static final String TAG = "AccountsListFragment";
private static final String STATE_DISPLAY_MODE = "mDisplayMode";
private AccountsDbAdapter mAccountsDbAdapter;
private OnAccountClickedListener mAccountSelectedListener;
private String mParentAccountUID = null;
private String mCurrentFilter;
private android.support.v7.widget.SearchView mSearchView;
public static AccountsListFragment newInstance(DisplayMode displayMode){
AccountsListFragment fragment = new AccountsListFragment();
fragment.mDisplayMode = displayMode;
return fragment;
}
@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
Bundle savedInstanceState) {
View v = inflater.inflate(R.layout.fragment_accounts_list, container,
false);
ButterKnife.bind(this, v);
mRecyclerView.setHasFixedSize(true);
mRecyclerView.setEmptyView(mEmptyTextView);
switch (mDisplayMode){
case TOP_LEVEL:
mEmptyTextView.setText(R.string.label_no_accounts);
break;
case RECENT:
mEmptyTextView.setText(R.string.label_no_recent_accounts);
break;
case FAVORITES:
mEmptyTextView.setText(R.string.label_no_favorite_accounts);
break;
}
if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
GridLayoutManager gridLayoutManager = new GridLayoutManager(getActivity(), 2);
mRecyclerView.setLayoutManager(gridLayoutManager);
} else {
LinearLayoutManager mLayoutManager = new LinearLayoutManager(getActivity());
mRecyclerView.setLayoutManager(mLayoutManager);
}
return v;
}
@Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
Bundle args = getArguments();
if (args != null)
mParentAccountUID = args.getString(UxArgument.PARENT_ACCOUNT_UID);
if (savedInstanceState != null)
mDisplayMode = (DisplayMode) savedInstanceState.getSerializable(STATE_DISPLAY_MODE);
}
@Override
public void onActivityCreated(Bundle savedInstanceState) {
super.onActivityCreated(savedInstanceState);
ActionBar actionbar = ((AppCompatActivity) getActivity()).getSupportActionBar();
actionbar.setTitle(R.string.title_accounts);
actionbar.setDisplayHomeAsUpEnabled(true);
setHasOptionsMenu(true);
mAccountRecyclerAdapter = new AccountRecyclerAdapter(null);
mRecyclerView.setAdapter(mAccountRecyclerAdapter);
}
@Override
public void onStart() {
super.onStart();
mAccountsDbAdapter = AccountsDbAdapter.getInstance();
}
@Override
public void onResume() {
super.onResume();
refresh();
}
@Override
public void onAttach(Activity activity) {
super.onAttach(activity);
try {
mAccountSelectedListener = (OnAccountClickedListener) activity;
} catch (ClassCastException e) {
throw new ClassCastException(activity.toString() + " must implement OnAccountSelectedListener");
}
}
public void onListItemClick(String accountUID) {
mAccountSelectedListener.accountSelected(accountUID);
}
@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
if (resultCode == Activity.RESULT_CANCELED)
return;
refresh();
}
public void tryDeleteAccount(long rowId) {
Account acc = mAccountsDbAdapter.getRecord(rowId);
if (acc.getTransactionCount() > 0 || mAccountsDbAdapter.getSubAccountCount(acc.getUID()) > 0) {
showConfirmationDialog(rowId);
} else {
BackupManager.backupActiveBook();
String uid = mAccountsDbAdapter.getUID(rowId);
mAccountsDbAdapter.deleteRecord(uid);
refresh();
}
}
public void showConfirmationDialog(long id) {
DeleteAccountDialogFragment alertFragment =
DeleteAccountDialogFragment.newInstance(mAccountsDbAdapter.getUID(id));
alertFragment.setTargetFragment(this, 0);
alertFragment.show(getActivity().getSupportFragmentManager(), "delete_confirmation_dialog");
}
@Override
public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
if (mParentAccountUID != null)
inflater.inflate(R.menu.sub_account_actions, menu);
else {
inflater.inflate(R.menu.account_actions, menu);
SearchManager searchManager =
(SearchManager) GnuCashApplication.getAppContext().getSystemService(Context.SEARCH_SERVICE);
mSearchView = (android.support.v7.widget.SearchView)
MenuItemCompat.getActionView(menu.findItem(R.id.menu_search));
if (mSearchView == null)
return;
mSearchView.setSearchableInfo(
searchManager.getSearchableInfo(getActivity().getComponentName()));
mSearchView.setOnQueryTextListener(this);
mSearchView.setOnCloseListener(this);
}
}
@Override
public void refresh(String parentAccountUID) {
getArguments().putString(UxArgument.PARENT_ACCOUNT_UID, parentAccountUID);
refresh();
}
@Override
public void refresh() {
getLoaderManager().restartLoader(0, null, this);
}
@Override
public void onSaveInstanceState(Bundle outState) {
super.onSaveInstanceState(outState);
outState.putSerializable(STATE_DISPLAY_MODE, mDisplayMode);
}
@Override
public void onDestroy() {
super.onDestroy();
if (mAccountRecyclerAdapter != null)
mAccountRecyclerAdapter.swapCursor(null);
}
public void openCreateOrEditActivity(long accountId){
Intent editAccountIntent = new Intent(AccountsListFragment.this.getActivity(), FormActivity.class);
editAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
editAccountIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, mAccountsDbAdapter.getUID(accountId));
editAccountIntent.putExtra(UxArgument.FORM_TYPE, FormActivity.FormType.ACCOUNT.name());
startActivityForResult(editAccountIntent, AccountsActivity.REQUEST_EDIT_ACCOUNT);
}
@Override
public Loader<Cursor> onCreateLoader(int id, Bundle args) {
Log.d(TAG, "Creating the accounts loader");
Bundle arguments = getArguments();
String accountUID = arguments == null ? null : arguments.getString(UxArgument.PARENT_ACCOUNT_UID);
if (mCurrentFilter != null){
return new AccountsCursorLoader(getActivity(), mCurrentFilter);
} else {
return new AccountsCursorLoader(this.getActivity(), accountUID, mDisplayMode);
}
}
@Override
public void onLoadFinished(Loader<Cursor> loaderCursor, Cursor cursor) {
Log.d(TAG, "Accounts loader finished. Swapping in cursor");
mAccountRecyclerAdapter.swapCursor(cursor);
mAccountRecyclerAdapter.notifyDataSetChanged();
}
@Override
public void onLoaderReset(Loader<Cursor> arg0) {
Log.d(TAG, "Resetting the accounts loader");
mAccountRecyclerAdapter.swapCursor(null);
}
@Override
public boolean onQueryTextSubmit(String query) {
return true;
}
@Override
public boolean onQueryTextChange(String newText) {
String newFilter = !TextUtils.isEmpty(newText) ? newText : null;
if (mCurrentFilter == null && newFilter == null) {
return true;
}
if (mCurrentFilter != null && mCurrentFilter.equals(newFilter)) {
return true;
}
mCurrentFilter = newFilter;
getLoaderManager().restartLoader(0, null, this);
return true;
}
@Override
public boolean onClose() {
if (!TextUtils.isEmpty(mSearchView.getQuery())) {
mSearchView.setQuery(null, true);
}
return true;
}
private static final class AccountsCursorLoader extends DatabaseCursorLoader {
private String mParentAccountUID = null;
private String mFilter;
private DisplayMode mDisplayMode = DisplayMode.TOP_LEVEL;
public AccountsCursorLoader(Context context, String parentAccountUID, DisplayMode displayMode) {
super(context);
this.mParentAccountUID = parentAccountUID;
this.mDisplayMode = displayMode;
}
public AccountsCursorLoader(Context context, String filter){
super(context);
mFilter = filter;
}
@Override
public Cursor loadInBackground() {
mDatabaseAdapter = AccountsDbAdapter.getInstance();
Cursor cursor;
if (mFilter != null){
cursor = ((AccountsDbAdapter)mDatabaseAdapter)
.fetchAccounts(DatabaseSchema.AccountEntry.COLUMN_HIDDEN + "= 0 AND "
+ DatabaseSchema.AccountEntry.COLUMN_NAME + " LIKE '%" + mFilter + "%'",
null, null);
} else {
if (mParentAccountUID != null && mParentAccountUID.length() > 0)
cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchSubAccounts(mParentAccountUID);
else {
switch (this.mDisplayMode){
case RECENT:
cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchRecentAccounts(10);
break;
case FAVORITES:
cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchFavoriteAccounts();
break;
case TOP_LEVEL:
default:
cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchTopLevelAccounts();
break;
}
}
}
if (cursor != null)
registerContentObserver(cursor);
return cursor;
}
}
class AccountRecyclerAdapter extends CursorRecyclerAdapter<AccountRecyclerAdapter.AccountViewHolder> {
public AccountRecyclerAdapter(Cursor cursor){
super(cursor);
}
@Override
public AccountViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
View v = LayoutInflater.from(parent.getContext())
.inflate(R.layout.cardview_account, parent, false);
return new AccountViewHolder(v);
}
@Override
public void onBindViewHolderCursor(final AccountViewHolder holder, final Cursor cursor) {
final String accountUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_UID));
mAccountsDbAdapter = AccountsDbAdapter.getInstance();
holder.accoundId = mAccountsDbAdapter.getID(accountUID);
holder.accountName.setText(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_NAME)));
int subAccountCount = mAccountsDbAdapter.getSubAccountCount(accountUID);
if (subAccountCount > 0) {
holder.description.setVisibility(View.VISIBLE);
String text = getResources().getQuantityString(R.plurals.label_sub_accounts, subAccountCount, subAccountCount);
holder.description.setText(text);
} else
holder.description.setVisibility(View.GONE);
new AccountBalanceTask(holder.accountBalance).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, accountUID);
String accountColor = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_COLOR_CODE));
int colorCode = accountColor == null ? Color.TRANSPARENT : Color.parseColor(accountColor);
holder.colorStripView.setBackgroundColor(colorCode);
boolean isPlaceholderAccount = mAccountsDbAdapter.isPlaceholderAccount(accountUID);
if (isPlaceholderAccount) {
holder.createTransaction.setVisibility(View.GONE);
} else {
holder.createTransaction.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Intent intent = new Intent(getActivity(), FormActivity.class);
intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
intent.putExtra(UxArgument.FORM_TYPE, FormActivity.FormType.TRANSACTION.name());
getActivity().startActivity(intent);
}
});
}
List<Budget> budgets = BudgetsDbAdapter.getInstance().getAccountBudgets(accountUID);
if (budgets.size() == 1){
Budget budget = budgets.get(0);
Money balance = mAccountsDbAdapter.getAccountBalance(accountUID, budget.getStartofCurrentPeriod(), budget.getEndOfCurrentPeriod());
double budgetProgress = balance.divide(budget.getAmount(accountUID)).asBigDecimal().doubleValue() * 100;
holder.budgetIndicator.setVisibility(View.VISIBLE);
holder.budgetIndicator.setProgress((int) budgetProgress);
} else {
holder.budgetIndicator.setVisibility(View.GONE);
}
if (mAccountsDbAdapter.isFavoriteAccount(accountUID)){
holder.favoriteStatus.setImageResource(R.drawable.ic_star_black_24dp);
} else {
holder.favoriteStatus.setImageResource(R.drawable.ic_star_border_black_24dp);
}
holder.favoriteStatus.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
boolean isFavoriteAccount = mAccountsDbAdapter.isFavoriteAccount(accountUID);
ContentValues contentValues = new ContentValues();
contentValues.put(DatabaseSchema.AccountEntry.COLUMN_FAVORITE, !isFavoriteAccount);
mAccountsDbAdapter.updateRecord(accountUID, contentValues);
int drawableResource = !isFavoriteAccount ?
R.drawable.ic_star_black_24dp : R.drawable.ic_star_border_black_24dp;
holder.favoriteStatus.setImageResource(drawableResource);
if (mDisplayMode == DisplayMode.FAVORITES)
refresh();
}
});
holder.itemView.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
onListItemClick(accountUID);
}
});
}
class AccountViewHolder extends RecyclerView.ViewHolder implements PopupMenu.OnMenuItemClickListener{
@BindView(R.id.primary_text) TextView accountName;
@BindView(R.id.secondary_text) TextView description;
@BindView(R.id.account_balance) TextView accountBalance;
@BindView(R.id.create_transaction) ImageView createTransaction;
@BindView(R.id.favorite_status) ImageView favoriteStatus;
@BindView(R.id.options_menu) ImageView optionsMenu;
@BindView(R.id.account_color_strip) View colorStripView;
@BindView(R.id.budget_indicator) ProgressBar budgetIndicator;
long accoundId;
public AccountViewHolder(View itemView) {
super(itemView);
ButterKnife.bind(this, itemView);
optionsMenu.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
PopupMenu popup = new PopupMenu(getActivity(), v);
popup.setOnMenuItemClickListener(AccountViewHolder.this);
MenuInflater inflater = popup.getMenuInflater();
inflater.inflate(R.menu.account_context_menu, popup.getMenu());
popup.show();
}
});
}
@Override
public boolean onMenuItemClick(MenuItem item) {
switch (item.getItemId()){
case R.id.context_menu_edit_accounts:
openCreateOrEditActivity(accoundId);
return true;
case R.id.context_menu_delete:
tryDeleteAccount(accoundId);
return true;
default:
return false;
}
}
}
}
}
