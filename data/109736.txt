package lombok.javac.apt;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.net.URI;
import java.nio.charset.CharsetDecoder;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.NestingKind;
class Javac7BaseFileObjectWrapper extends com.sun.tools.javac.file.BaseFileObject {
private final LombokFileObject delegate;
public Javac7BaseFileObjectWrapper(LombokFileObject delegate) {
super(null);
this.delegate = delegate;
}
@Override public boolean isNameCompatible(String simpleName, Kind kind) {
return delegate.isNameCompatible(simpleName, kind);
}
@Override public URI toUri() {
return delegate.toUri();
}
@SuppressWarnings("all")
@Override public String getName() {
return delegate.getName();
}
@Override public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
return delegate.getCharContent(ignoreEncodingErrors);
}
@Override public InputStream openInputStream() throws IOException {
return delegate.openInputStream();
}
@Override public Reader openReader(boolean ignoreEncodingErrors) throws IOException {
return delegate.openReader(ignoreEncodingErrors);
}
@Override public Writer openWriter() throws IOException {
return delegate.openWriter();
}
@Override public OutputStream openOutputStream() throws IOException {
return delegate.openOutputStream();
}
@Override public long getLastModified() {
return delegate.getLastModified();
}
@Override public boolean delete() {
return delegate.delete();
}
@Override public Kind getKind() {
return delegate.getKind();
}
@Override public NestingKind getNestingKind() {
return delegate.getNestingKind();
}
@Override public Modifier getAccessLevel() {
return delegate.getAccessLevel();
}
protected CharsetDecoder getDecoder(boolean ignoreEncodingErrors) {
return delegate.getDecoder(ignoreEncodingErrors);
}
@Override public boolean equals(Object obj) {
if (!(obj instanceof Javac7BaseFileObjectWrapper)) {
return false;
}
return delegate.equals(((Javac7BaseFileObjectWrapper)obj).delegate);
}
@Override public int hashCode() {
return delegate.hashCode();
}
@Override public String toString() {
return delegate.toString();
}
}
