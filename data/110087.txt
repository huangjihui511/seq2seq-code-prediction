package spark.http.matching;
import java.util.List;
import spark.FilterImpl;
import spark.Request;
import spark.RequestResponseFactory;
import spark.route.HttpMethod;
import spark.routematch.RouteMatch;
final class AfterFilters {
static void execute(RouteContext context) throws Exception {
Object content = context.body().get();
List<RouteMatch> matchSet = context.routeMatcher().findMultiple(HttpMethod.after,
context.uri(),
context.acceptType());
for (RouteMatch filterMatch : matchSet) {
Object filterTarget = filterMatch.getTarget();
if (filterTarget instanceof FilterImpl) {
if (context.requestWrapper().getDelegate() == null) {
Request request = RequestResponseFactory.create(filterMatch, context.httpRequest());
context.requestWrapper().setDelegate(request);
} else {
context.requestWrapper().changeMatch(filterMatch);
}
context.responseWrapper().setDelegate(context.response());
FilterImpl filter = (FilterImpl) filterTarget;
filter.handle(context.requestWrapper(), context.responseWrapper());
String bodyAfterFilter = context.response().body();
if (bodyAfterFilter != null) {
content = bodyAfterFilter;
}
}
}
context.body().set(content);
}
}
