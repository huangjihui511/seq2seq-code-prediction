package com.site.blog.my.core.controller.blog;
import com.site.blog.my.core.controller.vo.BlogDetailVO;
import com.site.blog.my.core.entity.BlogComment;
import com.site.blog.my.core.entity.BlogLink;
import com.site.blog.my.core.service.*;
import com.site.blog.my.core.util.*;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.List;
import java.util.Map;
@Controller
public class MyBlogController {
public static String theme = "amaze";
@Resource
private BlogService blogService;
@Resource
private TagService tagService;
@Resource
private LinkService linkService;
@Resource
private CommentService commentService;
@Resource
private ConfigService configService;
@Resource
private CategoryService categoryService;
@GetMapping({"/", "/index", "index.html"})
public String index(HttpServletRequest request) {
return this.page(request, 1);
}
@GetMapping({"/page/{pageNum}"})
public String page(HttpServletRequest request, @PathVariable("pageNum") int pageNum) {
PageResult blogPageResult = blogService.getBlogsForIndexPage(pageNum);
if (blogPageResult == null) {
return "error/error_404";
}
request.setAttribute("blogPageResult", blogPageResult);
request.setAttribute("newBlogs", blogService.getBlogListForIndexPage(1));
request.setAttribute("hotBlogs", blogService.getBlogListForIndexPage(0));
request.setAttribute("hotTags", tagService.getBlogTagCountForIndex());
request.setAttribute("pageName", "é¦–é¡µ");
request.setAttribute("configurations", configService.getAllConfigs());
return "blog/" + theme + "/index";
}
@GetMapping({"/categories"})
public String categories(HttpServletRequest request) {
request.setAttribute("hotTags", tagService.getBlogTagCountForIndex());
request.setAttribute("categories", categoryService.getAllCategories());
request.setAttribute("pageName", "åˆ†ç±»é¡µé�¢");
request.setAttribute("configurations", configService.getAllConfigs());
return "blog/" + theme + "/category";
}
@GetMapping({"/blog/{blogId}", "/article/{blogId}"})
public String detail(HttpServletRequest request, @PathVariable("blogId") Long blogId, @RequestParam(value = "commentPage", required = false, defaultValue = "1") Integer commentPage) {
BlogDetailVO blogDetailVO = blogService.getBlogDetail(blogId);
if (blogDetailVO != null) {
request.setAttribute("blogDetailVO", blogDetailVO);
request.setAttribute("commentPageResult", commentService.getCommentPageByBlogIdAndPageNum(blogId, commentPage));
}
request.setAttribute("pageName", "è¯¦æƒ…");
request.setAttribute("configurations", configService.getAllConfigs());
return "blog/" + theme + "/detail";
}
@GetMapping({"/tag/{tagName}"})
public String tag(HttpServletRequest request, @PathVariable("tagName") String tagName) {
return tag(request, tagName, 1);
}
@GetMapping({"/tag/{tagName}/{page}"})
public String tag(HttpServletRequest request, @PathVariable("tagName") String tagName, @PathVariable("page") Integer page) {
PageResult blogPageResult = blogService.getBlogsPageByTag(tagName, page);
request.setAttribute("blogPageResult", blogPageResult);
request.setAttribute("pageName", "æ ‡ç­¾");
request.setAttribute("pageUrl", "tag");
request.setAttribute("keyword", tagName);
request.setAttribute("newBlogs", blogService.getBlogListForIndexPage(1));
request.setAttribute("hotBlogs", blogService.getBlogListForIndexPage(0));
request.setAttribute("hotTags", tagService.getBlogTagCountForIndex());
request.setAttribute("configurations", configService.getAllConfigs());
return "blog/" + theme + "/list";
}
@GetMapping({"/category/{categoryName}"})
public String category(HttpServletRequest request, @PathVariable("categoryName") String categoryName) {
return category(request, categoryName, 1);
}
@GetMapping({"/category/{categoryName}/{page}"})
public String category(HttpServletRequest request, @PathVariable("categoryName") String categoryName, @PathVariable("page") Integer page) {
PageResult blogPageResult = blogService.getBlogsPageByCategory(categoryName, page);
request.setAttribute("blogPageResult", blogPageResult);
request.setAttribute("pageName", "åˆ†ç±»");
request.setAttribute("pageUrl", "category");
request.setAttribute("keyword", categoryName);
request.setAttribute("newBlogs", blogService.getBlogListForIndexPage(1));
request.setAttribute("hotBlogs", blogService.getBlogListForIndexPage(0));
request.setAttribute("hotTags", tagService.getBlogTagCountForIndex());
request.setAttribute("configurations", configService.getAllConfigs());
return "blog/" + theme + "/list";
}
@GetMapping({"/search/{keyword}"})
public String search(HttpServletRequest request, @PathVariable("keyword") String keyword) {
return search(request, keyword, 1);
}
@GetMapping({"/search/{keyword}/{page}"})
public String search(HttpServletRequest request, @PathVariable("keyword") String keyword, @PathVariable("page") Integer page) {
PageResult blogPageResult = blogService.getBlogsPageBySearch(keyword, page);
request.setAttribute("blogPageResult", blogPageResult);
request.setAttribute("pageName", "æ�œç´¢");
request.setAttribute("pageUrl", "search");
request.setAttribute("keyword", keyword);
request.setAttribute("newBlogs", blogService.getBlogListForIndexPage(1));
request.setAttribute("hotBlogs", blogService.getBlogListForIndexPage(0));
request.setAttribute("hotTags", tagService.getBlogTagCountForIndex());
request.setAttribute("configurations", configService.getAllConfigs());
return "blog/" + theme + "/list";
}
@GetMapping({"/link"})
public String link(HttpServletRequest request) {
request.setAttribute("pageName", "å�‹æƒ…é“¾æ�¥");
Map<Byte, List<BlogLink>> linkMap = linkService.getLinksForLinkPage();
if (linkMap != null) {
if (linkMap.containsKey((byte) 0)) {
request.setAttribute("favoriteLinks", linkMap.get((byte) 0));
}
if (linkMap.containsKey((byte) 1)) {
request.setAttribute("recommendLinks", linkMap.get((byte) 1));
}
if (linkMap.containsKey((byte) 2)) {
request.setAttribute("personalLinks", linkMap.get((byte) 2));
}
}
request.setAttribute("configurations", configService.getAllConfigs());
return "blog/" + theme + "/link";
}
@PostMapping(value = "/blog/comment")
@ResponseBody
public Result comment(HttpServletRequest request, HttpSession session,
@RequestParam Long blogId, @RequestParam String verifyCode,
@RequestParam String commentator, @RequestParam String email,
@RequestParam String websiteUrl, @RequestParam String commentBody) {
if (StringUtils.isEmpty(verifyCode)) {
return ResultGenerator.genFailResult("éªŒè¯�ç �ä¸�èƒ½ä¸ºç©º");
}
String kaptchaCode = session.getAttribute("verifyCode") + "";
if (StringUtils.isEmpty(kaptchaCode)) {
return ResultGenerator.genFailResult("é��æ³•è¯·æ±‚");
}
if (!verifyCode.equals(kaptchaCode)) {
return ResultGenerator.genFailResult("éªŒè¯�ç �é”™è¯¯");
}
String ref = request.getHeader("Referer");
if (StringUtils.isEmpty(ref)) {
return ResultGenerator.genFailResult("é��æ³•è¯·æ±‚");
}
if (null == blogId || blogId < 0) {
return ResultGenerator.genFailResult("é��æ³•è¯·æ±‚");
}
if (StringUtils.isEmpty(commentator)) {
return ResultGenerator.genFailResult("è¯·è¾“å…¥ç§°å‘¼");
}
if (StringUtils.isEmpty(email)) {
return ResultGenerator.genFailResult("è¯·è¾“å…¥é‚®ç®±åœ°å�€");
}
if (!PatternUtil.isEmail(email)) {
return ResultGenerator.genFailResult("è¯·è¾“å…¥æ­£ç¡®çš„é‚®ç®±åœ°å�€");
}
if (StringUtils.isEmpty(commentBody)) {
return ResultGenerator.genFailResult("è¯·è¾“å…¥è¯„è®ºå†…å®¹");
}
if (commentBody.trim().length() > 200) {
return ResultGenerator.genFailResult("è¯„è®ºå†…å®¹è¿‡é•¿");
}
BlogComment comment = new BlogComment();
comment.setBlogId(blogId);
comment.setCommentator(MyBlogUtils.cleanString(commentator));
comment.setEmail(email);
if (PatternUtil.isURL(websiteUrl)) {
comment.setWebsiteUrl(websiteUrl);
}
comment.setCommentBody(MyBlogUtils.cleanString(commentBody));
return ResultGenerator.genSuccessResult(commentService.addComment(comment));
}
@GetMapping({"/{subUrl}"})
public String detail(HttpServletRequest request, @PathVariable("subUrl") String subUrl) {
BlogDetailVO blogDetailVO = blogService.getBlogDetailBySubUrl(subUrl);
if (blogDetailVO != null) {
request.setAttribute("blogDetailVO", blogDetailVO);
request.setAttribute("pageName", subUrl);
request.setAttribute("configurations", configService.getAllConfigs());
return "blog/" + theme + "/detail";
} else {
return "error/error_400";
}
}
}
