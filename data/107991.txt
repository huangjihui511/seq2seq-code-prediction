package org.jsoup.parser;
import org.jsoup.internal.StringUtil;
import org.jsoup.helper.Validate;
public class TokenQueue {
private String queue;
private int pos = 0;
private static final char ESC = '\\'; 
Create a new TokenQueue.
@param data string of data to back queue.
public TokenQueue(String data) {
Validate.notNull(data);
queue = data;
}
public boolean isEmpty() {
return remainingLength() == 0;
}
private int remainingLength() {
return queue.length() - pos;
}
public char peek() {
return isEmpty() ? 0 : queue.charAt(pos);
}
Add a character to the start of the queue (will be the next character retrieved).
@param c character to add
public void addFirst(Character c) {
addFirst(c.toString());
}
Add a string to the start of the queue.
@param seq string to add.
public void addFirst(String seq) {
queue = seq + queue.substring(pos);
pos = 0;
}
public boolean matches(String seq) {
return queue.regionMatches(true, pos, seq, 0, seq.length());
}
public boolean matchesCS(String seq) {
return queue.startsWith(seq, pos);
}
Tests if the next characters match any of the sequences. Case insensitive.
@param seq list of strings to case insensitively check for
@return true of any matched, false if none did
public boolean matchesAny(String... seq) {
for (String s : seq) {
if (matches(s))
return true;
}
return false;
}
public boolean matchesAny(char... seq) {
if (isEmpty())
return false;
for (char c: seq) {
if (queue.charAt(pos) == c)
return true;
}
return false;
}
public boolean matchesStartTag() {
return (remainingLength() >= 2 && queue.charAt(pos) == '<' && Character.isLetter(queue.charAt(pos+1)));
}
public boolean matchChomp(String seq) {
if (matches(seq)) {
pos += seq.length();
return true;
} else {
return false;
}
}
Tests if queue starts with a whitespace character.
@return if starts with whitespace
public boolean matchesWhitespace() {
return !isEmpty() && StringUtil.isWhitespace(queue.charAt(pos));
}
Test if the queue matches a word character (letter or digit).
@return if matches a word character
public boolean matchesWord() {
return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));
}
public void advance() {
if (!isEmpty()) pos++;
}
public char consume() {
return queue.charAt(pos++);
}
<p>
Case insensitive.
public void consume(String seq) {
if (!matches(seq))
throw new IllegalStateException("Queue did not match expected sequence");
int len = seq.length();
if (len > remainingLength())
throw new IllegalStateException("Queue not long enough to consume sequence");
pos += len;
}
public String consumeTo(String seq) {
int offset = queue.indexOf(seq, pos);
if (offset != -1) {
String consumed = queue.substring(pos, offset);
pos += consumed.length();
return consumed;
} else {
return remainder();
}
}
public String consumeToIgnoreCase(String seq) {
int start = pos;
String first = seq.substring(0, 1);
boolean canScan = first.toLowerCase().equals(first.toUpperCase()); 
while (!isEmpty()) {
if (matches(seq))
break;
if (canScan) {
int skip = queue.indexOf(first, pos) - pos;
if (skip == 0) 
pos++;
else if (skip < 0) 
pos = queue.length();
else
pos += skip;
}
else
pos++;
}
return queue.substring(start, pos);
}
Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue.
@param seq any number of terminators to consume to. <b>Case insensitive.</b>
@return consumed string
public String consumeToAny(String... seq) {
int start = pos;
while (!isEmpty() && !matchesAny(seq)) {
pos++;
}
return queue.substring(start, pos);
}
public String chompTo(String seq) {
String data = consumeTo(seq);
matchChomp(seq);
return data;
}
public String chompToIgnoreCase(String seq) {
String data = consumeToIgnoreCase(seq); 
matchChomp(seq);
return data;
}
public String chompBalanced(char open, char close) {
int start = -1;
int end = -1;
int depth = 0;
char last = 0;
boolean inSingleQuote = false;
boolean inDoubleQuote = false;
do {
if (isEmpty()) break;
char c = consume();
if (last == 0 || last != ESC) {
if (c == '\'' && c != open && !inDoubleQuote)
inSingleQuote = !inSingleQuote;
else if (c == '"' && c != open && !inSingleQuote)
inDoubleQuote = !inDoubleQuote;
if (inSingleQuote || inDoubleQuote)
continue;
if (c == open) {
depth++;
if (start == -1)
start = pos;
}
else if (c == close)
depth--;
}
if (depth > 0 && last != 0)
end = pos; 
last = c;
} while (depth > 0);
final String out = (end >= 0) ? queue.substring(start, end) : "";
if (depth > 0) {
Validate.fail("Did not find balanced marker at '" + out + "'");
}
return out;
}
public static String unescape(String in) {
StringBuilder out = StringUtil.borrowBuilder();
char last = 0;
for (char c : in.toCharArray()) {
if (c == ESC) {
if (last != 0 && last == ESC)
out.append(c);
}
else
out.append(c);
last = c;
}
return StringUtil.releaseBuilder(out);
}
public boolean consumeWhitespace() {
boolean seen = false;
while (matchesWhitespace()) {
pos++;
seen = true;
}
return seen;
}
public String consumeWord() {
int start = pos;
while (matchesWord())
pos++;
return queue.substring(start, pos);
}
public String consumeTagName() {
int start = pos;
while (!isEmpty() && (matchesWord() || matchesAny(':', '_', '-')))
pos++;
return queue.substring(start, pos);
}
public String consumeElementSelector() {
int start = pos;
while (!isEmpty() && (matchesWord() || matchesAny("*|","|", "_", "-")))
pos++;
return queue.substring(start, pos);
}
Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _)
http:
@return identifier
public String consumeCssIdentifier() {
int start = pos;
while (!isEmpty() && (matchesWord() || matchesAny('-', '_')))
pos++;
return queue.substring(start, pos);
}
Consume an attribute key off the queue (letter, digit, -, _, :")
@return attribute key
public String consumeAttributeKey() {
int start = pos;
while (!isEmpty() && (matchesWord() || matchesAny('-', '_', ':')))
pos++;
return queue.substring(start, pos);
}
Consume and return whatever is left on the queue.
@return remained of queue.
public String remainder() {
final String remainder = queue.substring(pos, queue.length());
pos = queue.length();
return remainder;
}
@Override
public String toString() {
return queue.substring(pos);
}
}
