package it.unimi.dsi.fastutil;
import java.util.Comparator;
import java.util.NoSuchElementException;
public class IndirectPriorityQueues {
private IndirectPriorityQueues() {}
@SuppressWarnings("rawtypes")
public static class EmptyIndirectPriorityQueue implements IndirectPriorityQueue {
protected EmptyIndirectPriorityQueue() {}
@Override
public void enqueue(final int i) { throw new UnsupportedOperationException(); }
@Override
public int dequeue() { throw new NoSuchElementException(); }
@Override
public boolean isEmpty() { return true; }
@Override
public int size() { return 0; }
@Override
public boolean contains(int index) { return false; }
@Override
public void clear() {}
@Override
public int first() { throw new NoSuchElementException(); }
@Override
public int last() { throw new NoSuchElementException(); }
@Override
public void changed() { throw new NoSuchElementException(); }
@Override
public void allChanged() {}
@Override
public Comparator<?> comparator() { return null; }
@Override
public void changed(final int i) { throw new IllegalArgumentException("Index " + i + " is not in the queue"); }
@Override
public boolean remove(final int i) { return false; }
@Override
public int front(int[] a) { return 0; }
}
public static final EmptyIndirectPriorityQueue EMPTY_QUEUE = new EmptyIndirectPriorityQueue();
public static class SynchronizedIndirectPriorityQueue<K> implements IndirectPriorityQueue<K> {
public static final long serialVersionUID = -7046029254386353129L;
protected final IndirectPriorityQueue<K> q;
protected final Object sync;
protected SynchronizedIndirectPriorityQueue(final IndirectPriorityQueue<K> q, final Object sync) {
this.q = q;
this.sync = sync;
}
protected SynchronizedIndirectPriorityQueue(final IndirectPriorityQueue<K> q) {
this.q = q;
this.sync = this;
}
@Override
public void enqueue(int x) { synchronized(sync) { q.enqueue(x); } }
@Override
public int dequeue() { synchronized(sync) { return q.dequeue(); } }
@Override
public boolean contains(final int index) { synchronized(sync) { return q.contains(index); } }
@Override
public int first() { synchronized(sync) { return q.first(); } }
@Override
public int last() { synchronized(sync) { return q.last(); } }
@Override
public boolean isEmpty() { synchronized(sync) { return q.isEmpty(); } }
@Override
public int size() { synchronized(sync) { return q.size(); } }
@Override
public void clear() { synchronized(sync) { q.clear(); } }
@Override
public void changed() { synchronized(sync) { q.changed(); } }
@Override
public void allChanged() { synchronized(sync) { q.allChanged(); } }
@Override
public void changed(int i) { synchronized(sync) { q.changed(i); } }
@Override
public boolean remove(int i) { synchronized(sync) { return q.remove(i); } }
@Override
public Comparator<? super K> comparator() { synchronized(sync) { return q.comparator(); } }
@Override
public int front(int[] a) { return q.front(a); }
}
public static <K> IndirectPriorityQueue<K> synchronize(final IndirectPriorityQueue<K> q) {	return new SynchronizedIndirectPriorityQueue<>(q); }
public static <K> IndirectPriorityQueue<K> synchronize(final IndirectPriorityQueue<K> q, final Object sync) { return new SynchronizedIndirectPriorityQueue<>(q, sync); }
}
