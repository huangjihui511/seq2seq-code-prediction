package org.apache.struts2.portlet.interceptor;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionInvocation;
import junit.framework.TestCase;
import org.apache.struts2.portlet.PortletConstants;
import org.easymock.EasyMock;
import javax.portlet.PortletRequest;
import javax.portlet.PortletResponse;
import java.util.HashMap;
import java.util.Map;
public class PortletAwareInterceptorTest extends TestCase {
private PortletAwareInterceptor interceptor;
protected void setUp() throws Exception {
super.setUp();
interceptor = new PortletAwareInterceptor();
}
protected void tearDown() throws Exception {
super.tearDown();
}
public void testPortletRequestIsSet() throws Exception {
PortletRequest request = EasyMock.createMock(PortletRequest.class);
Map<String, Object> ctx = new HashMap<String, Object>();
ctx.put(PortletConstants.REQUEST, request);
PortletRequestAware action = EasyMock.createMock(PortletRequestAware.class);
action.setPortletRequest(request);
ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
EasyMock.expect(invocation.getInvocationContext()).andReturn(new ActionContext(ctx));
EasyMock.expect(invocation.getAction()).andReturn(action);
EasyMock.replay(action);
EasyMock.replay(invocation);
interceptor.intercept(invocation);
EasyMock.verify(action);
}
public void testActionPortletRequestAware() throws Exception {
PortletRequest request = EasyMock.createMock(PortletRequest.class);
Map<String, Object> ctx = new HashMap<>();
ctx.put(PortletConstants.REQUEST, request);
org.apache.struts2.portlet.action.PortletRequestAware action = EasyMock.createMock(org.apache.struts2.portlet.action.PortletRequestAware.class);
action.withPortletRequest(request);
ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
EasyMock.expect(invocation.getInvocationContext()).andReturn(new ActionContext(ctx));
EasyMock.expect(invocation.getAction()).andReturn(action);
EasyMock.replay(action);
EasyMock.replay(invocation);
interceptor.intercept(invocation);
EasyMock.verify(action);
}
public void testActionPortletResponseAware() throws Exception {
PortletResponse response = EasyMock.createMock(PortletResponse.class);
Map<String, Object> ctx = new HashMap<>();
ctx.put(PortletConstants.RESPONSE, response);
org.apache.struts2.portlet.action.PortletResponseAware action = EasyMock.createMock(org.apache.struts2.portlet.action.PortletResponseAware.class);
action.withPortletResponse(response);
ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
EasyMock.expect(invocation.getInvocationContext()).andReturn(new ActionContext(ctx));
EasyMock.expect(invocation.getAction()).andReturn(action);
EasyMock.replay(action);
EasyMock.replay(invocation);
interceptor.intercept(invocation);
EasyMock.verify(action);
}
}
