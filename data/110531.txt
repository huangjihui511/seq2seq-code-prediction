package com.github.florent37.materialviewpager;
import android.animation.ArgbEvaluator;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.view.ViewCompat;
import android.support.v4.widget.NestedScrollView;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import static com.github.florent37.materialviewpager.Utils.canScroll;
import static com.github.florent37.materialviewpager.Utils.colorWithAlpha;
import static com.github.florent37.materialviewpager.Utils.dpToPx;
import static com.github.florent37.materialviewpager.Utils.getTheVisibileView;
import static com.github.florent37.materialviewpager.Utils.minMax;
import static com.github.florent37.materialviewpager.Utils.scrollTo;
import static com.github.florent37.materialviewpager.Utils.setBackgroundColor;
import static com.github.florent37.materialviewpager.Utils.setElevation;
import static com.github.florent37.materialviewpager.Utils.setScale;
public class MaterialViewPagerAnimator {
private static final String TAG = "MaterialViewPager";
private static final int ENTER_TOOLBAR_ANIMATION_DURATION = 300;
public static Boolean ENABLE_LOG = false;
public final float elevation;
private final float scrollMax;
private final float scrollMaxDp;
float lastYOffset = -1; 
private float lastPercent = 0; 
private MaterialViewPagerSettings settings;
private List<View> scrollViewList = new ArrayList<>();
private HashMap<Object, Integer> yOffsets = new HashMap<>();
private boolean followScrollToolbarIsVisible = false;
private float firstScrollValue = Float.MIN_VALUE;
private boolean justToolbarAnimated = false;
private float initialDistance = -1;
private MaterialViewPagerHeader mHeader;
private ValueAnimator headerAnimator;
MaterialViewPagerAnimator(MaterialViewPager materialViewPager) {
this.settings = materialViewPager.settings;
this.mHeader = materialViewPager.materialViewPagerHeader;
Context context = mHeader.getContext();
this.scrollMax = this.settings.headerHeight;
this.scrollMaxDp = Utils.dpToPx(this.scrollMax, context);
elevation = dpToPx(4, context);
}
private boolean onMaterialScrolled(Object source, float yOffset) {
if (initialDistance == -1 || initialDistance == 0) {
initialDistance = mHeader.mPagerSlidingTabStrip.getTop() - mHeader.toolbar.getBottom();
}
if (yOffset == lastYOffset) {
return false;
}
float scrollTop = -yOffset;
{
if (mHeader.headerBackground != null) {
if (this.settings.parallaxHeaderFactor != 0) {
ViewCompat.setTranslationY(mHeader.headerBackground, scrollTop / this.settings.parallaxHeaderFactor);
}
if (ViewCompat.getY(mHeader.headerBackground) >= 0) {
ViewCompat.setY(mHeader.headerBackground, 0);
}
}
}
log("yOffset" + yOffset);
dispatchScrollOffset(source, minMax(0, yOffset, scrollMaxDp));
float percent = yOffset / scrollMax;
log("percent1" + percent);
if (percent != 0) {
float newDistance = ViewCompat.getY(mHeader.mPagerSlidingTabStrip) - mHeader.toolbar.getBottom();
percent = 1 - newDistance / initialDistance;
log("percent2" + percent);
}
if (Float.isNaN(percent)) 
{
return false;
}
if (percent == 0 && headerAnimator != null) {
cancelHeaderAnimator();
ViewCompat.setTranslationY(mHeader.toolbarLayout, 0);
}
percent = minMax(0, percent, 1);
{
if (!settings.toolbarTransparent) {
setColorPercent(percent);
} else {
if (justToolbarAnimated) {
if (toolbarJoinsTabs()) {
setColorPercent(1);
} else if (lastPercent != percent) {
animateColorPercent(0, 200);
}
}
}
lastPercent = percent; 
if (mHeader.mPagerSlidingTabStrip != null) { 
log("" + scrollTop);
if (scrollTop <= 0) {
ViewCompat.setTranslationY(mHeader.mPagerSlidingTabStrip, scrollTop);
ViewCompat.setTranslationY(mHeader.toolbarLayoutBackground, scrollTop);
if (ViewCompat.getY(mHeader.mPagerSlidingTabStrip) < mHeader.getToolbar().getBottom()) {
float ty = mHeader.getToolbar().getBottom() - mHeader.mPagerSlidingTabStrip.getTop();
ViewCompat.setTranslationY(mHeader.mPagerSlidingTabStrip, ty);
ViewCompat.setTranslationY(mHeader.toolbarLayoutBackground, ty);
}
}
}
if (mHeader.mLogo != null) { 
if (this.settings.hideLogoWithFade) {
ViewCompat.setAlpha(mHeader.mLogo, 1 - percent);
ViewCompat.setTranslationY(mHeader.mLogo, (mHeader.finalTitleY - mHeader.originalTitleY) * percent);
} else {
ViewCompat.setTranslationY(mHeader.mLogo, (mHeader.finalTitleY - mHeader.originalTitleY) * percent);
ViewCompat.setTranslationX(mHeader.mLogo, (mHeader.finalTitleX - mHeader.originalTitleX) * percent);
float scale = (1 - percent) * (1 - mHeader.finalScale) + mHeader.finalScale;
setScale(scale, mHeader.mLogo);
}
}
if (this.settings.hideToolbarAndTitle && mHeader.toolbarLayout != null) {
boolean scrollUp = lastYOffset < yOffset;
if (scrollUp) {
scrollUp(yOffset);
} else {
scrollDown(yOffset);
}
}
}
if (headerAnimator != null && percent < 1) {
cancelHeaderAnimator();
}
lastYOffset = yOffset;
return true;
}
void setColor(int color, int duration) {
final ValueAnimator colorAnim = ObjectAnimator.ofInt(mHeader.headerBackground, "backgroundColor", settings.color, color);
colorAnim.setEvaluator(new ArgbEvaluator());
colorAnim.setDuration(duration);
colorAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
@Override
public void onAnimationUpdate(ValueAnimator animation) {
final int animatedValue = (Integer) animation.getAnimatedValue();
int colorAlpha = colorWithAlpha(animatedValue, lastPercent);
mHeader.headerBackground.setBackgroundColor(colorAlpha);
mHeader.statusBackground.setBackgroundColor(colorAlpha);
mHeader.toolbar.setBackgroundColor(colorAlpha);
mHeader.toolbarLayoutBackground.setBackgroundColor(colorAlpha);
mHeader.mPagerSlidingTabStrip.setBackgroundColor(colorAlpha);
settings.color = animatedValue;
}
});
colorAnim.start();
}
public void animateColorPercent(float percent, int duration) {
final ValueAnimator valueAnimator = ValueAnimator.ofFloat(lastPercent, percent);
valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
@Override
public void onAnimationUpdate(ValueAnimator animation) {
setColorPercent((float) animation.getAnimatedValue());
}
});
valueAnimator.setDuration(duration);
valueAnimator.start();
}
public void setColorPercent(float percent) {
setBackgroundColor(
colorWithAlpha(this.settings.color, percent),
mHeader.statusBackground
);
if (percent >= 1) {
setBackgroundColor(
colorWithAlpha(this.settings.color, percent),
mHeader.toolbar,
mHeader.toolbarLayoutBackground,
mHeader.mPagerSlidingTabStrip
);
} else {
setBackgroundColor(
colorWithAlpha(this.settings.color, 0),
mHeader.toolbar,
mHeader.toolbarLayoutBackground,
mHeader.mPagerSlidingTabStrip
);
}
if (this.settings.enableToolbarElevation && toolbarJoinsTabs()) {
setElevation(
(percent == 1) ? elevation : 0,
mHeader.toolbar,
mHeader.toolbarLayoutBackground,
mHeader.mPagerSlidingTabStrip,
mHeader.mLogo
);
}
}
public int getHeaderHeight() {
return this.settings.headerHeight;
}
void registerRecyclerView(final RecyclerView recyclerView) {
if (recyclerView != null && !scrollViewList.contains(recyclerView)) {
scrollViewList.add(recyclerView); 
yOffsets.put(recyclerView, recyclerView.getScrollY()); 
recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {
boolean firstZeroPassed;
@Override
public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
super.onScrolled(recyclerView, dx, dy);
int yOffset = yOffsets.get(recyclerView);
if(yOffset < 0) {
yOffset = 0;
}
yOffset += dy;
yOffsets.put(recyclerView, yOffset); 
if (yOffset == 0 && !firstZeroPassed) {
firstZeroPassed = true;
return;
}
if (isNewYOffset(yOffset)) {
onMaterialScrolled(recyclerView, yOffset);
}
}
});
recyclerView.post(new Runnable() {
@Override
public void run() {
setScrollOffset(recyclerView, lastYOffset);
}
});
}
}
void registerScrollView(final NestedScrollView scrollView) {
if (scrollView != null) {
scrollViewList.add(scrollView);  
scrollView.setOnScrollChangeListener(new NestedScrollView.OnScrollChangeListener() {
boolean firstZeroPassed;
@Override
public void onScrollChange(NestedScrollView v, int scrollX, int scrollY, int oldScrollX, int oldScrollY) {
if (scrollY == 0 && !firstZeroPassed) {
firstZeroPassed = true;
return;
}
if (isNewYOffset(scrollY)) {
onMaterialScrolled(scrollView, scrollY);
}
}
});
scrollView.post(new Runnable() {
@Override
public void run() {
setScrollOffset(scrollView, lastYOffset);
}
});
}
}
void restoreScroll(final float scroll, final MaterialViewPagerSettings settings) {
new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
@Override
public void run() {
if (!onMaterialScrolled(null, scroll)) {
restoreScroll(scroll, settings);
}
}
}, 100);
}
void onViewPagerPageChanged() {
scrollDown(lastYOffset);
View visibleView = getTheVisibileView(scrollViewList);
if (!canScroll(visibleView)) {
followScrollToolbarLayout(0);
onMaterialScrolled(visibleView, 0);
}
}
private void dispatchScrollOffset(Object source, float yOffset) {
if (scrollViewList != null) {
for (Object scroll : scrollViewList) {
if (scroll != null && scroll != source) {
setScrollOffset(scroll, yOffset);
}
}
}
}
private boolean isNewYOffset(int yOffset) {
if (lastYOffset == -1) {
return true;
} else {
return yOffset != lastYOffset;
}
}
private void setScrollOffset(Object scroll, float yOffset) {
if (scroll != null && yOffset >= 0) {
scrollTo(scroll, yOffset);
yOffsets.put(scroll, (int) yOffset);
}
}
private void cancelHeaderAnimator() {
if (headerAnimator != null) {
headerAnimator.cancel();
headerAnimator = null;
}
}
private void scrollUp(float yOffset) {
log("scrollUp");
followScrollToolbarLayout(yOffset);
}
private void log(String scrollUp) {
if (ENABLE_LOG) {
Log.d(TAG, scrollUp);
}
}
private void scrollDown(float yOffset) {
log("scrollDown");
if (yOffset > mHeader.toolbarLayout.getHeight() * 1.5f) {
animateEnterToolbarLayout(yOffset);
} else {
if (headerAnimator != null) {
followScrollToolbarIsVisible = true;
} else {
followScrollToolbarLayout(yOffset);
}
}
}
private boolean toolbarJoinsTabs() {
return (mHeader.toolbar.getBottom() == mHeader.mPagerSlidingTabStrip.getTop() + ViewCompat.getTranslationY(mHeader.mPagerSlidingTabStrip));
}
private void followScrollToolbarLayout(float yOffset) {
if (mHeader.toolbar.getBottom() == 0) {
return;
}
if (toolbarJoinsTabs()) {
if (firstScrollValue == Float.MIN_VALUE) {
firstScrollValue = yOffset;
}
float translationY = firstScrollValue - yOffset;
if (translationY > 0) {
translationY = 0;
}
log("translationY " + translationY);
ViewCompat.setTranslationY(mHeader.toolbarLayout, translationY);
} else {
ViewCompat.setTranslationY(mHeader.toolbarLayout, 0);
justToolbarAnimated = false;
}
followScrollToolbarIsVisible = (ViewCompat.getY(mHeader.toolbarLayout) >= 0);
}
private void animateEnterToolbarLayout(float yOffset) {
if (!followScrollToolbarIsVisible && headerAnimator != null) {
headerAnimator.cancel();
headerAnimator = null;
}
if (headerAnimator == null) {
headerAnimator = ObjectAnimator.ofFloat(mHeader.toolbarLayout, View.TRANSLATION_Y, 0);
headerAnimator.setDuration(ENTER_TOOLBAR_ANIMATION_DURATION);
headerAnimator.addListener(new android.animation.AnimatorListenerAdapter() {
@Override
public void onAnimationEnd(android.animation.Animator animation) {
super.onAnimationEnd(animation);
followScrollToolbarIsVisible = true;
firstScrollValue = Float.MIN_VALUE;
justToolbarAnimated = true;
}
});
headerAnimator.start();
}
}
}
