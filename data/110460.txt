package com.baomidou.mybatisplus.extension.handlers;
import java.util.List;
import org.apache.ibatis.executor.statement.CallableStatementHandler;
import org.apache.ibatis.executor.statement.StatementHandler;
import org.apache.ibatis.reflection.MetaObject;
import org.apache.ibatis.reflection.SystemMetaObject;
import com.baomidou.mybatisplus.core.parser.ISqlParser;
import com.baomidou.mybatisplus.core.parser.ISqlParserFilter;
import com.baomidou.mybatisplus.core.parser.SqlInfo;
import com.baomidou.mybatisplus.core.parser.SqlParserHelper;
import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;
import com.baomidou.mybatisplus.core.toolkit.PluginUtils;
import lombok.Data;
import lombok.experimental.Accessors;
@Data
@Accessors(chain = true)
public abstract class AbstractSqlParserHandler {
private List<ISqlParser> sqlParserList;
private ISqlParserFilter sqlParserFilter;
protected void sqlParser(MetaObject metaObject) {
if (null != metaObject) {
Object originalObject = metaObject.getOriginalObject();
StatementHandler statementHandler = PluginUtils.realTarget(originalObject);
metaObject = SystemMetaObject.forObject(statementHandler);
if (null != this.sqlParserFilter && this.sqlParserFilter.doFilter(metaObject)) {
return;
}
if (SqlParserHelper.getSqlParserInfo(metaObject)) {
return;
}
if (CollectionUtils.isNotEmpty(this.sqlParserList)) {
statementHandler = metaObject.hasGetter("delegate") ? (StatementHandler) metaObject.getValue("delegate") : statementHandler;
if (!(statementHandler instanceof CallableStatementHandler)) {
boolean sqlChangedFlag = false;
String originalSql = (String) metaObject.getValue(PluginUtils.DELEGATE_BOUNDSQL_SQL);
for (ISqlParser sqlParser : this.sqlParserList) {
if (sqlParser.doFilter(metaObject, originalSql)) {
SqlInfo sqlInfo = sqlParser.parser(metaObject, originalSql);
if (null != sqlInfo) {
originalSql = sqlInfo.getSql();
sqlChangedFlag = true;
}
}
}
if (sqlChangedFlag) {
metaObject.setValue(PluginUtils.DELEGATE_BOUNDSQL_SQL, originalSql);
}
}
}
}
}
}
