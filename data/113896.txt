package psiprobe.controllers.connectors;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.ParameterizableViewController;
import org.springframework.web.servlet.view.RedirectView;
import psiprobe.beans.stats.collectors.ConnectorStatsCollectorBean;
@Controller
public class ResetConnectorStatsController extends ParameterizableViewController {
@Inject
private ConnectorStatsCollectorBean collectorBean;
public ConnectorStatsCollectorBean getCollectorBean() {
return collectorBean;
}
public void setCollectorBean(ConnectorStatsCollectorBean collectorBean) {
this.collectorBean = collectorBean;
}
@RequestMapping(path = "/app/connectorReset.htm")
@Override
public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)
throws Exception {
return super.handleRequest(request, response);
}
@Override
protected ModelAndView handleRequestInternal(HttpServletRequest request,
HttpServletResponse response) throws Exception {
String connectorName = ServletRequestUtils.getRequiredStringParameter(request, "cn");
collectorBean.reset(connectorName);
return new ModelAndView(new RedirectView(request.getContextPath() + getViewName()));
}
@Value("/connectors.htm")
@Override
public void setViewName(String viewName) {
super.setViewName(viewName);
}
}
