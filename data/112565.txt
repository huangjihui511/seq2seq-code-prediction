package com.sun.swingset3.demos.togglebutton;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import com.sun.swingset3.demos.ResourceManager;
public class LayoutControlPanel extends JPanel implements SwingConstants {
private static final Dimension VGAP20 = new Dimension(1, 20);
private final boolean absolutePositions;
private ToggleButtonDemo demo = null;
LayoutControlPanel(ToggleButtonDemo demo, ResourceManager resourceManager) {
this.demo = demo;
setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
setAlignmentX(LEFT_ALIGNMENT);
setAlignmentY(TOP_ALIGNMENT);
JLabel l;
absolutePositions = true;
DirectionPanel textPosition = new DirectionPanel(true, "E", new TextPositionListener());
DirectionPanel labelAlignment = new DirectionPanel(true, "C", new LabelAlignmentListener());
for (JComponent control : demo.getCurrentControls()) {
setPosition(control, RIGHT, CENTER);
setAlignment(control, CENTER, CENTER);
}
l = new JLabel(resourceManager.getString("LayoutControlPanel.textposition_label"));
add(l);
add(textPosition);
add(Box.createRigidArea(VGAP20));
l = new JLabel(resourceManager.getString("LayoutControlPanel.contentalignment_label"));
add(l);
add(labelAlignment);
add(Box.createGlue());
}
private class TextPositionListener implements ActionListener {
public void actionPerformed(ActionEvent e) {
JRadioButton rb = (JRadioButton) e.getSource();
if (!rb.isSelected()) {
return;
}
String cmd = rb.getActionCommand();
int hPos, vPos;
if (cmd.equals("NW")) {
hPos = LEFT;
vPos = TOP;
} else if (cmd.equals("N")) {
hPos = CENTER;
vPos = TOP;
} else if (cmd.equals("NE")) {
hPos = RIGHT;
vPos = TOP;
} else if (cmd.equals("W")) {
hPos = LEFT;
vPos = CENTER;
} else if (cmd.equals("C")) {
hPos = CENTER;
vPos = CENTER;
} else if (cmd.equals("E")) {
hPos = RIGHT;
vPos = CENTER;
} else if (cmd.equals("SW")) {
hPos = LEFT;
vPos = BOTTOM;
} else if (cmd.equals("S")) {
hPos = CENTER;
vPos = BOTTOM;
} else /*if(cmd.equals("SE"))*/ {
hPos = RIGHT;
vPos = BOTTOM;
}
for (JComponent control : demo.getCurrentControls()) {
setPosition(control, hPos, vPos);
}
demo.invalidate();
demo.validate();
demo.repaint();
}
}
private class LabelAlignmentListener implements ActionListener {
public void actionPerformed(ActionEvent e) {
JRadioButton rb = (JRadioButton) e.getSource();
if (!rb.isSelected()) {
return;
}
String cmd = rb.getActionCommand();
int hPos, vPos;
if (cmd.equals("NW")) {
hPos = LEFT;
vPos = TOP;
} else if (cmd.equals("N")) {
hPos = CENTER;
vPos = TOP;
} else if (cmd.equals("NE")) {
hPos = RIGHT;
vPos = TOP;
} else if (cmd.equals("W")) {
hPos = LEFT;
vPos = CENTER;
} else if (cmd.equals("C")) {
hPos = CENTER;
vPos = CENTER;
} else if (cmd.equals("E")) {
hPos = RIGHT;
vPos = CENTER;
} else if (cmd.equals("SW")) {
hPos = LEFT;
vPos = BOTTOM;
} else if (cmd.equals("S")) {
hPos = CENTER;
vPos = BOTTOM;
} else /*if(cmd.equals("SE"))*/ {
hPos = RIGHT;
vPos = BOTTOM;
}
for (JComponent control : demo.getCurrentControls()) {
setAlignment(control, hPos, vPos);
control.invalidate();
}
demo.invalidate();
demo.validate();
demo.repaint();
}
}
void setPosition(Component c, int hPos, int vPos) {
boolean ltr = c.getComponentOrientation().isLeftToRight();
if (absolutePositions) {
if (hPos == LEADING) {
hPos = ltr ? LEFT : RIGHT;
} else if (hPos == TRAILING) {
hPos = ltr ? RIGHT : LEFT;
}
} else {
if (hPos == LEFT) {
hPos = ltr ? LEADING : TRAILING;
} else if (hPos == RIGHT) {
hPos = ltr ? TRAILING : LEADING;
}
}
if (c instanceof AbstractButton) {
AbstractButton x = (AbstractButton) c;
x.setHorizontalTextPosition(hPos);
x.setVerticalTextPosition(vPos);
} else if (c instanceof JLabel) {
JLabel x = (JLabel) c;
x.setHorizontalTextPosition(hPos);
x.setVerticalTextPosition(vPos);
}
}
void setAlignment(Component c, int hPos, int vPos) {
boolean ltr = c.getComponentOrientation().isLeftToRight();
if (absolutePositions) {
if (hPos == LEADING) {
hPos = ltr ? LEFT : RIGHT;
} else if (hPos == TRAILING) {
hPos = ltr ? RIGHT : LEFT;
}
} else {
if (hPos == LEFT) {
hPos = ltr ? LEADING : TRAILING;
} else if (hPos == RIGHT) {
hPos = ltr ? TRAILING : LEADING;
}
}
if (c instanceof AbstractButton) {
AbstractButton x = (AbstractButton) c;
x.setHorizontalAlignment(hPos);
x.setVerticalAlignment(vPos);
} else if (c instanceof JLabel) {
JLabel x = (JLabel) c;
x.setHorizontalAlignment(hPos);
x.setVerticalAlignment(vPos);
}
}
}
