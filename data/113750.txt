package net.pms.io;
import java.io.File;
import java.util.Arrays;
import java.util.Map;
import net.pms.configuration.PmsConfiguration;
import net.pms.configuration.RendererConfiguration;
import net.pms.dlna.DLNAMediaAudio;
import net.pms.dlna.DLNAMediaSubtitle;
import net.pms.dlna.IPushOutput;
public class OutputParams {
@Deprecated
public File outputFile; 
public File workDir;
public Map<String,String> env;
public double minFileSize;
public double minBufferSize;
public double maxBufferSize;
public double timeseek;
public double timeend;
public int fromFrame;
public int toFrame;
public int waitbeforestart;
public PipeProcess[] input_pipes = new PipeProcess[2];
public PipeProcess[] output_pipes = new PipeProcess[2];
public DLNAMediaAudio aid;
public DLNAMediaSubtitle sid;
public int secondread_minsize;
public int outputByteArrayStreamBufferSize;
public boolean noexitcheck;
public boolean log;
public boolean lossyaudio;
public boolean losslessaudio;
public boolean no_videoencode;
public String forceFps;
public String forceType;
public RendererConfiguration mediaRenderer;
public boolean hidebuffer;
public byte header[];
public IPushOutput stdin;
public boolean avidemux;
public boolean shift_scr;
public boolean cleanup;
public OutputParams(PmsConfiguration configuration) {
if (configuration != null) {
waitbeforestart = configuration.getVideoTranscodeStartDelay() * 1000;
} else {
waitbeforestart = 6000;
}
fromFrame = -1;
toFrame = -1;
secondread_minsize = 1000000;
if (configuration != null) {
minFileSize = configuration.getMinStreamBuffer();
minBufferSize = configuration.getMinMemoryBufferSize();
maxBufferSize = configuration.getMaxMemoryBufferSize();
}
if (maxBufferSize < 100) {
maxBufferSize = 100;
}
timeseek = 0;
env = null;
}
public void manageFastStart() {
if (mediaRenderer != null && mediaRenderer.isTranscodeFastStart()) {
waitbeforestart = 0; 
minBufferSize = 1; 
}
}
@Override
public String toString() {
return "OutputParams [aid=" + aid +
", avidemux=" + avidemux +
", cleanup=" + cleanup +
", forceFps=" + forceFps +
", forceType=" + forceType +
", fromFrame=" + fromFrame +
", header=" + Arrays.toString(header) +
", hidebuffer=" + hidebuffer +
", input_pipes=" + Arrays.toString(input_pipes) +
", log=" + log +
", losslessaudio=" + losslessaudio +
", lossyaudio=" + lossyaudio +
", maxBufferSize=" + maxBufferSize +
", mediaRenderer=" + mediaRenderer +
", minBufferSize=" + minBufferSize +
", minFileSize=" + minFileSize +
", no_videoencode=" + no_videoencode +
", outputByteArrayStreamBufferSize= " + outputByteArrayStreamBufferSize +
", noexitcheck=" + noexitcheck +
", output_pipes=" + Arrays.toString(output_pipes) +
", secondread_minsize=" + secondread_minsize +
", shift_scr=" + shift_scr +
", sid=" + sid +
", stdin=" + stdin +
", timeend=" + timeend +
", timeseek=" + timeseek +
", toFrame=" + toFrame +
", waitbeforestart=" + waitbeforestart +
", workDir=" + workDir +
", env=" + env + "]";
}
}
