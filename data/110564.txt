package com.squareup.javapoet;
import static com.google.common.base.Charsets.*;
import static com.google.common.base.Preconditions.*;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileManager;
import javax.tools.JavaFileObject;
import org.eclipse.jdt.internal.compiler.tool.EclipseCompiler;
import org.junit.Rule;
import org.junit.rules.TestRule;
import org.junit.runner.Description;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.junit.runners.model.Statement;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
@RunWith(JUnit4.class)
public final class TypesEclipseTest extends AbstractTypesTest {
public static final class CompilationRule implements TestRule {
private Elements elements;
private Types types;
@Override
public Statement apply(final Statement base, Description description) {
return new Statement() {
@Override public void evaluate() throws Throwable {
final AtomicReference<Throwable> thrown = new AtomicReference<>();
boolean successful = compile(ImmutableList.of(new AbstractProcessor() {
@Override
public SourceVersion getSupportedSourceVersion() {
return SourceVersion.latest();
}
@Override
public Set<String> getSupportedAnnotationTypes() {
return ImmutableSet.of("*");
}
@Override
public synchronized void init(ProcessingEnvironment processingEnv) {
super.init(processingEnv);
elements = processingEnv.getElementUtils();
types = processingEnv.getTypeUtils();
}
@Override
public boolean process(Set<? extends TypeElement> annotations,
RoundEnvironment roundEnv) {
if (roundEnv.processingOver()) {
try {
base.evaluate();
} catch (Throwable e) {
thrown.set(e);
}
}
return false;
}
}));
checkState(successful);
Throwable t = thrown.get();
if (t != null) {
throw t;
}
}
};
}
public Elements getElements() {
checkState(elements != null, "Not running within the rule");
return elements;
}
public Types getTypes() {
checkState(elements != null, "Not running within the rule");
return types;
}
static private boolean compile(Iterable<? extends Processor> processors) {
JavaCompiler compiler = new EclipseCompiler();
DiagnosticCollector<JavaFileObject> diagnosticCollector =
new DiagnosticCollector<>();
JavaFileManager fileManager = compiler.getStandardFileManager(diagnosticCollector, Locale.getDefault(), UTF_8);
JavaCompiler.CompilationTask task = compiler.getTask(
null,
fileManager,
diagnosticCollector,
ImmutableSet.of(),
ImmutableSet.of(TypesEclipseTest.class.getCanonicalName()),
ImmutableSet.of());
task.setProcessors(processors);
return task.call();
}
}
@Rule public final CompilationRule compilation = new CompilationRule();
@Override
protected Elements getElements() {
return compilation.getElements();
}
@Override
protected Types getTypes() {
return compilation.getTypes();
}
}
