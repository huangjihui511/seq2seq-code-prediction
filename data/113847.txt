package psiprobe.tools.logging.log4j;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import org.apache.commons.lang3.reflect.MethodUtils;
import psiprobe.tools.logging.DefaultAccessor;
public class Log4JManagerAccessor extends DefaultAccessor {
public Log4JManagerAccessor(ClassLoader cl) throws ClassNotFoundException {
Class<?> clazz = cl.loadClass("org.apache.log4j.LogManager");
Method exists = MethodUtils.getAccessibleMethod(clazz, "exists", String.class);
if (exists == null) {
throw new RuntimeException("The LogManager is part of the slf4j bridge.");
}
setTarget(clazz);
}
public Log4JLoggerAccessor getRootLogger() {
try {
Class<?> clazz = (Class<?>) getTarget();
Method getRootLogger = MethodUtils.getAccessibleMethod(clazz, "getRootLogger");
Object logger = getRootLogger.invoke(null);
if (logger == null) {
throw new NullPointerException(
getTarget().getClass().getName() + "#getRootLogger() returned null");
}
Log4JLoggerAccessor accessor = new Log4JLoggerAccessor();
accessor.setTarget(logger);
accessor.setApplication(getApplication());
return accessor;
} catch (Exception e) {
logger.error("{}#getRootLogger() failed", getTarget().getClass().getName(), e);
}
return null;
}
public Log4JLoggerAccessor getLogger(String name) {
try {
Class<?> clazz = (Class<?>) getTarget();
Method getLogger = MethodUtils.getAccessibleMethod(clazz, "getLogger", String.class);
Object logger = getLogger.invoke(null, name);
if (logger == null) {
throw new NullPointerException(
getTarget().getClass().getName() + "#getLogger(\"" + name + "\") returned null");
}
Log4JLoggerAccessor accessor = new Log4JLoggerAccessor();
accessor.setTarget(logger);
accessor.setApplication(getApplication());
return accessor;
} catch (Exception e) {
logger.error("{}#getLogger('{}') failed", getTarget().getClass().getName(), name, e);
}
return null;
}
@SuppressWarnings("unchecked")
public List<Log4JAppenderAccessor> getAppenders() {
List<Log4JAppenderAccessor> appenders = new ArrayList<>();
try {
appenders.addAll(getRootLogger().getAppenders());
Class<?> clazz = (Class<?>) getTarget();
Method getCurrentLoggers = MethodUtils.getAccessibleMethod(clazz, "getCurrentLoggers");
for (Object currentLogger : Collections
.list((Enumeration<Object>) getCurrentLoggers.invoke(null))) {
Log4JLoggerAccessor accessor = new Log4JLoggerAccessor();
accessor.setTarget(currentLogger);
accessor.setApplication(getApplication());
appenders.addAll(accessor.getAppenders());
}
} catch (Exception e) {
logger.error("{}#getCurrentLoggers() failed", getTarget().getClass().getName(), e);
}
return appenders;
}
}
