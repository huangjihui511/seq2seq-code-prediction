package net.openhft.affinity;
import net.openhft.affinity.impl.NoCpuLayout;
import net.openhft.affinity.impl.VanillaCpuLayout;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.util.BitSet;
public class AffinityLock implements Closeable {
public static final String AFFINITY_RESERVED = "affinity.reserved";
public static final int PROCESSORS;
public static final BitSet BASE_AFFINITY;
public static final BitSet RESERVED_AFFINITY;
static final int ANY_CPU = -1;
private static final Logger LOGGER = LoggerFactory.getLogger(AffinityLock.class);
private static final LockInventory LOCK_INVENTORY;
static {
int processors = Runtime.getRuntime().availableProcessors();
VanillaCpuLayout cpuLayout = null;
try {
if (new File("/proc/cpuinfo").exists()) {
cpuLayout = VanillaCpuLayout.fromCpuInfo();
processors = cpuLayout.cpus();
}
} catch (IOException e) {
LOGGER.warn("Unable to load /proc/cpuinfo", e);
}
PROCESSORS = processors;
BASE_AFFINITY = Affinity.getAffinity();
RESERVED_AFFINITY = getReservedAffinity0();
LOCK_INVENTORY = new LockInventory(cpuLayout == null ? new NoCpuLayout(PROCESSORS) : cpuLayout);
}
private final int cpuId;
private final boolean base;
private final boolean reservable;
private final LockInventory lockInventory;
boolean bound = false;
@Nullable
Thread assignedThread;
Throwable boundHere;
AffinityLock(int cpuId, boolean base, boolean reservable, LockInventory lockInventory) {
this.lockInventory = lockInventory;
this.cpuId = cpuId;
this.base = base;
this.reservable = reservable;
}
public static void cpuLayout(@NotNull CpuLayout cpuLayout) {
LOCK_INVENTORY.set(cpuLayout);
}
@NotNull
public static CpuLayout cpuLayout() {
return LOCK_INVENTORY.getCpuLayout();
}
private static BitSet getReservedAffinity0() {
String reservedAffinity = System.getProperty(AFFINITY_RESERVED);
if (BASE_AFFINITY != null && (reservedAffinity == null || reservedAffinity.trim().isEmpty())) {
BitSet reserverable = new BitSet(PROCESSORS);
reserverable.set(1, PROCESSORS, true);
reserverable.andNot(BASE_AFFINITY);
if (reserverable.isEmpty() && PROCESSORS > 1) {
LoggerFactory.getLogger(AffinityLock.class).info("No isolated CPUs found, so assuming CPUs 1 to {} available.", (PROCESSORS - 1));
reserverable.set(1, PROCESSORS);
return reserverable;
}
return reserverable;
}
long[] longs = new long[1];
longs[0] = Long.parseLong(reservedAffinity, 16);
return BitSet.valueOf(longs);
}
public static AffinityLock acquireLock() {
return acquireLock(true);
}
public static AffinityLock acquireCore() {
return acquireCore(true);
}
public static AffinityLock acquireLock(boolean bind) {
return acquireLock(bind, ANY_CPU, AffinityStrategies.ANY);
}
public static AffinityLock acquireLock(int cpuId) {
return acquireLock(true, cpuId, AffinityStrategies.ANY);
}
public static AffinityLock acquireLockLastMinus(int n) {
return acquireLock(true, PROCESSORS - n, AffinityStrategies.ANY);
}
public static AffinityLock acquireLock(String desc) {
if (desc == null)
return LOCK_INVENTORY.noLock();
desc = desc.toLowerCase();
int cpuId;
if (desc.startsWith("last")) {
String last = desc.substring(4);
int lastN;
if (last.isEmpty())
lastN = 0;
else
try {
lastN = Integer.parseInt(last);
} catch (NumberFormatException e) {
throw new IllegalArgumentException("Cannot parse '" + desc + "'", e);
}
if (lastN > 0)
throw new IllegalArgumentException("Cannot parse '" + desc + "'");
cpuId = PROCESSORS + lastN - 1;
} else if (desc.equals("none")) {
return LOCK_INVENTORY.noLock();
} else if (desc.equals("any")) {
return acquireLock();
} else {
try {
cpuId = Integer.parseInt(desc);
} catch (NumberFormatException e) {
throw new IllegalArgumentException("Cannot parse '" + desc + "'", e);
}
}
if (cpuId <= 0) {
System.err.println("Cannot allocate 0 or negative cpuIds '" + desc + "'");
return LOCK_INVENTORY.noLock();
}
return acquireLock(cpuId);
}
public static AffinityLock acquireCore(boolean bind) {
return acquireCore(bind, ANY_CPU, AffinityStrategies.ANY);
}
private static AffinityLock acquireLock(boolean bind, int cpuId, @NotNull AffinityStrategy... strategies) {
return LOCK_INVENTORY.acquireLock(bind, cpuId, strategies);
}
private static AffinityLock acquireCore(boolean bind, int cpuId, @NotNull AffinityStrategy... strategies) {
return LOCK_INVENTORY.acquireCore(bind, cpuId, strategies);
}
@NotNull
public static String dumpLocks() {
return LOCK_INVENTORY.dumpLocks();
}
private static boolean areAssertionsEnabled() {
boolean debug = false;
assert debug = true;
return debug;
}
final void assignCurrentThread(boolean bind, boolean wholeCore) {
assignedThread = Thread.currentThread();
if (bind)
bind(wholeCore);
}
public void bind() {
bind(false);
}
public void bind(boolean wholeCore) {
if (bound && assignedThread != null && assignedThread.isAlive())
throw new IllegalStateException("cpu " + cpuId + " already bound to " + assignedThread);
if (areAssertionsEnabled())
boundHere = new Throwable("Bound here");
if (wholeCore) {
lockInventory.bindWholeCore(cpuId);
} else if (cpuId >= 0) {
bound = true;
assignedThread = Thread.currentThread();
LOGGER.info("Assigning cpu {} to {} on thread id {}", cpuId, assignedThread, Affinity.getThreadId());
}
if (cpuId >= 0) {
BitSet affinity = new BitSet();
affinity.set(cpuId, true);
Affinity.setAffinity(affinity);
}
}
final boolean canReserve(boolean specified) {
if (!LockCheck.isCpuFree(cpuId))
return false;
if (!specified && !reservable) return false;
if (assignedThread != null) {
if (assignedThread.isAlive()) {
return false;
}
LOGGER.warn("Lock assigned to {} but this thread is dead.", assignedThread);
}
return true;
}
public AffinityLock acquireLock(AffinityStrategy... strategies) {
return acquireLock(false, cpuId, strategies);
}
public void release() {
lockInventory.release();
}
@Override
public void close() {
release();
}
@Override
protected void finalize() throws Throwable {
if (bound) {
LOGGER.warn("Affinity lock for " + assignedThread + " was discarded rather than release()d in a controlled manner.", boundHere);
release();
}
super.finalize();
}
public int cpuId() {
return cpuId;
}
public boolean isAllocated() {
return cpuId >= 0;
}
public boolean isBound() {
return bound;
}
@Override
public String toString() {
StringBuilder sb = new StringBuilder();
if (assignedThread != null)
sb.append(assignedThread).append(" alive=").append(assignedThread.isAlive());
else if (reservable)
sb.append("Reserved for this application");
else if (base)
sb.append("General use CPU");
else
sb.append("CPU not available");
return sb.toString();
}
}
