package com.spazedog.lib.rootfw4.utils.io;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.CharBuffer;
import com.spazedog.lib.rootfw4.Common;
import com.spazedog.lib.rootfw4.Shell;
import com.spazedog.lib.rootfw4.ShellStream;
public class FileReader extends Reader {
public static final String TAG = Common.TAG + ".FileReader";
protected InputStreamReader mStream;
public FileReader(String file) throws FileNotFoundException {
this(null, file);
}
public FileReader(Shell shell, String file) throws FileNotFoundException {
String filePath = new File(file).getAbsolutePath();
try {
mStream = new InputStreamReader(new FileInputStream(filePath));
} catch (FileNotFoundException e) {
String binary = shell != null ? shell.findCommand("cat") : "toolbox cat";
try {
ProcessBuilder builder = new ProcessBuilder("su");
builder.redirectErrorStream(true);
Process process = builder.start();
mStream = new InputStreamReader(process.getInputStream());
DataOutputStream stdIn = new DataOutputStream(process.getOutputStream());
stdIn.write( (binary + " '" + filePath + "'\n").getBytes() );
stdIn.write( ("exit $?\n").getBytes() );
stdIn.flush();
stdIn.close();
Integer resultCode = process.waitFor();
if (!resultCode.equals(0)) {
throw new FileNotFoundException(e.getMessage());
}
} catch (Throwable te) {
throw new FileNotFoundException(te.getMessage());
}
}
}
@Override
public void mark(int readLimit) throws IOException {
mStream.mark(readLimit);
}
@Override
public boolean markSupported() {
return mStream.markSupported();
}
@Override
public void close() throws IOException {
mStream.close();
}
@Override
public int read(char[] buffer, int offset, int count) throws IOException {
return mStream.read(buffer, offset, count);
}
@Override
public int read(CharBuffer target) throws IOException {
return mStream.read(target);
}
@Override
public int read(char[] buffer) throws IOException {
return mStream.read(buffer);
}
@Override
public int read() throws IOException {
return mStream.read();
}
@Override
public long skip(long charCount) throws IOException {
return mStream.skip(charCount);
}
@Override
public void reset() throws IOException {
mStream.reset();
}
@Override
public boolean ready() throws IOException {
return mStream.ready();
}
}
