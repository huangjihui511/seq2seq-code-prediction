package spark;
import java.util.Enumeration;
import java.util.Set;
import java.util.TreeSet;
import javax.servlet.http.HttpSession;
import spark.utils.Assert;
public class Session {
private final Request request;
private final HttpSession session;
Session(HttpSession session, Request request) {
Assert.notNull(session, "session cannot be null");
Assert.notNull(request, "request cannot be null");
this.session = session;
this.request = request;
}
public HttpSession raw() {
return session;
}
@SuppressWarnings("unchecked")
public <T> T attribute(String name) {
return (T) session.getAttribute(name);
}
public void attribute(String name, Object value) {
session.setAttribute(name, value);
}
public Set<String> attributes() {
TreeSet<String> attributes = new TreeSet<>();
Enumeration<String> enumeration = session.getAttributeNames();
while (enumeration.hasMoreElements()) {
attributes.add(enumeration.nextElement());
}
return attributes;
}
public long creationTime() {
return session.getCreationTime();
}
public String id() {
return session.getId();
}
public long lastAccessedTime() {
return session.getLastAccessedTime();
}
public int maxInactiveInterval() {
return session.getMaxInactiveInterval();
}
public void maxInactiveInterval(int interval) {
session.setMaxInactiveInterval(interval);
}
public void invalidate() {
request.validSession(false);
session.invalidate();
}
public boolean isNew() {
return session.isNew();
}
public void removeAttribute(String name) {
session.removeAttribute(name);
}
}
