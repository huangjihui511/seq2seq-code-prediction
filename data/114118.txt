package org.apache.parquet.avro;
import java.io.IOException;
import org.apache.avro.generic.GenericData;
import org.apache.avro.specific.SpecificData;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.parquet.filter.UnboundRecordFilter;
import org.apache.parquet.hadoop.ParquetReader;
import org.apache.parquet.hadoop.api.ReadSupport;
import org.apache.parquet.io.InputFile;
public class AvroParquetReader<T> extends ParquetReader<T> {
@Deprecated
public static <T> Builder<T> builder(Path file) {
return new Builder<T>(file);
}
public static <T> Builder<T> builder(InputFile file) {
return new Builder<T>(file);
}
@Deprecated
public AvroParquetReader(Path file) throws IOException {
super(file, new AvroReadSupport<T>());
}
@Deprecated
public AvroParquetReader(Path file, UnboundRecordFilter unboundRecordFilter) throws IOException {
super(file, new AvroReadSupport<T>(), unboundRecordFilter);
}
@Deprecated
public AvroParquetReader(Configuration conf, Path file) throws IOException {
super(conf, file, new AvroReadSupport<T>());
}
@Deprecated
public AvroParquetReader(Configuration conf, Path file, UnboundRecordFilter unboundRecordFilter) throws IOException {
super(conf, file, new AvroReadSupport<T>(), unboundRecordFilter);
}
public static class Builder<T> extends ParquetReader.Builder<T> {
private GenericData model = null;
private boolean enableCompatibility = true;
private boolean isReflect = true;
@Deprecated
private Builder(Path path) {
super(path);
}
private Builder(InputFile file) {
super(file);
}
public Builder<T> withDataModel(GenericData model) {
this.model = model;
if (model.getClass() != GenericData.class &&
model.getClass() != SpecificData.class) {
isReflect = true;
}
return this;
}
public Builder<T> disableCompatibility() {
this.enableCompatibility = false;
return this;
}
public Builder<T> withCompatibility(boolean enableCompatibility) {
this.enableCompatibility = enableCompatibility;
return this;
}
@Override
protected ReadSupport<T> getReadSupport() {
if (isReflect) {
conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);
} else {
conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, enableCompatibility);
}
return new AvroReadSupport<T>(model);
}
}
}
