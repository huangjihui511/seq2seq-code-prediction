package org.pf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.function.BooleanSupplier;
public class CompoundPluginLoader implements PluginLoader {
private static final Logger log = LoggerFactory.getLogger(CompoundPluginLoader.class);
private List<PluginLoader> loaders = new ArrayList<>();
public CompoundPluginLoader add(PluginLoader loader) {
if (loader == null) {
throw new IllegalArgumentException("null not allowed");
}
loaders.add(loader);
return this;
}
public CompoundPluginLoader add(PluginLoader loader, BooleanSupplier condition) {
if (condition.getAsBoolean()) {
return add(loader);
}
return this;
}
public int size() {
return loaders.size();
}
@Override
public boolean isApplicable(Path pluginPath) {
for (PluginLoader loader : loaders) {
if (loader.isApplicable(pluginPath)) {
return true;
}
}
return false;
}
@Override
public ClassLoader loadPlugin(Path pluginPath, PluginDescriptor pluginDescriptor) {
for (PluginLoader loader : loaders) {
if (loader.isApplicable(pluginPath)) {
log.debug("'{}' is applicable for plugin '{}'", loader, pluginPath);
try {
ClassLoader classLoader = loader.loadPlugin(pluginPath, pluginDescriptor);
if (classLoader != null) {
return classLoader;
}
} catch (Exception e) {
log.error(e.getMessage()); 
}
} else {
log.debug("'{}' is not applicable for plugin '{}'", loader, pluginPath);
}
}
throw new RuntimeException("No PluginLoader for plugin '" + pluginPath + "' and descriptor '" + pluginDescriptor + "'");
}
}
