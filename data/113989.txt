package com.flipkart.android.proteus.demo;
import android.content.DialogInterface;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;
import com.flipkart.android.proteus.LayoutManager;
import com.flipkart.android.proteus.ProteusContext;
import com.flipkart.android.proteus.ProteusLayoutInflater;
import com.flipkart.android.proteus.ProteusView;
import com.flipkart.android.proteus.StyleManager;
import com.flipkart.android.proteus.Styles;
import com.flipkart.android.proteus.demo.api.ProteusManager;
import com.flipkart.android.proteus.demo.utils.GlideApp;
import com.flipkart.android.proteus.demo.utils.ImageLoaderTarget;
import com.flipkart.android.proteus.exceptions.ProteusInflateException;
import com.flipkart.android.proteus.value.DrawableValue;
import com.flipkart.android.proteus.value.Layout;
import com.flipkart.android.proteus.value.ObjectValue;
import com.flipkart.android.proteus.value.Value;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.util.Map;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
public class ProteusActivity extends AppCompatActivity implements ProteusManager.Listener {
private ProteusManager proteusManager;
private ProteusLayoutInflater layoutInflater;
ObjectValue data;
Layout layout;
Styles styles;
Map<String, Layout> layouts;
private StyleManager styleManager = new StyleManager() {
@Nullable
@Override
protected Styles getStyles() {
return styles;
}
};
private LayoutManager layoutManager = new LayoutManager() {
@Nullable
@Override
protected Map<String, Layout> getLayouts() {
return layouts;
}
};
private ProteusLayoutInflater.ImageLoader loader = new ProteusLayoutInflater.ImageLoader() {
@Override
public void getBitmap(ProteusView view, String url, final DrawableValue.AsyncCallback callback) {
GlideApp.with(ProteusActivity.this)
.load(url)
.placeholder(R.drawable.placeholder)
.error(R.drawable.image_broken)
.into(new ImageLoaderTarget(callback));
}
};
private ProteusLayoutInflater.Callback callback = new ProteusLayoutInflater.Callback() {
@NonNull
@Override
public ProteusView onUnknownViewType(ProteusContext context, String type, Layout layout, ObjectValue data, int index) {
throw new ProteusInflateException("Unknown view type '" + type + "' cannot be inflated");
}
@Override
public void onEvent(String event, Value value, ProteusView view) {
Log.i("ProteusEvent", value.toString());
}
};
ProteusView view;
private ViewGroup container;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_proteus);
Toolbar toolbar = findViewById(R.id.toolbar);
setSupportActionBar(toolbar);
FloatingActionButton fab = findViewById(R.id.fab);
fab.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View view) {
alert();
}
});
container = findViewById(R.id.content_main);
DemoApplication application = (DemoApplication) getApplication();
proteusManager = application.getProteusManager();
ProteusContext context = proteusManager.getProteus().createContextBuilder(this)
.setLayoutManager(layoutManager)
.setCallback(callback)
.setImageLoader(loader)
.setStyleManager(styleManager)
.build();
layoutInflater = context.getInflater();
}
@Override
protected void onStart() {
super.onStart();
proteusManager.addListener(this);
proteusManager.load();
}
@Override
protected void onPause() {
super.onPause();
proteusManager.removeListener(this);
}
@Override
public boolean onCreateOptionsMenu(Menu menu) {
getMenuInflater().inflate(R.menu.main, menu);
return true;
}
@Override
public boolean onOptionsItemSelected(MenuItem item) {
int id = item.getItemId();
switch (id) {
case R.id.reload:
reload();
return true;
}
return super.onOptionsItemSelected(item);
}
@Override
public void onLoad() {
data = proteusManager.getData();
layout = proteusManager.getRootLayout();
layouts = proteusManager.getLayouts();
styles = proteusManager.getStyles();
render();
}
@Override
public void onError(@NonNull Exception e) {
Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
}
private void alert() {
ProteusView view = layoutInflater.inflate("AlertDialogLayout", data);
AlertDialog.Builder builder = new AlertDialog.Builder(this);
builder.setView(view.getAsView())
.setPositiveButton(R.string.action_alert_ok, new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialogInterface, int i) {
dialogInterface.dismiss();
}
})
.show();
}
void render() {
container.removeAllViews();
long start = System.currentTimeMillis();
view = layoutInflater.inflate(layout, data, container, 0);
System.out.println("inflate time: " + (System.currentTimeMillis() - start));
container.addView(view.getAsView());
}
void reload() {
proteusManager.update();
}
}
