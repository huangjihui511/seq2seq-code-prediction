package it.unimi.dsi.fastutil;
public class HashCommon {
protected HashCommon() {}
private static final int INT_PHI = 0x9E3779B9;
private static final int INV_INT_PHI = 0x144cbc89;
private static final long LONG_PHI = 0x9E3779B97F4A7C15L;
private static final long INV_LONG_PHI = 0xf1de83e19937733dL;
public static int murmurHash3(int x) {
x ^= x >>> 16;
x *= 0x85ebca6b;
x ^= x >>> 13;
x *= 0xc2b2ae35;
x ^= x >>> 16;
return x;
}
public static long murmurHash3(long x) {
x ^= x >>> 33;
x *= 0xff51afd7ed558ccdL;
x ^= x >>> 33;
x *= 0xc4ceb9fe1a85ec53L;
x ^= x >>> 33;
return x;
}
public static int mix(final int x) {
final int h = x * INT_PHI;
return h ^ (h >>> 16);
}
public static int invMix(final int x) {
return (x ^ x >>> 16) * INV_INT_PHI;
}
public static long mix(final long x) {
long h = x * LONG_PHI;
h ^= h >>> 32;
return h ^ (h >>> 16);
}
public static long invMix(long x) {
x ^= x >>> 32;
x ^= x >>> 16;
return (x ^ x >>> 32) * INV_LONG_PHI;
}
public static int float2int(final float f) {
return Float.floatToRawIntBits(f);
}
public static int double2int(final double d) {
final long l = Double.doubleToRawLongBits(d);
return (int)(l ^ (l >>> 32));
}
public static int long2int(final long l) {
return (int)(l ^ (l >>> 32));
}
public static int nextPowerOfTwo(int x) {
if (x == 0) return 1;
x--;
x |= x >> 1;
x |= x >> 2;
x |= x >> 4;
x |= x >> 8;
return (x | x >> 16) + 1;
}
public static long nextPowerOfTwo(long x) {
if (x == 0) return 1;
x--;
x |= x >> 1;
x |= x >> 2;
x |= x >> 4;
x |= x >> 8;
x |= x >> 16;
return (x | x >> 32) + 1;
}
public static int maxFill(final int n, final float f) {
return Math.min((int)Math.ceil(n * f), n - 1);
}
public static long maxFill(final long n, final float f) {
return Math.min((long)Math.ceil(n * f), n - 1);
}
public static int arraySize(final int expected, final float f) {
final long s = Math.max(2, nextPowerOfTwo((long)Math.ceil(expected / f)));
if (s > (1 << 30)) throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor " + f + ")");
return (int)s;
}
public static long bigArraySize(final long expected, final float f) {
return nextPowerOfTwo((long)Math.ceil(expected / f));
}
}
