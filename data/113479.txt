package com.pokegoapi.examples;
import POGOProtos.Enums.PokemonIdOuterClass.PokemonId;
import com.pokegoapi.api.PokemonGo;
import com.pokegoapi.api.pokemon.Evolutions;
import com.pokegoapi.auth.PtcCredentialProvider;
import com.pokegoapi.exceptions.request.RequestFailedException;
import com.pokegoapi.util.Log;
import com.pokegoapi.util.hash.HashProvider;
import okhttp3.OkHttpClient;
import java.util.List;
public class CheckEvolutionExample {
public static void main(String[] args) {
OkHttpClient http = new OkHttpClient();
final PokemonGo api = new PokemonGo(http);
try {
HashProvider hasher = ExampleConstants.getHashProvider();
api.setLocation(ExampleConstants.LATITUDE, ExampleConstants.LONGITUDE, ExampleConstants.ALTITUDE);
api.login(new PtcCredentialProvider(http, ExampleConstants.LOGIN, ExampleConstants.PASSWORD), hasher);
Evolutions evolutionMeta = api.itemTemplates.evolutions;
System.out.println("Evolutions: ");
for (PokemonId pokemon : PokemonId.values()) {
List<PokemonId> evolutions = evolutionMeta.getEvolutions(pokemon);
if (evolutions.size() > 0) {
System.out.println(pokemon + " -> " + evolutions);
}
}
System.out.println();
System.out.println("Most basic: ");
for (PokemonId pokemon : PokemonId.values()) {
List<PokemonId> basic = evolutionMeta.getBasic(pokemon);
if (basic.size() > 0) {
if (!(basic.size() == 1 && basic.contains(pokemon))) {
System.out.println(pokemon + " -> " + basic);
}
}
}
System.out.println();
System.out.println("Highest: ");
for (PokemonId pokemon : PokemonId.values()) {
List<PokemonId> highest = evolutionMeta.getHighest(pokemon);
if (highest.size() > 0) {
if (!(highest.size() == 1 && highest.contains(pokemon))) {
System.out.println(pokemon + " -> " + highest);
}
}
}
} catch (RequestFailedException e) {
Log.e("Main", "Failed to login, captcha or server issue: ", e);
}
}
}
