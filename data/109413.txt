package com.facebook.presto.sql.relational;
import com.facebook.presto.spi.relation.CallExpression;
import com.facebook.presto.spi.relation.ConstantExpression;
import com.facebook.presto.spi.relation.InputReferenceExpression;
import com.facebook.presto.spi.relation.LambdaDefinitionExpression;
import com.facebook.presto.spi.relation.RowExpression;
import com.facebook.presto.spi.relation.RowExpressionVisitor;
import com.facebook.presto.spi.relation.SpecialFormExpression;
import com.facebook.presto.spi.relation.VariableReferenceExpression;
import com.google.common.collect.ImmutableList;
import java.util.Map;
import static com.facebook.presto.sql.relational.Expressions.call;
import static com.facebook.presto.sql.relational.Expressions.field;
import static com.google.common.collect.Iterables.getOnlyElement;
import static com.google.common.collect.Maps.filterKeys;
public final class VariableToChannelTranslator
{
private VariableToChannelTranslator() {}
public static RowExpression translate(RowExpression expression, Map<VariableReferenceExpression, Integer> layout)
{
return expression.accept(new Visitor(), layout);
}
private static class Visitor
implements RowExpressionVisitor<RowExpression, Map<VariableReferenceExpression, Integer>>
{
@Override
public RowExpression visitInputReference(InputReferenceExpression input, Map<VariableReferenceExpression, Integer> layout)
{
throw new UnsupportedOperationException("encountered already-translated symbols");
}
@Override
public RowExpression visitCall(CallExpression call, Map<VariableReferenceExpression, Integer> layout)
{
ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();
call.getArguments().forEach(argument -> arguments.add(argument.accept(this, layout)));
return call(call.getDisplayName(), call.getFunctionHandle(), call.getType(), arguments.build());
}
@Override
public RowExpression visitConstant(ConstantExpression literal, Map<VariableReferenceExpression, Integer> layout)
{
return literal;
}
@Override
public RowExpression visitLambda(LambdaDefinitionExpression lambda, Map<VariableReferenceExpression, Integer> layout)
{
return new LambdaDefinitionExpression(lambda.getArgumentTypes(), lambda.getArguments(), lambda.getBody().accept(this, layout));
}
@Override
public RowExpression visitVariableReference(VariableReferenceExpression reference, Map<VariableReferenceExpression, Integer> layout)
{
Map<VariableReferenceExpression, Integer> candidate = filterKeys(layout, variable -> variable.getName().equals(reference.getName()));
if (!candidate.isEmpty()) {
return field(getOnlyElement(candidate.values()), reference.getType());
}
return reference;
}
@Override
public RowExpression visitSpecialForm(SpecialFormExpression specialForm, Map<VariableReferenceExpression, Integer> layout)
{
ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();
specialForm.getArguments().forEach(argument -> arguments.add(argument.accept(this, layout)));
return new SpecialFormExpression(specialForm.getForm(), specialForm.getType(), arguments.build());
}
}
}
