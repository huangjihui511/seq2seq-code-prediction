package org.deeplearning4j.models.embeddings.reader.impl;
import org.deeplearning4j.models.embeddings.inmemory.InMemoryLookupTable;
import org.deeplearning4j.models.sequencevectors.sequence.SequenceElement;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.ops.transforms.Transforms;
import org.nd4j.linalg.primitives.Counter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Collection;
public class FlatModelUtils<T extends SequenceElement> extends BasicModelUtils<T> {
private static final Logger log = LoggerFactory.getLogger(FlatModelUtils.class);
public FlatModelUtils() {
}
@Override
public Collection<String> wordsNearest(String label, int n) {
Collection<String> collection = wordsNearest(lookupTable.vector(label), n);
if (collection.contains(label))
collection.remove(label);
return collection;
}
@Override
public Collection<String> wordsNearest(INDArray words, int top) {
Counter<String> distances = new Counter<>();
words = adjustRank(words);
for (String s : vocabCache.words()) {
INDArray otherVec = lookupTable.vector(s);
double sim = Transforms.cosineSim(Transforms.unitVec(words.dup()), Transforms.unitVec(otherVec.dup()));
distances.incrementCount(s, (float) sim);
}
distances.keepTopNElements(top);
return distances.keySetSorted();
}
}
