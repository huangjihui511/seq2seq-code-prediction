package org.apache.struts2.jasper.runtime;
import javax.servlet.ServletConfig;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.tagext.Tag;
import org.apache.struts2.jasper.Constants;
import org.apache.juli.logging.Log;
import org.apache.juli.logging.LogFactory;
import org.apache.tomcat.InstanceManager;
public class TagHandlerPool {
private Tag[] handlers;
public static String OPTION_TAGPOOL="tagpoolClassName";
public static String OPTION_MAXSIZE="tagpoolMaxSize";
private Log log = LogFactory.getLog(TagHandlerPool.class);
private int current;
protected InstanceManager instanceManager = null;
public static TagHandlerPool getTagHandlerPool( ServletConfig config) {
TagHandlerPool result=null;
String tpClassName=getOption( config, OPTION_TAGPOOL, null);
if( tpClassName != null ) {
try {
Class c=Class.forName( tpClassName );
result=(TagHandlerPool)c.newInstance();
} catch (Exception e) {
e.printStackTrace();
result=null;
}
}
if( result==null ) result=new TagHandlerPool();
result.init(config);
return result;
}
protected void init( ServletConfig config ) {
int maxSize=-1;
String maxSizeS=getOption(config, OPTION_MAXSIZE, null);
if( maxSizeS != null ) {
try {
maxSize=Integer.parseInt(maxSizeS);
} catch( Exception ex) {
maxSize=-1;
}
}
if( maxSize <0  ) {
maxSize=Constants.MAX_POOL_SIZE;
}
this.handlers = new Tag[maxSize];
this.current = -1;
this.instanceManager = InstanceHelper.getServletInstanceManager(config);
}
public TagHandlerPool() {
}
public TagHandlerPool(int capacity) {
this.handlers = new Tag[capacity];
this.current = -1;
}
public Tag get(Class handlerClass) throws JspException {
Tag handler = null;
synchronized( this ) {
if (current >= 0) {
handler = handlers[current--];
return handler;
}
}
try {
final Tag instance = (Tag) handlerClass.newInstance();
if (instanceManager != null) {
InstanceHelper.postConstruct(instanceManager, instance);
}
return instance;
} catch (Exception e) {
throw new JspException(e.getMessage(), e);
}
}
public void reuse(Tag handler) {
synchronized( this ) {
if (current < (handlers.length - 1)) {
handlers[++current] = handler;
return;
}
}
handler.release();
if (instanceManager != null) {
try {
InstanceHelper.preDestroy(instanceManager, handler);
} catch (Exception e) {
log.warn("Error processing preDestroy on tag instance of "
+ handler.getClass().getName(), e);
}
}
}
public synchronized void release() {
for (int i = current; i >= 0; i--) {
handlers[i].release();
if (instanceManager != null) {
try {
InstanceHelper.preDestroy(instanceManager, handlers[i]);
} catch (Exception e) {
log.warn("Error processing preDestroy on tag instance of "
+ handlers[i].getClass().getName(), e);
}
}
}
}
protected static String getOption( ServletConfig config, String name, String defaultV) {
if( config == null ) return defaultV;
String value=config.getInitParameter(name);
if( value != null ) return value;
if( config.getServletContext() ==null )
return defaultV;
value=config.getServletContext().getInitParameter(name);
if( value!=null ) return value;
return defaultV;
}
}
