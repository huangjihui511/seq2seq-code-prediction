package org.jsoup.helper;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.jupiter.api.Test;
import java.io.*;
import java.nio.charset.StandardCharsets;
import static org.jsoup.integration.ParseTest.getFile;
import static org.junit.jupiter.api.Assertions.*;
public class DataUtilTest {
@Test
public void testCharset() {
assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 "));
assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=UTF-8"));
assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1"));
assertNull(DataUtil.getCharsetFromContentType("text/html"));
assertNull(DataUtil.getCharsetFromContentType(null));
assertNull(DataUtil.getCharsetFromContentType("text/html;charset=Unknown"));
}
@Test
public void testQuotedCharset() {
assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\""));
assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\""));
assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\""));
assertNull(DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""));
assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset='UTF-8'"));
}
private InputStream stream(String data) {
return new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));
}
private InputStream stream(String data, String charset) {
try {
return new ByteArrayInputStream(data.getBytes(charset));
} catch (UnsupportedEncodingException e) {
fail();
}
return null;
}
@Test
public void discardsSpuriousByteOrderMark() throws IOException {
String html = "\uFEFF<html><head><title>One</title></head><body>Two</body></html>";
Document doc = DataUtil.parseInputStream(stream(html), "UTF-8", "http:
assertEquals("One", doc.head().text());
}
@Test
public void discardsSpuriousByteOrderMarkWhenNoCharsetSet() throws IOException {
String html = "\uFEFF<html><head><title>One</title></head><body>Two</body></html>";
Document doc = DataUtil.parseInputStream(stream(html), null, "http:
assertEquals("One", doc.head().text());
assertEquals("UTF-8", doc.outputSettings().charset().displayName());
}
@Test
public void shouldNotThrowExceptionOnEmptyCharset() {
assertNull(DataUtil.getCharsetFromContentType("text/html; charset="));
assertNull(DataUtil.getCharsetFromContentType("text/html; charset=;"));
}
@Test
public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() {
assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1, charset=1251"));
}
@Test
public void shouldCorrectCharsetForDuplicateCharsetString() {
assertEquals("iso-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=charset=iso-8859-1"));
}
@Test
public void shouldReturnNullForIllegalCharsetNames() {
assertNull(DataUtil.getCharsetFromContentType("text/html; charset=$HJKDF§$/("));
}
@Test
public void generatesMimeBoundaries() {
String m1 = DataUtil.mimeBoundary();
String m2 = DataUtil.mimeBoundary();
assertEquals(DataUtil.boundaryLength, m1.length());
assertEquals(DataUtil.boundaryLength, m2.length());
assertNotSame(m1, m2);
}
@Test
public void wrongMetaCharsetFallback() throws IOException {
String html = "<html><head><meta charset=iso-8></head><body></body></html>";
Document doc = DataUtil.parseInputStream(stream(html), null, "http:
final String expected = "<html>\n" +
" <head>\n" +
"  <meta charset=\"iso-8\">\n" +
" </head>\n" +
" <body></body>\n" +
"</html>";
assertEquals(expected, doc.toString());
}
@Test
public void secondMetaElementWithContentTypeContainsCharsetParameter() throws Exception {
String html = "<html><head>" +
"<meta http-equiv=\"Content-Type\" content=\"text/html\">" +
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=euc-kr\">" +
"</head><body>한국어</body></html>";
Document doc = DataUtil.parseInputStream(stream(html, "euc-kr"), null, "http:
assertEquals("한국어", doc.body().text());
}
@Test
public void firstMetaElementWithCharsetShouldBeUsedForDecoding() throws Exception {
String html = "<html><head>" +
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">" +
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=koi8-u\">" +
"</head><body>Übergrößenträger</body></html>";
Document doc = DataUtil.parseInputStream(stream(html, "iso-8859-1"), null, "http:
assertEquals("Übergrößenträger", doc.body().text());
}
@Test
public void supportsBOMinFiles() throws IOException {
File in = getFile("/bomtests/bom_utf16be.html");
Document doc = Jsoup.parse(in, null, "http:
assertTrue(doc.title().contains("UTF-16BE"));
assertTrue(doc.text().contains("가각갂갃간갅"));
in = getFile("/bomtests/bom_utf16le.html");
doc = Jsoup.parse(in, null, "http:
assertTrue(doc.title().contains("UTF-16LE"));
assertTrue(doc.text().contains("가각갂갃간갅"));
in = getFile("/bomtests/bom_utf32be.html");
doc = Jsoup.parse(in, null, "http:
assertTrue(doc.title().contains("UTF-32BE"));
assertTrue(doc.text().contains("가각갂갃간갅"));
in = getFile("/bomtests/bom_utf32le.html");
doc = Jsoup.parse(in, null, "http:
assertTrue(doc.title().contains("UTF-32LE"));
assertTrue(doc.text().contains("가각갂갃간갅"));
}
@Test
public void supportsUTF8BOM() throws IOException {
File in = getFile("/bomtests/bom_utf8.html");
Document doc = Jsoup.parse(in, null, "http:
assertEquals("OK", doc.head().select("title").text());
}
@Test
public void supportsZippedUTF8BOM() throws IOException {
File in = getFile("/bomtests/bom_utf8.html.gz");
Document doc = Jsoup.parse(in, null, "http:
assertEquals("OK", doc.head().select("title").text());
assertEquals("There is a UTF8 BOM at the top (before the XML decl). If not read correctly, will look like a non-joining space.", doc.body().text());
}
@Test
public void supportsXmlCharsetDeclaration() throws IOException {
String encoding = "iso-8859-1";
InputStream soup = new ByteArrayInputStream((
"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" +
"<!DOCTYPE html PUBLIC \"-
"<html xmlns=\"http:
).getBytes(encoding));
Document doc = Jsoup.parse(soup, null, "");
assertEquals("Hellö Wörld!", doc.body().text());
}
@Test
public void lLoadsGzipFile() throws IOException {
File in = getFile("/htmltests/gzip.html.gz");
Document doc = Jsoup.parse(in, null);
assertEquals("Gzip test", doc.title());
assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text());
}
@Test
public void loadsZGzipFile() throws IOException {
File in = getFile("/htmltests/gzip.html.z");
Document doc = Jsoup.parse(in, null);
assertEquals("Gzip test", doc.title());
assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text());
}
@Test
public void handlesFakeGzipFile() throws IOException {
File in = getFile("/htmltests/fake-gzip.html.gz");
Document doc = Jsoup.parse(in, null);
assertEquals("This is not gzipped", doc.title());
assertEquals("And should still be readable.", doc.selectFirst("p").text());
}
}
