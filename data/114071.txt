package org.apache.parquet.thrift.struct;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.thrift.TBase;
import org.apache.parquet.thrift.ThriftSchemaConverter;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
public class CompatibilityRunner {
public static void main(String[] args) throws Exception {
LinkedList<String> arguments = new LinkedList<String>(Arrays.asList(args));
String operator = arguments.pollFirst();
if (operator.equals("generate-json")) {
generateJson(arguments);
}
if (operator.equals("compare-json")) {
compareJson(arguments);
}
}
private static void compareJson(LinkedList<String> arguments) throws IOException {
String oldJsonPath = arguments.pollFirst();
String newJsonPath = arguments.pollFirst();
File oldJsonFile = new File(oldJsonPath);
checkExist(oldJsonFile);
File newJsonFile = new File(newJsonPath);
checkExist(newJsonFile);
ObjectMapper mapper = new ObjectMapper();
ThriftType.StructType oldStruct = mapper.readValue(oldJsonFile, ThriftType.StructType.class);
ThriftType.StructType newStruct = mapper.readValue(newJsonFile, ThriftType.StructType.class);
CompatibilityReport report = new CompatibilityChecker().checkCompatibility(oldStruct, newStruct);
if (!report.isCompatible) {
System.err.println("schema not compatible");
System.err.println(report.getMessages());
System.exit(1);
}
if (report.hasEmptyStruct()) {
System.err.println("schema contains empty struct");
System.err.println(report.getMessages());
System.exit(1);
}
System.out.println("[success] schema is compatible");
}
private static void checkExist(File f) {
if (!f.exists())
throw new RuntimeException("can not find file " + f);
}
private static void generateJson(LinkedList<String> arguments) throws ClassNotFoundException, IOException {
String catName = arguments.pollFirst();
String className = arguments.pollFirst();
String storedPath = arguments.pollFirst();
File storeDir = new File(storedPath);
ThriftType.StructType structType = ThriftSchemaConverter.toStructType((Class<? extends TBase<?, ?>>) Class.forName(className));
ObjectMapper mapper = new ObjectMapper();
String fileName = catName + ".json";
mapper.writerWithDefaultPrettyPrinter().writeValue(new File(storeDir, fileName), structType);
}
}
