package org.mockito.internal.stubbing.answers;
import static org.mockito.internal.exceptions.Reporter.invalidArgumentPositionRangeAtInvocationTime;
import static org.mockito.internal.exceptions.Reporter.invalidArgumentRangeAtIdentityAnswerCreationTime;
import static org.mockito.internal.exceptions.Reporter.wrongTypeOfArgumentToReturn;
import java.io.Serializable;
import java.lang.reflect.Method;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.stubbing.ValidableAnswer;
public class ReturnsArgumentAt implements Answer<Object>, ValidableAnswer, Serializable {
private static final long serialVersionUID = -589315085166295101L;
public static final int LAST_ARGUMENT = -1;
private final int wantedArgumentPosition;
public ReturnsArgumentAt(int wantedArgumentPosition) {
if (wantedArgumentPosition != LAST_ARGUMENT && wantedArgumentPosition < 0) {
throw invalidArgumentRangeAtIdentityAnswerCreationTime();
}
this.wantedArgumentPosition = wantedArgumentPosition;
}
@Override
public Object answer(InvocationOnMock invocation) throws Throwable {
int argumentPosition = inferWantedArgumentPosition(invocation);
validateIndexWithinInvocationRange(invocation, argumentPosition);
if (wantedArgIndexIsVarargAndSameTypeAsReturnType(invocation.getMethod(), argumentPosition)) {
return ((Invocation) invocation).getRawArguments()[argumentPosition];
}
return invocation.getArgument(argumentPosition);
}
@Override
public void validateFor(InvocationOnMock invocation) {
int argumentPosition = inferWantedArgumentPosition(invocation);
validateIndexWithinInvocationRange(invocation, argumentPosition);
validateArgumentTypeCompatibility((Invocation) invocation, argumentPosition);
}
private int inferWantedArgumentPosition(InvocationOnMock invocation) {
if (wantedArgumentPosition == LAST_ARGUMENT)
return invocation.getArguments().length - 1;
return wantedArgumentPosition;
}
private void validateIndexWithinInvocationRange(InvocationOnMock invocation, int argumentPosition) {
if (!wantedArgumentPositionIsValidForInvocation(invocation, argumentPosition)) {
throw invalidArgumentPositionRangeAtInvocationTime(invocation,
wantedArgumentPosition == LAST_ARGUMENT,
wantedArgumentPosition);
}
}
private void validateArgumentTypeCompatibility(Invocation invocation, int argumentPosition) {
InvocationInfo invocationInfo = new InvocationInfo(invocation);
Class<?> inferredArgumentType = inferArgumentType(invocation, argumentPosition);
if (!invocationInfo.isValidReturnType(inferredArgumentType)){
throw wrongTypeOfArgumentToReturn(invocation,
invocationInfo.printMethodReturnType(),
inferredArgumentType,
wantedArgumentPosition);
}
}
private boolean wantedArgIndexIsVarargAndSameTypeAsReturnType(Method method, int argumentPosition) {
Class<?>[] parameterTypes = method.getParameterTypes();
return method.isVarArgs() &&
argumentPosition == /* vararg index */ parameterTypes.length - 1 &&
method.getReturnType().isAssignableFrom(parameterTypes[argumentPosition]);
}
private boolean wantedArgumentPositionIsValidForInvocation(InvocationOnMock invocation, int argumentPosition) {
if (argumentPosition < 0) {
return false;
}
if (!invocation.getMethod().isVarArgs()) {
return invocation.getArguments().length > argumentPosition;
}
return true;
}
private Class<?> inferArgumentType(Invocation invocation, int argumentIndex) {
Class<?>[] parameterTypes = invocation.getMethod().getParameterTypes();
if (!invocation.getMethod().isVarArgs()) {
Class<?> argumentType = parameterTypes[argumentIndex];
Object argumentValue = invocation.getArgument(argumentIndex);
if (argumentType.isPrimitive() || argumentValue == null) {
return argumentType;
}
return argumentValue.getClass();
}
int varargIndex = parameterTypes.length - 1; 
if (argumentIndex < varargIndex) {
return parameterTypes[argumentIndex];
}
if (wantedArgIndexIsVarargAndSameTypeAsReturnType(invocation.getMethod(), argumentIndex)) {
return parameterTypes[argumentIndex]; 
}
return parameterTypes[varargIndex].getComponentType();
}
}
