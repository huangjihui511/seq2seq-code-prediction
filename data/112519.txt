import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import javax.swing.BorderFactory;
import javax.swing.BoundedRangeModel;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.border.BevelBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jb2011.lnf.beautyeye.widget.N9ComponentFactory;
public class SliderDemo extends DemoModule {
public static void main(String[] args) {
SliderDemo demo = new SliderDemo(null);
demo.mainImpl();
}
@Override public String getName() {
return "Slider";
};
public SliderDemo(SwingSet2 swingset) {
super(swingset, "SliderDemo"
, "toolbar/JSlider.gif");
createSliderDemo();
}
public void createSliderDemo() {
JSlider s;
JPanel hp;
JPanel vp;
GridLayout g;
JPanel tp;
JLabel tf;
ChangeListener listener;
getDemoPanel().setLayout(new BorderLayout());
tf = new JLabel(getString("SliderDemo.slidervalue"));
getDemoPanel().add(tf, BorderLayout.SOUTH);
tp = new JPanel();
g = new GridLayout(1, 2);
g.setHgap(5);
g.setVgap(5);
tp.setLayout(g);
getDemoPanel().add(tp, BorderLayout.CENTER);
listener = new SliderListener(tf);
BevelBorder border = new BevelBorder(BevelBorder.LOWERED);
hp = N9ComponentFactory.createPanel_style1();
hp.setLayout(new BoxLayout(hp, BoxLayout.Y_AXIS));
tp.add(hp);
vp = N9ComponentFactory.createPanel_style1();
vp.setLayout(new BoxLayout(vp, BoxLayout.X_AXIS));
tp.add(vp);
JPanel p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
s = new JSlider(-10, 100, 20);
s.setAlignmentX(Component.LEFT_ALIGNMENT);
s.getAccessibleContext().setAccessibleName(getString("SliderDemo.plain"));
s.getAccessibleContext().setAccessibleDescription(getString("SliderDemo.a_plain_slider"));
s.addChangeListener(listener);
createHorizonalHintBox(p,s,getString("SliderDemo.plain"));
p.add(Box.createRigidArea(VGAP5));
p.add(s);
p.add(Box.createRigidArea(VGAP5));
hp.add(p);
hp.add(Box.createRigidArea(VGAP10));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
s = new JSlider(100, 1000, 400);
s.setPaintTicks(true);
s.setMajorTickSpacing(100);
s.getAccessibleContext().setAccessibleName(getString("SliderDemo.majorticks"));
s.getAccessibleContext().setAccessibleDescription(getString("SliderDemo.majorticksdescription"));
s.addChangeListener(listener);
createHorizonalHintBox(p,s,getString("SliderDemo.majorticks"));
p.add(Box.createRigidArea(VGAP5));
p.add(s);
p.add(Box.createRigidArea(VGAP5));
hp.add(p);
hp.add(Box.createRigidArea(VGAP10));
p = new JPanel();
p.setAlignmentX(Component.LEFT_ALIGNMENT);
p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
s = new JSlider(0, 11, 6);
s.putClientProperty("JSlider.isFilled", Boolean.TRUE );
s.setPaintTicks(true);
s.setMajorTickSpacing(5);
s.setMinorTickSpacing(1);
s.setPaintLabels( true );
s.setSnapToTicks( true );
s.getLabelTable().put(new Integer(11), new JLabel(new Integer(11).toString(), JLabel.CENTER));
s.setLabelTable( s.getLabelTable() );
s.getAccessibleContext().setAccessibleName(getString("SliderDemo.minorticks"));
s.getAccessibleContext().setAccessibleDescription(getString("SliderDemo.minorticksdescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(VGAP5));
p.add(s);
p.add(Box.createRigidArea(VGAP5));
hp.add(p);
hp.add(Box.createRigidArea(VGAP10));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
BoundedRangeModel brm = new DefaultBoundedRangeModel(80, 0, 0, 100);
s = new JSlider(brm);
s.setPaintTicks(true);
s.setMajorTickSpacing(20);
s.setMinorTickSpacing(5);
s.setEnabled(false);
s.getAccessibleContext().setAccessibleName(getString("SliderDemo.disabled"));
s.getAccessibleContext().setAccessibleDescription(getString("SliderDemo.disableddescription"));
s.addChangeListener(listener);
createHorizonalHintBox(p,s,getString("SliderDemo.disabled"));
p.add(Box.createRigidArea(VGAP5));
p.add(s);
p.add(Box.createRigidArea(VGAP5));
hp.add(p);
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
s = new JSlider(JSlider.VERTICAL, -10, 100, 20);
s.getAccessibleContext().setAccessibleName(getString("SliderDemo.plain"));
s.getAccessibleContext().setAccessibleDescription(getString("SliderDemo.a_plain_slider"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(HGAP10));
p.add(createVerticalHintBox(s,getString("SliderDemo.plain")));
p.add(Box.createRigidArea(HGAP10));
vp.add(p);
vp.add(Box.createRigidArea(HGAP5));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
s = new JSlider(JSlider.VERTICAL, 100, 1000, 400);
s.putClientProperty( "JSlider.isFilled", Boolean.TRUE );
s.setPaintTicks(true);
s.setMajorTickSpacing(100);
s.getAccessibleContext().setAccessibleName(getString("SliderDemo.majorticks"));
s.getAccessibleContext().setAccessibleDescription(getString("SliderDemo.majorticksdescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(HGAP25));
p.add(createVerticalHintBox(s,getString("SliderDemo.majorticks")));
p.add(Box.createRigidArea(HGAP20));
vp.add(p);
vp.add(Box.createRigidArea(HGAP5));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
s = new JSlider(JSlider.VERTICAL, 0, 100, 60);
s.setPaintTicks(true);
s.setMajorTickSpacing(20);
s.setMinorTickSpacing(5);
s.setPaintLabels( true );
s.getAccessibleContext().setAccessibleName(getString("SliderDemo.minorticks"));
s.getAccessibleContext().setAccessibleDescription(getString("SliderDemo.minorticksdescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(HGAP10));
p.add(createVerticalHintBox(s,getString("SliderDemo.minorticks")));
p.add(Box.createRigidArea(HGAP5));
vp.add(p);
vp.add(Box.createRigidArea(HGAP5));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
s = new JSlider(JSlider.VERTICAL, 0, 100, 80);
s.setPaintTicks(true);
s.setMajorTickSpacing(20);
s.setMinorTickSpacing(5);
s.setEnabled(false);
s.getAccessibleContext().setAccessibleName(getString("SliderDemo.disabled"));
s.getAccessibleContext().setAccessibleDescription(getString("SliderDemo.disableddescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(HGAP20));
p.add(createVerticalHintBox(s,getString("SliderDemo.disabled")));
p.add(Box.createRigidArea(HGAP5));
vp.add(p);
}
class SliderListener implements ChangeListener {
JLabel tf;
public SliderListener(JLabel f) {
tf = f;
}
public void stateChanged(ChangeEvent e) {
JSlider s1 = (JSlider)e.getSource();
tf.setText(getString("SliderDemo.slidervalue") + s1.getValue());
}
}
public static void createHorizonalHintBox(JPanel parent,JComponent c, String txt)
{
parent.setAlignmentX(Component.LEFT_ALIGNMENT);
parent.setBorder(BorderFactory.createEmptyBorder(10, 10, 0, 5));
c.setAlignmentX(Component.LEFT_ALIGNMENT);
JLabel l1 = N9ComponentFactory.createLabel_style3(txt);
l1.setAlignmentX(Component.LEFT_ALIGNMENT);
parent.add(l1);
}
public static JPanel createVerticalHintBox(JComponent c, String txt)
{
JPanel p = new JPanel();
p.setOpaque(false);
p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
JLabel l1 = N9ComponentFactory.createLabel_style3(txt);
l1.setAlignmentX(Component.CENTER_ALIGNMENT);
p.add(l1);
c.setAlignmentX(Component.CENTER_ALIGNMENT);
p.add(c);
p.setBorder(BorderFactory.createEmptyBorder(10, 0, 5, 0));
return p;
}
}
