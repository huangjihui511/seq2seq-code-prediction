package org.apache.struts2.jasper.servlet;
import com.opensymphony.xwork2.util.finder.ClassLoaderInterface;
import com.opensymphony.xwork2.ActionContext;
import java.io.File;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.EventListener;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import javax.servlet.Filter;
import javax.servlet.FilterRegistration;
import javax.servlet.RequestDispatcher;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration;
import javax.servlet.SessionCookieConfig;
import javax.servlet.SessionTrackingMode;
import javax.servlet.descriptor.JspConfigDescriptor;
import org.apache.struts2.ServletActionContext;
public class JspCServletContext implements ServletContext {
protected Hashtable myAttributes;
protected PrintWriter myLogWriter;
private ClassLoaderInterface classLoaderInterface;
public JspCServletContext(PrintWriter aLogWriter, ClassLoaderInterface classLoaderInterface) {
myAttributes = new Hashtable();
myLogWriter = aLogWriter;
this.classLoaderInterface = classLoaderInterface;
}
public Object getAttribute(String name) {
return (myAttributes.get(name));
}
public Enumeration getAttributeNames() {
return (myAttributes.keys());
}
public ServletContext getContext(String uripath) {
return (null);
}
public String getContextPath() {
return (null);
}
public String getInitParameter(String name) {
return (null);
}
public Enumeration getInitParameterNames() {
return (new Vector().elements());
}
public int getMajorVersion() {
return (2);
}
public String getMimeType(String file) {
return (null);
}
public int getMinorVersion() {
return (3);
}
public RequestDispatcher getNamedDispatcher(String name) {
return (null);
}
public String getRealPath(String path) {
try {
return
(getResource(path).getFile().replace('/', File.separatorChar));
} catch (Throwable t) {
return (null);
}
}
public RequestDispatcher getRequestDispatcher(String path) {
return (null);
}
public URL getResource(String path) throws MalformedURLException {
if ("/WEB-INF/web.xml".equals(path)) {
if (ActionContext.getContext() != null) {
ServletContext context = ServletActionContext.getServletContext();
return context.getResource(path);
}
return null;
}
return classLoaderInterface.getResource(path);
}
public InputStream getResourceAsStream(String path) {
try {
return classLoaderInterface.getResourceAsStream(path);
} catch (Throwable t) {
return (null);
}
}
public Set getResourcePaths(String path) {
Set thePaths = new HashSet();
if (!path.endsWith("/"))
path += "/";
String basePath = getRealPath(path);
if (basePath == null)
return (thePaths);
File theBaseDir = new File(basePath);
if (!theBaseDir.exists() || !theBaseDir.isDirectory())
return (thePaths);
String theFiles[] = theBaseDir.list();
for (int i = 0; i < theFiles.length; i++) {
File testFile = new File(basePath + File.separator + theFiles[i]);
if (testFile.isFile())
thePaths.add(path + theFiles[i]);
else if (testFile.isDirectory())
thePaths.add(path + theFiles[i] + "/");
}
return (thePaths);
}
public String getServerInfo() {
return ("JspCServletContext/1.0");
}
public Servlet getServlet(String name) throws ServletException {
return (null);
}
public String getServletContextName() {
return (getServerInfo());
}
public Enumeration getServletNames() {
return (new Vector().elements());
}
public Enumeration getServlets() {
return (new Vector().elements());
}
public void log(String message) {
myLogWriter.println(message);
}
public void log(Exception exception, String message) {
log(message, exception);
}
public void log(String message, Throwable exception) {
myLogWriter.println(message);
exception.printStackTrace(myLogWriter);
}
public void removeAttribute(String name) {
myAttributes.remove(name);
}
public void setAttribute(String name, Object value) {
myAttributes.put(name, value);
}
@Override
public int getEffectiveMajorVersion() {
return (2);
}
@Override
public int getEffectiveMinorVersion() {
return (3);
}
@Override
public boolean setInitParameter(String arg0, String arg1) {
return (false);
}
@Override
public ServletRegistration.Dynamic addServlet(String arg0, String arg1) {
return (null);
}
@Override
public ServletRegistration.Dynamic addServlet(String arg0, Servlet arg1) {
return (null);
}
@Override
public ServletRegistration.Dynamic addServlet(String arg0, Class<? extends Servlet> arg1) {
return (null);
}
@Override
public <T extends Servlet> T createServlet(Class<T> arg0) throws ServletException {
return (null);
}
@Override
public ServletRegistration getServletRegistration(String arg0) {
return (null);
}
@Override
public Map<String, ? extends ServletRegistration> getServletRegistrations() {
return (null);
}
@Override
public FilterRegistration.Dynamic addFilter(String arg0, String arg1) {
return (null);
}
@Override
public FilterRegistration.Dynamic addFilter(String arg0, Filter arg1) {
return (null);
}
@Override
public FilterRegistration.Dynamic addFilter(String arg0, Class<? extends Filter> arg1) {
return (null);
}
@Override
public <T extends Filter> T createFilter(Class<T> arg0) throws ServletException {
return (null);
}
@Override
public FilterRegistration getFilterRegistration(String arg0) {
return (null);
}
@Override
public Map<String, ? extends FilterRegistration> getFilterRegistrations() {
return (null);
}
@Override
public SessionCookieConfig getSessionCookieConfig() {
return (null);
}
@Override
public void setSessionTrackingModes(Set<SessionTrackingMode> arg0) {
return;
}
@Override
public Set<SessionTrackingMode> getDefaultSessionTrackingModes() {
return (null);
}
@Override
public Set<SessionTrackingMode> getEffectiveSessionTrackingModes() {
return (null);
}
@Override
public void addListener(String arg0) {
return;
}
@Override
public <T extends EventListener> void addListener(T arg0) {
return;
}
@Override
public void addListener(Class<? extends EventListener> arg0) {
return;
}
@Override
public <T extends EventListener> T createListener(Class<T> arg0) throws ServletException {
return (null);
}
@Override
public JspConfigDescriptor getJspConfigDescriptor() {
return (null);
}
@Override
public ClassLoader getClassLoader() {
return (null);
}
@Override
public void declareRoles(String... arg0) {
return;
}
@Override
public String getVirtualServerName() {
return ("JspCServletContext_VirtualServer");
}
}
