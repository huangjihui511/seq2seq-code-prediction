package com.github.benmanes.caffeine.jcache.expiry;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import java.util.Optional;
import java.util.OptionalLong;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import javax.cache.configuration.CacheEntryListenerConfiguration;
import javax.cache.configuration.MutableCacheEntryListenerConfiguration;
import javax.cache.event.CacheEntryRemovedListener;
import org.mockito.Mockito;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import com.github.benmanes.caffeine.cache.Expiry;
import com.github.benmanes.caffeine.jcache.AbstractJCacheTest;
import com.github.benmanes.caffeine.jcache.configuration.CaffeineConfiguration;
import com.google.common.util.concurrent.MoreExecutors;
@Test(singleThreaded = true)
@SuppressWarnings("unchecked")
public class JCacheExpiryAndMaximumSizeTest extends AbstractJCacheTest {
private static final long ONE_MINUTE = TimeUnit.MINUTES.toNanos(1);
private static final int MAXIMUM = 10;
private Expiry<Integer, Integer> expiry = Mockito.mock(Expiry.class);
private final AtomicInteger removed = new AtomicInteger();
@BeforeMethod
public void setup() {
Mockito.reset(expiry);
when(expiry.expireAfterCreate(anyInt(), anyInt(), anyLong())).thenReturn(ONE_MINUTE);
when(expiry.expireAfterUpdate(anyInt(), anyInt(), anyLong(), anyLong())).thenReturn(ONE_MINUTE);
when(expiry.expireAfterRead(anyInt(), anyInt(), anyLong(), anyLong())).thenReturn(ONE_MINUTE);
}
@Override
protected CaffeineConfiguration<Integer, Integer> getConfiguration() {
CacheEntryRemovedListener<Integer, Integer> listener = events -> removed.incrementAndGet();
CaffeineConfiguration<Integer, Integer> configuration = new CaffeineConfiguration<>();
configuration.setMaximumSize(OptionalLong.of(MAXIMUM));
CacheEntryListenerConfiguration<Integer, Integer> listenerConfiguration =
new MutableCacheEntryListenerConfiguration<>(() -> listener,
configuration.addCacheEntryListenerConfiguration(listenerConfiguration);
configuration.setExecutorFactory(MoreExecutors::directExecutor);
configuration.setExpiryFactory(Optional.of(() -> expiry));
configuration.setTickerFactory(() -> ticker::read);
return configuration;
}
@Test
public void expiry() {
jcache.put(KEY_1, VALUE_1);
verify(expiry, times(1)).expireAfterCreate(anyInt(), anyInt(), anyLong());
jcache.put(KEY_1, VALUE_2);
verify(expiry).expireAfterUpdate(anyInt(), anyInt(), anyLong(), anyLong());
jcache.get(KEY_1);
verify(expiry).expireAfterRead(anyInt(), anyInt(), anyLong(), anyLong());
}
@Test
public void size() {
for (int i = 0; i < 2 * MAXIMUM; i++) {
jcache.put(i, i);
}
assertThat(removed.get(), is(MAXIMUM));
}
}
