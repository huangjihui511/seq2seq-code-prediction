package com.JUtils.base;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class StringUtils {
public static String changeToFull(String str) {
String source = "1234567890!@#$%^&*()abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_=+\\|[];:'\",<.>/?";
String[] decode = { "１", "２", "３", "４", "５", "６", "７", "８", "９", "０",
"！", "＠", "＃", "＄", "％", "︿", "＆", "＊", "（", "）", "ａ", "ｂ",
"ｃ", "ｄ", "ｅ", "ｆ", "ｇ", "ｈ", "ｉ", "ｊ", "ｋ", "ｌ", "ｍ", "ｎ",
"ｏ", "ｐ", "ｑ", "ｒ", "ｓ", "ｔ", "ｕ", "ｖ", "ｗ", "ｘ", "ｙ", "ｚ",
"Ａ", "Ｂ", "Ｃ", "Ｄ", "Ｅ", "Ｆ", "Ｇ", "Ｈ", "Ｉ", "Ｊ", "Ｋ", "Ｌ",
"Ｍ", "Ｎ", "Ｏ", "Ｐ", "Ｑ", "Ｒ", "Ｓ", "Ｔ", "Ｕ", "Ｖ", "Ｗ", "Ｘ",
"Ｙ", "Ｚ", "－", "＿", "＝", "＋", "＼", "｜", "【", "】", "；", "：",
"'", "\"", "，", "〈", "。", "〉", "／", "？" };
String result = "";
for (int i = 0; i < str.length(); i++) {
int pos = source.indexOf(str.charAt(i));
if (pos != -1) {
result += decode[pos];
} else {
result += str.charAt(i);
}
}
return result;
}
public static String unicodeEscaped(char ch) {
if (ch < 0x10) {
return "\\u000" + Integer.toHexString(ch);
} else if (ch < 0x100) {
return "\\u00" + Integer.toHexString(ch);
} else if (ch < 0x1000) {
return "\\u0" + Integer.toHexString(ch);
}
return "\\u" + Integer.toHexString(ch);
}
public static String toString(Object object,String nullStr){
return object == null ? nullStr : object.toString();
}
public static String repeatString(String value,int count){
if(value == null || "".equals(value) || count <= 1){
return value;
}
int length = value.length();
return repeatChar(value.charAt(0), count);
}
int outputLength = length * count;
switch (length) {
case 1:
return repeatChar(value.charAt(0), count);
case 2:
char ch0 = value.charAt(0);
char ch1 = value.charAt(1);
char[] output2 = new char[outputLength];
for (int i = count * 2 - 2; i >= 0; i--, i--) {
output2[i] = ch0;
output2[i + 1] = ch1;
}
return new String(output2);
default:
StringBuilder buf = new StringBuilder(outputLength);
for (int i = 0; i < count; i++) {
buf.append(value);
}
return buf.toString();
}
}
public static String repeatChar(char ch, int count) {
char[] buf = new char[count];
for (int i = count - 1; i >= 0; i--) {
buf[i] = ch;
}
return new String(buf);
}
public static boolean isAllLowerCase(String value){
if(value == null || "".equals(value)){
return false;
}
for (int i = 0; i < value.length(); i++) {
if (Character.isLowerCase(value.charAt(i)) == false) {
return false;
}
}
return true;
}
public static boolean isAllUpperCase(String value){
if(value == null || "".equals(value)){
return false;
}
for (int i = 0; i < value.length(); i++) {
if (Character.isUpperCase(value.charAt(i)) == false) {
return false;
}
}
return true;
}
public static String reverse(String value){
if(value == null){
return null;
}
return new StringBuffer(value).reverse().toString();
}
public static String subString(String resourceString,int length){
String resultString = "";
if (resourceString == null || "".equals(resourceString) || length < 1) {
return resourceString;
}
if (resourceString.length() < length) {
return resourceString;
}
char[] chr = resourceString.toCharArray();
int strNum = 0;
int strGBKNum = 0;
boolean isHaveDot = false;
for (int i = 0; i < resourceString.length(); i++) {
strNum = strNum + 2;
strGBKNum++;
} else {
strNum++;
}
if (strNum == length || strNum == length + 1) {
if (i + 1 < resourceString.length()) {
isHaveDot = true;
}
break;
}
}
resultString = resourceString.substring(0, strNum - strGBKNum);
if (isHaveDot) {
resultString = resultString + "...";
}
return resultString;
}
public static String subHTMLString(String htmlString,int length){
return subString(delHTMLTag(htmlString), length);
}
public static String delHTMLTag(String htmlStr){
Pattern p_script = Pattern.compile(regEx_script, Pattern.CASE_INSENSITIVE);
Matcher m_script = p_script.matcher(htmlStr);
Pattern p_style = Pattern.compile(regEx_style, Pattern.CASE_INSENSITIVE);
Matcher m_style = p_style.matcher(htmlStr);
Pattern p_html = Pattern.compile(regEx_html, Pattern.CASE_INSENSITIVE);
Matcher m_html = p_html.matcher(htmlStr);
Pattern p_space = Pattern.compile(regEx_space, Pattern.CASE_INSENSITIVE);
Matcher m_space = p_space.matcher(htmlStr);
}
}
