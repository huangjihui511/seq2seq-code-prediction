package io.realm.examples.newsreader.model.network;
import android.support.annotation.NonNull;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;
import io.reactivex.subjects.BehaviorSubject;
import io.realm.Realm;
import io.realm.examples.newsreader.model.entity.NYTimesStory;
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
import retrofit2.converter.jackson.JacksonConverterFactory;
import retrofit2.Retrofit;
import timber.log.Timber;
public class NYTimesDataLoader {
private NYTimesService nyTimesService;
private SimpleDateFormat inputDateFormat = new SimpleDateFormat("yyyy-MM-d'T'HH:mm:ssZZZZZ", Locale.US);
private SimpleDateFormat outputDateFormat = new SimpleDateFormat("MM-dd-yyyy", Locale.US);
private String apiKey;
private Realm realm;
private BehaviorSubject<Boolean> networkInUse;
public NYTimesDataLoader() {
Retrofit retrofit = new Retrofit.Builder()
.addCallAdapterFactory(RxJava2CallAdapterFactory.create())
.addConverterFactory(JacksonConverterFactory.create())
.baseUrl("http:
.build();
nyTimesService = retrofit.create(NYTimesService.class);
}
public void loadData(String sectionKey, String apiKey, Realm realm, BehaviorSubject<Boolean> networkLoading) {
this.apiKey = apiKey;
this.realm = realm;
this.networkInUse = networkLoading;
loadNextSection(sectionKey);
}
private void loadNextSection(@NonNull final String sectionKey) {
networkInUse.onNext(true);
nyTimesService.topStories(sectionKey, apiKey)
.subscribeOn(Schedulers.io())
.observeOn(AndroidSchedulers.mainThread())
.subscribe(response -> {
Timber.d("Success - Data received: %s", sectionKey);
processAndAddData(realm, response.section, response.results);
networkInUse.onNext(false);
}, throwable -> {
networkInUse.onNext(false);
Timber.d("Failure: Data not loaded: %s - %s", sectionKey, throwable.toString());
});
}
private void processAndAddData(final Realm realm, final String sectionKey, final List<NYTimesStory> stories) {
if (stories.isEmpty()) return;
realm.executeTransactionAsync(r -> {
for (NYTimesStory story : stories) {
Date parsedPublishedDate = inputDateFormat.parse(story.getPublishedDate(), new ParsePosition(0));
story.setSortTimeStamp(parsedPublishedDate.getTime());
story.setPublishedDate(outputDateFormat.format(parsedPublishedDate));
NYTimesStory persistedStory = r.where(NYTimesStory.class).equalTo(NYTimesStory.URL, story.getUrl()).findFirst();
if (persistedStory != null) {
story.setRead(persistedStory.isRead());
}
if (persistedStory == null || !persistedStory.getUpdatedDate().equals(story.getUpdatedDate())) {
story.setApiSection(sectionKey);
r.copyToRealmOrUpdate(story);
}
}
}, throwable -> Timber.e(throwable, "Could not save data"));
}
}
