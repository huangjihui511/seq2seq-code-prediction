package org.springframework.integration.dispatcher;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicInteger;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHandler;
public class RoundRobinLoadBalancingStrategy implements LoadBalancingStrategy {
private final AtomicInteger currentHandlerIndex = new AtomicInteger();
public final Iterator<MessageHandler> getHandlerIterator(Message<?> message, Collection<MessageHandler> handlers) {
int size = handlers.size();
if (size < 2) {
this.getNextHandlerStartIndex(size);
return handlers.iterator();
}
return this.buildHandlerIterator(size, handlers.toArray(new MessageHandler[size]));
}
private Iterator<MessageHandler> buildHandlerIterator(int size, final MessageHandler[] handlers) {
int nextHandlerStartIndex = getNextHandlerStartIndex(size);
MessageHandler[] reorderedHandlers = new MessageHandler[size];
System.arraycopy(handlers, nextHandlerStartIndex, reorderedHandlers, 0, size - nextHandlerStartIndex);
System.arraycopy(handlers, 0, reorderedHandlers, size - nextHandlerStartIndex, nextHandlerStartIndex);
return new Iterator<MessageHandler>() {
private int currentIndex = 0;
public boolean hasNext() {
return this.currentIndex < reorderedHandlers.length;
}
public MessageHandler next() {
return reorderedHandlers[this.currentIndex++];
}
public void remove() {
throw new UnsupportedOperationException("Remove is not supported by this Iterator");
}
};
}
private int getNextHandlerStartIndex(int size) {
if (size > 0) {
int indexTail = this.currentHandlerIndex.getAndIncrement() % size;
return indexTail < 0 ? indexTail + size : indexTail;
}
else {
return size;
}
}
}
