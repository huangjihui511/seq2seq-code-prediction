package the.bytecode.club.bytecodeviewer.api;
import java.security.AllPermission;
import java.security.CodeSource;
import java.security.Permissions;
import java.security.ProtectionDomain;
import java.security.cert.Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.tree.ClassNode;
public final class ClassNodeLoader extends ClassLoader {
private HashMap<String, ClassNode> classes = new HashMap<String, ClassNode>();
public void addClass(ClassNode cn) {
classes.put(cn.name.replace("/", "."), cn);
}
public boolean contains(String name) {
return (classes.get(name) != null);
}
public Collection<ClassNode> getAll() {
return classes.values();
}
public void clear() {
classes.clear();
}
public Collection<Class<?>> getAllClasses() {
ArrayList<Class<?>> classes = new ArrayList<Class<?>>();
for (String s : this.classes.keySet()) {
try {
classes.add(loadClass(s));
} catch (ClassNotFoundException e) {
e.printStackTrace();
}
}
return classes;
}
public ClassNode get(String name) {
return classes.get(name);
}
@Override
public Class<?> loadClass(String className) throws ClassNotFoundException {
return findClass(className);
}
@Override
public Class<?> findClass(String name) throws ClassNotFoundException {
if (classes.containsKey(name)) {
return nodeToClass(classes.get(name));
} else {
return super.loadClass(name);
}
}
public Class<?> nodeToClass(ClassNode node) {
if (super.findLoadedClass(node.name.replace("/", ".")) != null)
return findLoadedClass(node.name.replace("/", "."));
ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
try {
node.accept(cw);
} catch (Exception e) {
e.printStackTrace();
}
byte[] b = cw.toByteArray();
return defineClass(node.name.replaceAll("/", "."), b, 0, b.length,
getDomain());
}
private ProtectionDomain getDomain() {
CodeSource code = new CodeSource(null, (Certificate[]) null);
return new ProtectionDomain(code, getPermissions());
}
private Permissions getPermissions() {
Permissions permissions = new Permissions();
permissions.add(new AllPermission());
return permissions;
}
}
