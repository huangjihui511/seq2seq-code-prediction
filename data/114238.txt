package com.datumbox.framework.common.utilities;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
public class ReflectionMethods {
public static List<Field> getAllFields(List<Field> fields, Class<?> type) {
fields.addAll(Arrays.asList(type.getDeclaredFields()));
if (type.getSuperclass() != null) {
fields = getAllFields(fields, type.getSuperclass());
}
return fields;
}
public static Method findMethod(Object obj, String methodName, Object... params) {
Class<?>[] classArray = new Class<?>[params.length];
for (int i = 0; i < params.length; i++) {
classArray[i] = params[i].getClass();
}
try {
Class<?> klass = obj.getClass();
while (klass != null) {
for (Method method : klass.getDeclaredMethods()) {
if (method.getName().equals(methodName) && method.getParameterCount() == classArray.length) {
Class<?>[] paramClasses = method.getParameterTypes();
boolean parametersMatch = true;
for(int i = 0; i < params.length; i++) {
if(!paramClasses[i].isAssignableFrom(classArray[i])) {
parametersMatch = false;
break;
}
}
if(parametersMatch) { 
return method;
}
}
}
klass = klass.getSuperclass();
}
throw new NoSuchMethodException();
}
catch (NoSuchMethodException ex) {
throw new RuntimeException(ex);
}
}
public static Object invokeMethod(Object obj, Method method, Object... params) {
try {
method.setAccessible(true);
return method.invoke(obj, params);
}
catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException ex) {
throw new RuntimeException(ex);
}
}
public static Object invokeMethod(Object obj, String methodName, Object... params) {
Method method = findMethod(obj, methodName, params);
return invokeMethod(obj, method, params);
}
}
