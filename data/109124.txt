package io.realm;
import android.annotation.SuppressLint;
import android.os.Looper;
import java.util.Date;
import java.util.Locale;
import javax.annotation.Nullable;
import io.reactivex.Flowable;
import io.reactivex.Observable;
import io.realm.annotations.Beta;
import io.realm.internal.CheckedRow;
import io.realm.internal.OsResults;
import io.realm.internal.RealmObjectProxy;
import io.realm.internal.Row;
import io.realm.internal.Table;
import io.realm.internal.UncheckedRow;
import io.realm.internal.Util;
import io.realm.internal.android.JsonUtils;
import io.realm.log.RealmLog;
import io.realm.rx.CollectionChange;
public class RealmResults<E> extends OrderedRealmCollectionImpl<E> {
@SuppressLint("unused")
static <T extends RealmModel> RealmResults<T> createBacklinkResults(BaseRealm realm, Row row, Class<T> srcTableType, String srcFieldName) {
UncheckedRow uncheckedRow = (UncheckedRow) row;
Table srcTable = realm.getSchema().getTable(srcTableType);
return new RealmResults<>(
realm,
OsResults.createForBacklinks(realm.sharedRealm, uncheckedRow, srcTable, srcFieldName),
srcTableType);
}
static RealmResults<DynamicRealmObject> createDynamicBacklinkResults(DynamicRealm realm, CheckedRow row, Table srcTable, String srcFieldName) {
final String srcClassName = Table.getClassNameForTable(srcTable.getName());
return new RealmResults<>(
realm,
OsResults.createForBacklinks(realm.sharedRealm, row, srcTable, srcFieldName),
srcClassName);
}
RealmResults(BaseRealm realm, OsResults osResults, Class<E> clazz) {
super(realm, osResults, clazz);
}
RealmResults(BaseRealm realm, OsResults osResults, String className) {
super(realm, osResults, className);
}
@Override
public RealmQuery<E> where() {
realm.checkIfValid();
return RealmQuery.createQueryFromResult(this);
}
@Override
public RealmResults<E> sort(String fieldName1, Sort sortOrder1, String fieldName2, Sort sortOrder2) {
return sort(new String[] {fieldName1, fieldName2}, new Sort[] {sortOrder1, sortOrder2});
}
@Override
public boolean isLoaded() {
realm.checkIfValid();
return osResults.isLoaded();
}
@Override
public boolean load() {
realm.checkIfValid();
osResults.load();
return true;
}
public void setValue(String fieldName, @Nullable Object value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
boolean isString = (value instanceof String);
String strValue = isString ? (String) value : null;
String className = osResults.getTable().getClassName();
RealmObjectSchema schema = getRealm().getSchema().get(className);
if (!schema.hasField(fieldName)) {
throw new IllegalArgumentException(String.format("Field '%s' could not be found in class '%s'", fieldName, className));
}
if (value == null) {
osResults.setNull(fieldName);
return;
}
RealmFieldType type = schema.getFieldType(fieldName);
if (isString && type != RealmFieldType.STRING) {
switch (type) {
case BOOLEAN:
value = Boolean.parseBoolean(strValue);
break;
case INTEGER:
value = Long.parseLong(strValue);
break;
case FLOAT:
value = Float.parseFloat(strValue);
break;
case DOUBLE:
value = Double.parseDouble(strValue);
break;
case DATE:
value = JsonUtils.stringToDate(strValue);
break;
default:
throw new IllegalArgumentException(String.format(Locale.US,
"Field %s is not a String field, " +
"and the provide value could not be automatically converted: %s. Use a typed" +
"setter instead", fieldName, value));
}
}
Class<?> valueClass = value.getClass();
if (valueClass == Boolean.class) {
setBoolean(fieldName, (Boolean) value);
} else if (valueClass == Short.class) {
setShort(fieldName, (Short) value);
} else if (valueClass == Integer.class) {
setInt(fieldName, (Integer) value);
} else if (valueClass == Long.class) {
setLong(fieldName, (Long) value);
} else if (valueClass == Byte.class) {
setByte(fieldName, (Byte) value);
} else if (valueClass == Float.class) {
setFloat(fieldName, (Float) value);
} else if (valueClass == Double.class) {
setDouble(fieldName, (Double) value);
} else if (valueClass == String.class) {
setString(fieldName, (String) value);
} else if (value instanceof Date) {
setDate(fieldName, (Date) value);
} else if (value instanceof byte[]) {
setBlob(fieldName, (byte[]) value);
} else if (value instanceof RealmModel) {
setObject(fieldName, (RealmModel) value);
} else if (valueClass == RealmList.class) {
RealmList<?> list = (RealmList<?>) value;
setList(fieldName, list);
} else {
throw new IllegalArgumentException("Value is of a type not supported: " + value.getClass());
}
}
public void setNull(String fieldName) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
osResults.setNull(fieldName);
}
public void setBoolean(String fieldName, boolean value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.BOOLEAN);
osResults.setBoolean(fieldName, value);
}
public void setByte(String fieldName, byte value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.INTEGER);
osResults.setInt(fieldName, value);
}
public void setShort(String fieldName, short value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.INTEGER);
osResults.setInt(fieldName, value);
}
public void setInt(String fieldName, int value) {
checkNonEmptyFieldName(fieldName);
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.INTEGER);
realm.checkIfValidAndInTransaction();
osResults.setInt(fieldName, value);
}
public void setLong(String fieldName, long value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.INTEGER);
osResults.setInt(fieldName, value);
}
public void setFloat(String fieldName, float value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.FLOAT);
osResults.setFloat(fieldName, value);
}
public void setDouble(String fieldName, double value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.DOUBLE);
osResults.setDouble(fieldName, value);
}
public void setString(String fieldName, @Nullable String value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.STRING);
osResults.setString(fieldName, value);
}
public void setBlob(String fieldName, @Nullable byte[] value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.BINARY);
osResults.setBlob(fieldName, value);
}
public void setDate(String fieldName, @Nullable Date value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.DATE);
osResults.setDate(fieldName, value);
}
public void setObject(String fieldName, @Nullable RealmModel value) {
checkNonEmptyFieldName(fieldName);
realm.checkIfValidAndInTransaction();
fieldName = mapFieldNameToInternalName(fieldName);
checkType(fieldName, RealmFieldType.OBJECT);
Row row = checkRealmObjectConstraints(fieldName, value);
osResults.setObject(fieldName, row);
}
private Row checkRealmObjectConstraints(String fieldName, @Nullable RealmModel value) {
if (value != null) {
if (!(RealmObject.isManaged(value) && RealmObject.isValid(value))) {
throw new IllegalArgumentException("'value' is not a valid, managed Realm object.");
}
ProxyState proxyState = ((RealmObjectProxy) value).realmGet$proxyState();
if (!proxyState.getRealm$realm().getPath().equals(realm.getPath())) {
throw new IllegalArgumentException("'value' does not belong to the same Realm as the RealmResults.");
}
Table currentTable = osResults.getTable();
long columnIndex = currentTable.getColumnIndex(fieldName);
Table expectedTable = currentTable.getLinkTarget(columnIndex);
Table inputTable = proxyState.getRow$realm().getTable();
if (!expectedTable.hasSameSchema(inputTable)) {
throw new IllegalArgumentException(String.format(Locale.US,
"Type of object is wrong. Was '%s', expected '%s'",
inputTable.getClassName(), expectedTable.getClassName()));
}
return proxyState.getRow$realm();
}
return null;
}
@SuppressWarnings("unchecked")
public <T> void setList(String fieldName, RealmList<T> list) {
checkNonEmptyFieldName(fieldName);
fieldName = mapFieldNameToInternalName(fieldName);
realm.checkIfValidAndInTransaction();
if (list == null) {
throw new IllegalArgumentException("Non-null 'list' required");
}
RealmFieldType columnType = realm.getSchema().getSchemaForClass(osResults.getTable().getClassName()).getFieldType(fieldName);
switch (columnType) {
case LIST:
checkTypeOfListElements(list, RealmModel.class);
checkRealmObjectConstraints(fieldName, (RealmModel) list.first(null));
osResults.setModelList(fieldName, (RealmList<RealmModel>) list);
break;
case INTEGER_LIST:
Class<?> listType = getListType(list);
if (listType.equals(Integer.class)) {
osResults.setIntegerList(fieldName, (RealmList<Integer>) list);
} else if (listType.equals(Long.class)) {
osResults.setLongList(fieldName, (RealmList<Long>) list);
} else if (listType.equals(Short.class)) {
osResults.setShortList(fieldName, (RealmList<Short>) list);
} else if (listType.equals(Byte.class)) {
osResults.setByteList(fieldName, (RealmList<Byte>) list);
} else {
throw new IllegalArgumentException(String.format("List contained the wrong type of elements. " +
"Elements that can be mapped to Integers was expected, but the actual type is '%s'",
listType));
}
break;
case BOOLEAN_LIST:
checkTypeOfListElements(list, Boolean.class);
osResults.setBooleanList(fieldName, (RealmList<Boolean>) list);
break;
case STRING_LIST:
checkTypeOfListElements(list, String.class);
osResults.setStringList(fieldName, (RealmList<String>) list);
break;
case BINARY_LIST:
checkTypeOfListElements(list, byte[].class);
osResults.setByteArrayList(fieldName, (RealmList<byte[]>) list);
break;
case DATE_LIST:
checkTypeOfListElements(list, Date.class);
osResults.setDateList(fieldName, (RealmList<Date>) list);
break;
case FLOAT_LIST:
checkTypeOfListElements(list, Float.class);
osResults.setFloatList(fieldName, (RealmList<Float>) list);
break;
case DOUBLE_LIST:
checkTypeOfListElements(list, Double.class);
osResults.setDoubleList(fieldName, (RealmList<Double>) list);
break;
default:
throw new IllegalArgumentException(String.format("Field '%s' is not a list but a %s", fieldName, columnType));
}
}
private Class<?> getListType(RealmList list) {
if (!list.isEmpty()) {
return list.first().getClass();
} else {
return Long.class; 
}
}
private <T> void checkTypeOfListElements(RealmList<T> list, Class<?> clazz) {
if (!list.isEmpty()) {
T element = list.first();
Class<?> elementType = element.getClass();
if (!(clazz.isAssignableFrom(elementType))) {
throw new IllegalArgumentException(String.format("List contained the wrong type of elements. Elements of type '%s' was " +
"expected, but the actual type is '%s'", clazz, elementType));
}
}
}
public void addChangeListener(RealmChangeListener<RealmResults<E>> listener) {
checkForAddListener(listener);
osResults.addListener(this, listener);
}
public void addChangeListener(OrderedRealmCollectionChangeListener<RealmResults<E>> listener) {
checkForAddListener(listener);
osResults.addListener(this, listener);
}
private void checkForAddListener(@Nullable Object listener) {
if (listener == null) {
throw new IllegalArgumentException("Listener should not be null");
}
realm.checkIfValid();
realm.sharedRealm.capabilities.checkCanDeliverNotification(BaseRealm.LISTENER_NOT_ALLOWED_MESSAGE);
}
private void checkForRemoveListener(@Nullable Object listener, boolean checkListener) {
if (checkListener && listener == null) {
throw new IllegalArgumentException("Listener should not be null");
}
if (realm.isClosed()) {
RealmLog.warn("Calling removeChangeListener on a closed Realm %s, " +
"make sure to close all listeners before closing the Realm.", realm.configuration.getPath());
}
}
public void removeAllChangeListeners() {
checkForRemoveListener(null, false);
osResults.removeAllListeners();
}
public void removeChangeListener(RealmChangeListener<RealmResults<E>> listener) {
checkForRemoveListener(listener, true);
osResults.removeListener(this, listener);
}
public void removeChangeListener(OrderedRealmCollectionChangeListener<RealmResults<E>> listener) {
checkForRemoveListener(listener, true);
osResults.removeListener(this, listener);
}
@SuppressWarnings("unchecked")
public Flowable<RealmResults<E>> asFlowable() {
if (realm instanceof Realm) {
return realm.configuration.getRxFactory().from((Realm) realm, this);
}
if (realm instanceof DynamicRealm) {
DynamicRealm dynamicRealm = (DynamicRealm) realm;
RealmResults<DynamicRealmObject> dynamicResults = (RealmResults<DynamicRealmObject>) this;
@SuppressWarnings("UnnecessaryLocalVariable")
Flowable results = realm.configuration.getRxFactory().from(dynamicRealm, dynamicResults);
return results;
} else {
throw new UnsupportedOperationException(realm.getClass() + " does not support RxJava2.");
}
}
public Observable<CollectionChange<RealmResults<E>>> asChangesetObservable() {
if (realm instanceof Realm) {
return realm.configuration.getRxFactory().changesetsFrom((Realm) realm, this);
} else if (realm instanceof DynamicRealm) {
DynamicRealm dynamicRealm = (DynamicRealm) realm;
RealmResults<DynamicRealmObject> dynamicResults = (RealmResults<DynamicRealmObject>) this;
return (Observable) realm.configuration.getRxFactory().changesetsFrom(dynamicRealm, dynamicResults);
} else {
throw new UnsupportedOperationException(realm.getClass() + " does not support RxJava2.");
}
}
@Beta 
public String asJSON() {
return osResults.toJSON(-1);
}
private void checkNonEmptyFieldName(String fieldName) {
if (Util.isEmptyString(fieldName)) {
throw new IllegalArgumentException("Non-empty 'fieldname' required.");
}
}
private void checkNotNull(@Nullable Object value) {
if (value == null) {
throw new IllegalArgumentException("Non-null 'value' required. Use 'setNull(fieldName)' instead.");
}
}
private void checkType(String fieldName, RealmFieldType expectedFieldType) {
String className = osResults.getTable().getClassName();
RealmFieldType fieldType = realm.getSchema().get(className).getFieldType(fieldName);
if (fieldType != expectedFieldType) {
throw new IllegalArgumentException(String.format("The field '%s.%s' is not of the expected type. " +
"Actual: %s, Expected: %s", className, fieldName, fieldType, expectedFieldType));
}
}
private String mapFieldNameToInternalName(String fieldName) {
if (realm instanceof Realm) {
String className = osResults.getTable().getClassName();
String mappedFieldName = realm.getSchema().getColumnInfo(className).getInternalFieldName(fieldName);
if (mappedFieldName == null) {
throw new IllegalArgumentException(String.format("Field '%s' does not exists.", fieldName));
} else {
fieldName = mappedFieldName;
}
}
return fieldName;
}
}
