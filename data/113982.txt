package org.spongepowered.mod.mixin.api.common.extra.fluid;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Preconditions.checkState;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraftforge.fluids.Fluid;
import org.spongepowered.api.data.DataContainer;
import org.spongepowered.api.extra.fluid.FluidStack;
import org.spongepowered.api.extra.fluid.FluidType;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Overwrite;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.api.data.persistence.AbstractDataBuilder;
import org.spongepowered.common.data.persistence.NbtTranslator;
import org.spongepowered.common.extra.fluid.SpongeFluidStackBuilder;
import javax.annotation.Nullable;
@Mixin(value = SpongeFluidStackBuilder.class, remap = false)
public abstract class SpongeFluidStackBuilderMixin_ForgeAPI extends AbstractDataBuilder<FluidStack> implements FluidStack.Builder {
@Shadow FluidType fluidType;
@Shadow int volume;
@Shadow DataContainer extra;
public SpongeFluidStackBuilderMixin_ForgeAPI(final Class<FluidStack> requiredClass, final int supportedVersion) {
super(requiredClass, supportedVersion);
}
@SuppressWarnings("ConstantConditions")
@Override
@Overwrite
public FluidStack build() {
checkNotNull(this.fluidType, "Fluidtype cannot be null!");
checkState(this.volume >= 0, "Volume must be at least zero!");
@Nullable final NBTTagCompound compound = this.extra == null ? null : NbtTranslator.getInstance().translateData(this.extra);
final net.minecraftforge.fluids.FluidStack fluidStack = new net.minecraftforge.fluids.FluidStack((Fluid) this.fluidType, this.volume, compound);
return (FluidStack) fluidStack;
}
}
