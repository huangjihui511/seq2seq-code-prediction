package com.google.api.client.extensions.appengine.http;
import com.google.api.client.http.HttpMethods;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.util.Preconditions;
import com.google.appengine.api.urlfetch.FetchOptions;
import com.google.appengine.api.urlfetch.HTTPMethod;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.Arrays;
public final class UrlFetchTransport extends HttpTransport {
enum CertificateValidationBehavior {
DEFAULT,
VALIDATE,
DO_NOT_VALIDATE
}
private static final String[] SUPPORTED_METHODS = {
HttpMethods.DELETE,
HttpMethods.GET,
HttpMethods.HEAD,
HttpMethods.POST,
HttpMethods.PUT,
HttpMethods.PATCH
};
static {
Arrays.sort(SUPPORTED_METHODS);
}
private final CertificateValidationBehavior certificateValidationBehavior;
public UrlFetchTransport() {
this(new Builder());
}
UrlFetchTransport(Builder builder) {
certificateValidationBehavior = builder.certificateValidationBehavior;
}
public static UrlFetchTransport getDefaultInstance() {
return InstanceHolder.INSTANCE;
}
static class InstanceHolder {
static final UrlFetchTransport INSTANCE = new UrlFetchTransport();
}
@Override
public boolean supportsMethod(String method) {
return Arrays.binarySearch(SUPPORTED_METHODS, method) >= 0;
}
@Override
protected UrlFetchRequest buildRequest(String method, String url) throws IOException {
Preconditions.checkArgument(supportsMethod(method), "HTTP method %s not supported", method);
HTTPMethod httpMethod;
if (method.equals(HttpMethods.DELETE)) {
httpMethod = HTTPMethod.DELETE;
} else if (method.equals(HttpMethods.GET)) {
httpMethod = HTTPMethod.GET;
} else if (method.equals(HttpMethods.HEAD)) {
httpMethod = HTTPMethod.HEAD;
} else if (method.equals(HttpMethods.POST)) {
httpMethod = HTTPMethod.POST;
} else if (method.equals(HttpMethods.PATCH)) {
httpMethod = HTTPMethod.PATCH;
} else {
httpMethod = HTTPMethod.PUT;
}
FetchOptions fetchOptions =
FetchOptions.Builder.doNotFollowRedirects().disallowTruncate().validateCertificate();
switch (certificateValidationBehavior) {
case VALIDATE:
fetchOptions.validateCertificate();
break;
case DO_NOT_VALIDATE:
fetchOptions.doNotValidateCertificate();
break;
default:
break;
}
return new UrlFetchRequest(fetchOptions, httpMethod, url);
}
public static final class Builder {
CertificateValidationBehavior certificateValidationBehavior =
CertificateValidationBehavior.DEFAULT;
public Builder doNotValidateCertificate() {
this.certificateValidationBehavior = CertificateValidationBehavior.DO_NOT_VALIDATE;
return this;
}
public Builder validateCertificate() {
this.certificateValidationBehavior = CertificateValidationBehavior.VALIDATE;
return this;
}
public boolean getValidateCertificate() {
return certificateValidationBehavior == CertificateValidationBehavior.VALIDATE;
}
public boolean getDoNotValidateCertificate() {
return certificateValidationBehavior == CertificateValidationBehavior.DO_NOT_VALIDATE;
}
public UrlFetchTransport build() {
return new UrlFetchTransport(this);
}
}
}
