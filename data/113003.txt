package org.apache.fontbox.type1;
import org.apache.fontbox.encoding.BuiltInEncoding;
import org.apache.fontbox.encoding.StandardEncoding;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
final class Type1Parser
{
private static final int EEXEC_KEY = 55665;
private static final int CHARSTRING_KEY = 4330;
private Type1Lexer lexer;
private Type1Font font;
public Type1Font parse(byte[] segment1, byte[] segment2) throws IOException
{
font = new Type1Font(segment1, segment2);
parseASCII(segment1);
if (segment2.length > 0)
{
parseBinary(segment2);
}
return font;
}
private void parseASCII(byte[] bytes) throws IOException
{
if (bytes.length == 0)
{
throw new IllegalArgumentException("byte[] is empty");
}
if (bytes.length < 2 || (bytes[0] != '%' && bytes[1] != '!'))
{
throw new IOException("Invalid start of ASCII segment");
}
lexer = new Type1Lexer(bytes);
if (lexer.peekToken().getText().equals("FontDirectory"))
{
read(Token.NAME, "FontDirectory");
read(Token.LITERAL); 
read(Token.NAME, "known");
read(Token.START_PROC);
readProc();
read(Token.START_PROC);
readProc();
read(Token.NAME, "ifelse");
}
int length = read(Token.INTEGER).intValue();
read(Token.NAME, "dict");
readMaybe(Token.NAME, "dup");
read(Token.NAME, "begin");
for (int i = 0; i < length; i++)
{
Token token = lexer.peekToken();
if (token == null)
{
break;
}
if (token.getKind() == Token.NAME &&
("currentdict".equals(token.getText()) || "end".equals(token.getText())))
{
break;
}
String key = read(Token.LITERAL).getText();
switch (key)
{
case "FontInfo":
case "Fontinfo":
readFontInfo(readSimpleDict());
break;
case "Metrics":
readSimpleDict();
break;
case "Encoding":
readEncoding();
break;
default:
readSimpleValue(key);
break;
}
}
readMaybe(Token.NAME, "currentdict");
read(Token.NAME, "end");
read(Token.NAME, "currentfile");
read(Token.NAME, "eexec");
}
private void readSimpleValue(String key) throws IOException
{
List<Token> value = readDictValue();
switch (key)
{
case "FontName":
font.fontName = value.get(0).getText();
break;
case "PaintType":
font.paintType = value.get(0).intValue();
break;
case "FontType":
font.fontType = value.get(0).intValue();
break;
case "FontMatrix":
font.fontMatrix = arrayToNumbers(value);
break;
case "FontBBox":
font.fontBBox = arrayToNumbers(value);
break;
case "UniqueID":
font.uniqueID = value.get(0).intValue();
break;
case "StrokeWidth":
font.strokeWidth = value.get(0).floatValue();
break;
case "FID":
font.fontID = value.get(0).getText();
break;
default:
break;
}
}
private void readEncoding() throws IOException
{
if (lexer.peekToken().getKind() == Token.NAME)
{
String name = lexer.nextToken().getText();
if (name.equals("StandardEncoding"))
{
font.encoding = StandardEncoding.INSTANCE;
}
else
{
throw new IOException("Unknown encoding: " + name);
}
readMaybe(Token.NAME, "readonly");
read(Token.NAME, "def");
}
else
{
read(Token.INTEGER).intValue();
readMaybe(Token.NAME, "array");
while (!(lexer.peekToken().getKind() == Token.NAME &&
(lexer.peekToken().getText().equals("dup") ||
lexer.peekToken().getText().equals("readonly") ||
lexer.peekToken().getText().equals("def"))))
{
lexer.nextToken();
}
Map<Integer, String> codeToName = new HashMap<>();
while (lexer.peekToken().getKind() == Token.NAME &&
lexer.peekToken().getText().equals("dup"))
{
read(Token.NAME, "dup");
int code = read(Token.INTEGER).intValue();
String name = read(Token.LITERAL).getText();
read(Token.NAME, "put");
codeToName.put(code, name);
}
font.encoding = new BuiltInEncoding(codeToName);
readMaybe(Token.NAME, "readonly");
read(Token.NAME, "def");
}
}
private List<Number> arrayToNumbers(List<Token> value) throws IOException
{
List<Number> numbers = new ArrayList<>();
for (int i = 1, size = value.size() - 1; i < size; i++)
{
Token token = value.get(i);
if (token.getKind() == Token.REAL)
{
numbers.add(token.floatValue());
}
else if (token.getKind() == Token.INTEGER)
{
numbers.add(token.intValue());
}
else
{
throw new IOException("Expected INTEGER or REAL but got " + token.getKind());
}
}
return numbers;
}
private void readFontInfo(Map<String, List<Token>> fontInfo)
{
for (Map.Entry<String, List<Token>> entry : fontInfo.entrySet())
{
String key = entry.getKey();
List<Token> value = entry.getValue();
switch (key)
{
case "version":
font.version = value.get(0).getText();
break;
case "Notice":
font.notice = value.get(0).getText();
break;
case "FullName":
font.fullName = value.get(0).getText();
break;
case "FamilyName":
font.familyName = value.get(0).getText();
break;
case "Weight":
font.weight = value.get(0).getText();
break;
case "ItalicAngle":
font.italicAngle = value.get(0).floatValue();
break;
case "isFixedPitch":
font.isFixedPitch = value.get(0).booleanValue();
break;
case "UnderlinePosition":
font.underlinePosition = value.get(0).floatValue();
break;
case "UnderlineThickness":
font.underlineThickness = value.get(0).floatValue();
break;
default:
break;
}
}
}
private Map<String, List<Token>> readSimpleDict() throws IOException
{
Map<String, List<Token>> dict = new HashMap<>();
int length = read(Token.INTEGER).intValue();
read(Token.NAME, "dict");
readMaybe(Token.NAME, "dup");
read(Token.NAME, "begin");
for (int i = 0; i < length; i++)
{
if (lexer.peekToken() == null)
{
break;
}
if (lexer.peekToken().getKind() == Token.NAME &&
!lexer.peekToken().getText().equals("end"))
{
read(Token.NAME);
}
if (lexer.peekToken() == null)
{
break;
}
if (lexer.peekToken().getKind() == Token.NAME &&
lexer.peekToken().getText().equals("end"))
{
break;
}
String key = read(Token.LITERAL).getText();
List<Token> value = readDictValue();
dict.put(key, value);
}
read(Token.NAME, "end");
readMaybe(Token.NAME, "readonly");
read(Token.NAME, "def");
return dict;
}
private List<Token> readDictValue() throws IOException
{
List<Token> value = readValue();
readDef();
return value;
}
private List<Token> readValue() throws IOException
{
List<Token> value = new ArrayList<>();
Token token = lexer.nextToken();
if (lexer.peekToken() == null)
{
return value;
}
value.add(token);
if (token.getKind() == Token.START_ARRAY)
{
int openArray = 1;
while (true)
{
if (lexer.peekToken() == null)
{
return value;
}
if (lexer.peekToken().getKind() == Token.START_ARRAY)
{
openArray++;
}
token = lexer.nextToken();
value.add(token);
if (token.getKind() == Token.END_ARRAY)
{
openArray--;
if (openArray == 0)
{
break;
}
}
}
}
else if (token.getKind() == Token.START_PROC)
{
value.addAll(readProc());
}
else if (token.getKind() == Token.START_DICT)
{
read(Token.END_DICT);
return value;
}
readPostScriptWrapper(value);
return value;
}
private void readPostScriptWrapper(List<Token> value) throws IOException
{
if (lexer.peekToken().getText().equals("systemdict"))
{
read(Token.NAME, "systemdict");
read(Token.LITERAL, "internaldict");
read(Token.NAME, "known");
read(Token.START_PROC);
readProc();
read(Token.START_PROC);
readProc();
read(Token.NAME, "ifelse");
read(Token.START_PROC);
read(Token.NAME, "pop");
value.clear();
value.addAll(readValue());
read(Token.END_PROC);
read(Token.NAME, "if");
}
}
private List<Token> readProc() throws IOException
{
List<Token> value = new ArrayList<>();
int openProc = 1;
while (true)
{
if (lexer.peekToken().getKind() == Token.START_PROC)
{
openProc++;
}
Token token = lexer.nextToken();
value.add(token);
if (token.getKind() == Token.END_PROC)
{
openProc--;
if (openProc == 0)
{
break;
}
}
}
Token executeonly = readMaybe(Token.NAME, "executeonly");
if (executeonly != null)
{
value.add(executeonly);
}
return value;
}
private void parseBinary(byte[] bytes) throws IOException
{
byte[] decrypted;
if (isBinary(bytes))
{
decrypted = decrypt(bytes, EEXEC_KEY, 4);
}
else
{
decrypted = decrypt(hexToBinary(bytes), EEXEC_KEY, 4);
}
lexer = new Type1Lexer(decrypted);
Token peekToken = lexer.peekToken();
while (peekToken != null && !peekToken.getText().equals("Private"))
{
lexer.nextToken();
peekToken = lexer.peekToken();
}
if (peekToken == null)
{
throw new IOException("/Private token not found");
}
read(Token.LITERAL, "Private");
int length = read(Token.INTEGER).intValue();
read(Token.NAME, "dict");
readMaybe(Token.NAME, "dup");
read(Token.NAME, "begin");
int lenIV = 4; 
for (int i = 0; i < length; i++)
{
if (lexer.peekToken() == null || lexer.peekToken().getKind() != Token.LITERAL)
{
break;
}
String key = read(Token.LITERAL).getText();
switch (key)
{
case "Subrs":
readSubrs(lenIV);
break;
case "OtherSubrs":
readOtherSubrs();
break;
case "lenIV":
lenIV = readDictValue().get(0).intValue();
break;
case "ND":
read(Token.START_PROC);
readMaybe(Token.NAME, "noaccess");
read(Token.NAME, "def");
read(Token.END_PROC);
readMaybe(Token.NAME, "executeonly");
read(Token.NAME, "def");
break;
case "NP":
read(Token.START_PROC);
readMaybe(Token.NAME, "noaccess");
read(Token.NAME);
read(Token.END_PROC);
readMaybe(Token.NAME, "executeonly");
read(Token.NAME, "def");
break;
case "RD":
read(Token.START_PROC);
readProc();
readMaybe(Token.NAME, "bind");
readMaybe(Token.NAME, "executeonly");
read(Token.NAME, "def");
break;
default:
readPrivate(key, readDictValue());
break;
}
}
while (!(lexer.peekToken().getKind() == Token.LITERAL &&
lexer.peekToken().getText().equals("CharStrings")))
{
lexer.nextToken();
}
read(Token.LITERAL, "CharStrings");
readCharStrings(lenIV);
}
private void readPrivate(String key, List<Token> value) throws IOException
{
switch (key)
{
case "BlueValues":
font.blueValues = arrayToNumbers(value);
break;
case "OtherBlues":
font.otherBlues = arrayToNumbers(value);
break;
case "FamilyBlues":
font.familyBlues = arrayToNumbers(value);
break;
case "FamilyOtherBlues":
font.familyOtherBlues = arrayToNumbers(value);
break;
case "BlueScale":
font.blueScale = value.get(0).floatValue();
break;
case "BlueShift":
font.blueShift = value.get(0).intValue();
break;
case "BlueFuzz":
font.blueFuzz = value.get(0).intValue();
break;
case "StdHW":
font.stdHW = arrayToNumbers(value);
break;
case "StdVW":
font.stdVW = arrayToNumbers(value);
break;
case "StemSnapH":
font.stemSnapH = arrayToNumbers(value);
break;
case "StemSnapV":
font.stemSnapV = arrayToNumbers(value);
break;
case "ForceBold":
font.forceBold = value.get(0).booleanValue();
break;
case "LanguageGroup":
font.languageGroup = value.get(0).intValue();
break;
default:
break;
}
}
private void readSubrs(int lenIV) throws IOException
{
int length = read(Token.INTEGER).intValue();
for (int i = 0; i < length; i++)
{
font.subrs.add(null);
}
read(Token.NAME, "array");
for (int i = 0; i < length; i++)
{
if (lexer.peekToken() == null)
{
break;
}
if (!(lexer.peekToken().getKind() == Token.NAME &&
lexer.peekToken().getText().equals("dup")))
{
break;
}
read(Token.NAME, "dup");
Token index = read(Token.INTEGER);
read(Token.INTEGER);
Token charstring = read(Token.CHARSTRING);
font.subrs.set(index.intValue(), decrypt(charstring.getData(), CHARSTRING_KEY, lenIV));
readPut();
}
readDef();
}
private void readOtherSubrs() throws IOException
{
if (lexer.peekToken().getKind() == Token.START_ARRAY)
{
readValue();
readDef();
}
else
{
int length = read(Token.INTEGER).intValue();
read(Token.NAME, "array");
for (int i = 0; i < length; i++)
{
read(Token.NAME, "dup");
read(Token.INTEGER); 
readValue(); 
readPut();
}
readDef();
}
}
private void readCharStrings(int lenIV) throws IOException
{
int length = read(Token.INTEGER).intValue();
read(Token.NAME, "dict");
read(Token.NAME, "dup");
read(Token.NAME, "begin");
for (int i = 0; i < length; i++)
{
if (lexer.peekToken() == null)
{
break;
}
if (lexer.peekToken().getKind() == Token.NAME &&
lexer.peekToken().getText().equals("end"))
{
break;
}
String name = read(Token.LITERAL).getText();
read(Token.INTEGER);
Token charstring = read(Token.CHARSTRING);
font.charstrings.put(name, decrypt(charstring.getData(), CHARSTRING_KEY, lenIV));
readDef();
}
read(Token.NAME, "end");
}
private void readDef() throws IOException
{
readMaybe(Token.NAME, "readonly");
readMaybe(Token.NAME, "noaccess"); 
Token token = read(Token.NAME);
switch (token.getText())
{
case "ND":
case "|-":
return;
case "noaccess":
token = read(Token.NAME);
break;
default:
break;
}
if (token.getText().equals("def"))
{
return;
}
throw new IOException("Found " + token + " but expected ND");
}
private void readPut() throws IOException
{
readMaybe(Token.NAME, "readonly");
Token token = read(Token.NAME);
switch (token.getText())
{
case "NP":
case "|":
return;
case "noaccess":
token = read(Token.NAME);
break;
default:
break;
}
if (token.getText().equals("put"))
{
return;
}
throw new IOException("Found " + token + " but expected NP");
}
private Token read(Token.Kind kind) throws IOException
{
Token token = lexer.nextToken();
if (token == null || token.getKind() != kind)
{
throw new IOException("Found " + token + " but expected " + kind);
}
return token;
}
private void read(Token.Kind kind, String name) throws IOException
{
Token token = read(kind);
if (!token.getText().equals(name))
{
throw new IOException("Found " + token + " but expected " + name);
}
}
private Token readMaybe(Token.Kind kind, String name) throws IOException
{
Token token = lexer.peekToken();
if (token != null && token.getKind() == kind && token.getText().equals(name))
{
return lexer.nextToken();
}
return null;
}
private byte[] decrypt(byte[] cipherBytes, int r, int n)
{
if (n == -1)
{
return cipherBytes;
}
if (cipherBytes.length == 0 || n > cipherBytes.length)
{
return new byte[] {};
}
int c1 = 52845;
int c2 = 22719;
byte[] plainBytes = new byte[cipherBytes.length - n];
for (int i = 0; i < cipherBytes.length; i++)
{
int cipher = cipherBytes[i] & 0xFF;
int plain = cipher ^ r >> 8;
if (i >= n)
{
plainBytes[i - n] = (byte) plain;
}
r = (cipher + r) * c1 + c2 & 0xffff;
}
return plainBytes;
}
private boolean isBinary(byte[] bytes)
{
if (bytes.length < 4)
{
return true;
}
for (int i = 0; i < 4; ++i)
{
byte by = bytes[i];
if (by != 0x0a && by != 0x0d && by != 0x20 && by != '\t' &&
Character.digit((char) by, 16) == -1)
{
return true;
}
}
return false;
}
private byte[] hexToBinary(byte[] bytes)
{
int len = 0;
for (byte by : bytes)
{
if (Character.digit((char) by, 16) != -1)
{
++len;
}
}
byte[] res = new byte[len / 2];
int r = 0;
int prev = -1;
for (byte by : bytes)
{
int digit = Character.digit((char) by, 16);
if (digit != -1)
{
if (prev == -1)
{
prev = digit;
}
else
{
res[r++] = (byte) (prev * 16 + digit);
prev = -1;
}
}
}
return res;
}
}
