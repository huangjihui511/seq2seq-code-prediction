package net.glowstone.command;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.concurrent.ExecutionException;
import java.util.function.Function;
import java.util.function.IntFunction;
import lombok.Getter;
import net.glowstone.command.minecraft.GlowVanillaCommand;
import net.glowstone.i18n.ConsoleMessages;
import net.glowstone.i18n.LocalizedStringImpl;
import org.bukkit.util.StringUtil;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
public class LocalizedEnumNames<T> {
private static final Locale ALSO_ACCEPT_LOCALE = Locale.ENGLISH;
private final LoadingCache<Locale, Entry> cache;
private final Function<String, ? extends T> keyResolver;
private final String unknownKey;
private final String commaSeparatedNamesKey;
private final String baseName;
private final boolean reversedMap; 
public LocalizedEnumNames(IntFunction<? extends T> integerResolver, @NonNls String unknownKey,
@Nullable @NonNls String commaSeparatedNamesKey, @NonNls String baseName,
boolean reversedMap) {
this((Function<String, ? extends T>) (key -> integerResolver.apply(Integer.decode(key))),
unknownKey, commaSeparatedNamesKey, baseName, reversedMap);
}
public LocalizedEnumNames(Function<String, ? extends T> keyResolver, @NonNls String unknownKey,
@Nullable @NonNls String commaSeparatedNamesKey, @NonNls String baseName,
boolean reversedMap) {
this.keyResolver = keyResolver;
this.unknownKey = unknownKey;
this.commaSeparatedNamesKey = commaSeparatedNamesKey;
this.baseName = baseName;
this.reversedMap = reversedMap;
cache = CacheBuilder.newBuilder()
.maximumSize(GlowVanillaCommand.CACHE_SIZE)
.build(CacheLoader.from(Entry::new));
}
private <T> ImmutableSortedMap<String, T> resourceBundleToMap(Locale locale,
@NonNls String baseName, Function<String, T> integerResolver) {
Collator caseInsensitive = Collator.getInstance(locale);
caseInsensitive.setStrength(Collator.PRIMARY);
ImmutableSortedMap.Builder<String, T> nameToModeBuilder
= new ImmutableSortedMap.Builder<String, T>(caseInsensitive);
ResourceBundle bundle = ResourceBundle.getBundle(baseName, locale);
for (String key : bundle.keySet()) {
String outKey;
String outValue;
if (reversedMap) {
outKey = bundle.getString(key);
outValue = key;
} else {
outKey = key;
outValue = bundle.getString(key);
}
nameToModeBuilder.put(outKey, (T) keyResolver.apply(outValue));
}
return nameToModeBuilder.build();
}
@NotNull
public List<String> getAutoCompleteSuggestions(Locale locale, String arg) {
ImmutableList<String> result;
try {
result = cache.get(locale).modeAutoCompleteList;
} catch (ExecutionException e) {
ConsoleMessages.Error.I18n.COMMAND.log(e, locale);
return Collections.emptyList();
}
final List<String> candidates = result;
return StringUtil.copyPartialMatches(arg, candidates,
new ArrayList<>(candidates.size()));
}
@Nullable
public T nameToValue(Locale locale, String name) {
T value = null;
try {
value = cache.get(locale).nameToValue(name);
} catch (ExecutionException e) {
ConsoleMessages.Error.I18n.COMMAND.log(e, locale);
}
if (value == null) {
try {
value = cache.get(ALSO_ACCEPT_LOCALE).nameToValue(name);
} catch (ExecutionException e) {
ConsoleMessages.Error.I18n.COMMAND.log(e, ALSO_ACCEPT_LOCALE);
}
}
return value;
}
public String valueToName(Locale locale, T value) {
try {
return cache.get(locale).valueToName(value);
} catch (ExecutionException e) {
ConsoleMessages.Error.I18n.COMMAND.log(e, locale);
return "Unknown"; 
}
}
private final class Entry {
private final ImmutableSortedMap<String, ? extends T> nameToModeMap;
private final ImmutableMap<T, String> modeToNameMap;
private final String unknown;
@Getter
private final ImmutableList<String> modeAutoCompleteList;
public T nameToValue(String name) {
return nameToModeMap.get(name);
}
public String valueToName(T gameMode) {
return modeToNameMap.getOrDefault(gameMode, unknown);
}
public Entry(Locale locale) {
if (locale == null) {
locale = Locale.getDefault();
}
ResourceBundle strings
= ResourceBundle.getBundle("strings", locale); 
unknown = new LocalizedStringImpl(unknownKey, strings).get();
nameToModeMap = resourceBundleToMap(locale, baseName, keyResolver);
ImmutableMap.Builder<T, String> modeToNameBuilder = ImmutableMap.builder();
ImmutableList.Builder<String> modeAutocompleteListBuilder = ImmutableList.builder();
if (commaSeparatedNamesKey != null) {
for (String name : new LocalizedStringImpl(commaSeparatedNamesKey, strings)
.get().split(",")) {
T mode = nameToModeMap.get(name);
modeToNameBuilder.put(mode, name);
modeAutocompleteListBuilder.add(name.toLowerCase(locale));
}
} else {
for (Map.Entry<String, ? extends T> entry : nameToModeMap.entrySet()) {
modeToNameBuilder.put(entry.getValue(), entry.getKey());
modeAutocompleteListBuilder.add(entry.getKey());
}
}
if (!ALSO_ACCEPT_LOCALE.equals(locale)) {
try {
modeAutocompleteListBuilder.addAll(
cache.get(ALSO_ACCEPT_LOCALE).getModeAutoCompleteList());
} catch (ExecutionException e) {
ConsoleMessages.Error.I18n.GAME_MODE.log(e, ALSO_ACCEPT_LOCALE);
}
}
modeToNameMap = modeToNameBuilder.build();
modeAutoCompleteList = modeAutocompleteListBuilder.build();
}
}
}
