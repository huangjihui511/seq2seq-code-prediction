package org.spongepowered.mod.plugin;
import static com.google.common.base.Preconditions.checkNotNull;
import com.google.common.collect.ImmutableList;
import com.google.inject.Singleton;
import net.minecraftforge.fml.common.Loader;
import net.minecraftforge.fml.common.ModContainer;
import org.spongepowered.api.plugin.PluginContainer;
import org.spongepowered.api.plugin.PluginManager;
import org.spongepowered.api.util.annotation.NonnullByDefault;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
@NonnullByDefault
@Singleton
public class SpongeModPluginManager implements PluginManager {
@Override
public Optional<PluginContainer> getPlugin(String id) {
checkNotNull(id, "id");
ModContainer container = Loader.instance().getIndexedModList().get(id);
if (container == null) {
for (ModContainer mod : Loader.instance().getModList()) {
if (mod.getModId().equalsIgnoreCase(id)) {
container = mod;
break;
}
}
}
return Optional.ofNullable((PluginContainer) container);
}
@Override
@SuppressWarnings({"unchecked", "rawtypes"})
public Collection<PluginContainer> getPlugins() {
return ImmutableList.copyOf((List) Loader.instance().getActiveModList());
}
@Override
public Optional<PluginContainer> fromInstance(Object instance) {
checkNotNull(instance, "instance");
if (instance instanceof PluginContainer) {
return Optional.of((PluginContainer) instance);
}
return Optional.ofNullable((PluginContainer) Loader.instance().getReversedModObjectList().get(instance));
}
@Override
public boolean isLoaded(String id) {
checkNotNull(id, "id");
return Loader.isModLoaded(id);
}
}
