package com.google.auto.common;
import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.ImmutableMap.toImmutableMap;
import static javax.lang.model.util.ElementFilter.methodsIn;
import com.google.common.base.Joiner;
import com.google.common.collect.ImmutableMap;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.AnnotationValue;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
public final class SimpleAnnotationMirror implements AnnotationMirror {
private final TypeElement annotationType;
private final ImmutableMap<String, ? extends AnnotationValue> namedValues;
private final ImmutableMap<ExecutableElement, ? extends AnnotationValue> elementValues;
private SimpleAnnotationMirror(
TypeElement annotationType, Map<String, ? extends AnnotationValue> namedValues) {
checkArgument(
annotationType.getKind().equals(ElementKind.ANNOTATION_TYPE),
"annotationType must be an annotation: %s",
annotationType);
Map<String, AnnotationValue> values = new LinkedHashMap<>();
Map<String, AnnotationValue> unusedValues = new LinkedHashMap<>(namedValues);
List<String> missingMembers = new ArrayList<>();
for (ExecutableElement method : methodsIn(annotationType.getEnclosedElements())) {
String memberName = method.getSimpleName().toString();
if (unusedValues.containsKey(memberName)) {
values.put(memberName, unusedValues.remove(memberName));
} else if (method.getDefaultValue() != null) {
values.put(memberName, method.getDefaultValue());
} else {
missingMembers.add(memberName);
}
}
checkArgument(
unusedValues.isEmpty(),
"namedValues has entries for members that are not in %s: %s",
annotationType,
unusedValues);
checkArgument(
missingMembers.isEmpty(), "namedValues is missing entries for: %s", missingMembers);
this.annotationType = annotationType;
this.namedValues = ImmutableMap.copyOf(namedValues);
this.elementValues =
methodsIn(annotationType.getEnclosedElements())
.stream()
.collect(toImmutableMap(e -> e, e -> values.get(e.getSimpleName().toString())));
}
public static AnnotationMirror of(TypeElement annotationType) {
return of(annotationType, ImmutableMap.of());
}
public static AnnotationMirror of(
TypeElement annotationType, Map<String, ? extends AnnotationValue> namedValues) {
return new SimpleAnnotationMirror(annotationType, namedValues);
}
@Override
public DeclaredType getAnnotationType() {
return MoreTypes.asDeclared(annotationType.asType());
}
@Override
public Map<ExecutableElement, ? extends AnnotationValue> getElementValues() {
return elementValues;
}
@Override
public String toString() {
StringBuilder builder = new StringBuilder("@").append(annotationType.getQualifiedName());
if (!namedValues.isEmpty()) {
builder
.append('(')
.append(Joiner.on(", ").withKeyValueSeparator(" = ").join(namedValues))
.append(')');
}
return builder.toString();
}
@Override
public boolean equals(Object other) {
return other instanceof AnnotationMirror
&& AnnotationMirrors.equivalence().equivalent(this, (AnnotationMirror) other);
}
@Override
public int hashCode() {
return AnnotationMirrors.equivalence().hash(this);
}
}
