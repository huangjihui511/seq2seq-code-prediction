package org.pf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
public class CompoundPluginDescriptorFinder implements PluginDescriptorFinder {
private static final Logger log = LoggerFactory.getLogger(CompoundPluginDescriptorFinder.class);
private List<PluginDescriptorFinder> finders = new ArrayList<>();
public CompoundPluginDescriptorFinder add(PluginDescriptorFinder finder) {
if (finder == null) {
throw new IllegalArgumentException("null not allowed");
}
finders.add(finder);
return this;
}
public int size() {
return finders.size();
}
@Override
public boolean isApplicable(Path pluginPath) {
for (PluginDescriptorFinder finder : finders) {
if (finder.isApplicable(pluginPath)) {
return true;
}
}
return false;
}
@Override
public PluginDescriptor find(Path pluginPath) {
for (PluginDescriptorFinder finder : finders) {
if (finder.isApplicable(pluginPath)) {
log.debug("'{}' is applicable for plugin '{}'", finder, pluginPath);
try {
PluginDescriptor pluginDescriptor = finder.find(pluginPath);
if (pluginDescriptor != null) {
return pluginDescriptor;
}
} catch (Exception e) {
if (finders.indexOf(finder) == finders.size() - 1) {
log.error(e.getMessage(), e);
} else {
log.debug(e.getMessage());
log.debug("Try to continue with the next finder");
}
}
} else {
log.debug("'{}' is not applicable for plugin '{}'", finder, pluginPath);
}
}
throw new PluginRuntimeException("No PluginDescriptorFinder for plugin '{}'", pluginPath);
}
}
