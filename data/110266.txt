package de.codecentric.boot.admin.client.registration;
import java.util.Collections;
import java.util.Map;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
public class BlockingRegistrationClient implements RegistrationClient {
private static final ParameterizedTypeReference<Map<String, Object>> RESPONSE_TYPE = new ParameterizedTypeReference<Map<String, Object>>() {
};
private final RestTemplate restTemplate;
public BlockingRegistrationClient(RestTemplate restTemplate) {
this.restTemplate = restTemplate;
}
@Override
public String register(String adminUrl, Application application) {
ResponseEntity<Map<String, Object>> response = this.restTemplate.exchange(adminUrl, HttpMethod.POST,
new HttpEntity<>(application, this.createRequestHeaders()), RESPONSE_TYPE);
return response.getBody().get("id").toString();
}
@Override
public void deregister(String adminUrl, String id) {
this.restTemplate.delete(adminUrl + '/' + id);
}
protected HttpHeaders createRequestHeaders() {
HttpHeaders headers = new HttpHeaders();
headers.setContentType(MediaType.APPLICATION_JSON);
headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
return HttpHeaders.readOnlyHttpHeaders(headers);
}
}
