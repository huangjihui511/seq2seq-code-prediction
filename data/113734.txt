package net.pms.image;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.drew.metadata.Metadata;
import com.drew.metadata.jpeg.JpegComponent;
import com.drew.metadata.jpeg.JpegDirectory;
@SuppressWarnings("serial")
public class JPEGSubsamplingNotation implements Serializable {
private static final Logger LOGGER = LoggerFactory.getLogger(JPEGSubsamplingNotation.class);
private final double j;
private final double a;
private final double b;
public JPEGSubsamplingNotation(int j, int a, int b) {
this.j = j;
this.a = a;
this.b = b;
}
public JPEGSubsamplingNotation(double j, double a, double b) {
this.j = j;
this.a = a;
this.b = b;
}
protected JPEGSubsamplingNotation(double[] factors) {
j = factors[0];
a = factors[1];
b = factors[2];
}
public static JPEGSubsamplingNotation calculateJPEGSubsampling(Metadata metadata) {
if (metadata == null) {
throw new NullPointerException("metadata cannot be null");
}
JpegDirectory directory = metadata.getFirstDirectoryOfType(JpegDirectory.class);
if (directory == null) {
return new JPEGSubsamplingNotation(Double.NaN, Double.NaN, Double.NaN);
}
return calculateJPEGSubsampling(directory);
}
public static JPEGSubsamplingNotation calculateJPEGSubsampling(JpegDirectory directory) {
if (directory == null) {
throw new NullPointerException("directory cannot be null");
}
if (
directory.getInteger(JpegDirectory.TAG_NUMBER_OF_COMPONENTS) == null ||
directory.getInteger(JpegDirectory.TAG_NUMBER_OF_COMPONENTS).intValue() == 0
) {
return new JPEGSubsamplingNotation(Double.NaN, Double.NaN, Double.NaN);
}
int numComponents = directory.getInteger(JpegDirectory.TAG_NUMBER_OF_COMPONENTS).intValue();
int luminanceIdx = -1;
JpegComponent[] components = new JpegComponent[numComponents];
for (int i = 0; i < numComponents; i++) {
components[i] = directory.getComponent(i);
if (components[i].getComponentId() == 1) {
luminanceIdx = i;
}
}
if (luminanceIdx < 0) {
return new JPEGSubsamplingNotation(Double.NaN, Double.NaN, Double.NaN);
}
JPEGSubsamplingNotation result = null;
for (int i = 0; i < numComponents; i++) {
if (i != luminanceIdx) {
JPEGSubsamplingNotation componentResult = calculateJPEGSubsampling(components, luminanceIdx, i);
if (result == null) {
result = componentResult;
} else {
if (!result.equals(componentResult)) {
LOGGER.trace(
"Components {} and {} have mismatching chroma subsampling {} and " +
"{}. Unable to determine an overall chroma subsampling notation",
components[i - 1].getComponentName(),
components[i].getComponentName(),
result,
componentResult
);
return new JPEGSubsamplingNotation(Double.NaN, Double.NaN, Double.NaN);
}
}
}
}
return result != null ? result : new JPEGSubsamplingNotation(Double.NaN, Double.NaN, Double.NaN);
}
public static JPEGSubsamplingNotation calculateJPEGSubsampling(
JpegComponent[] components,
int luminanceIdx,
int componentIdx
) {
double[] result = new double[3];
result[0] = 4;
int hMax = 0;
int vMax = 0;
for (int i = 0; i < components.length; i++) {
hMax = Math.max(hMax, components[i].getHorizontalSamplingFactor());
vMax = Math.max(vMax, components[i].getVerticalSamplingFactor());
}
double[] h = new double[components.length];
double[] v = new double[components.length];
for (int i = 0; i < components.length; i++) {
h[i] = (double) components[i].getHorizontalSamplingFactor() / hMax;
v[i] = (double) components[i].getVerticalSamplingFactor() / vMax;
}
result[1] = 4 * h[componentIdx];
double cHeight = 2 * v[componentIdx];
result[2] = Double.NaN;
if (cHeight == 2) {
result[2] = result[1];
} else if (cHeight == 1) {
result[2] = 0;
} else if (cHeight < 1) {
result[2] = 1;
}
return new JPEGSubsamplingNotation(result);
}
public double getJ() {
return j;
}
public double getA() {
return a;
}
public double getB() {
return b;
}
@Override
public String toString() {
if (
(Double.isNaN(j) || Double.isInfinite(j)) &&
(Double.isNaN(a) || Double.isInfinite(a)) &&
(Double.isNaN(b) || Double.isInfinite(b))
) {
return "N/A";
}
DecimalFormat df = new DecimalFormat("#.##", new DecimalFormatSymbols(Locale.ROOT));
return String.format(
Locale.ROOT, "%s:%s:%s",
j == (long) j ? (long) j : df.format(j),
a == (long) a ? (long) a : df.format(a),
b == (long) b ? (long) b : df.format(b)
);
}
@Override
public int hashCode() {
final int prime = 31;
int result = 1;
long temp;
temp = Double.doubleToLongBits(a);
result = prime * result + (int) (temp ^ (temp >>> 32));
temp = Double.doubleToLongBits(b);
result = prime * result + (int) (temp ^ (temp >>> 32));
temp = Double.doubleToLongBits(j);
result = prime * result + (int) (temp ^ (temp >>> 32));
return result;
}
@Override
public boolean equals(Object obj) {
if (this == obj) {
return true;
}
if (obj == null) {
return false;
}
if (!(obj instanceof JPEGSubsamplingNotation)) {
return false;
}
JPEGSubsamplingNotation other = (JPEGSubsamplingNotation) obj;
if (Double.doubleToLongBits(a) != Double.doubleToLongBits(other.a)) {
return false;
}
if (Double.doubleToLongBits(b) != Double.doubleToLongBits(other.b)) {
return false;
}
if (Double.doubleToLongBits(j) != Double.doubleToLongBits(other.j)) {
return false;
}
return true;
}
}
