package org.gnucash.android.db.adapter;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.database.sqlite.SQLiteStatement;
import android.support.annotation.NonNull;
import org.gnucash.android.app.GnuCashApplication;
import org.gnucash.android.db.DatabaseSchema.BudgetAmountEntry;
import org.gnucash.android.db.DatabaseSchema.BudgetEntry;
import org.gnucash.android.model.Budget;
import org.gnucash.android.model.BudgetAmount;
import org.gnucash.android.model.Money;
import org.gnucash.android.model.Recurrence;
import java.util.ArrayList;
import java.util.List;
public class BudgetsDbAdapter extends DatabaseAdapter<Budget>{
private RecurrenceDbAdapter mRecurrenceDbAdapter;
private BudgetAmountsDbAdapter mBudgetAmountsDbAdapter;
public BudgetsDbAdapter(SQLiteDatabase db, BudgetAmountsDbAdapter budgetAmountsDbAdapter,
RecurrenceDbAdapter recurrenceDbAdapter) {
super(db, BudgetEntry.TABLE_NAME, new String[]{
BudgetEntry.COLUMN_NAME,
BudgetEntry.COLUMN_DESCRIPTION,
BudgetEntry.COLUMN_RECURRENCE_UID,
BudgetEntry.COLUMN_NUM_PERIODS
});
mRecurrenceDbAdapter = recurrenceDbAdapter;
mBudgetAmountsDbAdapter = budgetAmountsDbAdapter;
}
public static BudgetsDbAdapter getInstance(){
return GnuCashApplication.getBudgetDbAdapter();
}
@Override
public void addRecord(@NonNull Budget budget, UpdateMethod updateMethod) {
if (budget.getBudgetAmounts().size() == 0)
throw new IllegalArgumentException("Budgets must have budget amounts");
mRecurrenceDbAdapter.addRecord(budget.getRecurrence(), updateMethod);
super.addRecord(budget, updateMethod);
mBudgetAmountsDbAdapter.deleteBudgetAmountsForBudget(budget.getUID());
for (BudgetAmount budgetAmount : budget.getBudgetAmounts()) {
mBudgetAmountsDbAdapter.addRecord(budgetAmount, updateMethod);
}
}
@Override
public long bulkAddRecords(@NonNull List<Budget> budgetList, UpdateMethod updateMethod) {
List<BudgetAmount> budgetAmountList = new ArrayList<>(budgetList.size()*2);
for (Budget budget : budgetList) {
budgetAmountList.addAll(budget.getBudgetAmounts());
}
List<Recurrence> recurrenceList = new ArrayList<>(budgetList.size());
for (Budget budget : budgetList) {
recurrenceList.add(budget.getRecurrence());
}
mRecurrenceDbAdapter.bulkAddRecords(recurrenceList, updateMethod);
long nRow = super.bulkAddRecords(budgetList, updateMethod);
if (nRow > 0 && !budgetAmountList.isEmpty()){
mBudgetAmountsDbAdapter.bulkAddRecords(budgetAmountList, updateMethod);
}
return nRow;
}
@Override
public Budget buildModelInstance(@NonNull Cursor cursor) {
String name = cursor.getString(cursor.getColumnIndexOrThrow(BudgetEntry.COLUMN_NAME));
String description = cursor.getString(cursor.getColumnIndexOrThrow(BudgetEntry.COLUMN_DESCRIPTION));
String recurrenceUID = cursor.getString(cursor.getColumnIndexOrThrow(BudgetEntry.COLUMN_RECURRENCE_UID));
long numPeriods = cursor.getLong(cursor.getColumnIndexOrThrow(BudgetEntry.COLUMN_NUM_PERIODS));
Budget budget = new Budget(name);
budget.setDescription(description);
budget.setRecurrence(mRecurrenceDbAdapter.getRecord(recurrenceUID));
budget.setNumberOfPeriods(numPeriods);
populateBaseModelAttributes(cursor, budget);
budget.setBudgetAmounts(mBudgetAmountsDbAdapter.getBudgetAmountsForBudget(budget.getUID()));
return budget;
}
@Override
protected @NonNull SQLiteStatement setBindings(@NonNull SQLiteStatement stmt, @NonNull final Budget budget) {
stmt.clearBindings();
stmt.bindString(1, budget.getName());
if (budget.getDescription() != null)
stmt.bindString(2, budget.getDescription());
stmt.bindString(3, budget.getRecurrence().getUID());
stmt.bindLong(4, budget.getNumberOfPeriods());
stmt.bindString(5, budget.getUID());
return stmt;
}
public Cursor fetchBudgetsForAccount(String accountUID){
SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
queryBuilder.setTables(BudgetEntry.TABLE_NAME + "," + BudgetAmountEntry.TABLE_NAME
+ " ON " + BudgetEntry.TABLE_NAME + "." + BudgetEntry.COLUMN_UID + " = "
+ BudgetAmountEntry.TABLE_NAME + "." + BudgetAmountEntry.COLUMN_BUDGET_UID);
queryBuilder.setDistinct(true);
String[] projectionIn = new String[]{BudgetEntry.TABLE_NAME + ".*"};
String selection = BudgetAmountEntry.TABLE_NAME + "." + BudgetAmountEntry.COLUMN_ACCOUNT_UID + " = ?";
String[] selectionArgs = new String[]{accountUID};
String sortOrder = BudgetEntry.TABLE_NAME + "." + BudgetEntry.COLUMN_NAME + " ASC";
return queryBuilder.query(mDb, projectionIn, selection, selectionArgs, null, null, sortOrder);
}
public List<Budget> getAccountBudgets(String accountUID) {
Cursor cursor = fetchBudgetsForAccount(accountUID);
List<Budget> budgets = new ArrayList<>();
while(cursor.moveToNext()){
budgets.add(buildModelInstance(cursor));
}
cursor.close();
return budgets;
}
public Money getAccountSum(String budgetUID, long periodStart, long periodEnd){
List<BudgetAmount> budgetAmounts = mBudgetAmountsDbAdapter.getBudgetAmountsForBudget(budgetUID);
List<String> accountUIDs = new ArrayList<>();
for (BudgetAmount budgetAmount : budgetAmounts) {
accountUIDs.add(budgetAmount.getAccountUID());
}
return new AccountsDbAdapter(mDb).getAccountsBalance(accountUIDs, periodStart, periodEnd);
}
}
