package org.spongepowered.api.data.manipulator.mutable.common;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.data.key.Key;
import org.spongepowered.api.data.manipulator.DataManipulator;
import org.spongepowered.api.data.manipulator.ImmutableDataManipulator;
import org.spongepowered.api.data.manipulator.immutable.ImmutableMappedData;
import org.spongepowered.api.data.manipulator.mutable.ListData;
import org.spongepowered.api.data.manipulator.mutable.MappedData;
import org.spongepowered.api.data.value.BaseValue;
import org.spongepowered.api.data.value.mutable.MapValue;
import org.spongepowered.api.util.CollectionUtils;
import java.util.Map;
@SuppressWarnings("unchecked")
public abstract class AbstractMappedData<K, V, M extends MappedData<K, V, M, I>, I extends ImmutableMappedData<K, V, I, M>>
extends AbstractSingleData<Map<K, V>, M, I> implements MappedData<K, V, M, I> {
@Deprecated
protected AbstractMappedData(Map<K, V> value, Key<? extends BaseValue<Map<K, V>>> usedKey) {
this((Key<MapValue<K, V>>) usedKey, value);
}
protected AbstractMappedData(Key<MapValue<K, V>> usedKey, Map<K, V> value) {
super(usedKey, CollectionUtils.copyMap(value));
}
protected AbstractMappedData(Key<MapValue<K, V>> usedKey, Map<K, V> value, Map<K, V> defaultValue) {
super(usedKey, CollectionUtils.copyMap(value), CollectionUtils.copyMap(defaultValue));
}
@Override
protected MapValue<K, V> getValueGetter() {
return Sponge.getRegistry().getValueFactory().createMapValue(
(Key<MapValue<K, V>>) this.usedKey, getValue(), CollectionUtils.copyMap(this.defaultValue));
}
@Override
protected Map<K, V> getValue() {
return CollectionUtils.copyMap(super.getValue());
}
@Override
protected M setValue(Map<K, V> value) {
return super.setValue(CollectionUtils.copyMap(value));
}
@Override
public int hashCode() {
return super.hashCode();
}
@Override
public boolean equals(Object obj) {
return super.equals(obj);
}
@Override
public MapValue<K, V> getMapValue() {
return getValueGetter();
}
@Override
public Map<K, V> asMap() {
return getValue();
}
}
