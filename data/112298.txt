package com.github.jknack.handlebars.internal;
import java.io.IOException;
import java.io.Writer;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import com.github.jknack.handlebars.Context;
import com.github.jknack.handlebars.EscapingStrategy;
import com.github.jknack.handlebars.Formatter;
import com.github.jknack.handlebars.Handlebars;
import com.github.jknack.handlebars.Helper;
import com.github.jknack.handlebars.HelperRegistry;
import com.github.jknack.handlebars.Lambda;
import com.github.jknack.handlebars.Options;
import com.github.jknack.handlebars.PathCompiler;
import com.github.jknack.handlebars.PathExpression;
import com.github.jknack.handlebars.TagType;
import com.github.jknack.handlebars.Template;
class Variable extends HelperResolver {
protected final String name;
protected final TagType type;
private String startDelimiter;
private String endDelimiter;
private EscapingStrategy escapingStrategy;
private Helper<Object> helper;
private Formatter.Chain formatter;
private Helper<Object> missing;
private List<PathExpression> path;
private static final List<String> BPARAMS = Collections.emptyList();
private boolean noArg;
private Template emptyVar;
public Variable(final Handlebars handlebars, final String name,
final TagType type, final List<Param> params,
final Map<String, Param> hash) {
super(handlebars);
this.name = name.trim();
this.path = PathCompiler.compile(name, handlebars.parentScopeResolution());
this.type = type;
this.emptyVar = empty(this);
params(params);
hash(hash);
this.escapingStrategy = type == TagType.VAR
? handlebars.getEscapingStrategy()
: EscapingStrategy.NOOP;
this.formatter = handlebars.getFormatter();
this.noArg = params.size() == 0 && hash.size() == 0;
postInit();
}
@SuppressWarnings("unchecked")
public Variable(final Handlebars handlebars, final String name, final TagType type) {
this(handlebars, name, type, Collections.EMPTY_LIST,
Collections.EMPTY_MAP);
}
protected void postInit() {
this.helper = helper(name);
this.missing = handlebars.helper(HelperRegistry.HELPER_MISSING);
}
public String name() {
return name;
}
@Override
protected void merge(final Context scope, final Writer writer)
throws IOException {
Object value = value(scope, writer);
if (value != null) {
writer.append(formatAndEscape(value, formatter));
}
}
@SuppressWarnings("unchecked")
public Object value(final Context scope, final Writer writer) throws IOException {
boolean blockParam = scope.isBlockParams() && noArg;
if (helper != null && !blockParam) {
Options options = new Options(handlebars, name, type, scope, emptyVar, Template.EMPTY,
params(scope), hash(scope), BPARAMS, writer);
options.data(Context.PARAM_SIZE, this.params.size());
return helper.apply(determineContext(scope), options);
} else {
Object value = scope.get(path);
if (value == null) {
if (missing != null) {
Options options = new Options(handlebars, name, type, scope, emptyVar, Template.EMPTY,
params(scope), hash(scope), BPARAMS, writer);
options.data(Context.PARAM_SIZE, this.params.size());
value = missing.apply(determineContext(scope), options);
}
}
if (value instanceof Lambda) {
value = Lambdas.merge(handlebars, (Lambda<Object, Object>) value, scope, this);
}
return value;
}
}
private static Template empty(final Variable variable) {
return new ForwardingTemplate(variable) {
@Override
public String apply(final Context context) throws IOException {
return "";
}
@Override
public void apply(final Context context, final Writer writer) throws IOException {
}
@Override
public String apply(final Object context) throws IOException {
return "";
}
@Override
public void apply(final Object context, final Writer writer) throws IOException {
}
};
}
@Override
protected void collect(final Collection<String> result, final TagType tagType) {
if (this.type == tagType) {
result.add(name);
}
super.collect(result, tagType);
}
protected CharSequence formatAndEscape(final Object value, final Formatter.Chain formatter) {
CharSequence formatted = formatter.format(value).toString();
if (value instanceof Handlebars.SafeString) {
return formatted;
}
return escapingStrategy.escape(formatted);
}
@Override
public String text() {
StringBuilder buffer = new StringBuilder();
buffer.append(startDelimiter).append(suffix()).append(name);
String params = paramsToString(this.params);
if (params.length() > 0) {
buffer.append(" ").append(params);
}
String hash = hashToString();
if (hash.length() > 0) {
buffer.append(" ").append(hash);
}
return buffer.append(endDelimiter).toString();
}
protected String suffix() {
return "";
}
public Variable endDelimiter(final String endDelimiter) {
this.endDelimiter = endDelimiter;
return this;
}
public Variable startDelimiter(final String startDelimiter) {
this.startDelimiter = startDelimiter;
return this;
}
public String startDelimiter() {
return startDelimiter;
}
public String endDelimiter() {
return endDelimiter;
}
}
