package com.spazedog.lib.rootfw4.utils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import android.text.TextUtils;
import com.spazedog.lib.rootfw4.Common;
import com.spazedog.lib.rootfw4.Shell;
import com.spazedog.lib.rootfw4.Shell.Result;
import com.spazedog.lib.rootfw4.containers.BasicContainer;
import com.spazedog.lib.rootfw4.utils.File.FileData;
public class Filesystem {
public static final String TAG = Common.TAG + ".Filesystem";
protected final static Pattern oPatternSpaceSearch = Pattern.compile("[ \t]+");
protected final static Pattern oPatternSeparatorSearch = Pattern.compile(",");
protected final static Pattern oPatternPrefixSearch = Pattern.compile("^.*[A-Za-z]$");
protected static MountStat[] oFstabList;
protected static final Object oFstabLock = new Object();
protected Shell mShell;
protected Object mLock = new Object();
public static class DiskStat extends BasicContainer {
private String mDevice;
private String mLocation;
private Long mSize;
private Long mUsage;
private Long mAvailable;
private Integer mPercentage;
public String device() {
return mDevice;
}
public String location() {
return mLocation;
}
public Long size() {
return mSize;
}
public Long usage() {
return mUsage;
}
public Long available() {
return mAvailable;
}
public Integer percentage() {
return mPercentage;
}
}
public static class MountStat extends BasicContainer {
private String mDevice;
private String mLocation;
private String mFstype;
private String[] mOptions;
public String device() {
return mDevice;
}
public String location() {
return mLocation;
}
public String fstype() {
return mFstype;
}
public String[] options() {
return mOptions;
}
}
public Filesystem(Shell shell) {
mShell = shell;
}
public MountStat[] getFsList() {
synchronized(oFstabLock) {
if (oFstabList == null) {
Result result = mShell.execute("for DIR in /fstab.* /fstab /init.*.rc /init.rc; do echo $DIR; done");
if (result != null && result.wasSuccessful()) {
Set<String> cache = new HashSet<String>();
List<MountStat> list = new ArrayList<MountStat>();
String[] dirs = result.trim().getArray();
for (int i=0; i < dirs.length; i++) {
if (!Common.isEmulator() && dirs[i].contains("goldfish")) {
continue;
}
Boolean isFstab = dirs[i].contains("fstab");
FileData data = mShell.getFile(dirs[i]).readMatch( (isFstab ? "/dev/" : "mount "), false );
if (data != null) {
String[] lines = data.assort("#").getArray();
if (lines != null) {
for (int x=0; x < lines.length; x++) {
try {
String[] parts = oPatternSpaceSearch.split(lines[x].trim(), 5);
String options = isFstab || parts.length > 4 ? parts[ isFstab ? 3 : 4 ].replaceAll(",", " ") : "";
if (parts.length > 3 && !cache.contains(parts[ isFstab ? 1 : 3 ])) {
if (!isFstab && parts[2].contains("mtd@")) {
FileData mtd = mShell.getFile("/proc/mtd").readMatch( ("\"" + parts[2].substring(4) + "\""), false );
if (mtd != null && mtd.size() > 0) {
parts[2] = "/dev/block/mtdblock" + mtd.getLine().substring(3, mtd.getLine().indexOf(":"));
}
} else if (!isFstab && parts[2].contains("loop@")) {
parts[2] = parts[2].substring(5);
options += " loop";
}
MountStat stat = new MountStat();
stat.mDevice = parts[ isFstab ? 0 : 2 ];
stat.mFstype = parts[ isFstab ? 2 : 1 ];
stat.mLocation = parts[ isFstab ? 1 : 3 ];
stat.mOptions = oPatternSpaceSearch.split(options);
list.add(stat);
cache.add(parts[ isFstab ? 1 : 3 ]);
}
} catch(Throwable e) {}
}
}
}
}
oFstabList = list.toArray( new MountStat[ list.size() ] );
}
}
return oFstabList;
}
}
public MountStat[] getMountList() {
FileData data = mShell.getFile("/proc/mounts").read();
if (data != null) {
String[] lines = data.trim().getArray();
MountStat[] list = new MountStat[ lines.length ];
for (int i=0; i < lines.length; i++) {
try {
String[] parts = oPatternSpaceSearch.split(lines[i].trim());
list[i] = new MountStat();
list[i].mDevice = parts[0];
list[i].mFstype = parts[2];
list[i].mLocation = parts[1];
list[i].mOptions = oPatternSeparatorSearch.split(parts[3]);
} catch(Throwable e) {}
}
return list;
}
return null;
}
public Disk getDisk(String disk) {
return new Disk(mShell, disk);
}
public static class Disk extends Filesystem {
protected File mFile;
public Disk(Shell shell, String disk) {
super(shell);
mFile = shell.getFile(disk);
}
public Boolean mount(String[] options) {
return mount(null, null, options);
}
public Boolean mount(String location) {
return mount(location, null, null);
}
public Boolean mount(String location, String[] options) {
return mount(location, null, options);
}
public Boolean mount(String location, String type) {
return mount(location, type, null);
}
public Boolean mount(String location, String type, String[] options) {
String cmd = location != null && mFile.isDirectory() ?
"mount --bind '" + mFile.getAbsolutePath() + "' '" + location + "'" :
"mount" + (type != null ? " -t '" + type + "'" : "") + (options != null ? " -o '" + (location == null ? "remount," : "") + TextUtils.join(",", Arrays.asList(options)) + "'" : "") + " '" + mFile.getAbsolutePath() + "'" + (location != null ? " '" + location + "'" : "");
if (options != null && !"/".equals(mFile.getAbsolutePath())) {
for (String option : options) {
if ("rw".equals(option)) {
String blockdevice = null;
if (mFile.isDirectory()) {
MountStat stat = getMountDetails();
if (stat != null) {
blockdevice = stat.device();
} else if ((stat = getFsDetails()) != null) {
blockdevice = stat.device();
}
} else {
blockdevice = mFile.getAbsolutePath();
}
if (blockdevice != null && blockdevice.startsWith("/dev/")) {
mShell.createAttempts("blockdev --setrw '" + blockdevice + "' 2> /dev/null").execute();
}
break;
}
}
}
Result result = mShell.createAttempts(cmd).execute();
return result != null && result.wasSuccessful();
}
public Boolean unmount() {
String[] commands = new String[]{"umount '" + mFile.getAbsolutePath() + "'", "umount -f '" + mFile.getAbsolutePath() + "'"};
for (String command : commands) {
Result result = mShell.createAttempts(command).execute();
if (result != null && result.wasSuccessful()) {
return true;
}
}
return false;
}
public Boolean move(String destination) {
Result result = mShell.createAttempts("mount --move '" + mFile.getAbsolutePath() + "' '" + destination + "'").execute();
if (result == null || !result.wasSuccessful()) {
MountStat stat = getMountDetails();
if (stat != null && unmount()) {
return getDisk(stat.device()).mount(stat.location(), stat.fstype(), stat.options());
}
}
return result != null && result.wasSuccessful();
}
public Boolean isMounted() {
return getMountDetails() != null;
}
public Boolean hasOption(String option) {
MountStat stat = getMountDetails();
if (stat != null) {
String[] options = stat.options();
if (options != null && options.length > 0) {
for (int i=0; i < options.length; i++) {
if (options[i].equals(option) || options[i].startsWith(option + "=")) {
return true;
}
}
}
}
return false;
}
public String getOption(String option) {
MountStat stat = getMountDetails();
if (stat != null) {
String[] options = stat.options();
if (options != null && options.length > 0) {
for (int i=0; i < options.length; i++) {
if (options[i].startsWith(option + "=")) {
return options[i].substring( options[i].indexOf("=")+1 );
}
}
}
}
return null;
}
public MountStat getMountDetails() {
MountStat[] list = getMountList();
if (list != null) {
String path = mFile.getAbsolutePath();
if (!mFile.isDirectory()) {
for (int i=0; i < list.length; i++) {
if (list[i].device().equals(path)) {
return list[i];
}
}
} else {
do {
for (int i=0; i < list.length; i++) {
if (list[i].location().equals(path)) {
return list[i];
}
}
} while (path.lastIndexOf("/") > 0 && !(path = path.substring(0, path.lastIndexOf("/"))).equals(""));
}
}
return null;
}
public MountStat getFsDetails() {
MountStat[] list = getFsList();
if (list != null) {
String path = mFile.getAbsolutePath();
if (!mFile.isDirectory()) {
for (int i=0; i < list.length; i++) {
if (list[i].device().equals(path)) {
return list[i];
}
}
} else {
do {
for (int i=0; i < list.length; i++) {
if (list[i].location().equals(path)) {
return list[i];
}
}
} while (path.lastIndexOf("/") > 0 && !(path = path.substring(0, path.lastIndexOf("/"))).equals(""));
}
}
return null;
}
public DiskStat getDiskDetails() {
String[] commands = new String[]{"df -k '" + mFile.getAbsolutePath() + "'", "df '" + mFile.getAbsolutePath() + "'"};
for (String command : commands) {
Result result = mShell.createAttempts(command).execute();
if (result != null && result.wasSuccessful() && result.size() > 1) {
String[] parts = oPatternSpaceSearch.split(result.sort(1).trim().getString(" ").trim());
if (parts.length > 3) {
String pDevice=null, pLocation=null, prefix, prefixList[] = {"k", "m", "g", "t"};
Integer pPercentage=null;
Long pUsage, pSize, pRemaining;
Double[] pUsageSections = new Double[3];
if (parts.length > 5) {
pDevice = parts[0];
pLocation = parts[5];
pPercentage = Integer.parseInt(parts[4].substring(0, parts[4].length()-1));
} else {
MountStat stat = getMountDetails();
if (stat != null) {
pDevice = stat.device();
pLocation = stat.location();
}
}
for (int i=1; i < 4; i++) {
if (i < parts.length) {
if (oPatternPrefixSearch.matcher(parts[i]).matches()) {
pUsageSections[i-1] = Double.parseDouble( parts[i].substring(0, parts[i].length()-1) );
prefix = parts[i].substring(parts[i].length()-1).toLowerCase(Locale.US);
for (int x=0; x < prefixList.length; x++) {
pUsageSections[i-1] = pUsageSections[i-1] * 1024D;
if (prefixList[x].equals(prefix)) {
break;
}
}
} else {
pUsageSections[i-1] = Double.parseDouble(parts[i]) * 1024D;
}
} else {
pUsageSections[i-1] = 0D;
}
}
pSize = pUsageSections[0].longValue();
pUsage = pUsageSections[1].longValue();
pRemaining = pUsageSections[2].longValue();
if (pPercentage == null) {
pPercentage = pSize != 0 ? ((Long) ((pUsage * 100L) / pSize)).intValue() : 0;
}
DiskStat info = new DiskStat();
info.mDevice = pDevice;
info.mLocation = pLocation;
info.mSize = pSize;
info.mUsage = pUsage;
info.mAvailable = pRemaining;
info.mPercentage = pPercentage;
return info;
}
}
}
return null;
}
}
}
