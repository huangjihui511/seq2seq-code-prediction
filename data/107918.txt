package org.apache.zookeeper.server.jersey;
import java.util.Arrays;
import java.util.Collection;
import javax.ws.rs.core.MediaType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.zookeeper.CreateMode;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.ZooDefs.Ids;
import org.apache.zookeeper.data.Stat;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import com.sun.jersey.api.client.ClientResponse;
@RunWith(Parameterized.class)
public class DeleteTest extends Base {
protected static final Logger LOG = LoggerFactory.getLogger(DeleteTest.class);
private String zpath;
private ClientResponse.Status expectedStatus;
public static class MyWatcher implements Watcher {
public void process(WatchedEvent event) {
}
}
@Parameters
public static Collection<Object[]> data() throws Exception {
String baseZnode = Base.createBaseZNode();
return Arrays.asList(new Object[][] {
{baseZnode, baseZnode, ClientResponse.Status.NO_CONTENT },
{baseZnode, baseZnode, ClientResponse.Status.NO_CONTENT }
});
}
public DeleteTest(String path, String zpath, ClientResponse.Status status) {
this.zpath = zpath;
this.expectedStatus = status;
}
public void verify(String type) throws Exception {
if (expectedStatus != ClientResponse.Status.NOT_FOUND) {
zpath = zk.create(zpath, null, Ids.OPEN_ACL_UNSAFE,
CreateMode.PERSISTENT_SEQUENTIAL);
}
ClientResponse cr = znodesr.path(zpath).accept(type).type(type)
.delete(ClientResponse.class);
Assert.assertEquals(expectedStatus, cr.getClientResponseStatus());
Stat stat = zk.exists(zpath, false);
Assert.assertNull(stat);
}
@Test
public void testDelete() throws Exception {
verify(MediaType.APPLICATION_OCTET_STREAM);
verify(MediaType.APPLICATION_JSON);
verify(MediaType.APPLICATION_XML);
}
}
