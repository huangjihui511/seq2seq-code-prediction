package com.googlecode.dex2jar.ir.expr;
import com.googlecode.d2j.Method;
import com.googlecode.d2j.Proto;
import com.googlecode.dex2jar.ir.LabelAndLocalMapper;
import com.googlecode.dex2jar.ir.Util;
import com.googlecode.dex2jar.ir.expr.Value.EnExpr;
public class InvokeExpr extends AbstractInvokeExpr {
public Method method;
@Override
protected void releaseMemory() {
method = null;
super.releaseMemory();
}
@Override
public Proto getProto() {
return method.getProto();
}
public InvokeExpr(VT type, Value[] args, String ownerType, String methodName, String[] argmentTypes,
String returnType) {
super(type, args);
this.method = new Method(ownerType, methodName, argmentTypes, returnType);
}
public InvokeExpr(VT type, Value[] args, Method method) {
super(type, args);
this.method = method;
}
@Override
public Value clone() {
return new InvokeExpr(vt, cloneOps(), method);
}
@Override
public Value clone(LabelAndLocalMapper mapper) {
return new InvokeExpr(vt, cloneOps(mapper), method);
}
@Override
public String toString0() {
StringBuilder sb = new StringBuilder();
int i = 0;
if (super.vt == VT.INVOKE_NEW) {
sb.append("new ").append(Util.toShortClassName(method.getOwner()));
} else if (super.vt == VT.INVOKE_STATIC) {
sb.append(Util.toShortClassName(method.getOwner())).append('.')
.append(this.method.getName());
} else {
sb.append(ops[i++]).append('.').append(this.method.getName());
}
sb.append('(');
boolean first = true;
for (; i < ops.length; i++) {
if (first) {
first = false;
} else {
sb.append(',');
}
sb.append(ops[i]);
}
sb.append(')');
return sb.toString();
}
public String getOwner() {
return method.getOwner();
}
public String getRet() {
return method.getReturnType();
}
public String getName() {
return method.getName();
}
public String[] getArgs() {
return method.getParameterTypes();
}
}
