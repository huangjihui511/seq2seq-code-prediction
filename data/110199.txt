package com.google.auto.factory.processor;
import com.google.auto.common.MoreTypes;
import com.google.common.base.Equivalence;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableMap;
import java.lang.annotation.Annotation;
import java.util.Map;
import java.util.Map.Entry;
import javax.inject.Provider;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.AnnotationValue;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.SimpleElementVisitor6;
final class Mirrors {
private Mirrors() { }
static Name getQualifiedName(DeclaredType type) {
return type.asElement().accept(new SimpleElementVisitor6<Name, Void>() {
@Override
protected Name defaultAction(Element e, Void p) {
throw new AssertionError("DeclaredTypes should be TypeElements");
}
@Override
public Name visitType(TypeElement e, Void p) {
return e.getQualifiedName();
}
}, null);
}
static boolean isProvider(TypeMirror type) {
return MoreTypes.isType(type) && MoreTypes.isTypeOf(Provider.class, type);
}
static ImmutableMap<String, AnnotationValue> simplifyAnnotationValueMap(
Map<? extends ExecutableElement, ? extends AnnotationValue> annotationValueMap) {
ImmutableMap.Builder<String, AnnotationValue> builder = ImmutableMap.builder();
for (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry
: annotationValueMap.entrySet()) {
builder.put(entry.getKey().getSimpleName().toString(), entry.getValue());
}
return builder.build();
}
static Optional<AnnotationMirror> getAnnotationMirror(Element element,
Class<? extends Annotation> annotationType) {
String annotationName = annotationType.getName();
for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
if (getQualifiedName(annotationMirror.getAnnotationType()).contentEquals(annotationName)) {
return Optional.of(annotationMirror);
}
}
return Optional.absent();
}
static <T> Optional<Equivalence.Wrapper<T>> wrapOptionalInEquivalence(
Equivalence<T> equivalence, Optional<T> optional) {
return optional.isPresent()
? Optional.of(equivalence.wrap(optional.get()))
: Optional.<Equivalence.Wrapper<T>>absent();
}
static <T> Optional<T> unwrapOptionalEquivalence(
Optional<Equivalence.Wrapper<T>> wrappedOptional) {
return wrappedOptional.isPresent()
? Optional.of(wrappedOptional.get().get())
: Optional.<T>absent();
}
}
