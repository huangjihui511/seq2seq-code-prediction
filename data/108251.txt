package org.apache.flink.cep.nfa;
import org.apache.flink.cep.nfa.sharedbuffer.EventId;
import org.apache.flink.cep.nfa.sharedbuffer.NodeId;
import javax.annotation.Nullable;
import java.util.Objects;
public class ComputationState {
private final String currentStateName;
private final DeweyNumber version;
private final long startTimestamp;
@Nullable
private final NodeId previousBufferEntry;
@Nullable
private final EventId startEventID;
private ComputationState(
final String currentState,
@Nullable final NodeId previousBufferEntry,
final DeweyNumber version,
@Nullable final EventId startEventID,
final long startTimestamp) {
this.currentStateName = currentState;
this.version = version;
this.startTimestamp = startTimestamp;
this.previousBufferEntry = previousBufferEntry;
this.startEventID = startEventID;
}
public EventId getStartEventID() {
return startEventID;
}
public NodeId getPreviousBufferEntry() {
return previousBufferEntry;
}
public long getStartTimestamp() {
return startTimestamp;
}
public String getCurrentStateName() {
return currentStateName;
}
public DeweyNumber getVersion() {
return version;
}
@Override
public boolean equals(Object obj) {
if (obj instanceof ComputationState) {
ComputationState other = (ComputationState) obj;
return Objects.equals(currentStateName, other.currentStateName) &&
Objects.equals(version, other.version) &&
startTimestamp == other.startTimestamp &&
Objects.equals(startEventID, other.startEventID) &&
Objects.equals(previousBufferEntry, other.previousBufferEntry);
} else {
return false;
}
}
@Override
public String toString() {
return "ComputationState{" +
"currentStateName='" + currentStateName + '\'' +
", version=" + version +
", startTimestamp=" + startTimestamp +
", previousBufferEntry=" + previousBufferEntry +
", startEventID=" + startEventID +
'}';
}
@Override
public int hashCode() {
return Objects.hash(currentStateName, version, startTimestamp, startEventID, previousBufferEntry);
}
public static ComputationState createStartState(final String state) {
return createStartState(state, new DeweyNumber(1));
}
public static ComputationState createStartState(final String state, final DeweyNumber version) {
return createState(state, null, version, -1L, null);
}
public static ComputationState createState(
final String currentState,
final NodeId previousEntry,
final DeweyNumber version,
final long startTimestamp,
final EventId startEventID) {
return new ComputationState(currentState, previousEntry, version, startEventID, startTimestamp);
}
}
