package it.unimi.dsi.fastutil;
import java.io.Serializable;
import java.util.Comparator;
import java.util.NoSuchElementException;
public class PriorityQueues {
private PriorityQueues() {}
@SuppressWarnings("rawtypes")
public static class EmptyPriorityQueue implements PriorityQueue, Serializable {
private static final long serialVersionUID = 0L;
protected EmptyPriorityQueue() {}
@Override
public void enqueue(Object o) { throw new UnsupportedOperationException(); }
@Override
public Object dequeue() { throw new NoSuchElementException(); }
@Override
public boolean isEmpty() { return true; }
@Override
public int size() { return 0; }
@Override
public void clear() {}
@Override
public Object first() { throw new NoSuchElementException(); }
@Override
public Object last() { throw new NoSuchElementException(); }
@Override
public void changed() { throw new NoSuchElementException(); }
@Override
public Comparator<?> comparator() { return null; }
@Override
public Object clone() { return EMPTY_QUEUE; }
@Override
public int hashCode() { return 0; }
@Override
public boolean equals(final Object o) { return o instanceof PriorityQueue && ((PriorityQueue)o).isEmpty(); }
private Object readResolve() { return EMPTY_QUEUE; }
}
public static final EmptyPriorityQueue EMPTY_QUEUE = new EmptyPriorityQueue();
@SuppressWarnings("unchecked")
public static <K> PriorityQueue<K> emptyQueue() {
return EMPTY_QUEUE;
}
public static class SynchronizedPriorityQueue<K> implements PriorityQueue<K>, Serializable {
public static final long serialVersionUID = -7046029254386353129L;
protected final PriorityQueue <K> q;
protected final Object sync;
protected SynchronizedPriorityQueue(final PriorityQueue <K> q, final Object sync) {
this.q = q;
this.sync = sync;
}
protected SynchronizedPriorityQueue(final PriorityQueue <K> q) {
this.q = q;
this.sync = this;
}
@Override
public void enqueue(K x) { synchronized(sync) { q.enqueue(x); } }
@Override
public K dequeue() { synchronized(sync) { return q.dequeue(); } }
@Override
public K first() { synchronized(sync) { return q.first(); } }
@Override
public K last() { synchronized(sync) { return q.last(); } }
@Override
public boolean isEmpty() { synchronized(sync) { return q.isEmpty(); } }
@Override
public int size() { synchronized(sync) { return q.size(); } }
@Override
public void clear() { synchronized(sync) { q.clear(); } }
@Override
public void changed() { synchronized(sync) { q.changed(); } }
@Override
public Comparator <? super K> comparator() { synchronized(sync) { return q.comparator(); } }
@Override
public String toString() { synchronized(sync) { return q.toString(); } }
@Override
public int hashCode() { synchronized(sync) { return q.hashCode(); } }
@Override
public boolean equals(final Object o) { if (o == this) return true; synchronized(sync) { return q.equals(o); } }
private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
synchronized(sync) { s.defaultWriteObject(); }
}
}
public static <K> PriorityQueue <K> synchronize(final PriorityQueue <K> q) { return new SynchronizedPriorityQueue<>(q); }
public static <K> PriorityQueue <K> synchronize(final PriorityQueue <K> q, final Object sync) { return new SynchronizedPriorityQueue<>(q, sync); }
}
