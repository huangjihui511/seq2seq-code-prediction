package org.apache.flink.runtime.io.network.partition.consumer;
import org.apache.flink.annotation.VisibleForTesting;
import org.apache.flink.runtime.event.AbstractEvent;
import org.apache.flink.runtime.io.network.buffer.Buffer;
import static org.apache.flink.util.Preconditions.checkArgument;
import static org.apache.flink.util.Preconditions.checkNotNull;
public class BufferOrEvent {
private final Buffer buffer;
private final AbstractEvent event;
private boolean moreAvailable;
private int channelIndex;
private final int size;
public BufferOrEvent(Buffer buffer, int channelIndex, boolean moreAvailable) {
this.buffer = checkNotNull(buffer);
this.event = null;
this.channelIndex = channelIndex;
this.moreAvailable = moreAvailable;
this.size = buffer.getSize();
}
public BufferOrEvent(AbstractEvent event, int channelIndex, boolean moreAvailable, int size) {
this.buffer = null;
this.event = checkNotNull(event);
this.channelIndex = channelIndex;
this.moreAvailable = moreAvailable;
this.size = size;
}
@VisibleForTesting
public BufferOrEvent(Buffer buffer, int channelIndex) {
this(buffer, channelIndex, true);
}
@VisibleForTesting
public BufferOrEvent(AbstractEvent event, int channelIndex) {
this(event, channelIndex, true, 0);
}
public boolean isBuffer() {
return buffer != null;
}
public boolean isEvent() {
return event != null;
}
public Buffer getBuffer() {
return buffer;
}
public AbstractEvent getEvent() {
return event;
}
public int getChannelIndex() {
return channelIndex;
}
public void setChannelIndex(int channelIndex) {
checkArgument(channelIndex >= 0);
this.channelIndex = channelIndex;
}
boolean moreAvailable() {
return moreAvailable;
}
@Override
public String toString() {
return String.format("BufferOrEvent [%s, channelIndex = %d, size = %d]",
isBuffer() ? buffer : event, channelIndex, size);
}
public void setMoreAvailable(boolean moreAvailable) {
this.moreAvailable = moreAvailable;
}
public int getSize() {
return size;
}
}
