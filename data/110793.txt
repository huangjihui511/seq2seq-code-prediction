package org.jsoup.select;
import org.jsoup.helper.Validate;
import org.jsoup.internal.StringUtil;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
A list of {@link Element}s, with methods that act on every element in the list.
<p>
To get an {@code Elements} object, use the {@link Element#select(String)} method.
</p>
@author Jonathan Hedley, jonathan@hedley.net */
public class Elements extends ArrayList<Element> {
public Elements() {
}
public Elements(int initialCapacity) {
super(initialCapacity);
}
public Elements(Collection<Element> elements) {
super(elements);
}
public Elements(List<Element> elements) {
super(elements);
}
public Elements(Element... elements) {
super(Arrays.asList(elements));
}
@Override
public Elements clone() {
Elements clone = new Elements(size());
for(Element e : this)
clone.add(e.clone());
return clone;
}
Get an attribute value from the first matched element that has the attribute.
@param attributeKey The attribute key.
@return The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true),
or if the no elements have the attribute, returns empty string.
@see #hasAttr(String)
public String attr(String attributeKey) {
for (Element element : this) {
if (element.hasAttr(attributeKey))
return element.attr(attributeKey);
}
return "";
}
Checks if any of the matched elements have this attribute defined.
@param attributeKey attribute key
@return true if any of the elements have the attribute; false if none do.
public boolean hasAttr(String attributeKey) {
for (Element element : this) {
if (element.hasAttr(attributeKey))
return true;
}
return false;
}
public List<String> eachAttr(String attributeKey) {
List<String> attrs = new ArrayList<>(size());
for (Element element : this) {
if (element.hasAttr(attributeKey))
attrs.add(element.attr(attributeKey));
}
return attrs;
}
public Elements attr(String attributeKey, String attributeValue) {
for (Element element : this) {
element.attr(attributeKey, attributeValue);
}
return this;
}
public Elements removeAttr(String attributeKey) {
for (Element element : this) {
element.removeAttr(attributeKey);
}
return this;
}
Add the class name to every matched element's {@code class} attribute.
@param className class name to add
@return this
public Elements addClass(String className) {
for (Element element : this) {
element.addClass(className);
}
return this;
}
Remove the class name from every matched element's {@code class} attribute, if present.
@param className class name to remove
@return this
public Elements removeClass(String className) {
for (Element element : this) {
element.removeClass(className);
}
return this;
}
Toggle the class name on every matched element's {@code class} attribute.
@param className class name to add if missing, or remove if present, from every element.
@return this
public Elements toggleClass(String className) {
for (Element element : this) {
element.toggleClass(className);
}
return this;
}
Determine if any of the matched elements have this class name set in their {@code class} attribute.
@param className class name to check for
@return true if any do, false if none do
public boolean hasClass(String className) {
for (Element element : this) {
if (element.hasClass(className))
return true;
}
return false;
}
public String val() {
if (size() > 0)
return first().val();
else
return "";
}
public Elements val(String value) {
for (Element element : this)
element.val(value);
return this;
}
public String text() {
StringBuilder sb = StringUtil.borrowBuilder();
for (Element element : this) {
if (sb.length() != 0)
sb.append(" ");
sb.append(element.text());
}
return StringUtil.releaseBuilder(sb);
}
Test if any matched Element has any text content, that is not just whitespace.
@return true if any element has non-blank text content.
@see Element#hasText()
public boolean hasText() {
for (Element element: this) {
if (element.hasText())
return true;
}
return false;
}
public List<String> eachText() {
ArrayList<String> texts = new ArrayList<>(size());
for (Element el: this) {
if (el.hasText())
texts.add(el.text());
}
return texts;
}
public String html() {
StringBuilder sb = StringUtil.borrowBuilder();
for (Element element : this) {
if (sb.length() != 0)
sb.append("\n");
sb.append(element.html());
}
return StringUtil.releaseBuilder(sb);
}
public String outerHtml() {
StringBuilder sb = StringUtil.borrowBuilder();
for (Element element : this) {
if (sb.length() != 0)
sb.append("\n");
sb.append(element.outerHtml());
}
return StringUtil.releaseBuilder(sb);
}
@Override
public String toString() {
return outerHtml();
}
public Elements tagName(String tagName) {
for (Element element : this) {
element.tagName(tagName);
}
return this;
}
public Elements html(String html) {
for (Element element : this) {
element.html(html);
}
return this;
}
public Elements prepend(String html) {
for (Element element : this) {
element.prepend(html);
}
return this;
}
public Elements append(String html) {
for (Element element : this) {
element.append(html);
}
return this;
}
public Elements before(String html) {
for (Element element : this) {
element.before(html);
}
return this;
}
public Elements after(String html) {
for (Element element : this) {
element.after(html);
}
return this;
}
Wrap the supplied HTML around each matched elements. For example, with HTML
{@code <p><b>This</b> is <b>Jsoup</b></p>},
<code>doc.select("b").wrap("&lt;i&gt;&lt;/i&gt;");</code>
becomes {@code <p><i><b>This</b></i> is <i><b>jsoup</b></i></p>}
@param html HTML to wrap around each element, e.g. {@code <div class="head"></div>}. Can be arbitrarily deep.
@return this (for chaining)
@see Element#wrap
public Elements wrap(String html) {
Validate.notEmpty(html);
for (Element element : this) {
element.wrap(html);
}
return this;
}
public Elements unwrap() {
for (Element element : this) {
element.unwrap();
}
return this;
}
public Elements empty() {
for (Element element : this) {
element.empty();
}
return this;
}
public Elements remove() {
for (Element element : this) {
element.remove();
}
return this;
}
public Elements select(String query) {
return Selector.select(query, this);
}
public Elements not(String query) {
Elements out = Selector.select(query, this);
return Selector.filterOut(this, out);
}
public Elements eq(int index) {
return size() > index ? new Elements(get(index)) : new Elements();
}
public boolean is(String query) {
Evaluator eval = QueryParser.parse(query);
for (Element e : this) {
if (e.is(eval))
return true;
}
return false;
}
public Elements next() {
return siblings(null, true, false);
}
public Elements next(String query) {
return siblings(query, true, false);
}
public Elements nextAll() {
return siblings(null, true, true);
}
public Elements nextAll(String query) {
return siblings(query, true, true);
}
public Elements prev() {
return siblings(null, false, false);
}
public Elements prev(String query) {
return siblings(query, false, false);
}
public Elements prevAll() {
return siblings(null, false, true);
}
public Elements prevAll(String query) {
return siblings(query, false, true);
}
private Elements siblings(String query, boolean next, boolean all) {
Elements els = new Elements();
Evaluator eval = query != null? QueryParser.parse(query) : null;
for (Element e : this) {
do {
Element sib = next ? e.nextElementSibling() : e.previousElementSibling();
if (sib == null) break;
if (eval == null)
els.add(sib);
else if (sib.is(eval))
els.add(sib);
e = sib;
} while (all);
}
return els;
}
public Elements parents() {
HashSet<Element> combo = new LinkedHashSet<>();
for (Element e: this) {
combo.addAll(e.parents());
}
return new Elements(combo);
}
Get the first matched element.
@return The first matched element, or <code>null</code> if contents is empty.
public Element first() {
return isEmpty() ? null : get(0);
}
Get the last matched element.
@return The last matched element, or <code>null</code> if contents is empty.
public Element last() {
return isEmpty() ? null : get(size() - 1);
}
public Elements traverse(NodeVisitor nodeVisitor) {
NodeTraversor.traverse(nodeVisitor, this);
return this;
}
public Elements filter(NodeFilter nodeFilter) {
NodeTraversor.filter(nodeFilter, this);
return this;
}
public List<FormElement> forms() {
return nodesOfType(FormElement.class);
}
public List<Comment> comments() {
return nodesOfType(Comment.class);
}
public List<TextNode> textNodes() {
return nodesOfType(TextNode.class);
}
public List<DataNode> dataNodes() {
return nodesOfType(DataNode.class);
}
private <T extends Node> List<T> nodesOfType(Class<T> tClass) {
ArrayList<T> nodes = new ArrayList<>();
for (Element el: this) {
if (el.getClass().isInstance(tClass)) { 
nodes.add(tClass.cast(el));
} else if (Node.class.isAssignableFrom(tClass)) { 
for (int i = 0; i < el.childNodeSize(); i++) {
Node node = el.childNode(i);
if (tClass.isInstance(node))
nodes.add(tClass.cast(node));
}
}
}
return nodes;
}
}
