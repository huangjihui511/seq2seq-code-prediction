package com.pokegoapi.api.map;
import POGOProtos.Map.Fort.FortDataOuterClass.FortData;
import POGOProtos.Map.MapCellOuterClass.MapCell;
import POGOProtos.Map.Pokemon.MapPokemonOuterClass.MapPokemon;
import POGOProtos.Map.Pokemon.NearbyPokemonOuterClass;
import POGOProtos.Map.Pokemon.WildPokemonOuterClass.WildPokemon;
import POGOProtos.Map.SpawnPointOuterClass.SpawnPoint;
import POGOProtos.Networking.Responses.GetIncensePokemonResponseOuterClass.GetIncensePokemonResponse;
import POGOProtos.Networking.Responses.GetIncensePokemonResponseOuterClass.GetIncensePokemonResponse.Result;
import com.pokegoapi.api.PokemonGo;
import com.pokegoapi.api.gym.Gym;
import com.pokegoapi.api.map.fort.Pokestop;
import com.pokegoapi.api.map.fort.Raid;
import com.pokegoapi.api.map.pokemon.CatchablePokemon;
import com.pokegoapi.api.map.pokemon.NearbyPokemon;
import lombok.Getter;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
public class MapObjects {
private PokemonGo api;
public MapObjects(PokemonGo api) {
this.api = api;
}
@Getter
public Set<NearbyPokemon> nearby = new HashSet<>();
private Set<CatchablePokemon> pokemon = new HashSet<>();
@Getter
private Set<Point> spawnpoints = new HashSet<>();
@Getter
private Set<Point> decimatedSpawnPoints = new HashSet<>();
@Getter
public Set<Pokestop> pokestops = new HashSet<>();
@Getter
public Set<Gym> gyms = new HashSet<>();
@Getter
private Set<Raid> raids = new HashSet<>();
public void addNearby(List<NearbyPokemonOuterClass.NearbyPokemon> nearby) {
for (NearbyPokemonOuterClass.NearbyPokemon nearbyPokemon : nearby) {
this.nearby.add(new NearbyPokemon(nearbyPokemon));
}
}
public void addMapPokemon(List<MapPokemon> mapPokemon) {
for (MapPokemon pokemon : mapPokemon) {
this.pokemon.add(new CatchablePokemon(api, pokemon));
}
}
public void addWildPokemon(List<WildPokemon> wildPokemon) {
for (WildPokemon pokemon : wildPokemon) {
this.pokemon.add(new CatchablePokemon(api, pokemon));
}
}
public void addSpawnpoints(List<SpawnPoint> spawnPoints) {
for (SpawnPoint spawnPoint : spawnPoints) {
this.spawnpoints.add(new Point(spawnPoint));
}
}
public void addDecimatedSpawnpoints(List<SpawnPoint> spawnPoints) {
for (SpawnPoint spawnPoint : spawnPoints) {
this.decimatedSpawnPoints.add(new Point(spawnPoint));
}
}
public void addForts(List<FortData> forts) {
for (FortData fortData : forts) {
switch (fortData.getType()) {
case CHECKPOINT:
this.pokestops.add(new Pokestop(api, fortData));
break;
case GYM:
Gym gym = new Gym(api, fortData);
if (fortData.hasRaidInfo()) {
this.raids.add(new Raid(api, gym, fortData.getRaidInfo()));
}
this.gyms.add(gym);
break;
default:
break;
}
this.pokemon.add(new CatchablePokemon(api, fortData));
}*/
}
}
public void addIncensePokemon(GetIncensePokemonResponse response) {
if (response.getResult() == Result.INCENSE_ENCOUNTER_AVAILABLE) {
this.pokemon.add(new CatchablePokemon(api, response));
}
}
public void addCell(MapCell cell) {
this.addNearby(cell.getNearbyPokemonsList());
this.addMapPokemon(cell.getCatchablePokemonsList());
this.addWildPokemon(cell.getWildPokemonsList());
this.addSpawnpoints(cell.getSpawnPointsList());
this.addDecimatedSpawnpoints(cell.getDecimatedSpawnPointsList());
this.addForts(cell.getFortsList());
}
public Set<CatchablePokemon> getPokemon() {
Set<CatchablePokemon> pokemon = new HashSet<>();
for (CatchablePokemon catchable : this.pokemon) {
long expirationTime = catchable.expirationTimestampMs;
if ((expirationTime == -1 || api.currentTimeMillis() < expirationTime) && !catchable.despawned) {
pokemon.add(catchable);
}
}
return pokemon;
}
public Pokestop getPokestop(String id) {
for (Pokestop pokestop : pokestops) {
if (pokestop.getId().equals(id)) {
return pokestop;
}
}
return null;
}
public Gym getGym(String id) {
for (Gym gym : gyms) {
if (gym.getId().equals(id)) {
return gym;
}
}
return null;
}
}
