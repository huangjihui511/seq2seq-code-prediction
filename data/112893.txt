package me.ramswaroop.jbot.core.slack;
import com.fasterxml.jackson.databind.ObjectMapper;
import me.ramswaroop.jbot.core.common.BaseBot;
import me.ramswaroop.jbot.core.common.BotWebSocketHandler;
import me.ramswaroop.jbot.core.common.Controller;
import me.ramswaroop.jbot.core.common.EventType;
import me.ramswaroop.jbot.core.slack.models.Event;
import me.ramswaroop.jbot.core.slack.models.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.client.WebSocketConnectionManager;
import org.springframework.web.socket.client.standard.StandardWebSocketClient;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
public abstract class Bot extends BaseBot {
private static final Logger logger = LoggerFactory.getLogger(Bot.class);
private final Object sendMessageLock = new Object();
@Autowired
protected SlackService slackService;
private PingTask pingTask;
private ScheduledExecutorService pingScheduledExecutorService;
private WebSocketConnectionManager webSocketManager;
public abstract String getSlackToken();
public abstract Bot getSlackBot();
public void afterConnectionEstablished(WebSocketSession session) {
logger.debug("WebSocket connected: {}", session);
}
public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {
logger.debug("WebSocket closed: {}, Close Status: {}", session, status);
}
public void handleTransportError(WebSocketSession session, Throwable exception) {
logger.error("Transport Error for session with id [{}]: ", session.getId(), exception);
}
public final void handleTextMessage(WebSocketSession session, TextMessage textMessage) {
ObjectMapper mapper = new ObjectMapper();
logger.debug("Response from Slack: {}", textMessage.getPayload());
try {
Event event = mapper.readValue(textMessage.getPayload(), Event.class);
if (event.getType() != null) {
if (event.getType().equalsIgnoreCase(EventType.IM_OPEN.name())
|| event.getType().equalsIgnoreCase(EventType.IM_CREATED.name())) {
if (event.getChannelId() != null) {
slackService.addImChannelId(event.getChannelId());
} else if (event.getChannel() != null) {
slackService.addImChannelId(event.getChannel().getId());
}
} else if (event.getType().equalsIgnoreCase(EventType.MESSAGE.name())) {
if (event.getText() != null && event.getText().contains(slackService.getCurrentUser().getId())) { 
event.setType(EventType.DIRECT_MENTION.name());
} else if (slackService.getImChannelIds().contains(event.getChannelId())) { 
event.setType(EventType.DIRECT_MESSAGE.name());
}
} else if (event.getType().equalsIgnoreCase(EventType.HELLO.name())) {
pingAtRegularIntervals(session);
}
} else { 
event.setType(EventType.ACK.name());
}
if (isConversationOn(event)) {
invokeChainedMethod(session, event);
} else {
invokeMethods(session, event);
}
} catch (Exception e) {
logger.error("Error handling response from Slack: {} \nException: ", textMessage.getPayload(), e);
}
}
protected final void reply(WebSocketSession session, Event event, Message reply) {
try {
if (StringUtils.isEmpty(reply.getType())) {
reply.setType(EventType.MESSAGE.name().toLowerCase());
}
reply.setText(encode(reply.getText()));
if (reply.getChannel() == null && event.getChannelId() != null) {
reply.setChannel(event.getChannelId());
}
synchronized (sendMessageLock) {
session.sendMessage(new TextMessage(reply.toJSONString()));
}
if (logger.isDebugEnabled()) {  
logger.debug("Reply (Message): {}", reply.toJSONString());
}
} catch (IOException e) {
logger.error("Error sending event: {}. Exception: {}", event.getText(), e.getMessage());
}
}
protected final void reply(WebSocketSession session, Event event, String text) {
reply(session, event, new Message(text));
}
protected final void startConversation(Event event, String methodName) {
startConversation(event.getChannelId(), methodName);
}
protected final void nextConversation(Event event) {
nextConversation(event.getChannelId());
}
protected final void stopConversation(Event event) {
stopConversation(event.getChannelId());
}
protected final boolean isConversationOn(Event event) {
return isConversationOn(event.getChannelId());
}
private void invokeMethods(WebSocketSession session, Event event) {
try {
List<MethodWrapper> methodWrappers = eventToMethodsMap.get(event.getType().toUpperCase());
if (methodWrappers == null) return;
methodWrappers = new ArrayList<>(methodWrappers);
MethodWrapper matchedMethod = getMethodWithMatchingPatternAndFilterUnmatchedMethods(event.getText(), methodWrappers);
if (matchedMethod != null) {
methodWrappers = new ArrayList<>();
methodWrappers.add(matchedMethod);
}
for (MethodWrapper methodWrapper : methodWrappers) {
Method method = methodWrapper.getMethod();
if (Arrays.asList(method.getParameterTypes()).contains(Matcher.class)) {
method.invoke(this, session, event, methodWrapper.getMatcher());
} else {
method.invoke(this, session, event);
}
}
} catch (Exception e) {
logger.error("Error invoking controller: ", e);
}
}
private void invokeChainedMethod(WebSocketSession session, Event event) {
Queue<MethodWrapper> queue = conversationQueueMap.get(event.getChannelId());
if (queue != null && !queue.isEmpty()) {
MethodWrapper methodWrapper = queue.peek();
try {
EventType[] eventTypes = methodWrapper.getMethod().getAnnotation(Controller.class).events();
for (EventType eventType : eventTypes) {
if (eventType.name().equalsIgnoreCase(event.getType())) {
methodWrapper.getMethod().invoke(this, session, event);
return;
}
}
} catch (Exception e) {
logger.error("Error invoking chained method: ", e);
}
}
}
private String encode(String message) {
return message == null ? null : message.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");
}
private StandardWebSocketClient client() {
return new StandardWebSocketClient();
}
private BotWebSocketHandler handler() {
return new BotWebSocketHandler(getSlackBot());
}
@PostConstruct
protected void startRTMAndWebSocketConnection() {
slackService.connectRTM(getSlackToken());
if (slackService.getWebSocketUrl() != null) {
webSocketManager = new WebSocketConnectionManager(client(), handler(), slackService.getWebSocketUrl());
webSocketManager.start();
} else {
logger.error("No web socket url returned by Slack.");
}
}
@PreDestroy
public void destroy() {
if (pingScheduledExecutorService != null) {
pingScheduledExecutorService.shutdownNow();
}
}
private void pingAtRegularIntervals(WebSocketSession session) {
pingTask = new PingTask(session);
if (pingScheduledExecutorService != null) {
pingScheduledExecutorService.shutdownNow();
}
pingScheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
pingScheduledExecutorService.scheduleAtFixedRate(pingTask, 1L, 30L, TimeUnit.SECONDS);
}
class PingTask implements Runnable {
WebSocketSession webSocketSession;
PingTask(WebSocketSession webSocketSession) {
this.webSocketSession = webSocketSession;
}
@Override
public void run() {
try {
logger.debug("Pinging Slack...");
Message message = new Message();
message.setType(EventType.PING.name().toLowerCase());
synchronized (sendMessageLock) {
webSocketSession.sendMessage(new TextMessage(message.toJSONString()));
}
} catch (Exception e) {
logger.error("Error pinging Slack. Slack bot may go offline when not active. Exception: ", e);
if (!isWebSocketSessionOpen()) {
try {
webSocketManager.stop();
} catch (Exception innerException) {
logger.error("Error closing websocket after failed ping. Exception: ", innerException);
}
pingTask = null;
if (pingScheduledExecutorService != null) {
pingScheduledExecutorService.shutdownNow();
}
pingScheduledExecutorService = null;
startRTMAndWebSocketConnection();
}
}
}
boolean isWebSocketSessionOpen() {
return pingTask != null && webSocketSession.isOpen();
}
}
}
