package com.roughike.bottombar;
import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build;
import android.support.annotation.AttrRes;
import android.support.annotation.ColorInt;
import android.support.annotation.Dimension;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.support.annotation.Px;
import android.support.annotation.StyleRes;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import android.widget.TextView;
import static android.support.annotation.Dimension.DP;
class MiscUtils {
@NonNull protected static TypedValue getTypedValue(@NonNull Context context, @AttrRes int resId) {
TypedValue tv = new TypedValue();
context.getTheme().resolveAttribute(resId, tv, true);
return tv;
}
@ColorInt
protected static int getColor(@NonNull Context context, @AttrRes int color) {
return getTypedValue(context, color).data;
}
@DrawableRes
protected static int getDrawableRes(@NonNull Context context, @AttrRes int drawable) {
return getTypedValue(context, drawable).resourceId;
}
protected static int dpToPixel(@NonNull Context context, @Dimension(unit = DP) float dp) {
Resources resources = context.getResources();
DisplayMetrics metrics = resources.getDisplayMetrics();
try {
return (int) (dp * metrics.density);
} catch (NoSuchFieldError ignored) {
return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, metrics);
}
}
protected static int pixelToDp(@NonNull Context context, @Px int px) {
DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
return Math.round(px / displayMetrics.density);
}
protected static int getScreenWidth(@NonNull Context context) {
DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
return (int) (displayMetrics.widthPixels / displayMetrics.density);
}
@SuppressWarnings("deprecation")
protected static void setTextAppearance(@NonNull TextView textView, @StyleRes int resId) {
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
textView.setTextAppearance(resId);
} else {
textView.setTextAppearance(textView.getContext(), resId);
}
}
protected static boolean isNightMode(@NonNull Context context) {
int currentNightMode = context.getResources().getConfiguration().uiMode
& Configuration.UI_MODE_NIGHT_MASK;
return currentNightMode == Configuration.UI_MODE_NIGHT_YES;
}
}
