package com.github.benmanes.caffeine.cache;
import static java.util.Objects.requireNonNull;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
@SuppressWarnings("PMD.MissingStaticMethodInNonInstantiatableClass")
final class References {
private References() {}
interface InternalReference<E> {
@Nullable
E get();
@NonNull
Object getKeyReference();
default boolean referenceEquals(@Nullable Object object) {
if (object == this) {
return true;
} else if (object instanceof InternalReference<?>) {
InternalReference<?> referent = (InternalReference<?>) object;
return (get() == referent.get());
}
return false;
}
}
static final class LookupKeyReference<E> implements InternalReference<E> {
private final int hashCode;
private final E e;
public LookupKeyReference(@NonNull E e) {
this.hashCode = System.identityHashCode(e);
this.e = requireNonNull(e);
}
@Override
public E get() {
return e;
}
@Override
public Object getKeyReference() {
return this;
}
@Override
public boolean equals(Object object) {
return referenceEquals(object);
}
@Override
public int hashCode() {
return hashCode;
}
}
static class WeakKeyReference<K> extends WeakReference<K> implements InternalReference<K> {
private final int hashCode;
public WeakKeyReference(@Nullable K key, @Nullable ReferenceQueue<K> queue) {
super(key, queue);
hashCode = System.identityHashCode(key);
}
@Override
public Object getKeyReference() {
return this;
}
@Override
public boolean equals(Object object) {
return referenceEquals(object);
}
@Override
public int hashCode() {
return hashCode;
}
}
static final class WeakValueReference<V> extends WeakReference<V>
implements InternalReference<V> {
private final Object keyReference;
public WeakValueReference(@NonNull Object keyReference,
@Nullable V value, @Nullable ReferenceQueue<V> queue) {
super(value, queue);
this.keyReference = keyReference;
}
@Override
public Object getKeyReference() {
return keyReference;
}
@Override
public boolean equals(Object object) {
return referenceEquals(object);
}
@Override
@SuppressWarnings("PMD.UselessOverridingMethod")
public int hashCode() {
return super.hashCode();
}
}
static final class SoftValueReference<V> extends SoftReference<V>
implements InternalReference<V> {
private final Object keyReference;
public SoftValueReference(@NonNull Object keyReference,
@Nullable V value, @Nullable ReferenceQueue<V> queue) {
super(value, queue);
this.keyReference = keyReference;
}
@Override
public Object getKeyReference() {
return keyReference;
}
@Override
public boolean equals(Object object) {
return referenceEquals(object);
}
@Override
@SuppressWarnings("PMD.UselessOverridingMethod")
public int hashCode() {
return super.hashCode();
}
}
}
