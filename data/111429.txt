package io.grpc.alts.internal;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Preconditions.checkState;
import io.grpc.alts.internal.TsiFrameProtector.Consumer;
import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelException;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelOutboundHandler;
import io.netty.channel.ChannelPromise;
import io.netty.channel.PendingWriteQueue;
import io.netty.handler.codec.ByteToMessageDecoder;
import java.net.SocketAddress;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
public final class TsiFrameHandler extends ByteToMessageDecoder implements ChannelOutboundHandler {
private static final Logger logger = Logger.getLogger(TsiFrameHandler.class.getName());
private TsiFrameProtector protector;
private PendingWriteQueue pendingUnprotectedWrites;
private boolean closeInitiated;
public TsiFrameHandler(TsiFrameProtector protector) {
this.protector = checkNotNull(protector, "protector");
}
@Override
public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
super.handlerAdded(ctx);
assert pendingUnprotectedWrites == null;
pendingUnprotectedWrites = new PendingWriteQueue(checkNotNull(ctx));
}
@Override
protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
checkState(protector != null, "decode() called after close()");
protector.unprotect(in, out, ctx.alloc());
}
@Override
@SuppressWarnings("FutureReturnValueIgnored") 
public void write(ChannelHandlerContext ctx, Object message, ChannelPromise promise) {
if (protector == null) {
promise.setFailure(new IllegalStateException("write() called after close()"));
return;
}
ByteBuf msg = (ByteBuf) message;
if (!msg.isReadable()) {
promise.setSuccess();
return;
}
pendingUnprotectedWrites.add(msg, promise);
}
@Override
public void handlerRemoved0(ChannelHandlerContext ctx) throws Exception {
destroyProtectorAndWrites();
}
@Override
public void disconnect(ChannelHandlerContext ctx, ChannelPromise promise) {
doClose(ctx);
ctx.disconnect(promise);
}
@Override
public void close(ChannelHandlerContext ctx, ChannelPromise promise) {
doClose(ctx);
ctx.close(promise);
}
private void doClose(ChannelHandlerContext ctx) {
if (closeInitiated) {
return;
}
closeInitiated = true;
try {
if (!pendingUnprotectedWrites.isEmpty()) {
flush(ctx);
}
} catch (GeneralSecurityException e) {
logger.log(Level.FINE, "Ignored error on flush before close", e);
} finally {
destroyProtectorAndWrites();
}
}
@Override
@SuppressWarnings("FutureReturnValueIgnored") 
public void flush(final ChannelHandlerContext ctx) throws GeneralSecurityException {
if (pendingUnprotectedWrites == null || pendingUnprotectedWrites.isEmpty()) {
return;
}
checkState(protector != null, "flush() called after close()");
final ProtectedPromise aggregatePromise =
new ProtectedPromise(ctx.channel(), ctx.executor(), pendingUnprotectedWrites.size());
List<ByteBuf> bufs = new ArrayList<>(pendingUnprotectedWrites.size());
while (!pendingUnprotectedWrites.isEmpty()) {
ByteBuf in = (ByteBuf) pendingUnprotectedWrites.current();
bufs.add(in.retain());
aggregatePromise.addUnprotectedPromise(pendingUnprotectedWrites.remove());
}
final class ProtectedFrameWriteFlusher implements Consumer<ByteBuf> {
@Override
public void accept(ByteBuf byteBuf) {
ctx.writeAndFlush(byteBuf, aggregatePromise.newPromise());
}
}
protector.protectFlush(bufs, new ProtectedFrameWriteFlusher(), ctx.alloc());
aggregatePromise.doneAllocatingPromises();
}
@Override
public void bind(ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise) {
ctx.bind(localAddress, promise);
}
@Override
public void connect(
ChannelHandlerContext ctx,
SocketAddress remoteAddress,
SocketAddress localAddress,
ChannelPromise promise) {
ctx.connect(remoteAddress, localAddress, promise);
}
@Override
public void deregister(ChannelHandlerContext ctx, ChannelPromise promise) {
ctx.deregister(promise);
}
@Override
public void read(ChannelHandlerContext ctx) {
ctx.read();
}
private void destroyProtectorAndWrites() {
try {
if (pendingUnprotectedWrites != null && !pendingUnprotectedWrites.isEmpty()) {
pendingUnprotectedWrites.removeAndFailAll(
new ChannelException("Pending write on teardown of TSI handler"));
}
} finally {
pendingUnprotectedWrites = null;
}
if (protector != null) {
try {
protector.destroy();
} finally {
protector = null;
}
}
}
}
