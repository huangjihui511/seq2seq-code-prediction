package com.oracle.truffle.llvm.parser.model.symbols.instructions;
import com.oracle.truffle.llvm.parser.model.SymbolTable;
import com.oracle.truffle.llvm.parser.model.visitors.SymbolVisitor;
import com.oracle.truffle.llvm.runtime.types.Type;
import com.oracle.truffle.llvm.parser.model.SymbolImpl;
public final class SelectInstruction extends ValueInstruction {
private SymbolImpl condition;
private SymbolImpl trueValue;
private SymbolImpl falseValue;
private SelectInstruction(Type type) {
super(type);
}
@Override
public void accept(SymbolVisitor visitor) {
visitor.visit(this);
}
public SymbolImpl getCondition() {
return condition;
}
public SymbolImpl getFalseValue() {
return falseValue;
}
public SymbolImpl getTrueValue() {
return trueValue;
}
@Override
public void replace(SymbolImpl original, SymbolImpl replacement) {
if (condition == original) {
condition = replacement;
}
if (falseValue == original) {
falseValue = replacement;
}
if (trueValue == original) {
trueValue = replacement;
}
}
public static SelectInstruction fromSymbols(SymbolTable symbols, Type type, int condition, int trueValue, int falseValue) {
final SelectInstruction inst = new SelectInstruction(type);
inst.condition = symbols.getForwardReferenced(condition, inst);
inst.trueValue = symbols.getForwardReferenced(trueValue, inst);
inst.falseValue = symbols.getForwardReferenced(falseValue, inst);
return inst;
}
}
