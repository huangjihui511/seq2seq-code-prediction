package com.datumbox.framework.common.concurrency;
import com.datumbox.framework.common.interfaces.Configurable;
import java.util.Properties;
public class ConcurrencyConfiguration implements Configurable {
public static final int AVAILABLE_PROCESSORS = Runtime.getRuntime().availableProcessors();
private boolean parallelized = true;
private Integer maxNumberOfThreadsPerTask = AVAILABLE_PROCESSORS;
public ConcurrencyConfiguration() {
}
public boolean isParallelized() {
return parallelized;
}
public void setParallelized(boolean parallelized) {
this.parallelized = parallelized;
}
public Integer getMaxNumberOfThreadsPerTask() {
return maxNumberOfThreadsPerTask;
}
public void setMaxNumberOfThreadsPerTask(Integer maxNumberOfThreadsPerTask) {
if(maxNumberOfThreadsPerTask<0) {
throw new IllegalArgumentException("The max number of threads can not be negative.");
}
else if(maxNumberOfThreadsPerTask==0) {
this.maxNumberOfThreadsPerTask = AVAILABLE_PROCESSORS;
}
else {
this.maxNumberOfThreadsPerTask = Math.min(maxNumberOfThreadsPerTask, 4*AVAILABLE_PROCESSORS);
}
}
@Override
public void load(Properties properties) {
setParallelized("true".equalsIgnoreCase(properties.getProperty("concurrencyConfiguration.parallelized")));
setMaxNumberOfThreadsPerTask(Integer.parseInt(properties.getProperty("concurrencyConfiguration.maxNumberOfThreadsPerTask")));
if(isParallelized()==false) {
setMaxNumberOfThreadsPerTask(1);
}
else if(getMaxNumberOfThreadsPerTask()==1) {
setParallelized(false);
}
}
}
