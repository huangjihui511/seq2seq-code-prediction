package com.netflix.astyanax.model;
import com.netflix.astyanax.Keyspace;
import com.netflix.astyanax.Serializer;
import com.netflix.astyanax.connectionpool.exceptions.ConnectionException;
import com.netflix.astyanax.ddl.ColumnFamilyDefinition;
import com.netflix.astyanax.ddl.KeyspaceDefinition;
import com.netflix.astyanax.impl.PreparedIndexExpressionImpl;
import com.netflix.astyanax.query.PreparedIndexExpression;
import com.netflix.astyanax.serializers.ByteBufferSerializer;
public class ColumnFamily<K, C> implements Comparable<ColumnFamily<K,C>>{
private final String columnFamilyName;
private final Serializer<K> keySerializer;
private final Serializer<C> columnSerializer;
private final Serializer<?> defaultValueSerializer;
private final ColumnType type;
private ColumnFamilyDefinition cfDef;
private String keyAlias = "key";
public ColumnFamily(String columnFamilyName, Serializer<K> keySerializer, Serializer<C> columnSerializer,
ColumnType type) {
this.columnFamilyName = columnFamilyName;
this.keySerializer = keySerializer;
this.columnSerializer = columnSerializer;
this.defaultValueSerializer = ByteBufferSerializer.get();
this.type = type;
}
public ColumnFamily(String columnFamilyName, Serializer<K> keySerializer, Serializer<C> columnSerializer) {
this(columnFamilyName, keySerializer, columnSerializer, ByteBufferSerializer.get());
}
public ColumnFamily(String columnFamilyName, Serializer<K> keySerializer, Serializer<C> columnSerializer, Serializer<?> defaultValueSerializer) {
this.columnFamilyName = columnFamilyName;
this.keySerializer = keySerializer;
this.columnSerializer = columnSerializer;
this.defaultValueSerializer = defaultValueSerializer;
this.type = ColumnType.STANDARD;
}
public String getName() {
return columnFamilyName;
}
public Serializer<C> getColumnSerializer() {
return columnSerializer;
}
public Serializer<K> getKeySerializer() {
return keySerializer;
}
public Serializer<?> getDefaultValueSerializer() {
return defaultValueSerializer;
}
public ColumnType getType() {
return type;
}
public void setKeyAlias(String alias) {
keyAlias = alias;
}
public String getKeyAlias() {
return keyAlias;
}
public PreparedIndexExpression<K, C> newIndexClause() {
return new PreparedIndexExpressionImpl<K, C>(this.columnSerializer);
}
public static <K, C> ColumnFamily<K, C> newColumnFamily(String columnFamilyName, Serializer<K> keySerializer,
Serializer<C> columnSerializer) {
return new ColumnFamily<K, C>(columnFamilyName, keySerializer, columnSerializer);
}
public static <K, C> ColumnFamily<K, C> newColumnFamily(String columnFamilyName, Serializer<K> keySerializer,
Serializer<C> columnSerializer, Serializer<?> defaultSerializer) {
return new ColumnFamily<K, C>(columnFamilyName, keySerializer, columnSerializer, defaultSerializer);
}
@Override
public int compareTo(ColumnFamily<K, C> other) {
return getName().compareTo(other.getName());
}
@Override
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (!(obj instanceof ColumnFamily))
return false;
ColumnFamily other = (ColumnFamily) obj;
return (getName() == null) ? other.getName() == null : getName().equals(other.getName());
}
@Override
public int hashCode() {
final int prime = 31;
int result = 1;
result = prime * result + ((getName() == null) ? 0 : getName().hashCode());
return result;
}
public boolean inThriftMode() {
return true;
}
public ColumnFamilyDefinition describe(Keyspace keyspace) throws ConnectionException {
KeyspaceDefinition ksDef = keyspace.describeKeyspace();
cfDef = ksDef.getColumnFamily(this.getName());
return cfDef;
}
public ColumnFamilyDefinition getColumnFamilyDefinition() {
return cfDef;
}
}
