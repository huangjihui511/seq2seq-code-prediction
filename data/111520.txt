package com.google.refine.extension.database.mysql;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.google.refine.extension.database.DatabaseConfiguration;
import com.google.refine.extension.database.DatabaseServiceException;
import com.google.refine.extension.database.SQLType;
public class MySQLConnectionManager {
private static final Logger logger = LoggerFactory.getLogger("MySQLConnectionManager");
private Connection connection;
private SQLType type;
private static MySQLConnectionManager instance;
private MySQLConnectionManager() {
type = SQLType.forName(MySQLDatabaseService.DB_NAME);
}
public static MySQLConnectionManager getInstance() throws DatabaseServiceException {
if (instance == null) {
logger.debug("::Creating new MySQLConnectionManager ::");
instance = new MySQLConnectionManager();
}
return instance;
}
public SQLType getType() {
return this.type;
}
public boolean testConnection(DatabaseConfiguration databaseConfiguration) throws DatabaseServiceException{
try {
boolean connResult = false;
Connection conn = getConnection(databaseConfiguration, true);
if(conn != null) {
connResult = true;
conn.close();
}
return connResult;
}
catch (SQLException e) {
logger.error("Test connection Failed!", e);
throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
}
}
public Connection getConnection(DatabaseConfiguration databaseConfiguration, boolean forceNewConnection) throws DatabaseServiceException{
try {
if (connection != null && !forceNewConnection) {
if (!connection.isClosed()) {
if(logger.isDebugEnabled()){
logger.debug("Returning existing connection::{}", connection);
}
return connection;
}
}
String dbURL = getDatabaseUrl(databaseConfiguration);
Class.forName(type.getClassPath());
DriverManager.setLoginTimeout(10);
connection = DriverManager.getConnection(dbURL, databaseConfiguration.getDatabaseUser(),
databaseConfiguration.getDatabasePassword());
if(logger.isDebugEnabled()) {
logger.debug("*** Acquired New  connection for ::{} **** ", dbURL);
}
return connection;
} catch (ClassNotFoundException e) {
logger.error("Jdbc Driver not found", e);
throw new DatabaseServiceException(e.getMessage());
} catch (SQLException e) {
logger.error("SQLException::Couldn't get a Connection!", e);
throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
}
}
public void shutdown() {
if (connection != null) {
try {
connection.close();
}
catch (SQLException e) {
logger.warn("Non-Managed connection could not be closed. Whoops!", e);
}
}
}
private String getDatabaseUrl(DatabaseConfiguration dbConfig) {
int port = dbConfig.getDatabasePort();
return "jdbc:" + dbConfig.getDatabaseType() + ":
+ ((port == 0) ? "" : (":" + port)) + "/" + dbConfig.getDatabaseName() + "?useSSL=" + dbConfig.isUseSSL();
}
}
