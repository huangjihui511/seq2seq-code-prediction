package org.gnucash.android.db.adapter;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.support.annotation.NonNull;
import android.text.TextUtils;
import android.util.Log;
import org.gnucash.android.db.DatabaseSchema;
import org.gnucash.android.db.DatabaseSchema.AccountEntry;
import org.gnucash.android.db.DatabaseSchema.CommonColumns;
import org.gnucash.android.db.DatabaseSchema.SplitEntry;
import org.gnucash.android.db.DatabaseSchema.TransactionEntry;
import org.gnucash.android.model.AccountType;
import org.gnucash.android.model.BaseModel;
import org.gnucash.android.util.TimestampHelper;
import java.util.ArrayList;
import java.util.List;
public abstract class DatabaseAdapter<Model extends BaseModel> {
protected String LOG_TAG = "DatabaseAdapter";
protected final SQLiteDatabase mDb;
protected final String mTableName;
protected final String[] mColumns;
protected volatile SQLiteStatement mReplaceStatement;
protected volatile SQLiteStatement mUpdateStatement;
protected volatile SQLiteStatement mInsertStatement;
public enum UpdateMethod {
insert, update, replace
};
public DatabaseAdapter(SQLiteDatabase db, @NonNull String tableName, @NonNull String[] columns) {
this.mTableName = tableName;
this.mDb = db;
this.mColumns = columns;
if (!db.isOpen() || db.isReadOnly())
throw new IllegalArgumentException("Database not open or is read-only. Require writeable database");
if (mDb.getVersion() >= 9) {
createTempView();
}
LOG_TAG = getClass().getSimpleName();
}
private void createTempView() {
mDb.execSQL("CREATE TEMP VIEW IF NOT EXISTS trans_split_acct AS SELECT "
+ TransactionEntry.TABLE_NAME + "." + CommonColumns.COLUMN_MODIFIED_AT + " AS "
+ TransactionEntry.TABLE_NAME + "_" + CommonColumns.COLUMN_MODIFIED_AT + " , "
+ TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS "
+ TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " , "
+ TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " AS "
+ TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_DESCRIPTION + " , "
+ TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_NOTES + " AS "
+ TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_NOTES + " , "
+ TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_CURRENCY + " AS "
+ TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_CURRENCY + " , "
+ TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " AS "
+ TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " , "
+ TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + " AS "
+ TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_EXPORTED + " , "
+ TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " AS "
+ TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TEMPLATE + " , "
+ SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_UID + " AS "
+ SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_UID + " , "
+ SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " AS "
+ SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_TYPE + " , "
+ SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_VALUE_NUM + " AS "
+ SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_VALUE_NUM + " , "
+ SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_VALUE_DENOM + " AS "
+ SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_VALUE_DENOM + " , "
+ SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_QUANTITY_NUM + " AS "
+ SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_QUANTITY_NUM + " , "
+ SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_QUANTITY_DENOM + " AS "
+ SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_QUANTITY_DENOM + " , "
+ SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_MEMO + " AS "
+ SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_MEMO + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_NAME + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_NAME + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_CURRENCY + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_CURRENCY + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_PLACEHOLDER + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_PLACEHOLDER + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_COLOR_CODE + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_COLOR_CODE + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_FAVORITE + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FAVORITE + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_FULL_NAME + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FULL_NAME + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_TYPE + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_TYPE + " , "
+ AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID + " AS "
+ AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID
+ " FROM " + TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME + " ON "
+ TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + "=" + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID
+ " , " + AccountEntry.TABLE_NAME + " ON "
+ SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + "=" + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
);
mDb.execSQL("CREATE TEMP VIEW IF NOT EXISTS trans_extra_info AS SELECT " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
" AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "_" +
SplitEntry.COLUMN_MEMO + " , '' ) == '' THEN 'a' ELSE 'b' END ) || " +
AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID +
" ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" +
SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "_" +
SplitEntry.COLUMN_VALUE_NUM + " ELSE - " + SplitEntry.TABLE_NAME + "_" +
SplitEntry.COLUMN_VALUE_NUM + " END ) * 1.0 / " + SplitEntry.TABLE_NAME + "_" +
SplitEntry.COLUMN_VALUE_DENOM + " AS trans_acct_balance , COUNT ( DISTINCT " +
AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_CURRENCY +
" ) AS trans_currency_count , COUNT (*) AS trans_split_count FROM trans_split_acct " +
" GROUP BY " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID
);
}
public boolean isOpen(){
return mDb.isOpen();
}
public void addRecord(@NonNull final Model model){
addRecord(model, UpdateMethod.replace);
}
public void addRecord(@NonNull final Model model, UpdateMethod updateMethod){
Log.d(LOG_TAG, String.format("Adding %s record to database: ", model.getClass().getSimpleName()));
switch(updateMethod){
case insert:
synchronized(getInsertStatement()) {
setBindings(getInsertStatement(), model).execute();
}
break;
case update:
synchronized(getUpdateStatement()) {
setBindings(getUpdateStatement(), model).execute();
}
break;
default:
synchronized(getReplaceStatement()) {
setBindings(getReplaceStatement(), model).execute();
}
break;
}
}
private long doAddModels(@NonNull final List<Model> modelList, UpdateMethod updateMethod) {
long nRow = 0;
switch (updateMethod) {
case update:
synchronized(getUpdateStatement()) {
for (Model model : modelList) {
setBindings(getUpdateStatement(), model).execute();
nRow++;
}
}
break;
case insert:
synchronized(getInsertStatement()) {
for (Model model : modelList) {
setBindings(getInsertStatement(), model).execute();
nRow++;
}
}
break;
default:
synchronized(getReplaceStatement()) {
for (Model model : modelList) {
setBindings(getReplaceStatement(), model).execute();
nRow++;
}
}
break;
}
return nRow;
}
public long bulkAddRecords(@NonNull List<Model> modelList){
return bulkAddRecords(modelList, UpdateMethod.replace);
}
public long bulkAddRecords(@NonNull List<Model> modelList, UpdateMethod updateMethod) {
if (modelList.isEmpty()) {
Log.d(LOG_TAG, "Empty model list. Cannot bulk add records, returning 0");
return 0;
}
Log.i(LOG_TAG, String.format("Bulk adding %d %s records to the database", modelList.size(),
modelList.size() == 0 ? "null": modelList.get(0).getClass().getSimpleName()));
long nRow = 0;
try {
mDb.beginTransaction();
nRow = doAddModels(modelList, updateMethod);
mDb.setTransactionSuccessful();
}
finally {
mDb.endTransaction();
}
return nRow;
}
public abstract Model buildModelInstance(@NonNull final Cursor cursor);
protected final @NonNull SQLiteStatement getReplaceStatement() {
SQLiteStatement stmt = mReplaceStatement;
if (stmt == null) {
synchronized (this) {
stmt = mReplaceStatement;
if (stmt == null) {
mReplaceStatement = stmt
= mDb.compileStatement("REPLACE INTO " + mTableName + " ( "
+ TextUtils.join(" , ", mColumns) + " , "
+ CommonColumns.COLUMN_UID
+ " ) VALUES ( "
+ (new String(new char[mColumns.length]).replace("\0", "? , "))
+ "?)");
}
}
}
return stmt;
}
protected final @NonNull SQLiteStatement getUpdateStatement() {
SQLiteStatement stmt = mUpdateStatement;
if (stmt == null) {
synchronized (this) {
stmt = mUpdateStatement;
if (stmt == null) {
mUpdateStatement = stmt
= mDb.compileStatement("UPDATE " + mTableName + " SET "
+ TextUtils.join(" = ? , ", mColumns) + " = ? WHERE "
+ CommonColumns.COLUMN_UID
+ " = ?");
}
}
}
return stmt;
}
protected final @NonNull SQLiteStatement getInsertStatement() {
SQLiteStatement stmt = mInsertStatement;
if (stmt == null) {
synchronized (this) {
stmt = mInsertStatement;
if (stmt == null) {
mInsertStatement = stmt
= mDb.compileStatement("INSERT INTO " + mTableName + " ( "
+ TextUtils.join(" , ", mColumns) + " , "
+ CommonColumns.COLUMN_UID
+ " ) VALUES ( "
+ (new String(new char[mColumns.length]).replace("\0", "? , "))
+ "?)");
}
}
}
return stmt;
}
protected abstract @NonNull SQLiteStatement setBindings(@NonNull SQLiteStatement stmt, @NonNull final Model model);
public Model getRecord(@NonNull String uid){
Log.v(LOG_TAG, "Fetching record with GUID " + uid);
Cursor cursor = fetchRecord(uid);
try {
if (cursor.moveToFirst()) {
return buildModelInstance(cursor);
}
else {
throw new IllegalArgumentException(LOG_TAG + ": Record with " + uid + " does not exist");
}
} finally {
cursor.close();
}
}
public Model getRecord(long id){
return getRecord(getUID(id));
}
public List<Model> getAllRecords(){
List<Model> modelRecords = new ArrayList<>();
Cursor c = fetchAllRecords();
try {
while (c.moveToNext()) {
modelRecords.add(buildModelInstance(c));
}
} finally {
c.close();
}
return modelRecords;
}
protected ContentValues extractBaseModelAttributes(@NonNull ContentValues contentValues, @NonNull Model model){
contentValues.put(CommonColumns.COLUMN_UID, model.getUID());
contentValues.put(CommonColumns.COLUMN_CREATED_AT, TimestampHelper.getUtcStringFromTimestamp(model.getCreatedTimestamp()));
return contentValues;
}
protected void populateBaseModelAttributes(Cursor cursor, BaseModel model){
String uid = cursor.getString(cursor.getColumnIndexOrThrow(CommonColumns.COLUMN_UID));
String created = cursor.getString(cursor.getColumnIndexOrThrow(CommonColumns.COLUMN_CREATED_AT));
String modified= cursor.getString(cursor.getColumnIndexOrThrow(CommonColumns.COLUMN_MODIFIED_AT));
model.setUID(uid);
model.setCreatedTimestamp(TimestampHelper.getTimestampFromUtcString(created));
model.setModifiedTimestamp(TimestampHelper.getTimestampFromUtcString(modified));
}
public Cursor fetchRecord(long rowId){
return mDb.query(mTableName, null, DatabaseSchema.CommonColumns._ID + "=" + rowId,
null, null, null, null);
}
public Cursor fetchRecord(@NonNull String uid){
return mDb.query(mTableName, null, CommonColumns.COLUMN_UID + "=?" ,
new String[]{uid}, null, null, null);
}
public Cursor fetchAllRecords(){
return fetchAllRecords(null, null, null);
}
public Cursor fetchAllRecords(String where, String[] whereArgs, String orderBy){
return mDb.query(mTableName, null, where, whereArgs, null, null, orderBy);
}
public boolean deleteRecord(long rowId){
Log.d(LOG_TAG, "Deleting record with id " + rowId + " from " + mTableName);
return mDb.delete(mTableName, DatabaseSchema.CommonColumns._ID + "=" + rowId, null) > 0;
}
public int deleteAllRecords(){
return mDb.delete(mTableName, null, null);
}
public long getID(@NonNull String uid){
Cursor cursor = mDb.query(mTableName,
new String[] {DatabaseSchema.CommonColumns._ID},
DatabaseSchema.CommonColumns.COLUMN_UID + " = ?",
new String[]{uid},
null, null, null);
long result = -1;
try{
if (cursor.moveToFirst()) {
result = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.CommonColumns._ID));
} else {
throw new IllegalArgumentException(mTableName + " with GUID " + uid + " does not exist in the db");
}
} finally {
cursor.close();
}
return result;
}
public String getUID(long id){
Cursor cursor = mDb.query(mTableName,
new String[]{DatabaseSchema.CommonColumns.COLUMN_UID},
DatabaseSchema.CommonColumns._ID + " = " + id,
null, null, null, null);
String uid = null;
try {
if (cursor.moveToFirst()) {
uid = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.CommonColumns.COLUMN_UID));
} else {
throw new IllegalArgumentException(mTableName + " Record ID " + id + " does not exist in the db");
}
} finally {
cursor.close();
}
return uid;
}
public String getAccountCurrencyCode(@NonNull String accountUID) {
Cursor cursor = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
new String[] {DatabaseSchema.AccountEntry.COLUMN_CURRENCY},
DatabaseSchema.AccountEntry.COLUMN_UID + "= ?",
new String[]{accountUID}, null, null, null);
try {
if (cursor.moveToFirst()) {
return cursor.getString(0);
} else {
throw new IllegalArgumentException("Account " + accountUID + " does not exist");
}
} finally {
cursor.close();
}
}
public String getCommodityUID(String currencyCode){
String where = DatabaseSchema.CommodityEntry.COLUMN_MNEMONIC + "= ?";
String[] whereArgs = new String[]{currencyCode};
Cursor cursor = mDb.query(DatabaseSchema.CommodityEntry.TABLE_NAME,
new String[]{DatabaseSchema.CommodityEntry.COLUMN_UID},
where, whereArgs, null, null, null);
try {
if (cursor.moveToNext()) {
return cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.CommodityEntry.COLUMN_UID));
} else {
throw new IllegalArgumentException("Currency code not found in commodities");
}
} finally {
cursor.close();
}
}
public AccountType getAccountType(@NonNull String accountUID){
String type = "";
Cursor c = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
new String[]{DatabaseSchema.AccountEntry.COLUMN_TYPE},
DatabaseSchema.AccountEntry.COLUMN_UID + "=?",
new String[]{accountUID}, null, null, null);
try {
if (c.moveToFirst()) {
type = c.getString(c.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_TYPE));
} else {
throw new IllegalArgumentException("account " + accountUID + " does not exist in DB");
}
} finally {
c.close();
}
return AccountType.valueOf(type);
}
protected int updateRecord(String tableName, long recordId, String columnKey, String newValue) {
ContentValues contentValues = new ContentValues();
if (newValue == null) {
contentValues.putNull(columnKey);
} else {
contentValues.put(columnKey, newValue);
}
return mDb.update(tableName, contentValues,
DatabaseSchema.CommonColumns._ID + "=" + recordId, null);
}
public int updateRecord(@NonNull String uid, @NonNull String columnKey, String newValue) {
return updateRecords(CommonColumns.COLUMN_UID + "= ?", new String[]{uid}, columnKey, newValue);
}
public int updateRecord(@NonNull String uid, @NonNull ContentValues contentValues){
return mDb.update(mTableName, contentValues, CommonColumns.COLUMN_UID + "=?", new String[]{uid});
}
public int updateRecords(String where, String[] whereArgs, @NonNull String columnKey, String newValue){
ContentValues contentValues = new ContentValues();
if (newValue == null) {
contentValues.putNull(columnKey);
} else {
contentValues.put(columnKey, newValue);
}
return mDb.update(mTableName, contentValues, where, whereArgs);
}
public boolean deleteRecord(@NonNull String uid){
return deleteRecord(getID(uid));
}
public String getAttribute(@NonNull String recordUID, @NonNull String columnName){
return getAttribute(mTableName, recordUID, columnName);
}
protected String getAttribute(@NonNull String tableName, @NonNull String recordUID, @NonNull String columnName){
Cursor cursor = mDb.query(tableName,
new String[]{columnName},
AccountEntry.COLUMN_UID + " = ?",
new String[]{recordUID}, null, null, null);
try {
if (cursor.moveToFirst())
return cursor.getString(cursor.getColumnIndexOrThrow(columnName));
else {
throw new IllegalArgumentException(String.format("Record with GUID %s does not exist in the db", recordUID));
}
} finally {
cursor.close();
}
}
public long getRecordsCount(){
String sql = "SELECT COUNT(*) FROM " + mTableName;
SQLiteStatement statement = mDb.compileStatement(sql);
return statement.simpleQueryForLong();
}
public void beginTransaction() {
mDb.beginTransaction();
}
public void setTransactionSuccessful() {
mDb.setTransactionSuccessful();
}
public void enableForeignKey(boolean enable) {
if (enable){
mDb.execSQL("PRAGMA foreign_keys=ON;");
} else {
mDb.execSQL("PRAGMA foreign_keys=OFF;");
}
}
public void endTransaction() {
mDb.endTransaction();
}
}
