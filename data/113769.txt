package com.spazedog.lib.rootfw4.utils;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import android.content.Context;
import android.os.PowerManager;
import android.util.Log;
import com.spazedog.lib.rootfw4.Common;
import com.spazedog.lib.rootfw4.Shell;
import com.spazedog.lib.rootfw4.Shell.Result;
import com.spazedog.lib.rootfw4.containers.BasicContainer;
public class Device {
public static final String TAG = Common.TAG + ".Device";
protected final static Pattern oPatternPidMatch = Pattern.compile("^[0-9]+$");
protected final static Pattern oPatternSpaceSearch = Pattern.compile("[ \t]+");
protected Shell mShell;
public static class ProcessInfo extends BasicContainer {
private String mPath;
private String mProcess;
private Integer mProcessId;
public String path() {
return mPath;
}
public String name() {
return mProcess;
}
public Integer pid() {
return mProcessId;
}
}
public Device(Shell shell) {
mShell = shell;
}
public ProcessInfo[] getProcessList() {
return getProcessList(null);
}
public ProcessInfo[] getProcessList(String pattern) {
String[] files = mShell.getFile("/proc").getList();
if (files != null) {
List<ProcessInfo> processes = new ArrayList<ProcessInfo>();
String process = null;
String path = null;
for (int i=0; i < files.length; i++) {
if (oPatternPidMatch.matcher(files[i]).matches()) {
if ((process = mShell.getFile("/proc/" + files[i] + "/cmdline").readOneLine()) == null) {
if ((process = mShell.getFile("/proc/" + files[i] + "/stat").readOneLine()) != null) {
try {
if (pattern == null || process.contains(pattern)) {
process = oPatternSpaceSearch.split(process.trim())[1];
process = process.substring(1, process.length()-1);
} else {
continue;
}
} catch(Throwable e) { process = null; }
}
} else if (pattern == null || process.contains(pattern)) {
if (process.contains("/")) {
try {
path = process.substring(process.indexOf("/"), process.contains("-") ? process.indexOf("-", process.lastIndexOf("/", process.indexOf("-"))) : process.length());
} catch (Throwable e) { path = null; }
if (!process.startsWith("/")) {
process = process.substring(0, process.indexOf("/"));
} else {
try {
process = process.substring(process.lastIndexOf("/", process.contains("-") ? process.indexOf("-") : process.length())+1, process.contains("-") ? process.indexOf("-", process.lastIndexOf("/", process.indexOf("-"))) : process.length());
} catch (Throwable e) { process = null; }
}
} else if (process.contains("-")) {
process = process.substring(0, process.indexOf("-"));
}
} else {
continue;
}
if (pattern == null || (process != null && process.contains(pattern))) {
ProcessInfo stat = new ProcessInfo();
stat.mPath = path;
stat.mProcess = process;
stat.mProcessId = Integer.parseInt(files[i]);
processes.add(stat);
}
}
}
return processes.toArray( new ProcessInfo[ processes.size() ] );
}
return null;
}
public Boolean rebootRecovery(Context context) {
if (context != null) {
try {
PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
pm.reboot(null);
return false;
} catch (Throwable e) {}
}
Result result = mShell.execute("toolbox reboot recovery");
return result != null && result.wasSuccessful();
}
public Boolean rebootSoft() {
Result result = mShell.execute("echo 1 > /proc/sys/kernel/sysrq && echo s > /proc/sysrq-trigger && echo e > /proc/sysrq-trigger");
return result != null && result.wasSuccessful();
}
public Boolean reboot() {
Result result = mShell.execute("toolbox reboot");
if (result == null || !result.wasSuccessful()) {
result = mShell.execute("echo 1 > /proc/sys/kernel/sysrq && echo s > /proc/sysrq-trigger && echo b > /proc/sysrq-trigger");
}
return result != null && result.wasSuccessful();
}
public Boolean shutdown() {
Result result = mShell.execute("toolbox reboot -p");
if (result == null || !result.wasSuccessful()) {
result = mShell.execute("echo 1 > /proc/sys/kernel/sysrq && echo s > /proc/sysrq-trigger && echo o > /proc/sysrq-trigger");
}
return result != null && result.wasSuccessful();
}
public Process getProcess(String process) {
return new Process(mShell, process);
}
public Process getProcess(Integer pid) {
return new Process(mShell, pid);
}
public static class Process extends Device {
protected Integer mPid;
protected String mProcess;
public Process(Shell shell, String process) {
super(shell);
if (oPatternPidMatch.matcher(process).matches()) {
mPid = Integer.parseInt(process);
} else {
mProcess = process;
}
}
public Process(Shell shell, Integer pid) {
super(shell);
mPid = pid;
}
public Integer getPid() {
if (mPid != null) {
return mPid;
}
String cmd = mShell.findCommand("pidof");
if (cmd != null) {
Result result = mShell.execute(cmd + " '" + mProcess + "'");
String pids = result.getLine();
if (pids != null) {
try {
return Integer.parseInt(oPatternSpaceSearch.split(pids.trim())[0]);
} catch (Throwable e) {
Log.w(TAG, e.getMessage(), e);
}
}
} else {
ProcessInfo[] processes = getProcessList();
if (processes != null) {
for (int i=0; i < processes.length; i++) {
if (mProcess.equals(processes[i].name())) {
return processes[i].pid();
}
}
}
}
return 0;
}
public Integer[] getPids() {
String name = getName();
String cmd = mShell.findCommand("pidof");
if (cmd != null) {
Result result = mShell.createAttempts(cmd + " '" + name + "'").execute();
if (result != null && result.wasSuccessful()) {
String pids = result.getLine();
if (pids != null) {
String[] parts = oPatternSpaceSearch.split(pids.trim());
Integer[] values = new Integer[ parts.length ];
for (int i=0; i < parts.length; i++) {
try {
values[i] = Integer.parseInt(parts[i]);
} catch(Throwable e) {}
}
return values;
}
}
} else {
ProcessInfo[] processes = getProcessList();
if (name != null && processes != null && processes.length > 0) {
List<Integer> list = new ArrayList<Integer>();
for (int i=0; i < processes.length; i++) {
if (name.equals(processes[i].name())) {
list.add(processes[i].pid());
}
}
return list.toArray( new Integer[ list.size() ] );
}
}
return null;
}
public String getName() {
if (mProcess != null) {
return mProcess;
}
String process = null;
if ((process = mShell.getFile("/proc/" + mPid + "/cmdline").readOneLine()) == null) {
if ((process = mShell.getFile("/proc/" + mPid + "/stat").readOneLine()) != null) {
try {
process = oPatternSpaceSearch.split(process.trim())[1];
process = process.substring(1, process.length()-1);
} catch(Throwable e) { process = null; }
}
} else if (process.contains("/")) {
if (!process.startsWith("/")) {
process = process.substring(0, process.indexOf("/"));
} else {
try {
process = process.substring(process.lastIndexOf("/", process.contains("-") ? process.indexOf("-") : process.length())+1, process.contains("-") ? process.indexOf("-", process.lastIndexOf("/", process.indexOf("-"))) : process.length());
} catch (Throwable e) { process = null; }
}
} else if (process.contains("-")) {
process = process.substring(0, process.indexOf("-"));
}
return process;
}
public Boolean kill() {
Result result = null;
if (mPid != null) {
result = mShell.createAttempts("kill -9 '" + mPid + "'").execute();
} else {
result = mShell.createAttempts("killall '" + mProcess + "'").execute();
if (result == null || !result.wasSuccessful()) {
Integer[] pids = getPids();
for (Integer pid : pids) {
result = mShell.createAttempts("kill -9 '" + pid + "'").execute();
if (result == null || !result.wasSuccessful()) {
return false;
}
}
}
}
return result != null && result.wasSuccessful();
}
}
}
