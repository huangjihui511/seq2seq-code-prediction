package com.datumbox.framework.core.machinelearning.common.abstracts.featureselectors;
import com.datumbox.framework.common.Configuration;
import com.datumbox.framework.common.concurrency.StreamMethods;
import com.datumbox.framework.core.common.dataobjects.Dataframe;
import com.datumbox.framework.common.dataobjects.TypeInference;
import com.datumbox.framework.common.storage.interfaces.BigMap;
import com.datumbox.framework.common.storage.interfaces.StorageEngine;
import com.datumbox.framework.common.storage.interfaces.StorageEngine.MapType;
import com.datumbox.framework.common.storage.interfaces.StorageEngine.StorageHint;
import com.datumbox.framework.core.common.utilities.SelectKth;
import com.datumbox.framework.core.machinelearning.common.abstracts.AbstractTrainer;
import java.util.*;
import java.util.stream.Stream;
public abstract class AbstractScoreBasedFeatureSelector<MP extends AbstractScoreBasedFeatureSelector.AbstractModelParameters, TP extends AbstractScoreBasedFeatureSelector.AbstractTrainingParameters> extends AbstractFeatureSelector<MP, TP> {
public static abstract class AbstractModelParameters extends AbstractFeatureSelector.AbstractModelParameters {
@BigMap(keyClass=Object.class, valueClass=Double.class, mapType=MapType.HASHMAP, storageHint=StorageHint.IN_MEMORY, concurrent=true)
private Map<Object, Double> featureScores; 
protected AbstractModelParameters(StorageEngine storageEngine) {
super(storageEngine);
}
public Map<Object, Double> getFeatureScores() {
return featureScores;
}
protected void setFeatureScores(Map<Object, Double> featureScores) {
this.featureScores = featureScores;
}
}
public static abstract class AbstractTrainingParameters extends AbstractFeatureSelector.AbstractTrainingParameters {
private Integer rareFeatureThreshold = null;
private Integer maxFeatures = null;
public Integer getRareFeatureThreshold() {
return rareFeatureThreshold;
}
public void setRareFeatureThreshold(Integer rareFeatureThreshold) {
this.rareFeatureThreshold = rareFeatureThreshold;
}
public Integer getMaxFeatures() {
return maxFeatures;
}
public void setMaxFeatures(Integer maxFeatures) {
this.maxFeatures = maxFeatures;
}
}
protected AbstractScoreBasedFeatureSelector(TP trainingParameters, Configuration configuration) {
super(trainingParameters, configuration);
}
protected AbstractScoreBasedFeatureSelector(String storageName, Configuration configuration) {
super(storageName, configuration);
}
@Override
protected void _transform(Dataframe newData) {
Set<Object> selectedFeatures = knowledgeBase.getModelParameters().getFeatureScores().keySet();
StorageEngine storageEngine = knowledgeBase.getStorageEngine();
Set<TypeInference.DataType> supportedXDataTypes = getSupportedXDataTypes();
Map<Object, Boolean> tmp_removedColumns = storageEngine.getBigMap("tmp_removedColumns", Object.class, Boolean.class, StorageEngine.MapType.HASHMAP, StorageEngine.StorageHint.IN_MEMORY, true, true);
Stream<Object> compatibleColumns = newData.getXDataTypes().entrySet().stream()
.filter(e -> supportedXDataTypes.contains(e.getValue()))
.map(e -> e.getKey());
streamExecutor.forEach(StreamMethods.stream(compatibleColumns, isParallelized()), column -> {
if(!selectedFeatures.contains(column)) {
tmp_removedColumns.put(column, true);
}
});
logger.debug("Removing Columns");
newData.dropXColumns(tmp_removedColumns.keySet());
storageEngine.dropBigMap("tmp_removedColumns", tmp_removedColumns);
}
protected void keepTopFeatures(Map<Object, Double> featureScores, int maxFeatures) {
logger.debug("keepTopFeatures()");
logger.debug("Estimating the minPermittedScore");
Double minPermittedScore = SelectKth.largest(featureScores.values().iterator(), maxFeatures);
logger.debug("Removing features with scores less than threshold");
Iterator<Map.Entry<Object, Double>> it = featureScores.entrySet().iterator();
while(it.hasNext()) {
Map.Entry<Object, Double> entry = it.next();
if(entry.getValue()<minPermittedScore) {
it.remove();
}
}
int numOfExtraFeatures = featureScores.size()-maxFeatures;
if(numOfExtraFeatures>0) {
logger.debug("Removing extra features caused by ties");
it = featureScores.entrySet().iterator();
while(it.hasNext() && numOfExtraFeatures>0) {
Map.Entry<Object, Double> entry = it.next();
if(entry.getValue()-minPermittedScore<=0.0) { 
it.remove();
--numOfExtraFeatures;
}
}
}
}
protected void removeRareFeatures(Map<Object, Double> featureCounts, int rareFeatureThreshold) {
logger.debug("removeRareFeatures()");
Iterator<Map.Entry<Object, Double>> it = featureCounts.entrySet().iterator();
while(it.hasNext()) {
Map.Entry<Object, Double> entry = it.next();
if(entry.getValue()<rareFeatureThreshold) {
it.remove();
}
}
}
}
