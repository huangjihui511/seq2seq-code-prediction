package org.menacheri.jetclient.app.impl;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.menacheri.jetclient.app.Session;
import org.menacheri.jetclient.communication.ReconnectPolicy;
import org.menacheri.jetclient.communication.MessageSender.Fast;
import org.menacheri.jetclient.communication.MessageSender.Reliable;
import org.menacheri.jetclient.event.Event;
import org.menacheri.jetclient.event.EventDispatcher;
import org.menacheri.jetclient.event.EventHandler;
import org.menacheri.jetclient.event.impl.DefaultEventDispatcher;
import org.menacheri.jetclient.util.Config;
import org.menacheri.jetclient.util.LoginHelper;
public class DefaultSession implements Session
{
protected final Object id;
protected final EventDispatcher eventDispatcher;
protected final Map<String, Object> sessionAttributes;
protected final long creationTime;
protected long lastReadWriteTime;
protected boolean isWriteable;
protected volatile boolean isShuttingDown;
protected boolean isUDPEnabled;
protected ReconnectPolicy reconnectPolicy;
protected Reliable tcpMessageSender;
protected Fast udpMessageSender;
protected DefaultSession(SessionBuilder sessionBuilder)
{
sessionBuilder.validateAndSetValues();
this.id = sessionBuilder.id;
this.eventDispatcher = sessionBuilder.eventDispatcher;
this.sessionAttributes = sessionBuilder.sessionAttributes;
this.creationTime = sessionBuilder.creationTime;
this.lastReadWriteTime = sessionBuilder.lastReadWriteTime;
this.isWriteable = sessionBuilder.isWriteable;
this.isShuttingDown = sessionBuilder.isShuttingDown;
this.isUDPEnabled = sessionBuilder.isUDPEnabled;
this.reconnectPolicy = sessionBuilder.reconnectPolicy;
}
public static class SessionBuilder
{
private Object id = null;
private EventDispatcher eventDispatcher = null;
private Map<String, Object> sessionAttributes = null;
private long creationTime = 0l;
private long lastReadWriteTime = 0l;
private boolean isWriteable = true;
private volatile boolean isShuttingDown = false;
private boolean isUDPEnabled = false;
private ReconnectPolicy reconnectPolicy = null;
public Session build()
{
return new DefaultSession(this);
}
protected void validateAndSetValues()
{
if (null == eventDispatcher)
{
eventDispatcher = new DefaultEventDispatcher();
}
if (null == sessionAttributes)
{
sessionAttributes = new HashMap<String, Object>();
}
if (null == reconnectPolicy)
{
reconnectPolicy = ReconnectPolicy.NO_RECONNECT;
}
creationTime = System.currentTimeMillis();
}
public Object getId()
{
return id;
}
public SessionBuilder id(final Object id)
{
this.id = id;
return this;
}
public SessionBuilder eventDispatcher(
final EventDispatcher eventDispatcher)
{
this.eventDispatcher = eventDispatcher;
return this;
}
public SessionBuilder sessionAttributes(
final Map<String, Object> sessionAttributes)
{
this.sessionAttributes = sessionAttributes;
return this;
}
public SessionBuilder creationTime(long creationTime)
{
this.creationTime = creationTime;
return this;
}
public SessionBuilder lastReadWriteTime(long lastReadWriteTime)
{
this.lastReadWriteTime = lastReadWriteTime;
return this;
}
public SessionBuilder isWriteable(boolean isWriteable)
{
this.isWriteable = isWriteable;
return this;
}
public SessionBuilder isShuttingDown(boolean isShuttingDown)
{
this.isShuttingDown = isShuttingDown;
return this;
}
public SessionBuilder isUDPEnabled(boolean isUDPEnabled)
{
this.isUDPEnabled = isUDPEnabled;
return this;
}
public SessionBuilder reconnectPolicy(ReconnectPolicy reconnectPolicy)
{
this.reconnectPolicy = reconnectPolicy;
return this;
}
}
@Override
public void onEvent(Event event)
{
if (!isShuttingDown)
{
eventDispatcher.fireEvent(event);
}
}
@Override
public Object getId()
{
return id;
}
@Override
public void setId(Object id)
{
throw new RuntimeException(new IllegalAccessException(
"id cannot be reset since it is a final variable. "
+ "It is set at constuction time."));
}
@Override
public EventDispatcher getEventDispatcher()
{
return eventDispatcher;
}
@Override
public void addHandler(EventHandler eventHandler)
{
eventDispatcher.addHandler(eventHandler);
}
@Override
public void removeHandler(EventHandler eventHandler)
{
eventDispatcher.removeHandler(eventHandler);
}
@Override
public List<EventHandler> getEventHandlers(int eventType)
{
return eventDispatcher.getHandlers(eventType);
}
@Override
public Object getAttribute(String key)
{
return sessionAttributes.get(key);
}
@Override
public void removeAttribute(String key)
{
sessionAttributes.remove(key);
}
@Override
public void setAttribute(String key, Object value)
{
sessionAttributes.put(key, value);
}
@Override
public long getCreationTime()
{
return creationTime;
}
@Override
public long getLastReadWriteTime()
{
return lastReadWriteTime;
}
public void setLastReadWriteTime(long lastReadWriteTime)
{
this.lastReadWriteTime = lastReadWriteTime;
}
@Override
public boolean isWriteable()
{
return isWriteable;
}
@Override
public void setWriteable(boolean isWriteable)
{
this.isWriteable = isWriteable;
}
@Override
public boolean isUDPEnabled()
{
return isUDPEnabled;
}
@Override
public void setUDPEnabled(boolean isEnabled)
{
this.isUDPEnabled = isEnabled;
}
@Override
public void close()
{
isShuttingDown = true;
eventDispatcher.close();
if (null != tcpMessageSender)
{
tcpMessageSender.close();
tcpMessageSender = null;
}
if (null != udpMessageSender)
{
udpMessageSender.close();
udpMessageSender = null;
}
}
@Override
public void reconnect(LoginHelper loginHelper)
{
String reconnectKey = (String)sessionAttributes.get(Config.RECONNECT_KEY);
if(null != reconnectKey)
{
try
{
new SessionFactory(loginHelper).reconnectSession(this, reconnectKey);
}
catch (Exception e)
{
throw new RuntimeException(e);
}
}
}
@Override
public boolean isShuttingDown()
{
return isShuttingDown;
}
public Map<String, Object> getSessionAttributes()
{
return sessionAttributes;
}
@Override
public Reliable getTcpMessageSender()
{
return tcpMessageSender;
}
@Override
public void setTcpMessageSender(Reliable tcpMessageSender)
{
this.tcpMessageSender = tcpMessageSender;
}
@Override
public Fast getUdpMessageSender()
{
return udpMessageSender;
}
@Override
public void setUdpMessageSender(Fast udpMessageSender)
{
this.udpMessageSender = udpMessageSender;
}
@Override
public int hashCode()
{
final int prime = 31;
int result = 1;
result = prime * result + ((id == null) ? 0 : id.hashCode());
return result;
}
@Override
public boolean equals(Object obj)
{
if (this == obj)
return true;
if (obj == null)
return false;
if (getClass() != obj.getClass())
return false;
DefaultSession other = (DefaultSession) obj;
if (id == null)
{
if (other.id != null)
return false;
}
else if (!id.equals(other.id))
return false;
return true;
}
public ReconnectPolicy getReconnectPolicy()
{
return reconnectPolicy;
}
public void setReconnectPolicy(ReconnectPolicy reconnectPolicy)
{
this.reconnectPolicy = reconnectPolicy;
}
}
