package org.jd.gui.controller;
import org.jd.gui.api.API;
import org.jd.gui.api.feature.IndexesChangeListener;
import org.jd.gui.api.model.Container;
import org.jd.gui.api.model.Indexes;
import org.jd.gui.util.exception.ExceptionUtil;
import org.jd.gui.util.net.UriUtil;
import org.jd.gui.view.OpenTypeView;
import javax.swing.*;
import java.awt.*;
import java.net.URI;
import java.util.*;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;
import java.util.regex.Pattern;
public class OpenTypeController implements IndexesChangeListener {
protected static final int CACHE_MAX_ENTRIES = 5*20;
protected API api;
protected ScheduledExecutorService executor;
protected Collection<Future<Indexes>> collectionOfFutureIndexes;
protected Consumer<URI> openCallback;
protected JFrame mainFrame;
protected OpenTypeView openTypeView;
protected SelectLocationController selectLocationController;
protected long indexesHashCode = 0L;
protected Map<String, Map<String, Collection>> cache;
public OpenTypeController(API api, ScheduledExecutorService executor, JFrame mainFrame) {
this.api = api;
this.executor = executor;
this.mainFrame = mainFrame;
openTypeView = new OpenTypeView(api, mainFrame, this::updateList, this::onTypeSelected);
selectLocationController = new SelectLocationController(api, mainFrame);
cache = new LinkedHashMap<String, Map<String, Collection>>(CACHE_MAX_ENTRIES*3/2, 0.7f, true) {
@Override
protected boolean removeEldestEntry(Map.Entry<String, Map<String, Collection>> eldest) {
return size() > CACHE_MAX_ENTRIES;
}
};
}
public void show(Collection<Future<Indexes>> collectionOfFutureIndexes, Consumer<URI> openCallback) {
this.collectionOfFutureIndexes = collectionOfFutureIndexes;
this.openCallback = openCallback;
long hashCode = collectionOfFutureIndexes.hashCode();
if (hashCode != indexesHashCode) {
updateList(openTypeView.getPattern());
indexesHashCode = hashCode;
}
openTypeView.show();
}
@SuppressWarnings("unchecked")
protected void updateList(String pattern) {
int patternLength = pattern.length();
if (patternLength == 0) {
openTypeView.updateList(Collections.emptyMap());
} else {
executor.execute(() -> {
openTypeView.showWaitCursor();
Pattern regExpPattern = createRegExpPattern(pattern);
Map<String, Collection<Container.Entry>> result = new HashMap<>();
try {
for (Future<Indexes> futureIndexes : collectionOfFutureIndexes) {
if (futureIndexes.isDone()) {
Indexes indexes = futureIndexes.get();
String key = String.valueOf(indexes.hashCode()) + "***" + pattern;
Map<String, Collection> matchingEntries = cache.get(key);
if (matchingEntries != null) {
for (Map.Entry<String, Collection> mapEntry : matchingEntries.entrySet()) {
Collection<Container.Entry> collection = result.get(mapEntry.getKey());
if (collection == null) {
result.put(mapEntry.getKey(), collection = new HashSet<>());
}
collection.addAll(mapEntry.getValue());
}
} else {
Map<String, Collection> index = indexes.getIndex("typeDeclarations");
if ((index != null) && !index.isEmpty()) {
matchingEntries = new HashMap<>();
if (patternLength == 1) {
match(pattern.charAt(0), index, matchingEntries);
} else {
String lastKey = key.substring(0, patternLength - 1);
Map<String, Collection> lastResult = cache.get(lastKey);
if (lastResult != null) {
match(regExpPattern, lastResult, matchingEntries);
} else {
match(regExpPattern, index, matchingEntries);
}
}
cache.put(key, matchingEntries);
for (Map.Entry<String, Collection> mapEntry : matchingEntries.entrySet()) {
Collection<Container.Entry> collection = result.get(mapEntry.getKey());
if (collection == null) {
result.put(mapEntry.getKey(), collection = new HashSet<>());
}
collection.addAll(mapEntry.getValue());
}
}
}
}
}
} catch (Exception e) {
assert ExceptionUtil.printStackTrace(e);
}
SwingUtilities.invokeLater(() -> {
openTypeView.hideWaitCursor();
openTypeView.updateList(result);
});
});
}
}
@SuppressWarnings("unchecked")
protected static void match(char c, Map<String, Collection> index, Map<String, Collection> result) {
if (Character.isLowerCase(c)) {
char upperCase = Character.toUpperCase(c);
for (Map.Entry<String, Collection> mapEntry : index.entrySet()) {
String typeName = mapEntry.getKey();
Collection<Container.Entry> entries = mapEntry.getValue();
int lastPackageSeparatorIndex = typeName.lastIndexOf('/') + 1;
int lastTypeNameSeparatorIndex = typeName.lastIndexOf('$') + 1;
int lastIndex = Math.max(lastPackageSeparatorIndex, lastTypeNameSeparatorIndex);
if (lastIndex < typeName.length()) {
char first = typeName.charAt(lastIndex);
if ((first == c) || (first == upperCase)) {
add(result, typeName, entries);
}
}
}
} else {
for (Map.Entry<String, Collection> mapEntry : index.entrySet()) {
String typeName = mapEntry.getKey();
Collection<Container.Entry> entries = mapEntry.getValue();
int lastPackageSeparatorIndex = typeName.lastIndexOf('/') + 1;
int lastTypeNameSeparatorIndex = typeName.lastIndexOf('$') + 1;
int lastIndex = Math.max(lastPackageSeparatorIndex, lastTypeNameSeparatorIndex);
if ((lastIndex < typeName.length()) && (typeName.charAt(lastIndex) == c)) {
add(result, typeName, entries);
}
}
}
}
protected static Pattern createRegExpPattern(String pattern) {
int patternLength = pattern.length();
StringBuilder sbPattern = new StringBuilder(patternLength * 4);
for (int i=0; i<patternLength; i++) {
char c = pattern.charAt(i);
if (Character.isUpperCase(c)) {
if (i > 1) {
sbPattern.append(".*");
}
sbPattern.append(c);
} else if (Character.isLowerCase(c)) {
sbPattern.append('[').append(c).append(Character.toUpperCase(c)).append(']');
} else if (c == '*') {
sbPattern.append(".*");
} else if (c == '?') {
sbPattern.append(".");
} else {
sbPattern.append(c);
}
}
sbPattern.append(".*");
return Pattern.compile(sbPattern.toString());
}
@SuppressWarnings("unchecked")
protected static void match(Pattern regExpPattern, Map<String, Collection> index, Map<String, Collection> result) {
for (Map.Entry<String, Collection> mapEntry : index.entrySet()) {
String typeName = mapEntry.getKey();
Collection<Container.Entry> entries = mapEntry.getValue();
int lastPackageSeparatorIndex = typeName.lastIndexOf('/') + 1;
int lastTypeNameSeparatorIndex = typeName.lastIndexOf('$') + 1;
int lastIndex = Math.max(lastPackageSeparatorIndex, lastTypeNameSeparatorIndex);
if (regExpPattern.matcher(typeName.substring(lastIndex)).matches()) {
add(result, typeName, entries);
}
}
}
@SuppressWarnings("unchecked")
protected static void add(Map<String, Collection> map, String key, Collection value) {
Collection<Container.Entry> collection = map.get(key);
if (collection == null) {
map.put(key, collection = new HashSet<>());
}
collection.addAll(value);
}
protected void onTypeSelected(Point leftBottom, Collection<Container.Entry> entries, String typeName) {
if (entries.size() == 1) {
openCallback.accept(UriUtil.createURI(api, collectionOfFutureIndexes, entries.iterator().next(), null, typeName));
} else {
selectLocationController.show(
new Point(leftBottom.x+(16+2), leftBottom.y+2),
entries,
(entry) -> openCallback.accept(UriUtil.createURI(api, collectionOfFutureIndexes, entry, null, typeName)), 
() -> openTypeView.focus());                                                                              
}
}
public void indexesChanged(Collection<Future<Indexes>> collectionOfFutureIndexes) {
if (openTypeView.isVisible()) {
this.collectionOfFutureIndexes = collectionOfFutureIndexes;
updateList(openTypeView.getPattern());
}
}
}
