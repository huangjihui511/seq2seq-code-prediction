package mobi.hsz.idea.gitignore.actions;
import com.intellij.ide.IdeView;
import com.intellij.notification.Notification;
import com.intellij.notification.NotificationType;
import com.intellij.notification.Notifications;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.LangDataKeys;
import com.intellij.openapi.project.DumbAware;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiDirectory;
import com.intellij.psi.PsiFile;
import com.intellij.psi.PsiManager;
import mobi.hsz.idea.gitignore.IgnoreBundle;
import mobi.hsz.idea.gitignore.command.CreateFileCommandAction;
import mobi.hsz.idea.gitignore.file.type.IgnoreFileType;
import mobi.hsz.idea.gitignore.ui.GeneratorDialog;
import mobi.hsz.idea.gitignore.util.CommonDataKeys;
import mobi.hsz.idea.gitignore.util.Utils;
import org.jetbrains.annotations.NotNull;
@SuppressWarnings("ComponentNotRegistered")
public class NewFileAction extends AnAction implements DumbAware {
private final IgnoreFileType fileType;
public NewFileAction(@NotNull IgnoreFileType fileType) {
this.fileType = fileType;
}
@Override
public void actionPerformed(@NotNull AnActionEvent e) {
final Project project = e.getRequiredData(CommonDataKeys.PROJECT);
final IdeView view = e.getRequiredData(LangDataKeys.IDE_VIEW);
VirtualFile fixedDirectory = fileType.getIgnoreLanguage().getFixedDirectory(project);
PsiDirectory directory;
if (fixedDirectory != null) {
directory = PsiManager.getInstance(project).findDirectory(fixedDirectory);
} else {
directory = view.getOrChooseDirectory();
}
if (directory == null) {
return;
}
GeneratorDialog dialog;
String filename = fileType.getIgnoreLanguage().getFilename();
PsiFile file = directory.findFile(filename);
VirtualFile virtualFile = file == null ? directory.getVirtualFile().findChild(filename) : file.getVirtualFile();
if (file == null && virtualFile == null) {
CreateFileCommandAction action = new CreateFileCommandAction(project, directory, fileType);
dialog = new GeneratorDialog(project, action);
} else {
Notifications.Bus.notify(new Notification(
fileType.getLanguageName(),
IgnoreBundle.message("action.newFile.exists", fileType.getLanguageName()),
IgnoreBundle.message("action.newFile.exists.in", virtualFile.getPath()),
NotificationType.INFORMATION
), project);
if (file == null) {
file = Utils.getPsiFile(project, virtualFile);
}
dialog = new GeneratorDialog(project, file);
}
dialog.show();
file = dialog.getFile();
if (file != null) {
Utils.openFile(project, file);
}
}
@Override
public void update(@NotNull AnActionEvent e) {
final Project project = e.getData(CommonDataKeys.PROJECT);
final IdeView view = e.getData(LangDataKeys.IDE_VIEW);
final PsiDirectory[] directory = view != null ? view.getDirectories() : null;
if (directory == null || directory.length == 0 || project == null ||
!this.fileType.getIgnoreLanguage().isNewAllowed()) {
e.getPresentation().setVisible(false);
}
}
}
