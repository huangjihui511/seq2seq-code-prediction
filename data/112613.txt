package pers.example.xiayong.rxjavasamples.fragments;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ListView;
import com.jakewharton.rxbinding.view.RxView;
import com.jakewharton.rxbinding.view.ViewClickEvent;
import com.jakewharton.rxbinding.widget.RxTextView;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import butterknife.Bind;
import butterknife.ButterKnife;
import pers.example.xiayong.rxjavasamples.R;
import pers.example.xiayong.rxjavasamples.wiring.LogAdapter;
import rx.Observer;
import rx.Subscription;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Func1;
import timber.log.Timber;
public class BufferDemoFragment
extends BaseFragment {
@Bind(R.id.list_threading_log) ListView _logsList;
@Bind(R.id.btn_start_operation) Button _tapBtn;
private LogAdapter _adapter;
private List<String> _logs;
private Subscription _subscription;
@Override
public void onStart() {
super.onStart();
_subscription = _getBufferedSubscription();
}
@Override
public void onPause() {
super.onPause();
_subscription.unsubscribe();
}
@Override
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
super.onActivityCreated(savedInstanceState);
_setupLogger();
}
@Override
public View onCreateView(LayoutInflater inflater,
@Nullable ViewGroup container,
@Nullable Bundle savedInstanceState) {
View layout = inflater.inflate(R.layout.fragment_buffer, container, false);
ButterKnife.bind(this, layout);
return layout;
}
private Subscription _getBufferedSubscription() {
return RxView.clickEvents(_tapBtn)
.map(new Func1<ViewClickEvent, Integer>() {
@Override
public Integer call(ViewClickEvent onClickEvent) {
Timber.d("--------- GOT A TAP");
_log("GOT A TAP");
return 1;
}
})
.observeOn(AndroidSchedulers.mainThread())
.subscribe(new Observer<List<Integer>>() {
@Override
public void onCompleted() {
Timber.d("----- onCompleted");
}
@Override
public void onError(Throwable e) {
Timber.e(e, "--------- Woops on error!");
_log("Dang error! check your logs");
}
@Override
public void onNext(List<Integer> integers) {
Timber.d("--------- onNext");
if (integers.size() > 0) {
_log(String.format("%d taps", integers.size()));
} else {
Timber.d("--------- No taps received ");
}
}
});
}
private void _setupLogger() {
_logs = new ArrayList<>();
_adapter = new LogAdapter(getActivity(), new ArrayList<String>());
_logsList.setAdapter(_adapter);
}
private void _log(String logMsg) {
if (_isCurrentlyOnMainThread()) {
_logs.add(0, logMsg + " (main thread) ");
_adapter.clear();
_adapter.addAll(_logs);
} else {
_logs.add(0, logMsg + " (NOT main thread) ");
new Handler(Looper.getMainLooper()).post(new Runnable() {
@Override
public void run() {
_adapter.clear();
_adapter.addAll(_logs);
}
});
}
}
private boolean _isCurrentlyOnMainThread() {
return Looper.myLooper() == Looper.getMainLooper();
}
}
