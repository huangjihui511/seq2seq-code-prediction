package com.github.benmanes.caffeine.cache;
import static com.github.benmanes.caffeine.cache.Caffeine.UNSET_INT;
import static com.github.benmanes.caffeine.cache.Caffeine.requireArgument;
import static com.github.benmanes.caffeine.cache.Caffeine.requireState;
import static java.util.Objects.requireNonNull;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import com.github.benmanes.caffeine.cache.Caffeine.Strength;
public final class CaffeineSpec {
static final String SPLIT_OPTIONS = ",";
static final String SPLIT_KEY_VALUE = "=";
final String specification;
int initialCapacity = UNSET_INT;
long maximumWeight = UNSET_INT;
long maximumSize = UNSET_INT;
boolean recordStats;
@Nullable Strength keyStrength;
@Nullable Strength valueStrength;
long expireAfterAccessDuration = UNSET_INT;
@Nullable TimeUnit expireAfterAccessTimeUnit;
long expireAfterWriteDuration = UNSET_INT;
@Nullable TimeUnit expireAfterWriteTimeUnit;
long refreshAfterWriteDuration = UNSET_INT;
@Nullable TimeUnit refreshAfterWriteTimeUnit;
private CaffeineSpec(String specification) {
this.specification = requireNonNull(specification);
}
Caffeine<Object, Object> toBuilder() {
Caffeine<Object, Object> builder = Caffeine.newBuilder();
if (initialCapacity != UNSET_INT) {
builder.initialCapacity(initialCapacity);
}
if (maximumSize != UNSET_INT) {
builder.maximumSize(maximumSize);
}
if (maximumWeight != UNSET_INT) {
builder.maximumWeight(maximumWeight);
}
if (keyStrength != null) {
requireState(keyStrength == Strength.WEAK);
builder.weakKeys();
}
if (valueStrength != null) {
if (valueStrength == Strength.WEAK) {
builder.weakValues();
} else if (valueStrength == Strength.SOFT) {
builder.softValues();
} else {
throw new IllegalStateException();
}
}
if (expireAfterAccessTimeUnit != null) {
builder.expireAfterAccess(expireAfterAccessDuration, expireAfterAccessTimeUnit);
}
if (expireAfterWriteTimeUnit != null) {
builder.expireAfterWrite(expireAfterWriteDuration, expireAfterWriteTimeUnit);
}
if (refreshAfterWriteTimeUnit != null) {
builder.refreshAfterWrite(refreshAfterWriteDuration, refreshAfterWriteTimeUnit);
}
if (recordStats) {
builder.recordStats();
}
return builder;
}
@SuppressWarnings("StringSplitter")
public static @NonNull CaffeineSpec parse(@NonNull String specification) {
CaffeineSpec spec = new CaffeineSpec(specification);
for (String option : specification.split(SPLIT_OPTIONS)) {
spec.parseOption(option.trim());
}
return spec;
}
void parseOption(String option) {
if (option.isEmpty()) {
return;
}
@SuppressWarnings("StringSplitter")
String[] keyAndValue = option.split(SPLIT_KEY_VALUE);
requireArgument(keyAndValue.length <= 2,
"key-value pair %s with more than one equals sign", option);
String key = keyAndValue[0].trim();
String value = (keyAndValue.length == 1) ? null : keyAndValue[1].trim();
configure(key, value);
}
void configure(String key, @Nullable String value) {
switch (key) {
case "initialCapacity":
initialCapacity(key, value);
return;
case "maximumSize":
maximumSize(key, value);
return;
case "maximumWeight":
maximumWeight(key, value);
return;
case "weakKeys":
weakKeys(value);
return;
case "weakValues":
valueStrength(key, value, Strength.WEAK);
return;
case "softValues":
valueStrength(key, value, Strength.SOFT);
return;
case "expireAfterAccess":
expireAfterAccess(key, value);
return;
case "expireAfterWrite":
expireAfterWrite(key, value);
return;
case "refreshAfterWrite":
refreshAfterWrite(key, value);
return;
case "recordStats":
recordStats(value);
return;
default:
throw new IllegalArgumentException("Unknown key " + key);
}
}
void initialCapacity(String key, @Nullable String value) {
requireArgument(initialCapacity == UNSET_INT,
"initial capacity was already set to %,d", initialCapacity);
initialCapacity = parseInt(key, value);
}
void maximumSize(String key, @Nullable String value) {
requireArgument(maximumSize == UNSET_INT,
"maximum size was already set to %,d", maximumSize);
requireArgument(maximumWeight == UNSET_INT,
"maximum weight was already set to %,d", maximumWeight);
maximumSize = parseLong(key, value);
}
void maximumWeight(String key, @Nullable String value) {
requireArgument(maximumWeight == UNSET_INT,
"maximum weight was already set to %,d", maximumWeight);
requireArgument(maximumSize == UNSET_INT,
"maximum size was already set to %,d", maximumSize);
maximumWeight = parseLong(key, value);
}
void weakKeys(@Nullable String value) {
requireArgument(value == null, "weak keys does not take a value");
requireArgument(keyStrength == null, "weak keys was already set");
keyStrength = Strength.WEAK;
}
void valueStrength(String key, @Nullable String value, Strength strength) {
requireArgument(value == null, "%s does not take a value", key);
requireArgument(valueStrength == null, "%s was already set to %s", key, valueStrength);
valueStrength = strength;
}
void expireAfterAccess(String key, @Nullable String value) {
requireArgument(expireAfterAccessDuration == UNSET_INT, "expireAfterAccess was already set");
expireAfterAccessDuration = parseDuration(key, value);
expireAfterAccessTimeUnit = parseTimeUnit(key, value);
}
void expireAfterWrite(String key, @Nullable String value) {
requireArgument(expireAfterWriteDuration == UNSET_INT, "expireAfterWrite was already set");
expireAfterWriteDuration = parseDuration(key, value);
expireAfterWriteTimeUnit = parseTimeUnit(key, value);
}
void refreshAfterWrite(String key, @Nullable String value) {
requireArgument(refreshAfterWriteDuration == UNSET_INT, "refreshAfterWrite was already set");
refreshAfterWriteDuration = parseDuration(key, value);
refreshAfterWriteTimeUnit = parseTimeUnit(key, value);
}
void recordStats(@Nullable String value) {
requireArgument(value == null, "record stats does not take a value");
requireArgument(!recordStats, "record stats was already set");
recordStats = true;
}
static int parseInt(String key, @Nullable String value) {
requireArgument((value != null) && !value.isEmpty(), "value of key %s was omitted", key);
try {
return Integer.parseInt(value);
} catch (NumberFormatException e) {
throw new IllegalArgumentException(String.format(
"key %s value was set to %s, must be an integer", key, value), e);
}
}
static long parseLong(String key, @Nullable String value) {
requireArgument((value != null) && !value.isEmpty(), "value of key %s was omitted", key);
try {
return Long.parseLong(value);
} catch (NumberFormatException e) {
throw new IllegalArgumentException(String.format(
"key %s value was set to %s, must be a long", key, value), e);
}
}
static long parseDuration(String key, @Nullable String value) {
requireArgument((value != null) && !value.isEmpty(), "value of key %s omitted", key);
@SuppressWarnings("NullAway")
String duration = value.substring(0, value.length() - 1);
return parseLong(key, duration);
}
static TimeUnit parseTimeUnit(String key, @Nullable String value) {
requireArgument((value != null) && !value.isEmpty(), "value of key %s omitted", key);
@SuppressWarnings("NullAway")
char lastChar = Character.toLowerCase(value.charAt(value.length() - 1));
switch (lastChar) {
case 'd':
return TimeUnit.DAYS;
case 'h':
return TimeUnit.HOURS;
case 'm':
return TimeUnit.MINUTES;
case 's':
return TimeUnit.SECONDS;
default:
throw new IllegalArgumentException(String.format(
"key %s invalid format; was %s, must end with one of [dDhHmMsS]", key, value));
}
}
@Override
public boolean equals(Object o) {
if (this == o) {
return true;
} else if (!(o instanceof CaffeineSpec)) {
return false;
}
CaffeineSpec spec = (CaffeineSpec) o;
return Objects.equals(initialCapacity, spec.initialCapacity)
&& Objects.equals(maximumSize, spec.maximumSize)
&& Objects.equals(maximumWeight, spec.maximumWeight)
&& Objects.equals(keyStrength, spec.keyStrength)
&& Objects.equals(valueStrength, spec.valueStrength)
&& Objects.equals(recordStats, spec.recordStats)
&& (durationInNanos(expireAfterAccessDuration, expireAfterAccessTimeUnit) ==
durationInNanos(spec.expireAfterAccessDuration, spec.expireAfterAccessTimeUnit))
&& (durationInNanos(expireAfterWriteDuration, expireAfterWriteTimeUnit) ==
durationInNanos(spec.expireAfterWriteDuration, spec.expireAfterWriteTimeUnit))
&& (durationInNanos(refreshAfterWriteDuration, refreshAfterWriteTimeUnit) ==
durationInNanos(spec.refreshAfterWriteDuration, spec.refreshAfterWriteTimeUnit));
}
@Override
public int hashCode() {
return Objects.hash(
initialCapacity, maximumSize, maximumWeight, keyStrength, valueStrength, recordStats,
durationInNanos(expireAfterAccessDuration, expireAfterAccessTimeUnit),
durationInNanos(expireAfterWriteDuration, expireAfterWriteTimeUnit),
durationInNanos(refreshAfterWriteDuration, refreshAfterWriteTimeUnit));
}
static long durationInNanos(long duration, @Nullable TimeUnit unit) {
return (unit == null) ? UNSET_INT : unit.toNanos(duration);
}
public String toParsableString() {
return specification;
}
@Override
public String toString() {
return getClass().getSimpleName() + '{' + toParsableString() + '}';
}
}
