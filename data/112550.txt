package com.sun.swingset3.demos.slider;
import java.awt.*;
import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import com.sun.swingset3.DemoProperties;
import com.sun.swingset3.demos.ResourceManager;
@DemoProperties(
value = "Slider Demo",
category = "Controls",
description = "Demonstrates the JSlider, a control which supports linear adjustment",
sourceFiles = {
"com/sun/swingset3/demos/slider/SliderDemo.java",
"com/sun/swingset3/demos/ResourceManager.java",
"com/sun/swingset3/demos/slider/resources/SliderDemo.properties",
"com/sun/swingset3/demos/slider/resources/images/SliderDemo.gif"
}
)
public class SliderDemo extends JPanel {
private static final Dimension HGAP5 = new Dimension(5, 1);
private static final Dimension VGAP5 = new Dimension(1, 5);
private static final Dimension HGAP10 = new Dimension(10, 1);
private static final Dimension VGAP10 = new Dimension(1, 10);
private static final Dimension HGAP20 = new Dimension(20, 1);
private static final Dimension HGAP25 = new Dimension(25, 1);
private final ResourceManager resourceManager = new ResourceManager(this.getClass());
public static void main(String[] args) {
JFrame frame = new JFrame(SliderDemo.class.getAnnotation(DemoProperties.class).value());
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.getContentPane().add(new SliderDemo());
frame.setPreferredSize(new Dimension(800, 600));
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
public SliderDemo() {
createSliderDemo();
}
private void createSliderDemo() {
JSlider s;
JPanel hp;
JPanel vp;
GridLayout g;
JPanel tp;
JLabel tf;
ChangeListener listener;
setLayout(new BorderLayout());
tf = new JLabel(resourceManager.getString("SliderDemo.slidervalue"));
add(tf, BorderLayout.SOUTH);
tp = new JPanel();
g = new GridLayout(1, 2);
g.setHgap(5);
g.setVgap(5);
tp.setLayout(g);
add(tp, BorderLayout.CENTER);
listener = new SliderListener(tf);
BevelBorder border = new BevelBorder(BevelBorder.LOWERED);
hp = new JPanel();
hp.setLayout(new BoxLayout(hp, BoxLayout.Y_AXIS));
hp.setBorder(new TitledBorder(
border,
resourceManager.getString("SliderDemo.horizontal"),
TitledBorder.LEFT,
TitledBorder.ABOVE_TOP));
tp.add(hp);
vp = new JPanel();
vp.setLayout(new BoxLayout(vp, BoxLayout.X_AXIS));
vp.setBorder(new TitledBorder(
border,
resourceManager.getString("SliderDemo.vertical"),
TitledBorder.LEFT,
TitledBorder.ABOVE_TOP));
tp.add(vp);
JPanel p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
p.setBorder(new TitledBorder(resourceManager.getString("SliderDemo.plain")));
s = new JSlider(-10, 100, 20);
s.getAccessibleContext().setAccessibleName(resourceManager.getString("SliderDemo.plain"));
s.getAccessibleContext().setAccessibleDescription(resourceManager.getString("SliderDemo.a_plain_slider"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(VGAP5));
p.add(s);
p.add(Box.createRigidArea(VGAP5));
hp.add(p);
hp.add(Box.createRigidArea(VGAP10));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
p.setBorder(new TitledBorder(resourceManager.getString("SliderDemo.majorticks")));
s = new JSlider(100, 1000, 400);
s.setPaintTicks(true);
s.setMajorTickSpacing(100);
s.getAccessibleContext().setAccessibleName(resourceManager.getString("SliderDemo.majorticks"));
s.getAccessibleContext().setAccessibleDescription(resourceManager.getString("SliderDemo.majorticksdescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(VGAP5));
p.add(s);
p.add(Box.createRigidArea(VGAP5));
hp.add(p);
hp.add(Box.createRigidArea(VGAP10));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
p.setBorder(new TitledBorder(resourceManager.getString("SliderDemo.ticks")));
s = new JSlider(0, 11, 6);
s.putClientProperty("JSlider.isFilled", Boolean.TRUE);
s.setPaintTicks(true);
s.setMajorTickSpacing(5);
s.setMinorTickSpacing(1);
s.setPaintLabels(true);
s.setSnapToTicks(true);
s.getLabelTable().put(new Integer(11), new JLabel(Integer.toString(11), JLabel.CENTER));
s.setLabelTable(s.getLabelTable());
s.getAccessibleContext().setAccessibleName(resourceManager.getString("SliderDemo.minorticks"));
s.getAccessibleContext().setAccessibleDescription(resourceManager.getString("SliderDemo.minorticksdescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(VGAP5));
p.add(s);
p.add(Box.createRigidArea(VGAP5));
hp.add(p);
hp.add(Box.createRigidArea(VGAP10));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
p.setBorder(new TitledBorder(resourceManager.getString("SliderDemo.disabled")));
BoundedRangeModel brm = new DefaultBoundedRangeModel(80, 0, 0, 100);
s = new JSlider(brm);
s.setPaintTicks(true);
s.setMajorTickSpacing(20);
s.setMinorTickSpacing(5);
s.setEnabled(false);
s.getAccessibleContext().setAccessibleName(resourceManager.getString("SliderDemo.disabled"));
s.getAccessibleContext().setAccessibleDescription(resourceManager.getString("SliderDemo.disableddescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(VGAP5));
p.add(s);
p.add(Box.createRigidArea(VGAP5));
hp.add(p);
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
p.setBorder(new TitledBorder(resourceManager.getString("SliderDemo.plain")));
s = new JSlider(JSlider.VERTICAL, -10, 100, 20);
s.getAccessibleContext().setAccessibleName(resourceManager.getString("SliderDemo.plain"));
s.getAccessibleContext().setAccessibleDescription(resourceManager.getString("SliderDemo.a_plain_slider"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(HGAP10));
p.add(s);
p.add(Box.createRigidArea(HGAP10));
vp.add(p);
vp.add(Box.createRigidArea(HGAP10));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
p.setBorder(new TitledBorder(resourceManager.getString("SliderDemo.majorticks")));
s = new JSlider(JSlider.VERTICAL, 100, 1000, 400);
s.putClientProperty("JSlider.isFilled", Boolean.TRUE);
s.setPaintTicks(true);
s.setMajorTickSpacing(100);
s.getAccessibleContext().setAccessibleName(resourceManager.getString("SliderDemo.majorticks"));
s.getAccessibleContext().setAccessibleDescription(resourceManager.getString("SliderDemo.majorticksdescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(HGAP25));
p.add(s);
p.add(Box.createRigidArea(HGAP25));
vp.add(p);
vp.add(Box.createRigidArea(HGAP5));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
p.setBorder(new TitledBorder(resourceManager.getString("SliderDemo.minorticks")));
s = new JSlider(JSlider.VERTICAL, 0, 100, 60);
s.setPaintTicks(true);
s.setMajorTickSpacing(20);
s.setMinorTickSpacing(5);
s.setPaintLabels(true);
s.getAccessibleContext().setAccessibleName(resourceManager.getString("SliderDemo.minorticks"));
s.getAccessibleContext().setAccessibleDescription(resourceManager.getString("SliderDemo.minorticksdescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(HGAP10));
p.add(s);
p.add(Box.createRigidArea(HGAP10));
vp.add(p);
vp.add(Box.createRigidArea(HGAP5));
p = new JPanel();
p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
p.setBorder(new TitledBorder(resourceManager.getString("SliderDemo.disabled")));
s = new JSlider(JSlider.VERTICAL, 0, 100, 80);
s.setPaintTicks(true);
s.setMajorTickSpacing(20);
s.setMinorTickSpacing(5);
s.setEnabled(false);
s.getAccessibleContext().setAccessibleName(resourceManager.getString("SliderDemo.disabled"));
s.getAccessibleContext().setAccessibleDescription(resourceManager.getString("SliderDemo.disableddescription"));
s.addChangeListener(listener);
p.add(Box.createRigidArea(HGAP20));
p.add(s);
p.add(Box.createRigidArea(HGAP20));
vp.add(p);
}
private class SliderListener implements ChangeListener {
private final JLabel tf;
public SliderListener(JLabel f) {
tf = f;
}
public void stateChanged(ChangeEvent e) {
JSlider s1 = (JSlider) e.getSource();
tf.setText(resourceManager.getString("SliderDemo.slidervalue") + s1.getValue());
}
}
}
