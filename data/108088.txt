package io.dropwizard.server;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.dropwizard.jetty.ConnectorFactory;
import io.dropwizard.jetty.ContextRoutingHandler;
import io.dropwizard.jetty.HttpConnectorFactory;
import io.dropwizard.setup.Environment;
import io.dropwizard.util.Maps;
import org.eclipse.jetty.server.Connector;
import org.eclipse.jetty.server.Handler;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.util.thread.ThreadPool;
import javax.validation.constraints.NotEmpty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.Map;
@JsonTypeName("simple")
public class SimpleServerFactory extends AbstractServerFactory {
private static final Logger LOGGER = LoggerFactory.getLogger(SimpleServerFactory.class);
@Valid
@NotNull
private ConnectorFactory connector = HttpConnectorFactory.application();
@NotEmpty
private String applicationContextPath = "/application";
@NotEmpty
private String adminContextPath = "/admin";
@JsonProperty
public ConnectorFactory getConnector() {
return connector;
}
@JsonProperty
public void setConnector(ConnectorFactory factory) {
this.connector = factory;
}
@JsonProperty
public String getApplicationContextPath() {
return applicationContextPath;
}
@JsonProperty
public void setApplicationContextPath(String contextPath) {
this.applicationContextPath = contextPath;
}
@JsonProperty
public String getAdminContextPath() {
return adminContextPath;
}
@JsonProperty
public void setAdminContextPath(String contextPath) {
this.adminContextPath = contextPath;
}
@Override
public Server build(Environment environment) {
configure(environment);
printBanner(environment.getName());
final ThreadPool threadPool = createThreadPool(environment.metrics());
final Server server = buildServer(environment.lifecycle(), threadPool);
final Handler applicationHandler = createAppServlet(server,
environment.jersey(),
environment.getObjectMapper(),
environment.getValidator(),
environment.getApplicationContext(),
environment.getJerseyServletContainer(),
environment.metrics());
final Handler adminHandler = createAdminServlet(server,
environment.getAdminContext(),
environment.metrics(),
environment.healthChecks());
final Connector conn = connector.build(server,
environment.metrics(),
environment.getName(),
null);
server.addConnector(conn);
final Map<String, Handler> handlers = Maps.of(
applicationContextPath, applicationHandler,
adminContextPath, adminHandler);
final ContextRoutingHandler routingHandler = new ContextRoutingHandler(handlers);
final Handler gzipHandler = buildGzipHandler(routingHandler);
server.setHandler(addStatsHandler(addRequestLog(server, gzipHandler, environment.getName())));
return server;
}
@Override
public void configure(Environment environment) {
LOGGER.info("Registering jersey handler with root path prefix: {}", applicationContextPath);
environment.getApplicationContext().setContextPath(applicationContextPath);
LOGGER.info("Registering admin handler with root path prefix: {}", adminContextPath);
environment.getAdminContext().setContextPath(adminContextPath);
}
}
