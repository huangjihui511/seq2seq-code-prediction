package com.github.benmanes.caffeine.cache.local;
import javax.lang.model.element.Modifier;
import com.github.benmanes.caffeine.cache.Feature;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
public final class AddRefreshAfterWrite extends LocalCacheRule {
@Override
protected boolean applies() {
return context.generateFeatures.contains(Feature.REFRESH_WRITE);
}
@Override
protected void execute() {
context.constructor.addStatement(
"this.refreshAfterWriteNanos = builder.getRefreshAfterWriteNanos()");
context.cache.addField(FieldSpec.builder(long.class, "refreshAfterWriteNanos")
.addModifiers(Modifier.VOLATILE).build());
context.cache.addMethod(MethodSpec.methodBuilder("refreshAfterWrite")
.addModifiers(context.protectedFinalModifiers())
.addStatement("return true")
.returns(boolean.class)
.build());
context.cache.addMethod(MethodSpec.methodBuilder("refreshAfterWriteNanos")
.addModifiers(context.protectedFinalModifiers())
.addStatement("return refreshAfterWriteNanos")
.returns(long.class)
.build());
context.cache.addMethod(MethodSpec.methodBuilder("setRefreshAfterWriteNanos")
.addStatement("this.refreshAfterWriteNanos = refreshAfterWriteNanos")
.addParameter(long.class, "refreshAfterWriteNanos")
.addModifiers(context.protectedFinalModifiers())
.build());
}
}
