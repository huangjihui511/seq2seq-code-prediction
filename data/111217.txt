package com.github.benmanes.caffeine.cache.impl;
import static com.github.benmanes.caffeine.cache.CacheType.CONCURRENCY_LEVEL;
import static java.util.Objects.requireNonNull;
import com.github.benmanes.caffeine.cache.BasicCache;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
public final class GuavaCache<K, V> implements BasicCache<K, V> {
private final Cache<K, V> cache;
public GuavaCache(int maximumSize) {
cache = CacheBuilder.newBuilder()
.concurrencyLevel(CONCURRENCY_LEVEL)
.initialCapacity(maximumSize)
.maximumSize(maximumSize)
.build();
}
public GuavaCache(Cache<K, V> cache) {
this.cache = requireNonNull(cache);
}
@Override
public V get(K key) {
return cache.getIfPresent(key);
}
@Override
public void put(K key, V value) {
cache.put(key, value);
}
@Override
public void clear() {
cache.invalidateAll();
}
@Override
public void cleanUp() {
cache.cleanUp();
}
}
