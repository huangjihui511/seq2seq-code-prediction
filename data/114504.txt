package org.dstadler.jgit.porcelain;
Copyright 2015 Dominik Stadler
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http:
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
import org.apache.commons.io.FileUtils;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.errors.UnsupportedCredentialItem;
import org.eclipse.jgit.transport.CredentialItem;
import org.eclipse.jgit.transport.CredentialsProvider;
import org.eclipse.jgit.transport.URIish;
import java.io.File;
import java.io.IOException;
public class CloneRemoteRepositoryWithAuthentication {
private static final String REMOTE_URL = "ssh:
public static void main(String[] args) throws IOException, GitAPIException {
CredentialsProvider allowHosts = new CredentialsProvider() {
@Override
public boolean supports(CredentialItem... items) {
for(CredentialItem item : items) {
if((item instanceof CredentialItem.YesNoType)) {
return true;
}
}
return false;
}
@Override
public boolean get(URIish uri, CredentialItem... items) throws UnsupportedCredentialItem {
for(CredentialItem item : items) {
if(item instanceof CredentialItem.YesNoType) {
((CredentialItem.YesNoType)item).setValue(true);
return true;
}
}
return false;
}
@Override
public boolean isInteractive() {
return false;
}
};
File localPath = File.createTempFile("TestGitRepository", "");
if(!localPath.delete()) {
throw new IOException("Could not delete temporary file " + localPath);
}
System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
try (Git result = Git.cloneRepository()
.setURI(REMOTE_URL)
.setDirectory(localPath)
.setCredentialsProvider(allowHosts)
.call()) {
System.out.println("Having repository: " + result.getRepository().getDirectory());
}
FileUtils.deleteDirectory(localPath);
}
}
