package de.codecentric.boot.admin.client.config;
import org.junit.Test;
import org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration;
import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigurations;
import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;
import org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration;
import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration;
import org.springframework.boot.test.context.runner.ApplicationContextRunner;
import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;
import org.springframework.boot.test.context.runner.WebApplicationContextRunner;
import de.codecentric.boot.admin.client.registration.ApplicationRegistrator;
import static org.assertj.core.api.Assertions.assertThat;
public class SpringBootAdminClientAutoConfigurationTest {
private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()
.withConfiguration(AutoConfigurations.of(EndpointAutoConfiguration.class,
WebEndpointAutoConfiguration.class, DispatcherServletAutoConfiguration.class,
RestTemplateAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class));
@Test
public void not_active() {
this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(ApplicationRegistrator.class));
}
@Test
public void active() {
this.contextRunner.withPropertyValues("spring.boot.admin.client.url:http:
.run((context) -> assertThat(context).hasSingleBean(ApplicationRegistrator.class));
}
@Test
public void disabled() {
this.contextRunner
.withPropertyValues("spring.boot.admin.client.url:http:
"spring.boot.admin.client.enabled:false")
.run((context) -> assertThat(context).doesNotHaveBean(ApplicationRegistrator.class));
}
@Test
public void nonWebEnvironment() {
ApplicationContextRunner nonWebcontextRunner = new ApplicationContextRunner()
.withConfiguration(AutoConfigurations.of(SpringBootAdminClientAutoConfiguration.class));
nonWebcontextRunner.withPropertyValues("spring.boot.admin.client.url:http:
.run((context) -> assertThat(context).doesNotHaveBean(ApplicationRegistrator.class));
}
@Test
public void reactiveEnvironment() {
ReactiveWebApplicationContextRunner reactiveContextRunner = new ReactiveWebApplicationContextRunner()
.withConfiguration(
AutoConfigurations.of(EndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class,
WebClientAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class));
reactiveContextRunner.withPropertyValues("spring.boot.admin.client.url:http:
.run((context) -> assertThat(context).hasSingleBean(ApplicationRegistrator.class));
}
}
