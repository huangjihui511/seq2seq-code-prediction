package io.vertx.core.cli.converters;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
public final class ValueOfBasedConverter<T> implements Converter<T> {
public static final String VALUE_OF = "valueOf";
private final Method method;
private final Class<T> clazz;
private ValueOfBasedConverter(Class<T> clazz, Method method) {
this.clazz = clazz;
this.method = method;
}
@SuppressWarnings("unchecked")
public static <T> ValueOfBasedConverter<T> getIfEligible(Class<T> clazz) {
try {
final Method method = clazz.getMethod(VALUE_OF, String.class);
if (Modifier.isStatic(method.getModifiers())) {
if (!method.isAccessible()) {
method.setAccessible(true);
}
return new ValueOfBasedConverter(clazz, method);
} else {
return null;
}
} catch (NoSuchMethodException e) {
return null;
}
}
@Override
public T fromString(String input) throws IllegalArgumentException {
try {
return clazz.cast(method.invoke(null, input));
} catch (IllegalAccessException | InvocationTargetException e) {
if (e.getCause() != null) {
throw new IllegalArgumentException(e.getCause());
} else {
throw new IllegalArgumentException(e);
}
}
}
}
