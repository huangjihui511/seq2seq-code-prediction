package org.spongepowered.api.data.manipulator.immutable.common;
import org.spongepowered.api.CatalogType;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.data.DataContainer;
import org.spongepowered.api.data.key.Key;
import org.spongepowered.api.data.manipulator.immutable.ImmutableVariantData;
import org.spongepowered.api.data.manipulator.mutable.VariantData;
import org.spongepowered.api.data.value.BaseValue;
import org.spongepowered.api.data.value.immutable.ImmutableValue;
import org.spongepowered.api.data.value.mutable.Value;
public abstract class AbstractImmutableSingleCatalogData<E extends CatalogType, I extends ImmutableVariantData<E, I, M>,
M extends VariantData<E, M, I>> extends AbstractImmutableSingleData<E, I, M> implements ImmutableVariantData<E, I, M> {
private final ImmutableValue<E> cachedValue;
@Deprecated
@SuppressWarnings("unchecked")
protected AbstractImmutableSingleCatalogData(E value, E defaultValue, Key<? extends BaseValue<E>> usedKey) {
this((Key<Value<E>>) usedKey, value, defaultValue);
}
protected AbstractImmutableSingleCatalogData(Key<Value<E>> usedKey, E value) {
this(usedKey, value, value);
}
protected AbstractImmutableSingleCatalogData(Key<Value<E>> usedKey, E value, E defaultValue) {
super(usedKey, value, defaultValue);
this.cachedValue = Sponge.getRegistry().getValueFactory()
.createValue(usedKey, value, defaultValue)
.asImmutable();
}
@Override
protected ImmutableValue<E> getValueGetter() {
return this.cachedValue;
}
@Override
public DataContainer toContainer() {
return super.toContainer();
}
@Override
public ImmutableValue<E> type() {
return this.cachedValue;
}
}
