package net.i2p.util;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.URL;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import freenet.support.CPUInformation.AMDCPUInfo;
import freenet.support.CPUInformation.CPUID;
import freenet.support.CPUInformation.CPUInfo;
import freenet.support.CPUInformation.IntelCPUInfo;
import freenet.support.CPUInformation.VIACPUInfo;
import freenet.support.CPUInformation.UnknownCPUException;
import net.i2p.I2PAppContext;
import net.i2p.crypto.CryptoConstants;
import net.i2p.data.DataHelper;
public class NativeBigInteger extends BigInteger {
private static boolean _nativeOk;
private static boolean _nativeOk3;
private static boolean _nativeCTOk;
private static int _jbigiVersion;
private static String _libGMPVersion = "unknown";
private static String _loadStatus = "uninitialized";
private static String _cpuModel = "uninitialized";
private static String _extractedResource;
private static boolean _doLog = System.getProperty("jbigi.dontLog") == null &&
I2PAppContext.getCurrentContext() != null &&
I2PAppContext.getCurrentContext().isRouterContext();
private final static String JBIGI_OPTIMIZATION_K6 = "k6";
private final static String JBIGI_OPTIMIZATION_K6_2 = "k62";
private final static String JBIGI_OPTIMIZATION_K6_3 = "k63";
private final static String JBIGI_OPTIMIZATION_ATHLON = "athlon";
private final static String JBIGI_OPTIMIZATION_ATHLON64 = "athlon64";
private final static String JBIGI_OPTIMIZATION_PENTIUM = "pentium";
private final static String JBIGI_OPTIMIZATION_PENTIUMMMX = "pentiummmx";
private final static String JBIGI_OPTIMIZATION_PENTIUM2 = "pentium2";
private final static String JBIGI_OPTIMIZATION_PENTIUM3 = "pentium3";
private final static String JBIGI_OPTIMIZATION_PENTIUM4 = "pentium4";
private final static String JBIGI_OPTIMIZATION_VIAC3 = "viac3";
private final static String JBIGI_OPTIMIZATION_ATOM = "atom";
private final static String JBIGI_OPTIMIZATION_CORE2 = "core2";
private final static String JBIGI_OPTIMIZATION_COREI = "corei";
private final static String JBIGI_OPTIMIZATION_GEODE = "geode";
private final static String JBIGI_OPTIMIZATION_NANO = "nano";
private final static String JBIGI_OPTIMIZATION_PENTIUMM = "pentiumm";
private final static String JBIGI_OPTIMIZATION_VIAC32 = "viac32";
private final static String JBIGI_OPTIMIZATION_COREI_SBR = "coreisbr";
private final static String JBIGI_OPTIMIZATION_COREI_HWL = "coreihwl";
private final static String JBIGI_OPTIMIZATION_COREI_BWL = "coreibwl";
private final static String JBIGI_OPTIMIZATION_K10 = "k10";
private final static String JBIGI_OPTIMIZATION_BULLDOZER = "bulldozer";
private final static String JBIGI_OPTIMIZATION_PILEDRIVER = "piledriver";
private final static String JBIGI_OPTIMIZATION_STEAMROLLER = "steamroller";
private final static String JBIGI_OPTIMIZATION_EXCAVATOR = "excavator";
private final static String JBIGI_OPTIMIZATION_BOBCAT = "bobcat";
private final static String JBIGI_OPTIMIZATION_JAGUAR = "jaguar";
private final static String JBIGI_OPTIMIZATION_SKYLAKE = "skylake";
private final static String JBIGI_OPTIMIZATION_PPC = "ppc";
private final static String JBIGI_OPTIMIZATION_ARM_ARMV5 = "armv5";
private final static String JBIGI_OPTIMIZATION_ARM_ARMV6 = "armv6";
private final static String JBIGI_OPTIMIZATION_ARM_ARMV7 = "armv7";
private final static String JBIGI_OPTIMIZATION_ARM_ARMV8 = "armv8";
private final static String JBIGI_OPTIMIZATION_ARM_CORTEX_A5 = "armcortexa5";
private final static String JBIGI_OPTIMIZATION_ARM_CORTEX_A7 = "armcortexa7";
private final static String JBIGI_OPTIMIZATION_ARM_CORTEX_A8 = "armcortexa8";
private final static String JBIGI_OPTIMIZATION_ARM_CORTEX_A9 = "armcortexa9";
private final static String JBIGI_OPTIMIZATION_ARM_CORTEX_A15 = "armcortexa15";
private final static String JBIGI_OPTIMIZATION_X86 = "none";
private final static String[] JBIGI_COMPAT_LIST_NONE = {JBIGI_OPTIMIZATION_X86};
private final static String[] JBIGI_COMPAT_LIST_PPC = {JBIGI_OPTIMIZATION_PPC};
private final static String[] JBIGI_COMPAT_LIST_ARM = {JBIGI_OPTIMIZATION_ARM_CORTEX_A15, JBIGI_OPTIMIZATION_ARM_CORTEX_A9, JBIGI_OPTIMIZATION_ARM_CORTEX_A8,
JBIGI_OPTIMIZATION_ARM_CORTEX_A7, JBIGI_OPTIMIZATION_ARM_CORTEX_A5, JBIGI_OPTIMIZATION_ARM_ARMV7,
JBIGI_OPTIMIZATION_ARM_ARMV6, JBIGI_OPTIMIZATION_ARM_ARMV5};
private final static String[] JBIGI_COMPAT_LIST_ARM_ARMV8 = {JBIGI_OPTIMIZATION_ARM_ARMV8};
private final static String[] JBIGI_COMPAT_LIST_VIA = {JBIGI_OPTIMIZATION_NANO, JBIGI_OPTIMIZATION_VIAC32, JBIGI_OPTIMIZATION_VIAC3,
JBIGI_OPTIMIZATION_PENTIUM, JBIGI_OPTIMIZATION_X86};
private final static String[] JBIGI_COMPAT_LIST_AMD_ATHLON = {JBIGI_OPTIMIZATION_K10, JBIGI_OPTIMIZATION_ATHLON64, JBIGI_OPTIMIZATION_ATHLON,
JBIGI_OPTIMIZATION_K6_3, JBIGI_OPTIMIZATION_K6_2, JBIGI_OPTIMIZATION_K6, JBIGI_OPTIMIZATION_X86};
private final static String[] JBIGI_COMPAT_LIST_AMD_GEODE = {JBIGI_OPTIMIZATION_GEODE, JBIGI_OPTIMIZATION_K6_3, JBIGI_OPTIMIZATION_K6_2, JBIGI_OPTIMIZATION_K6,
JBIGI_OPTIMIZATION_X86};
private final static String[] JBIGI_COMPAT_LIST_AMD_APU = {JBIGI_OPTIMIZATION_JAGUAR, JBIGI_OPTIMIZATION_BOBCAT, JBIGI_OPTIMIZATION_ATHLON64};
private final static String[] JBIGI_COMPAT_LIST_AMD_BULLDOZER = {JBIGI_OPTIMIZATION_EXCAVATOR, JBIGI_OPTIMIZATION_STEAMROLLER, JBIGI_OPTIMIZATION_PILEDRIVER,
JBIGI_OPTIMIZATION_BULLDOZER, JBIGI_OPTIMIZATION_ATHLON64, JBIGI_OPTIMIZATION_X86};
private final static String[] JBIGI_COMPAT_LIST_INTEL_ATOM = {JBIGI_OPTIMIZATION_ATOM, JBIGI_OPTIMIZATION_PENTIUM3, JBIGI_OPTIMIZATION_PENTIUM2,
JBIGI_OPTIMIZATION_PENTIUMMMX, JBIGI_OPTIMIZATION_PENTIUM, JBIGI_OPTIMIZATION_X86,
JBIGI_OPTIMIZATION_PENTIUM4};
private final static String[] JBIGI_COMPAT_LIST_INTEL_PENTIUM = {JBIGI_OPTIMIZATION_PENTIUM4, JBIGI_OPTIMIZATION_PENTIUMM, JBIGI_OPTIMIZATION_PENTIUM3,
JBIGI_OPTIMIZATION_PENTIUM2, JBIGI_OPTIMIZATION_PENTIUMMMX, JBIGI_OPTIMIZATION_PENTIUM,
JBIGI_OPTIMIZATION_X86};
private final static String[] JBIGI_COMPAT_LIST_INTEL_CORE = {JBIGI_OPTIMIZATION_SKYLAKE,
JBIGI_OPTIMIZATION_COREI_BWL, JBIGI_OPTIMIZATION_COREI_HWL, JBIGI_OPTIMIZATION_COREI_SBR,
JBIGI_OPTIMIZATION_COREI, JBIGI_OPTIMIZATION_CORE2, JBIGI_OPTIMIZATION_PENTIUMM,
JBIGI_OPTIMIZATION_PENTIUM3, JBIGI_OPTIMIZATION_X86};
@SuppressWarnings("serial")
private final static HashMap<String, String[]> JBIGI_COMPAT_MAP = new HashMap<String, String[]>() {{
put(JBIGI_OPTIMIZATION_X86, JBIGI_COMPAT_LIST_NONE);
put(JBIGI_OPTIMIZATION_PPC, JBIGI_COMPAT_LIST_PPC);
put(JBIGI_OPTIMIZATION_ARM_ARMV5,      JBIGI_COMPAT_LIST_ARM);
put(JBIGI_OPTIMIZATION_ARM_ARMV6,      JBIGI_COMPAT_LIST_ARM);
put(JBIGI_OPTIMIZATION_ARM_ARMV7,      JBIGI_COMPAT_LIST_ARM);
put(JBIGI_OPTIMIZATION_ARM_ARMV8,      JBIGI_COMPAT_LIST_ARM_ARMV8);
put(JBIGI_OPTIMIZATION_ARM_CORTEX_A5,  JBIGI_COMPAT_LIST_ARM);
put(JBIGI_OPTIMIZATION_ARM_CORTEX_A7,  JBIGI_COMPAT_LIST_ARM);
put(JBIGI_OPTIMIZATION_ARM_CORTEX_A8,  JBIGI_COMPAT_LIST_ARM);
put(JBIGI_OPTIMIZATION_ARM_CORTEX_A9,  JBIGI_COMPAT_LIST_ARM);
put(JBIGI_OPTIMIZATION_ARM_CORTEX_A15, JBIGI_COMPAT_LIST_ARM);
put(JBIGI_OPTIMIZATION_VIAC3,  JBIGI_COMPAT_LIST_VIA);
put(JBIGI_OPTIMIZATION_VIAC32, JBIGI_COMPAT_LIST_VIA);
put(JBIGI_OPTIMIZATION_NANO,   JBIGI_COMPAT_LIST_VIA);
put(JBIGI_OPTIMIZATION_K6,       JBIGI_COMPAT_LIST_AMD_ATHLON);
put(JBIGI_OPTIMIZATION_K6_2,     JBIGI_COMPAT_LIST_AMD_ATHLON);
put(JBIGI_OPTIMIZATION_K6_3,     JBIGI_COMPAT_LIST_AMD_ATHLON);
put(JBIGI_OPTIMIZATION_ATHLON,   JBIGI_COMPAT_LIST_AMD_ATHLON);
put(JBIGI_OPTIMIZATION_ATHLON64, JBIGI_COMPAT_LIST_AMD_ATHLON);
put(JBIGI_OPTIMIZATION_K10, JBIGI_COMPAT_LIST_AMD_ATHLON);
put(JBIGI_OPTIMIZATION_GEODE, JBIGI_COMPAT_LIST_AMD_GEODE);
put(JBIGI_OPTIMIZATION_BOBCAT, JBIGI_COMPAT_LIST_AMD_APU);
put(JBIGI_OPTIMIZATION_JAGUAR, JBIGI_COMPAT_LIST_AMD_APU);
put(JBIGI_OPTIMIZATION_BULLDOZER,   JBIGI_COMPAT_LIST_AMD_BULLDOZER);
put(JBIGI_OPTIMIZATION_PILEDRIVER,  JBIGI_COMPAT_LIST_AMD_BULLDOZER);
put(JBIGI_OPTIMIZATION_STEAMROLLER, JBIGI_COMPAT_LIST_AMD_BULLDOZER);
put(JBIGI_OPTIMIZATION_EXCAVATOR,   JBIGI_COMPAT_LIST_AMD_BULLDOZER);
put(JBIGI_OPTIMIZATION_ATOM, JBIGI_COMPAT_LIST_INTEL_ATOM);
put(JBIGI_OPTIMIZATION_PENTIUM,    JBIGI_COMPAT_LIST_INTEL_PENTIUM);
put(JBIGI_OPTIMIZATION_PENTIUMMMX, JBIGI_COMPAT_LIST_INTEL_PENTIUM);
put(JBIGI_OPTIMIZATION_PENTIUM2,   JBIGI_COMPAT_LIST_INTEL_PENTIUM);
put(JBIGI_OPTIMIZATION_PENTIUM3,   JBIGI_COMPAT_LIST_INTEL_PENTIUM);
put(JBIGI_OPTIMIZATION_PENTIUMM,   JBIGI_COMPAT_LIST_INTEL_PENTIUM);
put(JBIGI_OPTIMIZATION_PENTIUM4,   JBIGI_COMPAT_LIST_INTEL_PENTIUM);
put(JBIGI_OPTIMIZATION_PENTIUM3,  JBIGI_COMPAT_LIST_INTEL_CORE);
put(JBIGI_OPTIMIZATION_PENTIUMM,  JBIGI_COMPAT_LIST_INTEL_CORE);
put(JBIGI_OPTIMIZATION_CORE2,     JBIGI_COMPAT_LIST_INTEL_CORE);
put(JBIGI_OPTIMIZATION_COREI,     JBIGI_COMPAT_LIST_INTEL_CORE);
put(JBIGI_OPTIMIZATION_COREI_SBR, JBIGI_COMPAT_LIST_INTEL_CORE);
put(JBIGI_OPTIMIZATION_COREI_HWL, JBIGI_COMPAT_LIST_INTEL_CORE);
put(JBIGI_OPTIMIZATION_COREI_BWL, JBIGI_COMPAT_LIST_INTEL_CORE);
put(JBIGI_OPTIMIZATION_SKYLAKE,   JBIGI_COMPAT_LIST_INTEL_CORE);
}};
private static final boolean _isWin = SystemVersion.isWindows();
private static final boolean _isOS2 = System.getProperty("os.name").startsWith("OS/2");
private static final boolean _isMac = SystemVersion.isMac();
private static final boolean _isLinux = System.getProperty("os.name").toLowerCase(Locale.US).contains("linux");
private static final boolean _isKFreebsd = System.getProperty("os.name").toLowerCase(Locale.US).contains("kfreebsd");
private static final boolean _isFreebsd = (!_isKFreebsd) && System.getProperty("os.name").toLowerCase(Locale.US).contains("freebsd");
private static final boolean _isNetbsd = System.getProperty("os.name").toLowerCase(Locale.US).contains("netbsd");
private static final boolean _isOpenbsd = System.getProperty("os.name").toLowerCase(Locale.US).contains("openbsd");
private static final boolean _isSunos = System.getProperty("os.name").toLowerCase(Locale.US).contains("sunos");
private static final boolean _isAndroid = SystemVersion.isAndroid();
private static final boolean _is64 = SystemVersion.is64Bit();
private static final boolean _isX86 = SystemVersion.isX86();
private static final boolean _isArm = SystemVersion.isARM();
private static final boolean _isPPC = System.getProperty("os.arch").contains("ppc");
private static final String _libPrefix = (_isWin || _isOS2 ? "" : "lib");
private static final String _libSuffix = (_isWin || _isOS2 ? ".dll" : _isMac ? ".jnilib" : ".so");
private final static String sCPUType; 
static {
sCPUType = resolveCPUType();
loadNative();
}
private static String resolveCPUType() {
if(_isX86) {
try {
CPUInfo c = CPUID.getInfo();
try {
_cpuModel = c.getCPUModelString();
} catch (UnknownCPUException e) {}
if (c instanceof VIACPUInfo) {
VIACPUInfo viacpu = (VIACPUInfo) c;
if (viacpu.IsNanoCompatible())
return JBIGI_OPTIMIZATION_NANO;
return JBIGI_OPTIMIZATION_VIAC3;
} else if (c instanceof AMDCPUInfo) {
AMDCPUInfo amdcpu = (AMDCPUInfo) c;
if (amdcpu.IsExcavatorCompatible())
return JBIGI_OPTIMIZATION_EXCAVATOR;
if (amdcpu.IsSteamrollerCompatible())
return JBIGI_OPTIMIZATION_STEAMROLLER;
if (amdcpu.IsPiledriverCompatible())
return JBIGI_OPTIMIZATION_PILEDRIVER;
if (amdcpu.IsBulldozerCompatible())
return JBIGI_OPTIMIZATION_BULLDOZER;
if (amdcpu.IsJaguarCompatible())
return JBIGI_OPTIMIZATION_JAGUAR;
if (amdcpu.IsBobcatCompatible())
return JBIGI_OPTIMIZATION_BOBCAT;
if (amdcpu.IsK10Compatible())
return JBIGI_OPTIMIZATION_K10;
if (amdcpu.IsAthlon64Compatible())
return JBIGI_OPTIMIZATION_ATHLON64;
if (amdcpu.IsAthlonCompatible())
return JBIGI_OPTIMIZATION_ATHLON;
if (amdcpu.IsGeodeCompatible())
return JBIGI_OPTIMIZATION_GEODE;
if (amdcpu.IsK6_3_Compatible())
return JBIGI_OPTIMIZATION_K6_3;
if (amdcpu.IsK6_2_Compatible())
return JBIGI_OPTIMIZATION_K6_2;
if (amdcpu.IsK6Compatible())
return JBIGI_OPTIMIZATION_K6;
} else if (c instanceof IntelCPUInfo) {
IntelCPUInfo intelcpu = (IntelCPUInfo) c;
if (intelcpu.IsSkylakeCompatible())
return JBIGI_OPTIMIZATION_SKYLAKE;
if (intelcpu.IsBroadwellCompatible())
return JBIGI_OPTIMIZATION_COREI_BWL;
if (intelcpu.IsHaswellCompatible())
return JBIGI_OPTIMIZATION_COREI_HWL;
if (intelcpu.IsSandyCompatible())
return JBIGI_OPTIMIZATION_COREI_SBR;
if (intelcpu.IsCoreiCompatible())
return JBIGI_OPTIMIZATION_COREI;
if (intelcpu.IsCore2Compatible())
return JBIGI_OPTIMIZATION_CORE2;
if (intelcpu.IsAtomCompatible())
return JBIGI_OPTIMIZATION_ATOM;
if (intelcpu.IsPentium4Compatible())
return JBIGI_OPTIMIZATION_PENTIUM4;
if (intelcpu.IsPentiumMCompatible())
return JBIGI_OPTIMIZATION_PENTIUMM;
if (intelcpu.IsPentium3Compatible())
return JBIGI_OPTIMIZATION_PENTIUM3;
if (intelcpu.IsPentium2Compatible())
return JBIGI_OPTIMIZATION_PENTIUM2;
if (intelcpu.IsPentiumMMXCompatible())
return JBIGI_OPTIMIZATION_PENTIUMMMX;
if (intelcpu.IsPentiumCompatible())
return JBIGI_OPTIMIZATION_PENTIUM;
}
} catch (UnknownCPUException e) {
}
return JBIGI_OPTIMIZATION_X86;
} else if (_isArm) {
if (_isWin)
return null;
Map<String, String> cpuinfo = getCPUInfo();
String implementer = cpuinfo.get("cpu implementer");
String part = cpuinfo.get("cpu part");
if (implementer != null && part != null && implementer.contains("0x41")) {
if (part.contains("0xc0f")) {
return JBIGI_OPTIMIZATION_ARM_CORTEX_A15;
} else if (part.contains("0xc0e")) {
return JBIGI_OPTIMIZATION_ARM_CORTEX_A15;
} else if (part.contains("0xc0d")) {
return JBIGI_OPTIMIZATION_ARM_CORTEX_A15;
} else if (part.contains("0xc09")) {
return JBIGI_OPTIMIZATION_ARM_CORTEX_A9;
} else if (part.contains("0xc08")) {
return JBIGI_OPTIMIZATION_ARM_CORTEX_A8;
} else if (part.contains("0xc07")) {
return JBIGI_OPTIMIZATION_ARM_CORTEX_A7;
} else if (part.contains("0xc05")) {
return JBIGI_OPTIMIZATION_ARM_CORTEX_A5;
}
}
String arch = cpuinfo.get("cpu architecture");
String model = cpuinfo.get("model name");
if (arch != null) {
if (arch.startsWith("8"))
return JBIGI_OPTIMIZATION_ARM_ARMV8;
if (arch.startsWith("7")) {
if (model != null && model.contains("ARMv6"))
return JBIGI_OPTIMIZATION_ARM_ARMV6;
return JBIGI_OPTIMIZATION_ARM_ARMV7;
}
if (arch.startsWith("6"))
return JBIGI_OPTIMIZATION_ARM_ARMV6;
if (arch.startsWith("5"))
return JBIGI_OPTIMIZATION_ARM_ARMV5;
}
if (model != null) {
if (model.contains("ARMv8"))
return JBIGI_OPTIMIZATION_ARM_ARMV8;
if (model.contains("ARMv7"))
return JBIGI_OPTIMIZATION_ARM_ARMV7;
if (model.contains("ARMv6"))
return JBIGI_OPTIMIZATION_ARM_ARMV6;
if (model.contains("ARMv5"))
return JBIGI_OPTIMIZATION_ARM_ARMV5;
}
if (_is64)
return JBIGI_OPTIMIZATION_ARM_ARMV8;
return null;
} else if (_isPPC && !_isMac) {
return JBIGI_OPTIMIZATION_PPC;
}
return null;
}
private native static byte[] nativeModPow(byte base[], byte exponent[], byte modulus[]);
private native static byte[] nativeModPowCT(byte base[], byte exponent[], byte modulus[]);
private native static byte[] nativeModInverse(byte base[], byte d[]);
private native static int nativeJbigiVersion();
private native static int nativeGMPMajorVersion();
private native static int nativeGMPMinorVersion();
private native static int nativeGMPPatchVersion();
private static int fetchJbigiVersion() {
if (!_nativeOk)
return 0;
try {
return nativeJbigiVersion();
} catch (Throwable t) {
return 2;
}
}
private static void setVersions() {
_jbigiVersion = fetchJbigiVersion();
_nativeOk3 = _jbigiVersion > 2;
if (_nativeOk3) {
try {
int maj = nativeGMPMajorVersion();
int min = nativeGMPMinorVersion();
int pat = nativeGMPPatchVersion();
_libGMPVersion = maj + "." + min + "." + pat;
_nativeCTOk = maj >= 5;
} catch (Throwable t) {
warn("jbigi version " + _jbigiVersion + " but GMP version not available???", t);
}
}
}
public static int getJbigiVersion() {
return _jbigiVersion;
}
public static String getLibGMPVersion() {
return _libGMPVersion;
}
private byte[] cachedBa;
public NativeBigInteger(byte[] val) {
super(val);
}
public NativeBigInteger(int signum, byte[] magnitude) {
super(signum, magnitude);
}
public NativeBigInteger(int bitlen, int certainty, Random rnd) {
super(bitlen, certainty, rnd);
}
public NativeBigInteger(int numbits, Random rnd) {
super(numbits, rnd);
}
public NativeBigInteger(String val) {
super(val);
}
public NativeBigInteger(String val, int radix) {
super(val, radix);
}
public NativeBigInteger(BigInteger integer) {
this(integer.toByteArray());
}
@Override
public BigInteger modPow(BigInteger exponent, BigInteger m) {
if (_nativeOk3 || (_nativeOk && signum() >= 0 && exponent.signum() >= 0 && m.signum() > 0))
return new NativeBigInteger(nativeModPow(toByteArray(), exponent.toByteArray(), m.toByteArray()));
else
return super.modPow(exponent, m);
}
public BigInteger modPowCT(BigInteger exponent, BigInteger m) {
if (_nativeCTOk)
return new NativeBigInteger(nativeModPowCT(toByteArray(), exponent.toByteArray(), m.toByteArray()));
else
return modPow(exponent, m);
}
@Override
public BigInteger modInverse(BigInteger m) {
if (_nativeOk3)
return new NativeBigInteger(nativeModInverse(toByteArray(), m.toByteArray()));
else
return super.modInverse(m);
}
@Override
public byte[] toByteArray(){
if(cachedBa == null) 
cachedBa = super.toByteArray();
return cachedBa;
}
public static boolean isNative(){
return _nativeOk;
}
public static String loadStatus() {
return _loadStatus;
}
public static String getLoadedResourceName() {
return _extractedResource;
}
public static String cpuType() {
if (sCPUType != null)
return sCPUType;
return "unrecognized";
}
public static String cpuModel() {
return _cpuModel;
}
public static void main(String args[]) {
_doLog = true;
String path = System.getProperty("java.library.path");
String name = _libPrefix + "jbigi" + _libSuffix;
System.out.println("Native library search path: " + path);
if (_nativeOk) {
String sep = System.getProperty("path.separator");
String[] paths = DataHelper.split(path, sep);
for (String p : paths) {
File f = new File(p, name);
if (f.exists()) {
System.out.println("Found native library: " + f);
break;
}
}
} else {
System.out.println("Failed to load native library. Please verify the existence of the " +
name + " file in the library path, or set -Djava.library.path=. in the command line");
}
boolean nativeOnly = args.length > 0 && args[0].equals("-n");
if (nativeOnly && !_nativeOk) {
System.exit(1);
}
if (_nativeOk) {
System.out.println("JBigi Version: " + _jbigiVersion + " GMP Version: " + _libGMPVersion);
if (_extractedResource != null)
System.out.println("Using native resource: " + _extractedResource);
}
System.out.println("DEBUG: Warming up the random number generator...");
SecureRandom rand = RandomSource.getInstance();
rand.nextBoolean();
System.out.println("DEBUG: Random number generator warmed up");
runModPowTest(100, 1, nativeOnly);
if (_nativeOk3) {
System.out.println("ModPowCT test:");
runModPowTest(100, 2, nativeOnly);
System.out.println("ModInverse test:");
runModPowTest(10000, 3, nativeOnly);
}
}
private static void testnegs() {
for (int i = -66000; i <= 66000; i++) {
testneg(i);
}
test(3, 11);
test(25, 4);
}
private static void testneg(long a) {
NativeBigInteger ba = new NativeBigInteger(Long.toString(a));
long r = ba.testNegate().longValue();
if (r != 0 - a)
warn("FAIL Neg test " + a + " = " + r);
}
private static void test(long a, long b) {
BigInteger ba = new NativeBigInteger(Long.toString(a));
BigInteger bb = new NativeBigInteger(Long.toString(b));
long r1 = a * b;
long r2 = ba.multiply(bb).longValue();
if (r1 != r2)
warn("FAIL Mul test " + a + ' ' + b + " = " + r2);
r1 = a / b;
r2 = ba.divide(bb).longValue();
if (r1 != r2)
warn("FAIL Div test " + a + ' ' + b + " = " + r2);
r1 = a % b;
r2 = ba.mod(bb).longValue();
if (r1 != r2)
warn("FAIL Mod test " + a + ' ' + b + " = " + r2);
}
private BigInteger testNegate() {
return new NativeBigInteger(nativeNeg(toByteArray()));
}
private static void runModPowTest(int numRuns, int mode, boolean nativeOnly) {
SecureRandom rand = RandomSource.getInstance();
byte[] sampleGenerator = CryptoConstants.elgg.toByteArray();
byte[] samplePrime = CryptoConstants.elgp.toByteArray();
BigInteger jg = new BigInteger(sampleGenerator);
NativeBigInteger ng = CryptoConstants.elgg;
BigInteger jp = new BigInteger(samplePrime);
long totalTime = 0;
long javaTime = 0;
int runsProcessed = 0;
for (int i = 0; i < 1000; i++) {
BigInteger bi;
do {
bi = new BigInteger(16, rand);
} while (bi.signum() == 0);
if (mode == 1)
jg.modPow(bi, jp);
else if (mode == 2)
ng.modPowCT(bi, jp);
else
bi.modInverse(jp);
}
BigInteger myValue = null, jval;
final NativeBigInteger g = CryptoConstants.elgg;
final NativeBigInteger p = CryptoConstants.elgp;
final int numBits = (mode == 3) ? 1060 : 2048;
for (runsProcessed = 0; runsProcessed < numRuns; runsProcessed++) {
BigInteger bi;
do {
bi = new BigInteger(numBits, rand);
} while (bi.signum() == 0);
NativeBigInteger k = new NativeBigInteger(1, bi.toByteArray());
long beforeModPow = System.nanoTime();
if (_nativeOk) {
if (mode == 1)
myValue = g.modPow(k, p);
else if (mode == 2)
myValue = g.modPowCT(bi, jp);
else
myValue = k.modInverse(p);
}
long afterModPow = System.nanoTime();
totalTime += (afterModPow - beforeModPow);
if (!nativeOnly) {
if (mode != 3)
jval = jg.modPow(bi, jp);
else
jval = bi.modInverse(jp);
long afterJavaModPow = System.nanoTime();
javaTime += (afterJavaModPow - afterModPow);
if (_nativeOk && !myValue.equals(jval)) {
System.err.println("ERROR: [" + runsProcessed + "]\tnative modPow != java modPow");
System.err.println("ERROR: native modPow value: " + myValue.toString());
System.err.println("ERROR: java modPow value: " + jval.toString());
break;
}
}
}
double dtotal = totalTime / 1000000f;
double djava = javaTime / 1000000f;
if (_nativeOk)
System.out.println(String.format("INFO: run time: %.3f ms (%.3f ms each)",
dtotal, dtotal / (runsProcessed + 1)));
if (numRuns == runsProcessed)
System.out.println("INFO: " + runsProcessed + " runs complete without any errors");
else
System.out.println("ERROR: " + runsProcessed + " runs until we got an error");
if (_nativeOk) {
System.out.println(String.format("Native run time: \t%9.3f ms (%7.3f ms each)",
dtotal, dtotal / (runsProcessed + 1)));
if (!nativeOnly) {
System.out.println(String.format("Java run time:   \t%9.3f ms (%7.3f ms each)",
djava, djava / (runsProcessed + 1)));
System.out.println(String.format("Native = %.3f%% of pure Java time",
dtotal * 100.0d / djava));
if (dtotal < djava)
System.out.println(String.format("Native is BETTER by a factor of %.3f -- YAY!", djava / dtotal));
else
System.out.println(String.format("Native is WORSE by a factor of %.3f -- BOO!", dtotal / djava));
}
} else {
System.out.println(String.format("java run time: \t%.3f ms (%.3f ms each)",
djava, djava / (runsProcessed + 1)));
System.out.println("However, we couldn't load the native library, so this doesn't test much");
}
}
private static final void loadNative() {
try{
String wantedProp = System.getProperty("jbigi.enable", "true");
boolean wantNative = Boolean.parseBoolean(wantedProp);
if (wantNative) {
debug("trying loadGeneric");
boolean loaded = loadGeneric("jbigi");
if (loaded) {
_nativeOk = true;
String s = I2PAppContext.getGlobalContext().getProperty("jbigi.loadedResource");
if (s != null)
info("Locally optimized library " + s + " loaded from file");
else
info("Locally optimized native BigInteger library loaded from file");
} else {
List<String> toTry = getResourceList();
debug("loadResource list to try is: " + toTry);
for (String s : toTry) {
debug("Trying to load resource " + s);
if (loadFromResource(s)) {
_nativeOk = true;
_extractedResource = s;
info("Native BigInteger library " + s + " loaded from resource");
break;
}
}
}
}
if (!_nativeOk) {
warn("Native BigInteger library jbigi not loaded - using pure Java - " +
"poor performance may result - see http:
} else {
setVersions();
}
} catch(Exception e) {
warn("Native BigInteger library jbigi not loaded, using pure java", e);
}
}
private static void debug(String s) {
I2PAppContext.getGlobalContext().logManager().getLog(NativeBigInteger.class).debug(s);
}
private static void info(String s) {
if(_doLog)
System.err.println("INFO: " + s);
I2PAppContext.getGlobalContext().logManager().getLog(NativeBigInteger.class).info(s);
_loadStatus = s;
}
private static void warn(String s) {
warn(s, null);
}
private static void warn(String s, Throwable t) {
if(_doLog) {
System.err.println("WARNING: " + s);
if (t != null)
t.printStackTrace();
}
I2PAppContext.getGlobalContext().logManager().getLog(NativeBigInteger.class).warn(s, t);
if (t != null)
_loadStatus = s + ' ' + t;
else
_loadStatus = s;
}
private static void error(String s) {
error(s, null);
}
private static void error(String s, Throwable t) {
if(_doLog) {
System.err.println("ERROR: " + s);
if (t != null)
t.printStackTrace();
}
I2PAppContext.getGlobalContext().logManager().getLog(NativeBigInteger.class).error(s, t);
if (t != null)
_loadStatus = s + ' ' + t;
else
_loadStatus = s;
}
private static final boolean loadGeneric(boolean optimized) {
return loadGeneric(getMiddleName(optimized));
}
private static final boolean loadGeneric(String name) {
try {
if(name == null)
return false;
System.loadLibrary(name);
return true;
} catch (UnsatisfiedLinkError ule) {
if (_isAndroid) {
warn("jbigi loadLibrary() fail", ule);
}
return false;
}
}
private static final boolean loadFromResource(boolean optimized) {
String resourceName = getResourceName(optimized);
return loadFromResource(resourceName);
}
private static final boolean loadFromResource(String resourceName) {
if (resourceName == null) return false;
URL resource = ClassLoader.getSystemResource(resourceName);
if (resource == null) {
info("Resource name [" + resourceName + "] was not found");
return false;
}
InputStream libStream = null;
File outFile = null;
FileOutputStream fos = null;
String filename =  _libPrefix + "jbigi" + _libSuffix;
try {
libStream = resource.openStream();
outFile = new File(I2PAppContext.getGlobalContext().getTempDir(), filename);
fos = new FileOutputStream(outFile);
DataHelper.copy(libStream, fos);
fos.close();
fos = null;
System.load(outFile.getAbsolutePath()); 
info("Loaded library: " + resource);
} catch (UnsatisfiedLinkError ule) {
warn("Failed to load the resource " + resourceName + " - not a valid library for this platform");
if (outFile != null)
outFile.delete();
return false;
} catch (IOException ioe) {
warn("Problem writing out the temporary native library data: " + ioe);
if (outFile != null)
outFile.delete();
return false;
} finally {
if (libStream != null) try { libStream.close(); } catch (IOException ioe) {}
if (fos != null) {
try { fos.close(); } catch (IOException ioe) {}
}
}
File newFile = new File(I2PAppContext.getGlobalContext().getBaseDir(), filename);
FileUtil.copy(outFile, newFile, false, true);
return true;
}
private static List<String> getResourceList() {
if (_isAndroid)
return Collections.emptyList();
List<String> rv = new ArrayList<String>(20);
String primary = getMiddleName2(true);
String[] compatList = JBIGI_COMPAT_MAP.get(primary);
if (primary != null && compatList == null) {
error("A bug relating to how jbigi is loaded for \"" + primary + "\" has been spotted");
}
if (primary != null &&
compatList != null) {
int i = 0;
for (; i < compatList.length; ++i) {
if (compatList[i].equals(primary)) {
break;
}
}
for (; i < compatList.length; ++i) {
String middle = getMiddleName1();
if (_is64) {
rv.add(_libPrefix + middle + compatList[i] + "_64" + _libSuffix);
}
rv.add(_libPrefix + middle + compatList[i] + _libSuffix);
}
if (rv.isEmpty()) {
error("Couldn't find the arch \"" + primary + "\" in its compatibility map \"" +
primary + ": " + Arrays.toString(compatList) + "\"");
}
}
return rv;
}
private static Map<String, String> getCPUInfo() {
Map<String, String> rv = new HashMap<String, String>(32);
BufferedReader in = null;
try {
in = new BufferedReader(new InputStreamReader(new FileInputStream("/proc/cpuinfo"), "ISO-8859-1"), 4096);
String line = null;
while ( (line = in.readLine()) != null) {
String[] parts = DataHelper.split(line, ":", 2);
if (parts.length < 2)
continue;
String key = parts[0].trim().toLowerCase(Locale.US);
if (!rv.containsKey(key))
rv.put(key, parts[1].trim());
}
} catch (IOException ioe) {
warn("Unable to read /proc/cpuinfo", ioe);
} finally {
if (in != null) try { in.close(); } catch (IOException ioe) {}
}
return rv;
}
private static final String getResourceName(boolean optimized) {
String middle = getMiddleName(optimized);
if (middle == null)
return null;
return _libPrefix + middle + _libSuffix;
}
private static final String getMiddleName(boolean optimized) {
String m2 = getMiddleName2(optimized);
if (m2 == null)
return null;
return getMiddleName1() + m2;
}
private static final String getMiddleName2(boolean optimized) {
String sAppend;
if (optimized) {
if (sCPUType == null)
return null;
if (sCPUType.equals(JBIGI_OPTIMIZATION_K6_3) && !_isWin)
sAppend = JBIGI_OPTIMIZATION_K6_2;
else if (sCPUType.equals(JBIGI_OPTIMIZATION_PENTIUM2) && _isSunos && _isX86)
sAppend = JBIGI_OPTIMIZATION_PENTIUM3;
else if (sCPUType.equals(JBIGI_OPTIMIZATION_VIAC32))
sAppend = JBIGI_OPTIMIZATION_PENTIUM3;
else
sAppend = sCPUType;
} else {
sAppend = "none";
}
return sAppend;
}
private static final String getMiddleName1() {
if(_isWin)
return "jbigi-windows-";
if(_isKFreebsd)
return "jbigi-kfreebsd-";
if(_isFreebsd)
return "jbigi-freebsd-";
if(_isNetbsd)
return "jbigi-netbsd-";
if(_isOpenbsd)
return "jbigi-openbsd-";
if(_isMac)
return "jbigi-osx-";
if(_isOS2)
return "jbigi-os2-";
if(_isSunos)
return "jbigi-solaris-";
return "jbigi-linux-";
}
@Override
public boolean equals(Object o) {
return super.equals(o);
}
@Override
public int hashCode() {
return super.hashCode();
}
}
