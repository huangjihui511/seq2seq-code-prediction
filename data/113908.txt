package psiprobe.controllers.deploy;
import com.google.common.base.Strings;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.catalina.Context;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import psiprobe.controllers.AbstractTomcatContainerController;
@Controller
public class DeployController extends AbstractTomcatContainerController {
@RequestMapping(path = "/adm/deploy.htm")
@Override
public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)
throws Exception {
return super.handleRequest(request, response);
}
@Override
protected ModelAndView handleRequestInternal(HttpServletRequest request,
HttpServletResponse response) throws Exception {
List<Context> apps;
try {
apps = getContainerWrapper().getTomcatContainer().findContexts();
} catch (NullPointerException ex) {
throw new IllegalStateException(
"No container found for your server: " + getServletContext().getServerInfo(), ex);
}
List<Map<String, String>> applications = new ArrayList<>();
for (Context appContext : apps) {
if (!Strings.isNullOrEmpty(appContext.getName())) {
Map<String, String> app = new HashMap<>();
app.put("value", appContext.getName());
app.put("label", appContext.getName());
applications.add(app);
}
}
request.setAttribute("apps", applications);
return new ModelAndView(getViewName());
}
@Value("deploy")
@Override
public void setViewName(String viewName) {
super.setViewName(viewName);
}
}
