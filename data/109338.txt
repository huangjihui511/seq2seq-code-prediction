package org.mockito.internal.configuration.injection.filter;
import static org.mockito.internal.util.MockUtil.getMockName;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
public class NameBasedCandidateFilter implements MockCandidateFilter {
private final MockCandidateFilter next;
public NameBasedCandidateFilter(MockCandidateFilter next) {
this.next = next;
}
public OngoingInjector filterCandidate(final Collection<Object> mocks,
final Field candidateFieldToBeInjected,
final List<Field> allRemainingCandidateFields,
final Object injectee) {
if (mocks.size() == 1
&& anotherCandidateMatchesMockName(mocks, candidateFieldToBeInjected, allRemainingCandidateFields)) {
return OngoingInjector.nop;
}
return next.filterCandidate(tooMany(mocks) ? selectMatchingName(mocks, candidateFieldToBeInjected) : mocks,
candidateFieldToBeInjected,
allRemainingCandidateFields,
injectee);
}
private boolean tooMany(Collection<Object> mocks) {
return mocks.size() > 1;
}
private List<Object> selectMatchingName(Collection<Object> mocks, Field candidateFieldToBeInjected) {
List<Object> mockNameMatches = new ArrayList<Object>();
for (Object mock : mocks) {
if (candidateFieldToBeInjected.getName().equals(getMockName(mock).toString())) {
mockNameMatches.add(mock);
}
}
return mockNameMatches;
}
private boolean anotherCandidateMatchesMockName(final Collection<Object> mocks,
final Field candidateFieldToBeInjected,
final List<Field> allRemainingCandidateFields) {
String mockName = getMockName(mocks.iterator().next()).toString();
for (Field otherCandidateField : allRemainingCandidateFields) {
if (!otherCandidateField.equals(candidateFieldToBeInjected)
&& otherCandidateField.getType().equals(candidateFieldToBeInjected.getType())
&& otherCandidateField.getName().equals(mockName)) {
return true;
}
}
return false;
}
}
