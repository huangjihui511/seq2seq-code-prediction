package com.github.benmanes.caffeine.cache.local;
import static com.github.benmanes.caffeine.cache.Specifications.TICKER;
import javax.lang.model.element.Modifier;
import com.github.benmanes.caffeine.cache.Feature;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
public final class AddExpirationTicker extends LocalCacheRule {
@Override
protected boolean applies() {
return !(Feature.usesExpirationTicker(context.parentFeatures)
|| !Feature.usesExpirationTicker(context.generateFeatures));
}
@Override
protected void execute() {
context.constructor.addStatement("this.ticker = builder.getTicker()");
context.cache.addField(FieldSpec.builder(TICKER, "ticker", Modifier.FINAL).build());
context.cache.addMethod(MethodSpec.methodBuilder("expirationTicker")
.addModifiers(context.publicFinalModifiers())
.addStatement("return ticker")
.returns(TICKER)
.build());
}
}
