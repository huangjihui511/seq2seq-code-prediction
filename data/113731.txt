package net.pms.image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.RenderedImage;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;
import javax.imageio.IIOException;
import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.ImageReader;
import javax.imageio.ImageTypeSpecifier;
import javax.imageio.spi.IIORegistry;
import javax.imageio.spi.ImageInputStreamSpi;
import javax.imageio.stream.ImageInputStream;
import net.pms.image.ImageIORuntimeException;
import net.pms.util.UnknownFormatException;
import com.drew.metadata.Metadata;
public class ImageIOTools {
protected static final IIORegistry theRegistry = IIORegistry.getDefaultInstance();
private ImageIOTools() {
}
public static ImageReaderResult read(InputStream inputStream) throws IOException {
if (inputStream == null) {
throw new IllegalArgumentException("input == null!");
}
ImageInputStream stream = createImageInputStream(inputStream);
try {
ImageReaderResult result = read(stream);
if (result == null) {
inputStream.close();
}
return result;
} catch (RuntimeException | IOException e) {
try {
inputStream.close();
} catch (Exception e2) {
}
if (e instanceof RuntimeException) {
throw new ImageIORuntimeException(
"An error occurred while trying to read image: " + e.getMessage(),
(RuntimeException) e
);
}
throw e;
}
}
public static ImageReaderResult read(ImageInputStream stream) throws IOException {
if (stream == null) {
throw new IllegalArgumentException("stream == null!");
}
try {
Iterator<?> iter = ImageIO.getImageReaders(stream);
if (!iter.hasNext()) {
throw new UnknownFormatException("Unable to find a suitable image reader");
}
ImageFormat inputFormat = null;
BufferedImage bufferedImage = null;
ImageReader reader = (ImageReader) iter.next();
try {
inputFormat = ImageFormat.toImageFormat(reader.getFormatName());
reader.setInput(stream, true, true);
bufferedImage = reader.read(0, reader.getDefaultReadParam());
} finally {
reader.dispose();
}
return bufferedImage != null ? new ImageReaderResult(bufferedImage, inputFormat) : null;
} catch (RuntimeException e) {
throw new ImageIORuntimeException("An error occurred while trying to read image: " + e.getMessage(), e);
} finally {
stream.close();
}
}
public static ImageFormat detectFileFormat(InputStream inputStream) throws IOException {
if (inputStream == null) {
throw new IllegalArgumentException("input == null!");
}
try (ImageInputStream stream = createImageInputStream(inputStream)) {
Iterator<?> iter = ImageIO.getImageReaders(stream);
if (!iter.hasNext()) {
throw new UnknownFormatException("Unable to find a suitable image reader");
}
ImageReader reader = (ImageReader) iter.next();
ImageFormat format = ImageFormat.toImageFormat(reader.getFormatName());
if (format == null) {
throw new UnknownFormatException("Unable to determine image format");
}
return format;
} catch (RuntimeException e) {
throw new ImageIORuntimeException("An error occurred while trying to detect image format: " + e.getMessage(), e);
}
}
public static ImageInfo readImageInfo(InputStream inputStream, long size, Metadata metadata, boolean applyExifOrientation) throws IOException {
if (inputStream == null) {
throw new IllegalArgumentException("input == null!");
}
try (ImageInputStream stream = createImageInputStream(inputStream)) {
Iterator<?> iter = ImageIO.getImageReaders(stream);
if (!iter.hasNext()) {
throw new UnknownFormatException("Unable to find a suitable image reader");
}
ImageReader reader = (ImageReader) iter.next();
try {
int width = -1;
int height = -1;
ImageFormat format = ImageFormat.toImageFormat(reader.getFormatName());
if (format == null) {
throw new UnknownFormatException("Unable to determine image format");
}
ColorModel colorModel = null;
try {
reader.setInput(stream, true, true);
Iterator<ImageTypeSpecifier> iterator = reader.getImageTypes(0);
if (iterator.hasNext()) {
colorModel = iterator.next().getColorModel();
}
width = reader.getWidth(0);
height = reader.getHeight(0);
} catch (RuntimeException e) {
throw new ImageIORuntimeException("Error reading image information: " + e.getMessage(), e);
}
boolean imageIOSupport;
if (format == ImageFormat.TIFF) {
try {
ImageReadParam param = reader.getDefaultReadParam();
param.setSourceRegion(new Rectangle(1, 1));
reader.read(0, param);
imageIOSupport = true;
} catch (Exception e) {
imageIOSupport = false;
}
} else {
imageIOSupport = true;
}
ImageInfo imageInfo = ImageInfo.create(
width,
height,
format,
size,
colorModel,
metadata,
applyExifOrientation,
imageIOSupport
);
return imageInfo;
} finally {
reader.dispose();
}
}
}
public static ImageInputStream createImageInputStream(Object input)
throws IOException {
if (input == null) {
throw new IllegalArgumentException("input == null!");
}
Iterator<ImageInputStreamSpi> iter;
try {
iter = theRegistry.getServiceProviders(ImageInputStreamSpi.class, true);
} catch (IllegalArgumentException e) {
return null;
}
while (iter.hasNext()) {
ImageInputStreamSpi spi = (ImageInputStreamSpi)iter.next();
if (spi.getInputClass().isInstance(input)) {
try {
return spi.createInputStreamInstance(input, false, null);
} catch (IOException e) {
throw new IIOException("Can't create cache file!", e);
}
}
}
return null;
}
public static boolean imageIOWrite(RenderedImage im, String formatName, OutputStream output) throws IOException {
try {
return ImageIO.write(im, formatName, output);
} catch (RuntimeException e) {
throw new ImageIORuntimeException(e.getMessage(), e);
}
}
public static class ImageReaderResult {
public final BufferedImage bufferedImage;
public final ImageFormat imageFormat;
public final int width;
public final int height;
public ImageReaderResult(BufferedImage bufferedImage, ImageFormat imageFormat) {
this.bufferedImage = bufferedImage;
this.imageFormat = imageFormat;
this.width = bufferedImage == null ? -1 : bufferedImage.getWidth();
this.height = bufferedImage == null ? -1 : bufferedImage.getHeight();
}
}
}
