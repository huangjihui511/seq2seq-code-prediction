package org.apache.zookeeper.inspector.gui;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import org.apache.zookeeper.inspector.gui.nodeviewer.ZooInspectorNodeViewer;
import org.apache.zookeeper.inspector.manager.ZooInspectorManager;
import org.apache.zookeeper.inspector.manager.ZooInspectorNodeManager;
public class ZooInspectorNodeViewersPanel extends JPanel implements
TreeSelectionListener, ChangeListener {
private final List<ZooInspectorNodeViewer> nodeVeiwers = new ArrayList<ZooInspectorNodeViewer>();
private final List<Boolean> needsReload = new ArrayList<Boolean>();
private final JTabbedPane tabbedPane;
private final List<String> selectedNodes = new ArrayList<String>();
private final ZooInspectorNodeManager zooInspectorManager;
public ZooInspectorNodeViewersPanel(
ZooInspectorNodeManager zooInspectorManager,
List<ZooInspectorNodeViewer> nodeVeiwers) {
this.zooInspectorManager = zooInspectorManager;
this.setLayout(new BorderLayout());
tabbedPane = new JTabbedPane(JTabbedPane.TOP,
JTabbedPane.WRAP_TAB_LAYOUT);
setNodeViewers(nodeVeiwers);
tabbedPane.addChangeListener(this);
this.add(tabbedPane, BorderLayout.CENTER);
reloadSelectedViewer();
}
public void setNodeViewers(List<ZooInspectorNodeViewer> nodeViewers) {
this.nodeVeiwers.clear();
this.nodeVeiwers.addAll(nodeViewers);
needsReload.clear();
tabbedPane.removeAll();
for (ZooInspectorNodeViewer nodeViewer : nodeVeiwers) {
nodeViewer.setZooInspectorManager(zooInspectorManager);
needsReload.add(true);
tabbedPane.add(nodeViewer.getTitle(), nodeViewer);
}
this.revalidate();
this.repaint();
}
private void reloadSelectedViewer() {
int index = this.tabbedPane.getSelectedIndex();
if (index != -1 && this.needsReload.get(index)) {
ZooInspectorNodeViewer viewer = this.nodeVeiwers.get(index);
viewer.nodeSelectionChanged(selectedNodes);
this.needsReload.set(index, false);
}
}
public void valueChanged(TreeSelectionEvent e) {
TreePath[] paths = e.getPaths();
selectedNodes.clear();
for (TreePath path : paths) {
boolean appended = false;
StringBuilder sb = new StringBuilder();
Object[] pathArray = path.getPath();
for (Object o : pathArray) {
if (o != null) {
String nodeName = o.toString();
if (nodeName != null) {
if (nodeName.length() > 0) {
appended = true;
sb.append("/"); 
sb.append(o.toString());
}
}
}
}
if (appended) {
selectedNodes.add(sb.toString());
}
}
for (int i = 0; i < needsReload.size(); i++) {
this.needsReload.set(i, true);
}
reloadSelectedViewer();
}
public void stateChanged(ChangeEvent e) {
reloadSelectedViewer();
}
}
