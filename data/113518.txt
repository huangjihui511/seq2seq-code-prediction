package com.pokegoapi.api;
import POGOProtos.Enums.TutorialStateOuterClass.TutorialState;
import POGOProtos.Networking.Envelopes.RequestEnvelopeOuterClass.RequestEnvelope.AuthInfo;
import POGOProtos.Networking.Envelopes.SignatureOuterClass;
import POGOProtos.Networking.Platform.PlatformRequestTypeOuterClass.PlatformRequestType;
import POGOProtos.Networking.Requests.Messages.CheckChallengeMessageOuterClass.CheckChallengeMessage;
import POGOProtos.Networking.Requests.Messages.FetchAllNewsMessageOuterClass;
import POGOProtos.Networking.Requests.Messages.GetAssetDigestMessageOuterClass.GetAssetDigestMessage;
import POGOProtos.Networking.Requests.Messages.LevelUpRewardsMessageOuterClass.LevelUpRewardsMessage;
import POGOProtos.Networking.Requests.Messages.VerifyChallengeMessageOuterClass.VerifyChallengeMessage;
import POGOProtos.Networking.Requests.RequestTypeOuterClass.RequestType;
import POGOProtos.Networking.Responses.CheckChallengeResponseOuterClass.CheckChallengeResponse;
import POGOProtos.Networking.Responses.DownloadRemoteConfigVersionResponseOuterClass.DownloadRemoteConfigVersionResponse;
import POGOProtos.Networking.Responses.FetchAllNewsResponseOuterClass;
import POGOProtos.Networking.Responses.LevelUpRewardsResponseOuterClass.LevelUpRewardsResponse;
import POGOProtos.Networking.Responses.LevelUpRewardsResponseOuterClass.LevelUpRewardsResponse.Result;
import POGOProtos.Networking.Responses.VerifyChallengeResponseOuterClass.VerifyChallengeResponse;
import com.google.protobuf.ByteString;
import com.google.protobuf.InvalidProtocolBufferException;
import com.pokegoapi.api.device.ActivityStatus;
import com.pokegoapi.api.device.DeviceInfo;
import com.pokegoapi.api.device.LocationFixes;
import com.pokegoapi.api.device.SensorInfo;
import com.pokegoapi.api.inventory.Inventories;
import com.pokegoapi.api.listener.Listener;
import com.pokegoapi.api.listener.LocationListener;
import com.pokegoapi.api.listener.LoginListener;
import com.pokegoapi.api.map.Map;
import com.pokegoapi.api.map.Point;
import com.pokegoapi.api.news.News;
import com.pokegoapi.api.player.PlayerProfile;
import com.pokegoapi.api.settings.Settings;
import com.pokegoapi.api.settings.templates.ItemTemplateProvider;
import com.pokegoapi.api.settings.templates.ItemTemplates;
import com.pokegoapi.api.settings.templates.TempFileTemplateProvider;
import com.pokegoapi.auth.CredentialProvider;
import com.pokegoapi.exceptions.request.RequestFailedException;
import com.pokegoapi.main.CommonRequests;
import com.pokegoapi.main.Heartbeat;
import com.pokegoapi.main.RequestHandler;
import com.pokegoapi.main.ServerPlatformRequest;
import com.pokegoapi.main.ServerRequest;
import com.pokegoapi.main.ServerRequestEnvelope;
import com.pokegoapi.util.ClientInterceptor;
import com.pokegoapi.util.Log;
import com.pokegoapi.util.SystemTimeImpl;
import com.pokegoapi.util.Time;
import com.pokegoapi.util.hash.HashProvider;
import lombok.Getter;
import lombok.Setter;
import okhttp3.OkHttpClient;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.UUID;
public class PokemonGo {
private static final java.lang.String TAG = PokemonGo.class.getSimpleName();
private final Time time;
private News news;
@Getter
public long startTime;
@Getter
public final byte[] sessionHash = new byte[32];
@Getter
public RequestHandler requestHandler;
@Getter
public PlayerProfile playerProfile;
@Getter
public Inventories inventories;
@Getter
public double latitude;
@Getter
public double longitude;
@Getter
@Setter
public double altitude;
@Getter
@Setter
public double accuracy = 5;
private CredentialProvider credentialProvider;
@Getter
public Settings settings;
private Map map;
@Setter
private DeviceInfo deviceInfo;
@Getter
@Setter
public SensorInfo sensorInfo;
@Getter
@Setter
public ActivityStatus activityStatus;
@Setter
@Getter
public long seed;
@Getter
@Setter
public LocationFixes locationFixes;
@Setter
private boolean hasChallenge;
@Getter
private String challengeURL;
private final Object challengeLock = new Object();
@Getter
private List<Listener> listeners = Collections.synchronizedList(new ArrayList<Listener>());
private final Object lock = new Object();
@Getter
public boolean loggingIn;
@Getter
private boolean active;
@Getter
private Heartbeat heartbeat = new Heartbeat(this);
@Getter
public HashProvider hashProvider;
private OkHttpClient client;
@Getter
@Setter
public boolean firstGMO = true;
@Getter
@Setter
public boolean firstGP = true;
@Getter
@Setter
public ItemTemplates itemTemplates;
public PokemonGo(OkHttpClient client, Time time, long seed) {
this.time = time;
this.seed = seed;
reset();
this.client = client.newBuilder()
.addNetworkInterceptor(new ClientInterceptor())
.build();
}
public PokemonGo(OkHttpClient client, long seed) {
this(client, new SystemTimeImpl(), seed);
}
public PokemonGo(OkHttpClient client, Time time) {
this(client, time, hash(UUID.randomUUID().toString()));
}
public PokemonGo(OkHttpClient client) {
this(client, new SystemTimeImpl(), hash(UUID.randomUUID().toString()));
}
public void login(CredentialProvider credentialProvider, HashProvider hashProvider)
throws RequestFailedException {
try {
itemTemplates = new ItemTemplates(new TempFileTemplateProvider());
} catch (IOException e) {
throw new RuntimeException(e);
}
this.loggingIn = true;
if (credentialProvider == null) {
throw new NullPointerException("Credential Provider can not be null!");
} else if (hashProvider == null) {
throw new NullPointerException("Hash Provider can not be null!");
}
this.credentialProvider = credentialProvider;
this.hashProvider = hashProvider;
startTime = currentTimeMillis();
initialize();
}
private void reset() {
firstGMO = true;
firstGP = true;
active = false;
new Random().nextBytes(sessionHash);
inventories = new Inventories(this);
news = new News(this);
settings = new Settings(this);
playerProfile = new PlayerProfile(this);
map = new Map(this);
longitude = Double.NaN;
latitude = Double.NaN;
}
private void initialize() throws RequestFailedException {
if (requestHandler != null) {
requestHandler.exit();
}
requestHandler = new RequestHandler(this, client);
requestHandler.sendServerRequests(ServerRequestEnvelope.create());
playerProfile.updateProfile();
ServerRequest downloadConfigRequest = new ServerRequest(RequestType.DOWNLOAD_REMOTE_CONFIG_VERSION,
CommonRequests.getDownloadRemoteConfigVersionMessageRequest(this));
requestHandler.sendServerRequests(downloadConfigRequest, true);
getAssetDigest();
try {
ByteString configVersionData = downloadConfigRequest.getData();
if (itemTemplates.requiresUpdate(DownloadRemoteConfigVersionResponse.parseFrom(configVersionData))) {
itemTemplates.update(this);
}
} catch (InvalidProtocolBufferException e) {
throw new RequestFailedException(e);
}
playerProfile.getProfile();
try {
LevelUpRewardsMessage rewardsMessage = LevelUpRewardsMessage.newBuilder()
.setLevel(playerProfile.getStats().getLevel())
.build();
ServerRequest request = new ServerRequest(RequestType.LEVEL_UP_REWARDS, rewardsMessage);
ServerRequestEnvelope envelope = ServerRequestEnvelope.createCommons(request, this);
requestHandler.sendServerRequests(envelope);
LevelUpRewardsResponse levelUpRewardsResponse = LevelUpRewardsResponse.parseFrom(request.getData());
if (levelUpRewardsResponse.getResult() == Result.SUCCESS) {
inventories.itemBag.addAwardedItems(levelUpRewardsResponse);
}
} catch (InvalidProtocolBufferException e) {
throw new RequestFailedException(e);
}
ServerRequestEnvelope envelope = ServerRequestEnvelope.create();
requestHandler.sendServerRequests(envelope);
try {
FetchAllNewsMessageOuterClass.FetchAllNewsMessage msg = FetchAllNewsMessageOuterClass.FetchAllNewsMessage
.newBuilder().build();
ServerRequest request = new ServerRequest(RequestType.FETCH_ALL_NEWS, msg);
envelope = ServerRequestEnvelope.create(request);
requestHandler.sendServerRequests(envelope);
FetchAllNewsResponseOuterClass.FetchAllNewsResponse response = FetchAllNewsResponseOuterClass
.FetchAllNewsResponse.parseFrom(request.getData());
if (response.getResult() == FetchAllNewsResponseOuterClass.FetchAllNewsResponse.Result.SUCCESS) {
Log.i(TAG, "FetchAllNewsMessage Success: total News=" + response.getCurrentNews()
.getNewsArticlesCount());
this.news.setCurrentNews(response.getCurrentNews());
this.news.markUnreadNews();
} else {
Log.d(TAG, "FetchAllNewsMessage Failed. Result=" + response.getResult());
}
} catch (Exception e) {
Log.d(TAG, "Exceptions FetchAllNew");
}
List<LoginListener> loginListeners = getListeners(LoginListener.class);
for (LoginListener listener : loginListeners) {
listener.onLogin(this);
}
loggingIn = false;
active = true;
ArrayList<TutorialState> tutorialStates = playerProfile.getTutorialState().getTutorialStates();
if (tutorialStates.isEmpty()) {
playerProfile.activateAccount();
}
if (!tutorialStates.contains(TutorialState.AVATAR_SELECTION)) {
playerProfile.setupAvatar();
}
heartbeat.start();
if (!tutorialStates.contains(TutorialState.POKEMON_CAPTURE)) {
playerProfile.encounterTutorialComplete();
}
int remainingCodenameClaims = playerProfile.getPlayerData().getRemainingCodenameClaims();
if (!tutorialStates.contains(TutorialState.NAME_SELECTION) && remainingCodenameClaims > 0) {
playerProfile.claimCodeName();
}
if (!tutorialStates.contains(TutorialState.FIRST_TIME_EXPERIENCE_COMPLETE)) {
playerProfile.firstTimeExperienceComplete();
}
}
public void getAssetDigest() throws RequestFailedException {
GetAssetDigestMessage message = CommonRequests.getGetAssetDigestMessageRequest(this);
ServerRequest request = new ServerRequest(RequestType.GET_ASSET_DIGEST, message);
requestHandler.sendServerRequests(request, true);
}
private static long hash(String string) {
long upper = ((long) string.hashCode()) << 32;
int len = string.length();
StringBuilder dest = new StringBuilder(len);
for (int index = (len - 1); index >= 0; index--) {
dest.append(string.charAt(index));
}
long lower = ((long) dest.toString().hashCode()) - ((long) Integer.MIN_VALUE);
return upper + lower;
}
public AuthInfo getAuthInfo(boolean refresh)
throws RequestFailedException {
return credentialProvider.getAuthInfo(refresh);
}
public void setLocation(double latitude, double longitude, double altitude) {
setLocation(latitude, longitude, altitude, accuracy);
}
public void setLocation(double latitude, double longitude, double altitude, double accuracy) {
setLatitude(latitude);
setLongitude(longitude);
this.altitude = altitude;
this.accuracy = accuracy;
}
public long currentTimeMillis() {
return time.currentTimeMillis();
}
public void setLatitude(double value) {
if (value > 90 || value < -90) {
throw new IllegalArgumentException("latittude can not exceed +/- 90");
}
latitude = value;
if (active && !Double.isNaN(latitude) && !Double.isNaN(longitude)) {
if (!heartbeat.active()) {
heartbeat.start();
} else {
heartbeat.beat();
}
}
for (LocationListener listener : this.getListeners(LocationListener.class)) {
listener.onLocationUpdate(this, getPoint());
}
}
public void setLongitude(double value) {
if (value > 180 || value < -180) {
throw new IllegalArgumentException("longitude can not exceed +/- 180");
}
longitude = value;
if (active && !Double.isNaN(latitude) && !Double.isNaN(longitude)) {
if (!heartbeat.active()) {
heartbeat.start();
} else {
heartbeat.beat();
}
}
for (LocationListener listener : this.getListeners(LocationListener.class)) {
listener.onLocationUpdate(this, getPoint());
}
}
public Map getMap() {
if (this.latitude == Double.NaN || this.longitude == Double.NaN) {
throw new IllegalStateException("Attempt to get map without setting location first");
}
return map;
}
public SignatureOuterClass.Signature.DeviceInfo getDeviceInfo() {
if (deviceInfo == null) {
deviceInfo = DeviceInfo.getDefault(this);
}
return deviceInfo.getDeviceInfo();
}
public SignatureOuterClass.Signature.SensorInfo getSensorSignature(long currentTime, Random random) {
if (this.sensorInfo == null || sensorInfo.timestampCreate != 0L) {
return SensorInfo.getDefault(this, currentTime, random);
}
return sensorInfo.getSensorInfo();
}
public SignatureOuterClass.Signature.ActivityStatus getActivitySignature(Random random) {
if (this.activityStatus == null) {
return ActivityStatus.getDefault(this, random);
}
return activityStatus.getActivityStatus();
}
public void setItemTemplateProvider(ItemTemplateProvider provider) {
if (active || loggingIn) {
throw new IllegalStateException("Cannot set ItemTemplates while active!");
}
itemTemplates = new ItemTemplates(provider);
}
public void updateChallenge(String url, boolean hasChallenge) {
this.hasChallenge = hasChallenge;
this.challengeURL = url;
if (hasChallenge) {
List<LoginListener> listeners = getListeners(LoginListener.class);
for (LoginListener listener : listeners) {
listener.onChallenge(this, url);
}
} else {
synchronized (challengeLock) {
challengeLock.notifyAll();
}
}
}
public void addListener(Listener listener) {
listeners.add(listener);
}
public void removeListener(Listener listener) {
listeners.remove(listener);
}
public <T extends Listener> List<T> getListeners(Class<T> listenerType) {
List<T> listeners = new ArrayList<T>();
synchronized (this.lock) {
for (Listener listener : this.listeners) {
if (listenerType.isAssignableFrom(listener.getClass())) {
listeners.add((T) listener);
}
}
}
return listeners;
}
public <T extends Listener> void callListener(Class<T> listenerType, String name, Object... parameters)
throws ReflectiveOperationException {
Class[] parameterTypes = new Class[parameters.length];
for (int i = 0; i < parameters.length; i++) {
Object parameter = parameters[i];
parameterTypes[i] = parameter.getClass();
}
Method method = listenerType.getMethod(name, parameterTypes);
if (method != null) {
List<T> listeners = getListeners(listenerType);
for (T listener : listeners) {
method.invoke(listener, parameters);
}
} else {
throw new NoSuchMethodException("Method \"" + name + "\" does not exist");
}
}
public boolean hasChallenge() {
return this.hasChallenge;
}
public boolean verifyChallenge(String token) throws RequestFailedException {
hasChallenge = false;
VerifyChallengeMessage message = VerifyChallengeMessage.newBuilder().setToken(token).build();
ServerRequest request = new ServerRequest(RequestType.VERIFY_CHALLENGE, message);
ByteString responseData = requestHandler.sendServerRequests(request, true);
try {
VerifyChallengeResponse response = VerifyChallengeResponse.parseFrom(responseData);
hasChallenge = !response.getSuccess();
if (!hasChallenge) {
challengeURL = null;
synchronized (challengeLock) {
challengeLock.notifyAll();
}
}
return response.getSuccess();
} catch (InvalidProtocolBufferException e) {
throw new RequestFailedException(e);
}
}
@Deprecated
public String checkChallenge() throws RequestFailedException {
CheckChallengeMessage message = CheckChallengeMessage.newBuilder().build();
try {
ServerRequest request = new ServerRequest(RequestType.CHECK_CHALLENGE, message);
ByteString responseData = requestHandler.sendServerRequests(request, false);
CheckChallengeResponse response = CheckChallengeResponse.parseFrom(responseData);
String newChallenge = response.getChallengeUrl();
if (response.getShowChallenge() && newChallenge != null && newChallenge.length() > 0) {
updateChallenge(newChallenge, true);
return newChallenge;
}
} catch (InvalidProtocolBufferException e) {
throw new RequestFailedException(e);
}
return null;
}
public Point getPoint() {
return new Point(this.latitude, this.longitude);
}
public void awaitChallenge() throws InterruptedException {
if (hasChallenge()) {
synchronized (challengeLock) {
challengeLock.wait();
}
}
}
public int getVersion() {
return hashProvider.getHashVersion();
}
public void exit() {
if (active) {
heartbeat.exit();
requestHandler.exit();
active = false;
reset();
}
}
public boolean hasTemplates() {
return itemTemplates.hasLoaded();
}
}
