package com.twelvemonkeys.image;
import com.twelvemonkeys.lang.Validate;
import java.awt.image.DataBuffer;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.*;
import java.nio.channels.FileChannel;
public abstract class MappedFileBuffer extends DataBuffer {
private final Buffer buffer;
private MappedFileBuffer(final int type, final int size, final int numBanks) throws IOException {
super(type, Validate.isTrue(size >= 0, size, "Integer overflow for size: %d"), Validate.isTrue(numBanks >= 0, numBanks, "Number of banks must be positive"));
int componentSize = DataBuffer.getDataTypeSize(type) / 8;
File tempFile = File.createTempFile(String.format("%s-", getClass().getSimpleName().toLowerCase()), ".tmp");
try {
RandomAccessFile raf = new RandomAccessFile(tempFile, "rw");
long length = ((long) size) * componentSize * numBanks;
raf.setLength(length);
FileChannel channel = raf.getChannel();
MappedByteBuffer byteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, length);
switch (type) {
case DataBuffer.TYPE_BYTE:
buffer = byteBuffer;
break;
case DataBuffer.TYPE_USHORT:
buffer = byteBuffer.asShortBuffer();
break;
case DataBuffer.TYPE_INT:
buffer = byteBuffer.asIntBuffer();
break;
default:
throw new IllegalArgumentException("Unsupported data type: " + type);
}
channel.close();
}
finally {
if (!tempFile.delete()) {
tempFile.deleteOnExit();
}
}
}
@Override
public String toString() {
return String.format("MappedFileBuffer: %s", buffer);
}
public static DataBuffer create(final int type, final int size, final int numBanks) throws IOException {
switch (type) {
case DataBuffer.TYPE_BYTE:
return new DataBufferByte(size, numBanks);
case DataBuffer.TYPE_USHORT:
return new DataBufferUShort(size, numBanks);
case DataBuffer.TYPE_INT:
return new DataBufferInt(size, numBanks);
default:
throw new IllegalArgumentException("Unsupported data type: " + type);
}
}
final static class DataBufferByte extends MappedFileBuffer {
private final ByteBuffer buffer;
public DataBufferByte(int size, int numBanks) throws IOException {
super(DataBuffer.TYPE_BYTE, size, numBanks);
buffer = (ByteBuffer) super.buffer;
}
@Override
public int getElem(int bank, int i) {
return buffer.get(bank * size + i) & 0xff;
}
@Override
public void setElem(int bank, int i, int val) {
buffer.put(bank * size + i, (byte) val);
}
}
final static class DataBufferUShort extends MappedFileBuffer {
private final ShortBuffer buffer;
public DataBufferUShort(int size, int numBanks) throws IOException {
super(DataBuffer.TYPE_USHORT, size, numBanks);
buffer = (ShortBuffer) super.buffer;
}
@Override
public int getElem(int bank, int i) {
return buffer.get(bank * size + i) & 0xffff;
}
@Override
public void setElem(int bank, int i, int val) {
buffer.put(bank * size + i, (short) val);
}
}
final static class DataBufferInt extends MappedFileBuffer {
private final IntBuffer buffer;
public DataBufferInt(int size, int numBanks) throws IOException {
super(DataBuffer.TYPE_INT, size, numBanks);
buffer = (IntBuffer) super.buffer;
}
@Override
public int getElem(int bank, int i) {
return buffer.get(bank * size + i);
}
@Override
public void setElem(int bank, int i, int val) {
buffer.put(bank * size + i, val);
}
}
}
