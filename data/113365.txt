package org.ocpsoft.prettytime;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.ocpsoft.prettytime.format.SimpleTimeFormat;
public class PrettyTimeI18n_AR_Test
{
SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");
private Locale locale;
@Before
public void setUp() throws Exception
{
locale = new Locale("ar");
Locale.setDefault(locale);
}
@Test
public void testCeilingInterval() throws Exception
{
Date then = format.parse("5/20/2009");
Date ref = format.parse("6/17/2009");
PrettyTime t = new PrettyTime(ref);
assertEquals("منذ 1 شهر", t.format(then));
}
@Test
public void testFromNow()
{
PrettyTime prettyTime = new PrettyTime(locale);
assertEquals("بعد لحظات", prettyTime.format(new Date()));
}
@Test
public void testNullDate() throws Exception
{
PrettyTime t = new PrettyTime();
Date date = null;
assertEquals("بعد لحظات", t.format(date));
}
@Test
public void testRightNow() throws Exception
{
PrettyTime t = new PrettyTime();
assertEquals("بعد لحظات", t.format(new Date()));
}
@Test
public void testRightNowVariance() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
assertEquals("بعد لحظات", t.format(new Date(600)));
}
@Test
public void testPrettyTimeDefault()
{
PrettyTime p = new PrettyTime(locale);
assertEquals(p.format(new Date()), "بعد لحظات");
}
@Test
public void testMinutesFromNow() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
assertEquals("بعد 12 دقائق", t.format(new Date(1000 * 60 * 12)));
}
@Test
public void testHoursFromNow() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
assertEquals("بعد 3 ساعات", t.format(new Date(1000 * 60 * 60 * 3)));
}
@Test
public void testDaysFromNow() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
assertEquals("بعد 3 ايام",
t.format(new Date(1000 * 60 * 60 * 24 * 3)));
}
@Test
public void testWeeksFromNow() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
assertEquals("بعد 3 أسابيع" ,
t.format(new Date(1000 * 60 * 60 * 24 * 7 * 3)));
}
@Test
public void testMonthsFromNow() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
assertEquals("بعد 3 أشهر", t.format(new Date(2629743830L * 3L)));
}
@Test
public void testYearsFromNow() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
assertEquals("بعد 3 سنوات", t.format(new Date(2629743830L * 12L * 3L)));
}
@Test
public void testDecadesFromNow() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
assertEquals("بعد 3 عقود", t.format(new Date(315569259747L * 3L)));
}
@Test
public void testCenturiesFromNow() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
assertEquals("بعد 3 قرون",
t.format(new Date(3155692597470L * 3L)));
}
@Test
public void testMomentsAgo() throws Exception
{
PrettyTime t = new PrettyTime(new Date(6000));
assertEquals("منذ لحظات", t.format(new Date(0)));
}
@Test
public void testMinutesAgo() throws Exception
{
PrettyTime t = new PrettyTime(new Date(1000 * 60 * 12));
assertEquals("منذ 12 دقائق", t.format(new Date(0)));
}
@Test
public void testHoursAgo() throws Exception
{
PrettyTime t = new PrettyTime(new Date(1000 * 60 * 60 * 3));
assertEquals("منذ 3 ساعات", t.format(new Date(0)));
}
@Test
public void testDaysAgo() throws Exception
{
PrettyTime t = new PrettyTime(new Date(1000 * 60 * 60 * 24 * 3));
assertEquals("منذ 3 ايام", t.format(new Date(0)));
}
@Test
public void testWeeksAgo() throws Exception
{
PrettyTime t = new PrettyTime(new Date(1000 * 60 * 60 * 24 * 7 * 3));
assertEquals("منذ 3 أسابيع", t.format(new Date(0)));
}
@Test
public void testMonthsAgo() throws Exception
{
PrettyTime t = new PrettyTime(new Date(2629743830L * 3L));
assertEquals("منذ 3 أشهر", t.format(new Date(0)));
}
@Test
public void testCustomFormat() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
TimeUnit unit = new TimeUnit()
{
@Override
public long getMaxQuantity()
{
return 0;
}
@Override
public long getMillisPerUnit()
{
return 5000;
}
@Override
public boolean isPrecise()
{
return false;
}
};
t.clearUnits();
t.registerUnit(unit, new SimpleTimeFormat()
.setSingularName("tick").setPluralName("ticks")
.setPattern("%n %u").setRoundingTolerance(20)
.setFutureSuffix("... RUN!")
.setFuturePrefix("self destruct in: ").setPastPrefix("self destruct was: ").setPastSuffix(
" ago..."));
assertEquals("self destruct in: 5 ticks ... RUN!", t.format(new Date(25000)));
t.setReference(new Date(25000));
assertEquals("self destruct was: 5 ticks ago...", t.format(new Date(0)));
}
@Test
public void testYearsAgo() throws Exception
{
PrettyTime t = new PrettyTime(new Date(2629743830L * 12L * 3L));
assertEquals("منذ 3 سنوات", t.format(new Date(0)));
}
@Test
public void testDecadesAgo() throws Exception
{
PrettyTime t = new PrettyTime(new Date(315569259747L * 3L));
assertEquals("منذ 3 عقود", t.format(new Date(0)));
}
@Test
public void testCenturiesAgo() throws Exception
{
PrettyTime t = new PrettyTime(new Date(3155692597470L * 3L));
assertEquals("منذ 3 قرون", t.format(new Date(0)));
}
@Test
public void testWithinTwoHoursRounding() throws Exception
{
PrettyTime t = new PrettyTime();
assertEquals("منذ 2 ساعات", t.format(new Date(new Date().getTime() - 6543990)));
}
@Test
public void testPreciseInTheFuture() throws Exception
{
PrettyTime t = new PrettyTime();
List<Duration> durations = t.calculatePreciseDuration(new Date(new Date().getTime() + 1000
assertTrue(durations.size() >= 2); 
assertEquals(5, durations.get(0).getQuantity());
assertEquals(10, durations.get(1).getQuantity());
}
@Test
public void testPreciseInThePast() throws Exception
{
PrettyTime t = new PrettyTime();
List<Duration> durations = t.calculatePreciseDuration(new Date(new Date().getTime() - 1000
assertTrue(durations.size() >= 2); 
assertEquals(-5, durations.get(0).getQuantity());
assertEquals(-10, durations.get(1).getQuantity());
}
@Test
public void testFormattingDurationListInThePast() throws Exception
{
PrettyTime t = new PrettyTime(new Date(1000 * 60 * 60 * 24 * 3 + 1000 * 60 * 60 * 15 + 1000 * 60 * 38));
List<Duration> durations = t.calculatePreciseDuration(new Date(0));
assertEquals("منذ 3 ايام 15 ساعات 38 دقائق", t.format(durations));
}
@Test
public void testFormattingDurationListInTheFuture() throws Exception
{
PrettyTime t = new PrettyTime(new Date(0));
List<Duration> durations = t.calculatePreciseDuration(new Date(1000 * 60 * 60 * 24 * 3 + 1000 * 60 * 60 * 15
+ 1000 * 60 * 38));
assertEquals("بعد 3 ايام 15 ساعات 38 دقائق", t.format(durations));
}
@Test
public void testSetLocale() throws Exception
{
PrettyTime t = new PrettyTime(new Date(315569259747L * 3L));
assertEquals("منذ 3 عقود", t.format(new Date(0)));
}
@After
public void tearDown() throws Exception
{
Locale.setDefault(locale);
}
}
