package org.dstadler.jgit.api;
Copyright 2016 Dominik Stadler
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http:
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
import org.dstadler.jgit.helper.CookbookHelper;
import org.eclipse.jgit.lib.FileMode;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.treewalk.TreeWalk;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
public class ListFilesOfCommitAndTag {
public static void main(String[] args) throws IOException {
try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
List<String> paths = readElementsAt(repository, "6409ee1597a53c6fbee31edf9cde31dc3afbe20f", "src/main/java/org/dstadler/jgit/porcelain");
System.out.println("Had paths for commit: " + paths);
final ObjectId testbranch = repository.resolve("testbranch");
paths = readElementsAt(repository, testbranch.getName(), "src/main/java/org/dstadler/jgit/porcelain");
System.out.println("Had paths for tag: " + paths);
}
}
private static List<String> readElementsAt(Repository repository, String commit, String path) throws IOException {
RevCommit revCommit = buildRevCommit(repository, commit);
RevTree tree = revCommit.getTree();
List<String> items = new ArrayList<>();
if(path.isEmpty()) {
try (TreeWalk treeWalk = new TreeWalk(repository)) {
treeWalk.addTree(tree);
treeWalk.setRecursive(false);
treeWalk.setPostOrderTraversal(false);
while(treeWalk.next()) {
items.add(treeWalk.getPathString());
}
}
} else {
try (TreeWalk treeWalk = buildTreeWalk(repository, tree, path)) {
if((treeWalk.getFileMode(0).getBits() & FileMode.TYPE_TREE) == 0) {
throw new IllegalStateException("Tried to read the elements of a non-tree for commit '" + commit + "' and path '" + path + "', had filemode " + treeWalk.getFileMode(0).getBits());
}
try (TreeWalk dirWalk = new TreeWalk(repository)) {
dirWalk.addTree(treeWalk.getObjectId(0));
dirWalk.setRecursive(false);
while(dirWalk.next()) {
items.add(dirWalk.getPathString());
}
}
}
}
return items;
}
private static RevCommit buildRevCommit(Repository repository, String commit) throws IOException {
try (RevWalk revWalk = new RevWalk(repository)) {
return revWalk.parseCommit(ObjectId.fromString(commit));
}
}
private static TreeWalk buildTreeWalk(Repository repository, RevTree tree, final String path) throws IOException {
TreeWalk treeWalk = TreeWalk.forPath(repository, path, tree);
if(treeWalk == null) {
throw new FileNotFoundException("Did not find expected file '" + path + "' in tree '" + tree.getName() + "'");
}
return treeWalk;
}
}
