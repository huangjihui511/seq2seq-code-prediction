package com.google.samples;
import com.google.api.services.jobs.v3.CloudTalentSolution;
import com.google.api.services.jobs.v3.model.Company;
import com.google.api.services.jobs.v3.model.Job;
import com.google.api.services.jobs.v3.model.JobQuery;
import com.google.api.services.jobs.v3.model.LocationFilter;
import com.google.api.services.jobs.v3.model.RequestMetadata;
import com.google.api.services.jobs.v3.model.SearchJobsRequest;
import com.google.api.services.jobs.v3.model.SearchJobsResponse;
import java.io.IOException;
import java.util.Arrays;
public final class LocationSearchSample {
private static final String DEFAULT_PROJECT_ID =
"projects/" + System.getenv("GOOGLE_CLOUD_PROJECT");
private static CloudTalentSolution talentSolutionClient = JobServiceQuickstart
.getTalentSolutionClient();
public static void basicLocationSearch(String companyName, String location, double distance)
throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
LocationFilter locationFilter =
new LocationFilter().setAddress(location)
.setDistanceInMiles(distance);
JobQuery jobQuery = new JobQuery()
.setLocationFilters(Arrays.asList(locationFilter));
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest request =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery)
.setSearchMode("JOB_SEARCH");
SearchJobsResponse response =
talentSolutionClient.projects().jobs().search(DEFAULT_PROJECT_ID, request).execute();
System.out.println(response);
}
public static void keywordLocationSearch(String companyName, String location, double distance,
String keyword)
throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
LocationFilter locationFilter =
new LocationFilter().setAddress(location)
.setDistanceInMiles(distance);
JobQuery jobQuery =
new JobQuery()
.setQuery(keyword)
.setLocationFilters(Arrays.asList(locationFilter));
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest request =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery)
.setSearchMode("JOB_SEARCH");
SearchJobsResponse response =
talentSolutionClient.projects().jobs().search(DEFAULT_PROJECT_ID, request).execute();
System.out.println(response);
}
public static void cityLocationSearch(String companyName, String location) throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
LocationFilter locationFilter = new LocationFilter()
.setAddress(location);
JobQuery jobQuery = new JobQuery()
.setLocationFilters(Arrays.asList(locationFilter));
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest request =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery)
.setSearchMode("JOB_SEARCH");
SearchJobsResponse response =
talentSolutionClient.projects().jobs().search(DEFAULT_PROJECT_ID, request).execute();
System.out.println(response);
}
public static void multiLocationsSearch(String companyName, String location1, double distance1,
String location2)
throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
JobQuery jobQuery =
new JobQuery()
.setLocationFilters(
Arrays.asList(
new LocationFilter().setAddress(location1).setDistanceInMiles(distance1),
new LocationFilter().setAddress(location2)));
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest request =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery)
.setSearchMode("JOB_SEARCH");
SearchJobsResponse response =
talentSolutionClient.projects().jobs().search(DEFAULT_PROJECT_ID, request).execute();
System.out.println(response);
}
public static void broadeningLocationsSearch(String companyName, String location)
throws IOException {
RequestMetadata requestMetadata =
new RequestMetadata()
.setUserId("HashedUserId")
.setSessionId("HashedSessionID")
.setDomain("www.google.com");
JobQuery jobQuery =
new JobQuery()
.setLocationFilters(Arrays
.asList(new LocationFilter().setAddress(location)));
if (companyName != null) {
jobQuery.setCompanyNames(Arrays.asList(companyName));
}
SearchJobsRequest request =
new SearchJobsRequest()
.setRequestMetadata(requestMetadata)
.setJobQuery(jobQuery)
.setEnableBroadening(true)
.setSearchMode("JOB_SEARCH");
SearchJobsResponse response =
talentSolutionClient.projects().jobs().search(DEFAULT_PROJECT_ID, request).execute();
System.out.println(response);
}
public static void main(String... args) throws Exception {
String location = args.length >= 1 ? args[0] : "Mountain View, CA";
double distance = args.length >= 2 ? Double.parseDouble(args[1]) : 0.5;
String keyword = args.length >= 3 ? args[2] : "Software Engineer";
String location2 = args.length >= 4 ? args[3] : "Sunnyvale, CA";
Company companyToBeCreated = BasicCompanySample.generateCompany();
String companyName = BasicCompanySample.createCompany(companyToBeCreated).getName();
Job jobToBeCreated = BasicJobSample.generateJobWithRequiredFields(companyName)
.setAddresses(Arrays.asList(location)).setTitle(keyword);
final String jobName = BasicJobSample.createJob(jobToBeCreated).getName();
Job jobToBeCreated2 = BasicJobSample.generateJobWithRequiredFields(companyName)
.setAddresses(Arrays.asList(location2)).setTitle(keyword);
final String jobName2 = BasicJobSample.createJob(jobToBeCreated2).getName();
Thread.sleep(10000);
basicLocationSearch(companyName, location, distance);
cityLocationSearch(companyName, location);
broadeningLocationsSearch(companyName, location);
keywordLocationSearch(companyName, location, distance, keyword);
multiLocationsSearch(companyName, location, distance, location2);
BasicJobSample.deleteJob(jobName);
BasicJobSample.deleteJob(jobName2);
BasicCompanySample.deleteCompany(companyName);
}
}
