package org.gnucash.android.export.qif;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.support.annotation.NonNull;
import org.gnucash.android.db.adapter.AccountsDbAdapter;
import org.gnucash.android.db.adapter.TransactionsDbAdapter;
import org.gnucash.android.export.ExportParams;
import org.gnucash.android.export.Exporter;
import org.gnucash.android.model.Commodity;
import org.gnucash.android.util.FileUtils;
import org.gnucash.android.util.PreferencesHelper;
import org.gnucash.android.util.TimestampHelper;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
import static org.gnucash.android.db.DatabaseSchema.TransactionEntry;
public class QifExporter extends Exporter{
public QifExporter(ExportParams params){
super(params, null);
LOG_TAG = "QifExporter";
}
public QifExporter(ExportParams params, SQLiteDatabase db){
super(params, db);
LOG_TAG = "QifExporter";
}
@Override
public List<String> generateExport() throws ExporterException {
final String newLine = "\n";
TransactionsDbAdapter transactionsDbAdapter = mTransactionsDbAdapter;
try {
String lastExportTimeStamp = TimestampHelper.getUtcStringFromTimestamp(mExportParams.getExportStartTime());
Cursor cursor = transactionsDbAdapter.fetchTransactionsWithSplitsWithTransactionAccount(
new String[]{
TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " AS trans_uid",
TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_NOTES + " AS trans_notes",
SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_QUANTITY_NUM + " AS split_quantity_num",
SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_QUANTITY_DENOM + " AS split_quantity_denom",
SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_TYPE + " AS split_type",
SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_MEMO + " AS split_memo",
"trans_extra_info.trans_acct_balance AS trans_acct_balance",
"trans_extra_info.trans_split_count AS trans_split_count",
"account1." + AccountEntry.COLUMN_UID + " AS acct1_uid",
"account1." + AccountEntry.COLUMN_FULL_NAME + " AS acct1_full_name",
"account1." + AccountEntry.COLUMN_CURRENCY + " AS acct1_currency",
"account1." + AccountEntry.COLUMN_TYPE + " AS acct1_type",
AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FULL_NAME + " AS acct2_full_name"
},
TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TEMPLATE + " == 0 AND " +
"( " + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID + " != account1." + AccountEntry.COLUMN_UID + " OR " +
"trans_split_count == 1 )" +
(
" AND " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_MODIFIED_AT + " > \"" + lastExportTimeStamp + "\""
),
null,
"acct1_currency ASC, trans_time ASC, trans_uid ASC"
);
File file = new File(getExportCacheFilePath());
BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
try {
String currentCurrencyCode = "";
String currentAccountUID = "";
String currentTransactionUID = "";
while (cursor.moveToNext()) {
String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow("acct1_currency"));
String accountUID = cursor.getString(cursor.getColumnIndexOrThrow("acct1_uid"));
String transactionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
if (!transactionUID.equals(currentTransactionUID)) {
if (!currentTransactionUID.equals("")) {
writer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
}
if (!accountUID.equals(currentAccountUID)) {
if (!currencyCode.equals(currentCurrencyCode)) {
currentCurrencyCode = currencyCode;
writer.append(QifHelper.INTERNAL_CURRENCY_PREFIX)
.append(currencyCode)
.append(newLine);
}
currentAccountUID = accountUID;
writer.append(QifHelper.ACCOUNT_HEADER).append(newLine);
writer.append(QifHelper.ACCOUNT_NAME_PREFIX)
.append(cursor.getString(cursor.getColumnIndexOrThrow("acct1_full_name")))
.append(newLine);
writer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
writer.append(QifHelper.getQifHeader(cursor.getString(cursor.getColumnIndexOrThrow("acct1_type"))))
.append(newLine);
}
currentTransactionUID = transactionUID;
writer.append(QifHelper.DATE_PREFIX)
.append(QifHelper.formatDate(cursor.getLong(cursor.getColumnIndexOrThrow("trans_time"))))
.append(newLine);
writer.append(QifHelper.PAYEE_PREFIX)
.append(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")))
.append(newLine);
writer.append(QifHelper.MEMO_PREFIX)
.append(cursor.getString(cursor.getColumnIndexOrThrow("trans_notes")))
.append(newLine);
double imbalance = cursor.getDouble(cursor.getColumnIndexOrThrow("trans_acct_balance"));
BigDecimal decimalImbalance = BigDecimal.valueOf(imbalance).setScale(2, BigDecimal.ROUND_HALF_UP);
if (decimalImbalance.compareTo(BigDecimal.ZERO) != 0) {
writer.append(QifHelper.SPLIT_CATEGORY_PREFIX)
.append(AccountsDbAdapter.getImbalanceAccountName(
Commodity.getInstance(cursor.getString(cursor.getColumnIndexOrThrow("acct1_currency")))
))
.append(newLine);
writer.append(QifHelper.SPLIT_AMOUNT_PREFIX)
.append(decimalImbalance.toPlainString())
.append(newLine);
}
}
if (cursor.getInt(cursor.getColumnIndexOrThrow("trans_split_count")) == 1) {
continue;
}
writer.append(QifHelper.SPLIT_CATEGORY_PREFIX)
.append(cursor.getString(cursor.getColumnIndexOrThrow("acct2_full_name")))
.append(newLine);
String splitMemo = cursor.getString(cursor.getColumnIndexOrThrow("split_memo"));
if (splitMemo != null && splitMemo.length() > 0) {
writer.append(QifHelper.SPLIT_MEMO_PREFIX)
.append(splitMemo)
.append(newLine);
}
String splitType = cursor.getString(cursor.getColumnIndexOrThrow("split_type"));
Double quantity_num = cursor.getDouble(cursor.getColumnIndexOrThrow("split_quantity_num"));
int quantity_denom = cursor.getInt(cursor.getColumnIndexOrThrow("split_quantity_denom"));
int precision = 0;
switch (quantity_denom) {
case 0: 
break;
case 1:
precision = 0;
break;
case 10:
precision = 1;
break;
case 100:
precision = 2;
break;
case 1000:
precision = 3;
break;
case 10000:
precision = 4;
break;
case 100000:
precision = 5;
break;
case 1000000:
precision = 6;
break;
default:
throw new ExporterException(mExportParams, "split quantity has illegal denominator: "+ quantity_denom);
}
Double quantity = 0.0;
if (quantity_denom != 0) {
quantity = quantity_num / quantity_denom;
}
final Locale noLocale = null;
writer.append(QifHelper.SPLIT_AMOUNT_PREFIX)
.append(splitType.equals("DEBIT") ? "-" : "")
.append(String.format(noLocale, "%." + precision + "f", quantity))
.append(newLine);
}
if (!currentTransactionUID.equals("")) {
writer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
}
writer.flush();
} finally {
cursor.close();
writer.close();
}
ContentValues contentValues = new ContentValues();
contentValues.put(TransactionEntry.COLUMN_EXPORTED, 1);
transactionsDbAdapter.updateTransaction(contentValues, null, null);
PreferencesHelper.setLastExportTime(TimestampHelper.getTimestampFromNow());
List<String> exportedFiles = splitQIF(file);
if (exportedFiles.isEmpty())
return Collections.emptyList();
else if (exportedFiles.size() > 1)
return zipQifs(exportedFiles);
else
return exportedFiles;
} catch (IOException e) {
throw new ExporterException(mExportParams, e);
}
}
@NonNull
private List<String> zipQifs(List<String> exportedFiles) throws IOException {
String zipFileName = getExportCacheFilePath() + ".zip";
FileUtils.zipFiles(exportedFiles, zipFileName);
return Collections.singletonList(zipFileName);
}
private List<String> splitQIF(File file) throws IOException {
String[] pathParts = file.getPath().split("(?=\\.[^\\.]+$)");
ArrayList<String> splitFiles = new ArrayList<>();
String line;
BufferedReader in = new BufferedReader(new FileReader(file));
BufferedWriter out = null;
try {
while ((line = in.readLine()) != null) {
if (line.startsWith(QifHelper.INTERNAL_CURRENCY_PREFIX)) {
String currencyCode = line.substring(1);
if (out != null) {
out.close();
}
String newFileName = pathParts[0] + "_" + currencyCode + pathParts[1];
splitFiles.add(newFileName);
out = new BufferedWriter(new FileWriter(newFileName));
} else {
if (out == null) {
throw new IllegalArgumentException(file.getPath() + " format is not correct");
}
out.append(line).append('\n');
}
}
} finally {
in.close();
if (out != null) {
out.close();
}
}
return splitFiles;
}
public String getExportMimeType(){
return "text/plain";
}
}
