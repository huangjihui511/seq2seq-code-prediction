package psiprobe.controllers.deploy;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.catalina.Context;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.InternalResourceView;
import org.springframework.web.servlet.view.RedirectView;
import psiprobe.controllers.AbstractContextHandlerController;
public class BaseUndeployContextController extends AbstractContextHandlerController {
private static final Logger logger = LoggerFactory.getLogger(BaseUndeployContextController.class);
private String failureViewName;
public String getFailureViewName() {
return failureViewName;
}
public void setFailureViewName(String failureViewName) {
this.failureViewName = failureViewName;
}
@Override
protected ModelAndView handleContext(String contextName, Context context,
HttpServletRequest request, HttpServletResponse response) throws Exception {
try {
if (request.getContextPath().equals(contextName)) {
throw new IllegalStateException(
getMessageSourceAccessor().getMessage("probe.src.contextAction.cannotActOnSelf"));
}
getContainerWrapper().getTomcatContainer().remove(contextName);
Authentication auth = SecurityContextHolder.getContext().getAuthentication();
String name = auth.getName();
logger.info(getMessageSourceAccessor().getMessage("probe.src.log.undeploy"), name,
contextName);
} catch (Exception e) {
request.setAttribute("errorMessage", e.getMessage());
logger.error("Error during undeploy of '{}'", contextName, e);
return new ModelAndView(new InternalResourceView(
getFailureViewName() == null ? getViewName() : getFailureViewName()));
}
return new ModelAndView(new RedirectView(request.getContextPath() + getViewName()));
}
protected void executeAction(String contextName) throws Exception {
}
}
