package org.spongepowered.api.data.manipulator.immutable.common;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.data.DataContainer;
import org.spongepowered.api.data.key.Key;
import org.spongepowered.api.data.manipulator.DataManipulator;
import org.spongepowered.api.data.manipulator.ImmutableDataManipulator;
import org.spongepowered.api.data.value.immutable.ImmutableValue;
import org.spongepowered.api.data.value.mutable.Value;
public abstract class AbstractImmutableSingleEnumData<E extends Enum<E>, I extends ImmutableDataManipulator<I, M>, M extends DataManipulator<M, I>>
extends AbstractImmutableSingleData<E, I, M> {
private final ImmutableValue<E> cachedValue;
@Deprecated
protected AbstractImmutableSingleEnumData(E value, E defaultValue, Key<Value<E>> usedKey) {
this(usedKey, value, defaultValue);
}
protected AbstractImmutableSingleEnumData(Key<Value<E>> usedKey, E value) {
this(usedKey, value, value);
}
protected AbstractImmutableSingleEnumData(Key<Value<E>> usedKey, E value, E defaultValue) {
super(usedKey, value, defaultValue);
this.cachedValue = Sponge.getRegistry().getValueFactory().createValue(usedKey, value, defaultValue).asImmutable();
}
@Deprecated
protected final ImmutableValue<E> enumType() {
return this.cachedValue;
}
@Override
protected final ImmutableValue<E> getValueGetter() {
return this.cachedValue;
}
@Override
public DataContainer toContainer() {
return super.toContainer();
}
@Override
protected DataContainer fillContainer(DataContainer dataContainer) {
return dataContainer.set(this.usedKey.getQuery(), getValue().name());
}
}
