package org.msgpack.core;
import org.msgpack.core.MessagePack.Code;
import org.msgpack.core.buffer.MessageBuffer;
import org.msgpack.core.buffer.MessageBufferInput;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueFactory;
import org.msgpack.value.Variable;
import java.io.Closeable;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CoderResult;
import java.nio.charset.CodingErrorAction;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static org.msgpack.core.Preconditions.checkNotNull;
public class MessageUnpacker
implements Closeable
{
private static final MessageBuffer EMPTY_BUFFER = MessageBuffer.wrap(new byte[0]);
private final boolean allowReadingStringAsBinary;
private final boolean allowReadingBinaryAsString;
private final CodingErrorAction actionOnMalformedString;
private final CodingErrorAction actionOnUnmappableString;
private final int stringSizeLimit;
private final int stringDecoderBufferSize;
private MessageBufferInput in;
private MessageBuffer buffer = EMPTY_BUFFER;
private int position;
private long totalReadBytes;
private final MessageBuffer numberBuffer = MessageBuffer.allocate(8);
private int nextReadPosition;
private StringBuilder decodeStringBuffer;
private CharsetDecoder decoder;
private CharBuffer decodeBuffer;
protected MessageUnpacker(MessageBufferInput in, MessagePack.UnpackerConfig config)
{
this.in = checkNotNull(in, "MessageBufferInput is null");
this.allowReadingStringAsBinary = config.getAllowReadingStringAsBinary();
this.allowReadingBinaryAsString = config.getAllowReadingBinaryAsString();
this.actionOnMalformedString = config.getActionOnMalformedString();
this.actionOnUnmappableString = config.getActionOnUnmappableString();
this.stringSizeLimit = config.getStringSizeLimit();
this.stringDecoderBufferSize = config.getStringDecoderBufferSize();
}
public MessageBufferInput reset(MessageBufferInput in)
throws IOException
{
MessageBufferInput newIn = checkNotNull(in, "MessageBufferInput is null");
MessageBufferInput old = this.in;
this.in = newIn;
this.buffer = EMPTY_BUFFER;
this.position = 0;
this.totalReadBytes = 0;
return old;
}
public long getTotalReadBytes()
{
return totalReadBytes + position;
}
private MessageBuffer getNextBuffer()
throws IOException
{
MessageBuffer next = in.next();
if (next == null) {
throw new MessageInsufficientBufferException();
}
assert (buffer != null);
totalReadBytes += buffer.size();
return next;
}
private void nextBuffer()
throws IOException
{
buffer = getNextBuffer();
position = 0;
}
private MessageBuffer prepareNumberBuffer(int readLength)
throws IOException
{
int remaining = buffer.size() - position;
if (remaining >= readLength) {
nextReadPosition = position;
position += readLength;  
return buffer; 
}
else {
int off = 0;
if (remaining > 0) {
numberBuffer.putMessageBuffer(0, buffer, position, remaining);
readLength -= remaining;
off += remaining;
}
while (true) {
nextBuffer();
int nextSize = buffer.size();
if (nextSize >= readLength) {
numberBuffer.putMessageBuffer(off, buffer, 0, readLength);
position = readLength;
break;
}
else {
numberBuffer.putMessageBuffer(off, buffer, 0, nextSize);
readLength -= nextSize;
off += nextSize;
}
}
nextReadPosition = 0;
return numberBuffer;
}
}
private static int utf8MultibyteCharacterSize(byte firstByte)
{
return Integer.numberOfLeadingZeros(~(firstByte & 0xff) << 24);
}
public boolean hasNext()
throws IOException
{
return ensureBuffer();
}
private boolean ensureBuffer()
throws IOException
{
while (buffer.size() <= position) {
MessageBuffer next = in.next();
if (next == null) {
return false;
}
totalReadBytes += buffer.size();
buffer = next;
position = 0;
}
return true;
}
public MessageFormat getNextFormat()
throws IOException
{
if (!ensureBuffer()) {
throw new MessageInsufficientBufferException();
}
byte b = buffer.getByte(position);
return MessageFormat.valueOf(b);
}
private byte readByte()
throws IOException
{
if (buffer.size() > position) {
byte b = buffer.getByte(position);
position++;
return b;
}
else {
nextBuffer();
if (buffer.size() > 0) {
byte b = buffer.getByte(0);
position = 1;
return b;
}
return readByte();
}
}
private short readShort()
throws IOException
{
MessageBuffer numberBuffer = prepareNumberBuffer(2);
return numberBuffer.getShort(nextReadPosition);
}
private int readInt()
throws IOException
{
MessageBuffer numberBuffer = prepareNumberBuffer(4);
return numberBuffer.getInt(nextReadPosition);
}
private long readLong()
throws IOException
{
MessageBuffer numberBuffer = prepareNumberBuffer(8);
return numberBuffer.getLong(nextReadPosition);
}
private float readFloat()
throws IOException
{
MessageBuffer numberBuffer = prepareNumberBuffer(4);
return numberBuffer.getFloat(nextReadPosition);
}
private double readDouble()
throws IOException
{
MessageBuffer numberBuffer = prepareNumberBuffer(8);
return numberBuffer.getDouble(nextReadPosition);
}
public void skipValue()
throws IOException
{
skipValue(1);
}
public void skipValue(int count)
throws IOException
{
while (count > 0) {
byte b = readByte();
MessageFormat f = MessageFormat.valueOf(b);
switch (f) {
case POSFIXINT:
case NEGFIXINT:
case BOOLEAN:
case NIL:
break;
case FIXMAP: {
int mapLen = b & 0x0f;
count += mapLen * 2;
break;
}
case FIXARRAY: {
int arrayLen = b & 0x0f;
count += arrayLen;
break;
}
case FIXSTR: {
int strLen = b & 0x1f;
skipPayload(strLen);
break;
}
case INT8:
case UINT8:
skipPayload(1);
break;
case INT16:
case UINT16:
skipPayload(2);
break;
case INT32:
case UINT32:
case FLOAT32:
skipPayload(4);
break;
case INT64:
case UINT64:
case FLOAT64:
skipPayload(8);
break;
case BIN8:
case STR8:
skipPayload(readNextLength8());
break;
case BIN16:
case STR16:
skipPayload(readNextLength16());
break;
case BIN32:
case STR32:
skipPayload(readNextLength32());
break;
case FIXEXT1:
skipPayload(2);
break;
case FIXEXT2:
skipPayload(3);
break;
case FIXEXT4:
skipPayload(5);
break;
case FIXEXT8:
skipPayload(9);
break;
case FIXEXT16:
skipPayload(17);
break;
case EXT8:
skipPayload(readNextLength8() + 1);
break;
case EXT16:
skipPayload(readNextLength16() + 1);
break;
case EXT32:
skipPayload(readNextLength32() + 1);
break;
case ARRAY16:
count += readNextLength16();
break;
case ARRAY32:
count += readNextLength32();
break;
case MAP16:
count += readNextLength16() * 2;
break;
case MAP32:
count += readNextLength32() * 2; 
break;
case NEVER_USED:
throw new MessageNeverUsedFormatException("Encountered 0xC1 \"NEVER_USED\" byte");
}
count--;
}
}
private static MessagePackException unexpected(String expected, byte b)
{
MessageFormat format = MessageFormat.valueOf(b);
if (format == MessageFormat.NEVER_USED) {
return new MessageNeverUsedFormatException(String.format("Expected %s, but encountered 0xC1 \"NEVER_USED\" byte", expected));
}
else {
String name = format.getValueType().name();
String typeName = name.substring(0, 1) + name.substring(1).toLowerCase();
return new MessageTypeException(String.format("Expected %s, but got %s (%02x)", expected, typeName, b));
}
}
public ImmutableValue unpackValue()
throws IOException
{
MessageFormat mf = getNextFormat();
switch (mf.getValueType()) {
case NIL:
readByte();
return ValueFactory.newNil();
case BOOLEAN:
return ValueFactory.newBoolean(unpackBoolean());
case INTEGER:
if (mf == MessageFormat.UINT64) {
return ValueFactory.newInteger(unpackBigInteger());
}
else {
return ValueFactory.newInteger(unpackLong());
}
case FLOAT:
return ValueFactory.newFloat(unpackDouble());
case STRING: {
int length = unpackRawStringHeader();
return ValueFactory.newString(readPayload(length), true);
}
case BINARY: {
int length = unpackBinaryHeader();
return ValueFactory.newBinary(readPayload(length), true);
}
case ARRAY: {
int size = unpackArrayHeader();
Value[] array = new Value[size];
for (int i = 0; i < size; i++) {
array[i] = unpackValue();
}
return ValueFactory.newArray(array, true);
}
case MAP: {
int size = unpackMapHeader();
Value[] kvs = new Value[size * 2];
for (int i = 0; i < size * 2; ) {
kvs[i] = unpackValue();
i++;
kvs[i] = unpackValue();
i++;
}
return ValueFactory.newMap(kvs, true);
}
case EXTENSION: {
ExtensionTypeHeader extHeader = unpackExtensionTypeHeader();
return ValueFactory.newExtension(extHeader.getType(), readPayload(extHeader.getLength()));
}
default:
throw new MessageNeverUsedFormatException("Unknown value type");
}
}
public Variable unpackValue(Variable var)
throws IOException
{
MessageFormat mf = getNextFormat();
switch (mf.getValueType()) {
case NIL:
readByte();
var.setNilValue();
return var;
case BOOLEAN:
var.setBooleanValue(unpackBoolean());
return var;
case INTEGER:
switch (mf) {
case UINT64:
var.setIntegerValue(unpackBigInteger());
return var;
default:
var.setIntegerValue(unpackLong());
return var;
}
case FLOAT:
var.setFloatValue(unpackDouble());
return var;
case STRING: {
int length = unpackRawStringHeader();
var.setStringValue(readPayload(length));
return var;
}
case BINARY: {
int length = unpackBinaryHeader();
var.setBinaryValue(readPayload(length));
return var;
}
case ARRAY: {
int size = unpackArrayHeader();
List<Value> list = new ArrayList<Value>(size);
for (int i = 0; i < size; i++) {
list.add(unpackValue());
}
var.setArrayValue(list);
return var;
}
case MAP: {
int size = unpackMapHeader();
Map<Value, Value> map = new HashMap<Value, Value>();
for (int i = 0; i < size; i++) {
Value k = unpackValue();
Value v = unpackValue();
map.put(k, v);
}
var.setMapValue(map);
return var;
}
case EXTENSION: {
ExtensionTypeHeader extHeader = unpackExtensionTypeHeader();
var.setExtensionValue(extHeader.getType(), readPayload(extHeader.getLength()));
return var;
}
default:
throw new MessageFormatException("Unknown value type");
}
}
public void unpackNil()
throws IOException
{
byte b = readByte();
if (b == Code.NIL) {
return;
}
throw unexpected("Nil", b);
}
public boolean tryUnpackNil()
throws IOException
{
if (!ensureBuffer()) {
throw new MessageInsufficientBufferException();
}
byte b = buffer.getByte(position);
if (b == Code.NIL) {
readByte();
return true;
}
return false;
}
public boolean unpackBoolean()
throws IOException
{
byte b = readByte();
if (b == Code.FALSE) {
return false;
}
else if (b == Code.TRUE) {
return true;
}
throw unexpected("boolean", b);
}
public byte unpackByte()
throws IOException
{
byte b = readByte();
if (Code.isFixInt(b)) {
return b;
}
switch (b) {
case Code.UINT8: 
byte u8 = readByte();
if (u8 < (byte) 0) {
throw overflowU8(u8);
}
return u8;
case Code.UINT16: 
short u16 = readShort();
if (u16 < 0 || u16 > Byte.MAX_VALUE) {
throw overflowU16(u16);
}
return (byte) u16;
case Code.UINT32: 
int u32 = readInt();
if (u32 < 0 || u32 > Byte.MAX_VALUE) {
throw overflowU32(u32);
}
return (byte) u32;
case Code.UINT64: 
long u64 = readLong();
if (u64 < 0L || u64 > Byte.MAX_VALUE) {
throw overflowU64(u64);
}
return (byte) u64;
case Code.INT8: 
byte i8 = readByte();
return i8;
case Code.INT16: 
short i16 = readShort();
if (i16 < Byte.MIN_VALUE || i16 > Byte.MAX_VALUE) {
throw overflowI16(i16);
}
return (byte) i16;
case Code.INT32: 
int i32 = readInt();
if (i32 < Byte.MIN_VALUE || i32 > Byte.MAX_VALUE) {
throw overflowI32(i32);
}
return (byte) i32;
case Code.INT64: 
long i64 = readLong();
if (i64 < Byte.MIN_VALUE || i64 > Byte.MAX_VALUE) {
throw overflowI64(i64);
}
return (byte) i64;
}
throw unexpected("Integer", b);
}
public short unpackShort()
throws IOException
{
byte b = readByte();
if (Code.isFixInt(b)) {
return (short) b;
}
switch (b) {
case Code.UINT8: 
byte u8 = readByte();
return (short) (u8 & 0xff);
case Code.UINT16: 
short u16 = readShort();
if (u16 < (short) 0) {
throw overflowU16(u16);
}
return u16;
case Code.UINT32: 
int u32 = readInt();
if (u32 < 0 || u32 > Short.MAX_VALUE) {
throw overflowU32(u32);
}
return (short) u32;
case Code.UINT64: 
long u64 = readLong();
if (u64 < 0L || u64 > Short.MAX_VALUE) {
throw overflowU64(u64);
}
return (short) u64;
case Code.INT8: 
byte i8 = readByte();
return (short) i8;
case Code.INT16: 
short i16 = readShort();
return i16;
case Code.INT32: 
int i32 = readInt();
if (i32 < Short.MIN_VALUE || i32 > Short.MAX_VALUE) {
throw overflowI32(i32);
}
return (short) i32;
case Code.INT64: 
long i64 = readLong();
if (i64 < Short.MIN_VALUE || i64 > Short.MAX_VALUE) {
throw overflowI64(i64);
}
return (short) i64;
}
throw unexpected("Integer", b);
}
public int unpackInt()
throws IOException
{
byte b = readByte();
if (Code.isFixInt(b)) {
return (int) b;
}
switch (b) {
case Code.UINT8: 
byte u8 = readByte();
return u8 & 0xff;
case Code.UINT16: 
short u16 = readShort();
return u16 & 0xffff;
case Code.UINT32: 
int u32 = readInt();
if (u32 < 0) {
throw overflowU32(u32);
}
return u32;
case Code.UINT64: 
long u64 = readLong();
if (u64 < 0L || u64 > (long) Integer.MAX_VALUE) {
throw overflowU64(u64);
}
return (int) u64;
case Code.INT8: 
byte i8 = readByte();
return i8;
case Code.INT16: 
short i16 = readShort();
return i16;
case Code.INT32: 
int i32 = readInt();
return i32;
case Code.INT64: 
long i64 = readLong();
if (i64 < (long) Integer.MIN_VALUE || i64 > (long) Integer.MAX_VALUE) {
throw overflowI64(i64);
}
return (int) i64;
}
throw unexpected("Integer", b);
}
public long unpackLong()
throws IOException
{
byte b = readByte();
if (Code.isFixInt(b)) {
return (long) b;
}
switch (b) {
case Code.UINT8: 
byte u8 = readByte();
return (long) (u8 & 0xff);
case Code.UINT16: 
short u16 = readShort();
return (long) (u16 & 0xffff);
case Code.UINT32: 
int u32 = readInt();
if (u32 < 0) {
return (long) (u32 & 0x7fffffff) + 0x80000000L;
}
else {
return (long) u32;
}
case Code.UINT64: 
long u64 = readLong();
if (u64 < 0L) {
throw overflowU64(u64);
}
return u64;
case Code.INT8: 
byte i8 = readByte();
return (long) i8;
case Code.INT16: 
short i16 = readShort();
return (long) i16;
case Code.INT32: 
int i32 = readInt();
return (long) i32;
case Code.INT64: 
long i64 = readLong();
return i64;
}
throw unexpected("Integer", b);
}
public BigInteger unpackBigInteger()
throws IOException
{
byte b = readByte();
if (Code.isFixInt(b)) {
return BigInteger.valueOf((long) b);
}
switch (b) {
case Code.UINT8: 
byte u8 = readByte();
return BigInteger.valueOf((long) (u8 & 0xff));
case Code.UINT16: 
short u16 = readShort();
return BigInteger.valueOf((long) (u16 & 0xffff));
case Code.UINT32: 
int u32 = readInt();
if (u32 < 0) {
return BigInteger.valueOf((long) (u32 & 0x7fffffff) + 0x80000000L);
}
else {
return BigInteger.valueOf((long) u32);
}
case Code.UINT64: 
long u64 = readLong();
if (u64 < 0L) {
BigInteger bi = BigInteger.valueOf(u64 + Long.MAX_VALUE + 1L).setBit(63);
return bi;
}
else {
return BigInteger.valueOf(u64);
}
case Code.INT8: 
byte i8 = readByte();
return BigInteger.valueOf((long) i8);
case Code.INT16: 
short i16 = readShort();
return BigInteger.valueOf((long) i16);
case Code.INT32: 
int i32 = readInt();
return BigInteger.valueOf((long) i32);
case Code.INT64: 
long i64 = readLong();
return BigInteger.valueOf(i64);
}
throw unexpected("Integer", b);
}
public float unpackFloat()
throws IOException
{
byte b = readByte();
switch (b) {
case Code.FLOAT32: 
float fv = readFloat();
return fv;
case Code.FLOAT64: 
double dv = readDouble();
return (float) dv;
}
throw unexpected("Float", b);
}
public double unpackDouble()
throws IOException
{
byte b = readByte();
switch (b) {
case Code.FLOAT32: 
float fv = readFloat();
return (double) fv;
case Code.FLOAT64: 
double dv = readDouble();
return dv;
}
throw unexpected("Float", b);
}
private static final String EMPTY_STRING = "";
private void resetDecoder()
{
if (decoder == null) {
decodeBuffer = CharBuffer.allocate(stringDecoderBufferSize);
decoder = MessagePack.UTF8.newDecoder()
.onMalformedInput(actionOnMalformedString)
.onUnmappableCharacter(actionOnUnmappableString);
}
else {
decoder.reset();
}
if (decodeStringBuffer == null) {
decodeStringBuffer = new StringBuilder();
}
else {
decodeStringBuffer.setLength(0);
}
}
public String unpackString()
throws IOException
{
int len = unpackRawStringHeader();
if (len == 0) {
return EMPTY_STRING;
}
if (len > stringSizeLimit) {
throw new MessageSizeException(String.format("cannot unpack a String of size larger than %,d: %,d", stringSizeLimit, len), len);
}
resetDecoder(); 
if (buffer.size() - position >= len) {
return decodeStringFastPath(len);
}
try {
int rawRemaining = len;
while (rawRemaining > 0) {
int bufferRemaining = buffer.size() - position;
if (bufferRemaining >= rawRemaining) {
decodeStringBuffer.append(decodeStringFastPath(rawRemaining));
break;
}
else if (bufferRemaining == 0) {
nextBuffer();
}
else {
ByteBuffer bb = buffer.sliceAsByteBuffer(position, bufferRemaining);
int bbStartPosition = bb.position();
decodeBuffer.clear();
CoderResult cr = decoder.decode(bb, decodeBuffer, false);
int readLen = bb.position() - bbStartPosition;
position += readLen;
rawRemaining -= readLen;
decodeStringBuffer.append(decodeBuffer.flip());
if (cr.isError()) {
handleCoderError(cr);
}
if (cr.isUnderflow() && readLen < bufferRemaining) {
int incompleteMultiBytes = utf8MultibyteCharacterSize(buffer.getByte(position));
ByteBuffer multiByteBuffer = ByteBuffer.allocate(incompleteMultiBytes);
buffer.getBytes(position, buffer.size() - position, multiByteBuffer);
while (true) {
nextBuffer();
int more = multiByteBuffer.remaining();
if (buffer.size() >= more) {
buffer.getBytes(0, more, multiByteBuffer);
position = more;
break;
}
else {
buffer.getBytes(0, buffer.size(), multiByteBuffer);
position = buffer.size();
}
}
multiByteBuffer.position(0);
decodeBuffer.clear();
cr = decoder.decode(multiByteBuffer, decodeBuffer, false);
if (cr.isError()) {
handleCoderError(cr);
}
if (cr.isOverflow() || (cr.isUnderflow() && multiByteBuffer.position() < multiByteBuffer.limit())) {
try {
cr.throwException();
throw new MessageFormatException("Unexpected UTF-8 multibyte sequence");
}
catch (Exception ex) {
throw new MessageFormatException("Unexpected UTF-8 multibyte sequence", ex);
}
}
rawRemaining -= multiByteBuffer.limit();
decodeStringBuffer.append(decodeBuffer.flip());
}
}
}
return decodeStringBuffer.toString();
}
catch (CharacterCodingException e) {
throw new MessageStringCodingException(e);
}
}
private void handleCoderError(CoderResult cr)
throws CharacterCodingException
{
if ((cr.isMalformed() && actionOnMalformedString == CodingErrorAction.REPORT) ||
(cr.isUnmappable() && actionOnUnmappableString == CodingErrorAction.REPORT)) {
cr.throwException();
}
}
private String decodeStringFastPath(int length)
{
if (actionOnMalformedString == CodingErrorAction.REPLACE &&
actionOnUnmappableString == CodingErrorAction.REPLACE &&
buffer.hasArray()) {
String s = new String(buffer.array(), buffer.arrayOffset() + position, length, MessagePack.UTF8);
position += length;
return s;
}
else {
ByteBuffer bb = buffer.sliceAsByteBuffer(position, length);
CharBuffer cb;
try {
cb = decoder.decode(bb);
}
catch (CharacterCodingException e) {
throw new MessageStringCodingException(e);
}
position += length;
return cb.toString();
}
}
public int unpackArrayHeader()
throws IOException
{
byte b = readByte();
if (Code.isFixedArray(b)) { 
return b & 0x0f;
}
switch (b) {
case Code.ARRAY16: { 
int len = readNextLength16();
return len;
}
case Code.ARRAY32: { 
int len = readNextLength32();
return len;
}
}
throw unexpected("Array", b);
}
public int unpackMapHeader()
throws IOException
{
byte b = readByte();
if (Code.isFixedMap(b)) { 
return b & 0x0f;
}
switch (b) {
case Code.MAP16: { 
int len = readNextLength16();
return len;
}
case Code.MAP32: { 
int len = readNextLength32();
return len;
}
}
throw unexpected("Map", b);
}
public ExtensionTypeHeader unpackExtensionTypeHeader()
throws IOException
{
byte b = readByte();
switch (b) {
case Code.FIXEXT1: {
byte type = readByte();
return new ExtensionTypeHeader(type, 1);
}
case Code.FIXEXT2: {
byte type = readByte();
return new ExtensionTypeHeader(type, 2);
}
case Code.FIXEXT4: {
byte type = readByte();
return new ExtensionTypeHeader(type, 4);
}
case Code.FIXEXT8: {
byte type = readByte();
return new ExtensionTypeHeader(type, 8);
}
case Code.FIXEXT16: {
byte type = readByte();
return new ExtensionTypeHeader(type, 16);
}
case Code.EXT8: {
MessageBuffer numberBuffer = prepareNumberBuffer(2);
int u8 = numberBuffer.getByte(nextReadPosition);
int length = u8 & 0xff;
byte type = numberBuffer.getByte(nextReadPosition + 1);
return new ExtensionTypeHeader(type, length);
}
case Code.EXT16: {
MessageBuffer numberBuffer = prepareNumberBuffer(3);
int u16 = numberBuffer.getShort(nextReadPosition);
int length = u16 & 0xffff;
byte type = numberBuffer.getByte(nextReadPosition + 2);
return new ExtensionTypeHeader(type, length);
}
case Code.EXT32: {
MessageBuffer numberBuffer = prepareNumberBuffer(5);
int u32 = numberBuffer.getInt(nextReadPosition);
if (u32 < 0) {
throw overflowU32Size(u32);
}
int length = u32;
byte type = numberBuffer.getByte(nextReadPosition + 4);
return new ExtensionTypeHeader(type, length);
}
}
throw unexpected("Ext", b);
}
private int tryReadStringHeader(byte b)
throws IOException
{
switch (b) {
case Code.STR8: 
return readNextLength8();
case Code.STR16: 
return readNextLength16();
case Code.STR32: 
return readNextLength32();
default:
return -1;
}
}
private int tryReadBinaryHeader(byte b)
throws IOException
{
switch (b) {
case Code.BIN8: 
return readNextLength8();
case Code.BIN16: 
return readNextLength16();
case Code.BIN32: 
return readNextLength32();
default:
return -1;
}
}
public int unpackRawStringHeader()
throws IOException
{
byte b = readByte();
if (Code.isFixedRaw(b)) { 
return b & 0x1f;
}
int len = tryReadStringHeader(b);
if (len >= 0) {
return len;
}
if (allowReadingBinaryAsString) {
len = tryReadBinaryHeader(b);
if (len >= 0) {
return len;
}
}
throw unexpected("String", b);
}
public int unpackBinaryHeader()
throws IOException
{
byte b = readByte();
if (Code.isFixedRaw(b)) { 
return b & 0x1f;
}
int len = tryReadBinaryHeader(b);
if (len >= 0) {
return len;
}
if (allowReadingStringAsBinary) {
len = tryReadStringHeader(b);
if (len >= 0) {
return len;
}
}
throw unexpected("Binary", b);
}
private void skipPayload(int numBytes)
throws IOException
{
while (true) {
int bufferRemaining = buffer.size() - position;
if (bufferRemaining >= numBytes) {
position += numBytes;
return;
}
else {
position += bufferRemaining;
numBytes -= bufferRemaining;
}
nextBuffer();
}
}
public void readPayload(ByteBuffer dst)
throws IOException
{
while (true) {
int dstRemaining = dst.remaining();
int bufferRemaining = buffer.size() - position;
if (bufferRemaining >= dstRemaining) {
buffer.getBytes(position, dstRemaining, dst);
position += dstRemaining;
return;
}
buffer.getBytes(position, bufferRemaining, dst);
position += bufferRemaining;
nextBuffer();
}
}
public void readPayload(MessageBuffer dst, int off, int len)
throws IOException
{
while (true) {
int bufferRemaining = buffer.size() - position;
if (bufferRemaining >= len) {
dst.putMessageBuffer(off, buffer, position, len);
position += len;
return;
}
dst.putMessageBuffer(off, buffer, position, bufferRemaining);
off += bufferRemaining;
len -= bufferRemaining;
position += bufferRemaining;
nextBuffer();
}
}
public void readPayload(byte[] dst)
throws IOException
{
readPayload(dst, 0, dst.length);
}
public byte[] readPayload(int length)
throws IOException
{
byte[] newArray = new byte[length];
readPayload(newArray);
return newArray;
}
public void readPayload(byte[] dst, int off, int len)
throws IOException
{
while (true) {
int bufferRemaining = buffer.size() - position;
if (bufferRemaining >= len) {
buffer.getBytes(position, dst, off, len);
position += len;
return;
}
buffer.getBytes(position, dst, off, bufferRemaining);
off += bufferRemaining;
len -= bufferRemaining;
position += bufferRemaining;
nextBuffer();
}
}
public MessageBuffer readPayloadAsReference(int length)
throws IOException
{
int bufferRemaining = buffer.size() - position;
if (bufferRemaining >= length) {
MessageBuffer slice = buffer.slice(position, length);
position += length;
return slice;
}
MessageBuffer dst = MessageBuffer.allocate(length);
readPayload(dst, 0, length);
return dst;
}
private int readNextLength8()
throws IOException
{
byte u8 = readByte();
return u8 & 0xff;
}
private int readNextLength16()
throws IOException
{
short u16 = readShort();
return u16 & 0xffff;
}
private int readNextLength32()
throws IOException
{
int u32 = readInt();
if (u32 < 0) {
throw overflowU32Size(u32);
}
return u32;
}
@Override
public void close()
throws IOException
{
buffer = EMPTY_BUFFER;
position = 0;
in.close();
}
private static MessageIntegerOverflowException overflowU8(byte u8)
{
BigInteger bi = BigInteger.valueOf((long) (u8 & 0xff));
return new MessageIntegerOverflowException(bi);
}
private static MessageIntegerOverflowException overflowU16(short u16)
{
BigInteger bi = BigInteger.valueOf((long) (u16 & 0xffff));
return new MessageIntegerOverflowException(bi);
}
private static MessageIntegerOverflowException overflowU32(int u32)
{
BigInteger bi = BigInteger.valueOf((long) (u32 & 0x7fffffff) + 0x80000000L);
return new MessageIntegerOverflowException(bi);
}
private static MessageIntegerOverflowException overflowU64(long u64)
{
BigInteger bi = BigInteger.valueOf(u64 + Long.MAX_VALUE + 1L).setBit(63);
return new MessageIntegerOverflowException(bi);
}
private static MessageIntegerOverflowException overflowI16(short i16)
{
BigInteger bi = BigInteger.valueOf((long) i16);
return new MessageIntegerOverflowException(bi);
}
private static MessageIntegerOverflowException overflowI32(int i32)
{
BigInteger bi = BigInteger.valueOf((long) i32);
return new MessageIntegerOverflowException(bi);
}
private static MessageIntegerOverflowException overflowI64(long i64)
{
BigInteger bi = BigInteger.valueOf(i64);
return new MessageIntegerOverflowException(bi);
}
private static MessageSizeException overflowU32Size(int u32)
{
long lv = (long) (u32 & 0x7fffffff) + 0x80000000L;
return new MessageSizeException(lv);
}
}
