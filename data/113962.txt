package org.spongepowered.mod.mixin.api.minecraft.world;
import net.minecraft.world.WorldServer;
import net.minecraft.world.gen.ChunkProviderServer;
import org.spongepowered.api.world.Chunk;
import org.spongepowered.api.world.World;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.common.mixin.api.mcp.world.WorldMixin_API;
import org.spongepowered.common.world.storage.SpongeChunkLayout;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
@Mixin(WorldServer.class)
public abstract class WorldServerMixin_ForgeAPI extends WorldMixin_API implements World {
@Shadow public abstract ChunkProviderServer getChunkProvider();
@Override
public CompletableFuture<Optional<Chunk>> loadChunkAsync(final int cx, final int cy, final int cz, final boolean shouldGenerate) {
if (shouldGenerate) {
return World.super.loadChunkAsync(cx, cy, cz, true);
}
if (!SpongeChunkLayout.instance.isValidChunk(cx, cy, cz)) {
return CompletableFuture.completedFuture(Optional.empty());
}
final CompletableFuture<Optional<Chunk>> future = new CompletableFuture<>();
getChunkProvider().loadChunk(cx, cz, () -> future.complete(Optional.ofNullable((Chunk) getChunkProvider().getLoadedChunk(cx, cz))));
return future;
}
}
