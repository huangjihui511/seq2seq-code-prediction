package com.datumbox.framework.common.storage.abstracts;
import com.datumbox.framework.common.storage.interfaces.BigMap;
import com.datumbox.framework.common.storage.interfaces.StorageConfiguration;
import com.datumbox.framework.common.storage.interfaces.StorageEngine;
import com.datumbox.framework.common.utilities.ReflectionMethods;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
public abstract class AbstractStorageEngine<SC extends StorageConfiguration> implements StorageEngine {
protected String storageName;
protected final SC storageConfiguration;
protected final Logger logger = LoggerFactory.getLogger(getClass());
private final AtomicBoolean isClosed = new AtomicBoolean(false);
private Thread hook;
protected AbstractStorageEngine(String storageName, SC storageConfiguration) {
this.storageName = storageName;
this.storageConfiguration = storageConfiguration;
hook = new Thread(() -> {
AbstractStorageEngine.this.hook = null;
if(AbstractStorageEngine.this.isClosed()) {
return;
}
AbstractStorageEngine.this.close();
});
Runtime.getRuntime().addShutdownHook(hook);
logger.trace("Opened storage {}", storageName);
}
@Override
public String getStorageName() {
return storageName;
}
@Override
public boolean isClosed() {
return isClosed.get();
}
@Override
public void close() {
if(isClosed() == false && hook != null) {
Runtime.getRuntime().removeShutdownHook(hook);
hook = null;
}
isClosed.set(true);
}
protected void assertConnectionOpen() {
if(isClosed()) {
throw new RuntimeException("The connection is already closed.");
}
}
protected <T extends Serializable> Map<String, Object> preSerializer(T serializableObject) {
Map<String, Object> objReferences = new HashMap<>();
for(Field field : ReflectionMethods.getAllFields(new LinkedList<>(), serializableObject.getClass())) {
if (field.isAnnotationPresent(BigMap.class)) {
field.setAccessible(true);
try {
Object value = field.get(serializableObject);
if(!isSerializableBigMap(value)) { 
objReferences.put(field.getName(), value);
field.set(serializableObject, null);
}
}
catch (IllegalArgumentException | IllegalAccessException ex) {
throw new RuntimeException(ex);
}
}
}
return objReferences;
}
protected abstract Set<Class> nonSerializableBigMaps();
private boolean isSerializableBigMap(Object value) {
Class valueClass = value.getClass();
if(!Serializable.class.isAssignableFrom(valueClass)) {
return false;
}
if(nonSerializableBigMaps().contains(valueClass)) {
return false;
}
if(valueClass.getCanonicalName().equals("java.util.Collections.SynchronizedMap")) {
try {
Field field = valueClass.getDeclaredField("m");
field.setAccessible(true);
if(!Serializable.class.isAssignableFrom(field.get(value).getClass())) {
return false;
}
}
catch (IllegalAccessException | NoSuchFieldException ex) {
throw new RuntimeException(ex);
}
}
return true;
}
protected <T extends Serializable> void postSerializer(T serializableObject, Map<String, Object> objReferences) {
for(Field field : ReflectionMethods.getAllFields(new LinkedList<>(), serializableObject.getClass())) {
String fieldName = field.getName();
Object ref = objReferences.remove(fieldName);
if(ref != null) { 
field.setAccessible(true);
try {
field.set(serializableObject, ref);
}
catch (IllegalAccessException ex) {
throw new RuntimeException(ex);
}
}
}
}
protected <T extends Serializable> void postDeserializer(T serializableObject) {
Method method = null;
for(Field field : ReflectionMethods.getAllFields(new LinkedList<>(), serializableObject.getClass())) {
if (field.isAnnotationPresent(BigMap.class)) { 
field.setAccessible(true);
try {
if(field.get(serializableObject) == null) { 
if(method == null) {
method = ReflectionMethods.findMethod(serializableObject, "initializeBigMapField", this, field);
}
ReflectionMethods.invokeMethod(serializableObject, method, this, field);
}
}
catch (IllegalAccessException ex) {
throw new RuntimeException(ex);
}
}
}
}
}
