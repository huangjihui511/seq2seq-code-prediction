package com.pokegoapi.examples;
import com.pokegoapi.api.PokemonGo;
import com.pokegoapi.api.listener.LoginListener;
import com.pokegoapi.auth.PtcCredentialProvider;
import com.pokegoapi.util.CaptchaSolveHelper;
import com.pokegoapi.util.Log;
import com.pokegoapi.util.hash.HashProvider;
import com.sun.javafx.application.PlatformImpl;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import okhttp3.OkHttpClient;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
public class SolveCaptchaExample {
public static void main(String[] args) {
OkHttpClient http = new OkHttpClient();
PokemonGo api = new PokemonGo(http);
try {
SwingUtilities.invokeLater(new Runnable() {
@Override
public void run() {
PlatformImpl.startup(new Runnable() {
@Override
public void run() {
}
});
Platform.setImplicitExit(false);
}
});
api.addListener(new LoginListener() {
@Override
public void onLogin(PokemonGo api) {
System.out.println("Successfully logged in with SolveCaptchaExample!");
}
@Override
public void onChallenge(PokemonGo api, String challengeURL) {
System.out.println("Captcha received! URL: " + challengeURL);
completeCaptcha(api, challengeURL);
}
});
HashProvider hasher = ExampleConstants.getHashProvider();
api.login(new PtcCredentialProvider(http, ExampleConstants.LOGIN, ExampleConstants.PASSWORD), hasher);
while (!api.hasChallenge()) {
}
} catch (Exception e) {
Log.e("Main", "Failed to run captcha example! ", e);
}
}
private static void completeCaptcha(final PokemonGo api, final String challengeURL) {
SwingUtilities.invokeLater(new Runnable() {
@Override
public void run() {
Platform.runLater(new Runnable() {
@Override
public void run() {
JFXPanel panel = new JFXPanel();
WebView view = new WebView();
WebEngine engine = view.getEngine();
engine.setUserAgent(CaptchaSolveHelper.USER_AGENT);
engine.load(challengeURL);
final JFrame frame = new JFrame("Solve Captcha");
CaptchaSolveHelper.Listener listener = new CaptchaSolveHelper.Listener() {
@Override
public void onTokenReceived(String token) {
System.out.println("Token received: " + token + "!");
CaptchaSolveHelper.removeListener(this);
try {
frame.setVisible(false);
frame.dispose();
if (api.verifyChallenge(token)) {
System.out.println("Captcha was correctly solved!");
} else {
System.out.println("Captcha was incorrectly solved! Please try again.");
}
} catch (Exception e) {
Log.e("Main", "Error while solving captcha!", e);
}
}
};
CaptchaSolveHelper.registerListener(listener);
panel.setScene(new Scene(view));
frame.getContentPane().add(panel);
frame.setSize(500, 500);
frame.setVisible(true);
frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
frame.addWindowListener(new WindowAdapter() {
@Override
public void windowClosing(WindowEvent e) {
System.out.println("Please solve the captcha before closing the window!");
}
});
}
});
}
});
}
}
