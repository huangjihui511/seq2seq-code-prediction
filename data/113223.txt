package org.pf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.pf4j.util.DirectedGraph;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
public class DependencyResolver {
private static final Logger log = LoggerFactory.getLogger(DependencyResolver.class);
private VersionManager versionManager;
private DirectedGraph<String> dependenciesGraph; 
private DirectedGraph<String> dependentsGraph; 
private boolean resolved;
public DependencyResolver(VersionManager versionManager) {
this.versionManager = versionManager;
}
public Result resolve(List<PluginDescriptor> plugins) {
dependenciesGraph = new DirectedGraph<>();
dependentsGraph = new DirectedGraph<>();
Map<String, PluginDescriptor> pluginByIds = new HashMap<>();
for (PluginDescriptor plugin : plugins) {
addPlugin(plugin);
pluginByIds.put(plugin.getPluginId(), plugin);
}
log.debug("Graph: {}", dependenciesGraph);
List<String> sortedPlugins = dependenciesGraph.reverseTopologicalSort();
log.debug("Plugins order: {}", sortedPlugins);
Result result = new Result(sortedPlugins);
resolved = true;
if (sortedPlugins != null) { 
for (String pluginId : sortedPlugins) {
if (!pluginByIds.containsKey(pluginId)) {
result.addNotFoundDependency(pluginId);
}
}
}
for (PluginDescriptor plugin : plugins) {
String pluginId = plugin.getPluginId();
String existingVersion = plugin.getVersion();
List<String> dependents = new ArrayList<>(getDependents(pluginId));
while (!dependents.isEmpty()) {
String dependentId = dependents.remove(0);
PluginDescriptor dependent = pluginByIds.get(dependentId);
String requiredVersion = getDependencyVersionSupport(dependent, pluginId);
boolean ok = checkDependencyVersion(requiredVersion, existingVersion);
if (!ok) {
result.addWrongDependencyVersion(new WrongDependencyVersion(pluginId, dependentId, existingVersion, requiredVersion));
}
}
}
return result;
}
public List<String> getDependencies(String pluginId) {
checkResolved();
return dependenciesGraph.getNeighbors(pluginId);
}
public List<String> getDependents(String pluginId) {
checkResolved();
return dependentsGraph.getNeighbors(pluginId);
}
protected boolean checkDependencyVersion(String requiredVersion, String existingVersion) {
return versionManager.checkVersionConstraint(existingVersion, requiredVersion);
}
private void addPlugin(PluginDescriptor descriptor) {
String pluginId = descriptor.getPluginId();
List<PluginDependency> dependencies = descriptor.getDependencies();
if (dependencies.isEmpty()) {
dependenciesGraph.addVertex(pluginId);
dependentsGraph.addVertex(pluginId);
} else {
boolean edgeAdded = false;
for (PluginDependency dependency : dependencies) {
if (!dependency.isOptional()) {
edgeAdded = true;
dependenciesGraph.addEdge(pluginId, dependency.getPluginId());
dependentsGraph.addEdge(dependency.getPluginId(), pluginId);
}
}
if (!edgeAdded) {
dependenciesGraph.addVertex(pluginId);
dependentsGraph.addVertex(pluginId);
}
}
}
private void checkResolved() {
if (!resolved) {
throw new IllegalStateException("Call 'resolve' method first");
}
}
private String getDependencyVersionSupport(PluginDescriptor dependent, String dependencyId) {
List<PluginDependency> dependencies = dependent.getDependencies();
for (PluginDependency dependency : dependencies) {
if (dependencyId.equals(dependency.getPluginId())) {
return dependency.getPluginVersionSupport();
}
}
throw new IllegalStateException("Cannot find a dependency with id '" + dependencyId +
"' for plugin '" + dependent.getPluginId() + "'");
}
public static class Result {
private boolean cyclicDependency;
private List<String> notFoundDependencies; 
private List<String> sortedPlugins; 
private List<WrongDependencyVersion> wrongVersionDependencies;
Result(List<String> sortedPlugins) {
if (sortedPlugins == null) {
cyclicDependency = true;
this.sortedPlugins = Collections.emptyList();
} else {
this.sortedPlugins = new ArrayList<>(sortedPlugins);
}
notFoundDependencies = new ArrayList<>();
wrongVersionDependencies = new ArrayList<>();
}
public boolean hasCyclicDependency() {
return cyclicDependency;
}
public List<String> getNotFoundDependencies() {
return notFoundDependencies;
}
public List<WrongDependencyVersion> getWrongVersionDependencies() {
return wrongVersionDependencies;
}
public List<String> getSortedPlugins() {
return sortedPlugins;
}
void addNotFoundDependency(String pluginId) {
notFoundDependencies.add(pluginId);
}
void addWrongDependencyVersion(WrongDependencyVersion wrongDependencyVersion) {
wrongVersionDependencies.add(wrongDependencyVersion);
}
}
public static class WrongDependencyVersion {
private String dependencyId; 
private String dependentId; 
private String existingVersion;
private String requiredVersion;
WrongDependencyVersion(String dependencyId, String dependentId, String existingVersion, String requiredVersion) {
this.dependencyId = dependencyId;
this.dependentId = dependentId;
this.existingVersion = existingVersion;
this.requiredVersion = requiredVersion;
}
public String getDependencyId() {
return dependencyId;
}
public String getDependentId() {
return dependentId;
}
public String getExistingVersion() {
return existingVersion;
}
public String getRequiredVersion() {
return requiredVersion;
}
}
public static class CyclicDependencyException extends PluginRuntimeException {
public CyclicDependencyException() {
super("Cyclic dependencies");
}
}
public static class DependenciesNotFoundException extends PluginRuntimeException {
private List<String> dependencies;
public DependenciesNotFoundException(List<String> dependencies) {
super("Dependencies '{}' not found", dependencies);
this.dependencies = dependencies;
}
public List<String> getDependencies() {
return dependencies;
}
}
public static class DependenciesWrongVersionException extends PluginRuntimeException {
private List<WrongDependencyVersion> dependencies;
public DependenciesWrongVersionException(List<WrongDependencyVersion> dependencies) {
super("Dependencies '{}' have wrong version", dependencies);
this.dependencies = dependencies;
}
public List<WrongDependencyVersion> getDependencies() {
return dependencies;
}
}
}
