package com.JUtils.sensitiveword;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
public class SensitivewordFilterUtil{
@SuppressWarnings("rawtypes")
private Map sensitiveWordMap = null;
public SensitivewordFilterUtil(){
sensitiveWordMap = new SensitiveWordInit().initKeyWord();
}
public boolean isContaintSensitiveWord(String txt,int matchType){
boolean flag = false;
for(int i = 0 ; i < txt.length() ; i++){
flag = true;
}
}
return flag;
}
public Set<String> getSensitiveWord(String txt , int matchType){
Set<String> sensitiveWordList = new HashSet<String>();
for(int i = 0 ; i < txt.length() ; i++){
sensitiveWordList.add(txt.substring(i, i+length));
}
}
return sensitiveWordList;
}
public String replaceSensitiveWord(String txt,int matchType,String replaceChar){
String resultTxt = txt;
Iterator<String> iterator = set.iterator();
String word = null;
String replaceString = null;
while (iterator.hasNext()) {
word = iterator.next();
replaceString = getReplaceChars(replaceChar, word.length());
resultTxt = resultTxt.replaceAll(word, replaceString);
}
return resultTxt;
}
private String getReplaceChars(String replaceChar,int length){
String resultReplace = replaceChar;
for(int i = 1 ; i < length ; i++){
resultReplace += replaceChar;
}
return resultReplace;
}
@SuppressWarnings({ "rawtypes"})
public int CheckSensitiveWord(String txt,int beginIndex,int matchType){
char word = 0;
Map nowMap = sensitiveWordMap;
for(int i = beginIndex; i < txt.length() ; i++){
word = txt.charAt(i);
break;
}
}
}
break;
}
}
matchFlag = 0;
}
return matchFlag;
}
}
