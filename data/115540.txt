package com.JUtils.math;
import java.math.BigDecimal;
import com.JUtils.base.ValidateHelper;
public class BigDecimalUtils {
private static int DEFAULT_SCALE = 2;
private static int DEFAULT_ROUND = BigDecimal.ROUND_HALF_UP;
public static String add(String v1,String v2){
BigDecimal b1 = new BigDecimal(v1);
BigDecimal b2 = new BigDecimal(v2);
return b1.add(b2).toString();
}
public static String div(String v1, String v2, int scale, int round) {
if (scale < 0) {
throw new IllegalArgumentException(
"The scale must be a positive integer or zero");
}
if (ValidateHelper.isEmpty(scale)) {
scale = DEFAULT_SCALE;
}
if (ValidateHelper.isEmpty(round)) {
round = DEFAULT_ROUND;
}
BigDecimal b1 = new BigDecimal(v1);
BigDecimal b2 = new BigDecimal(v2);
return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();
}
public static int compareTo(String v1,String v2){
BigDecimal b1 = new BigDecimal(v1);
BigDecimal b2 = new BigDecimal(v2);
return b1.compareTo(b2);
}
public static String returnMin(String v1,String v2){
BigDecimal b1 = new BigDecimal(v1);
BigDecimal b2 = new BigDecimal(v2);
return b1.min(b2).toString();
}
public static String returnMax(String v1,String v2){
BigDecimal b1 = new BigDecimal(v1);
BigDecimal b2 = new BigDecimal(v2);
return b1.max(b2).toString();
}
public static BigDecimal getValue(BigDecimal value,int scale){
if(!ValidateHelper.isEmpty(value)){
return value.setScale(scale, BigDecimal.ROUND_HALF_UP);
}
return value;
}
public static BigDecimal getBigDecimal(Object value){
BigDecimal resultValue = new BigDecimal(0);
if(value instanceof String){
resultValue = new BigDecimal((String)value);
}
else if(value instanceof Integer){
resultValue = new BigDecimal((Integer)value);
}
else if(value instanceof Long){
resultValue = new BigDecimal((Long)value);
}
else if(value instanceof Double){
resultValue = new BigDecimal((Double)value);
}
else{
resultValue = (BigDecimal) value;
}
return resultValue;
}
public static BigDecimal getBigDecimal(Object value,BigDecimal resultValue){
if(ValidateHelper.isEmpty(value)){
return resultValue;
}
resultValue = getBigDecimal(resultValue);
return resultValue;
}
public static Long bigDecimalToLong(BigDecimal value){
if(value != null){
return new Long(value.longValue());
}
return null;
}
public static Integer bigDecimalToInteger(BigDecimal value){
if(value != null){
return new Integer(value.intValue());
}
return null;
}
}
