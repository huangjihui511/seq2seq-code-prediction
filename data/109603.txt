package com.google.inject.spi;
import static com.google.common.base.Preconditions.checkNotNull;
import com.google.common.base.MoreObjects;
import com.google.inject.Binder;
import com.google.inject.Scope;
import com.google.inject.internal.Errors;
import java.lang.annotation.Annotation;
public final class ScopeBinding implements Element {
private final Object source;
private final Class<? extends Annotation> annotationType;
private final Scope scope;
ScopeBinding(Object source, Class<? extends Annotation> annotationType, Scope scope) {
this.source = checkNotNull(source, "source");
this.annotationType = checkNotNull(annotationType, "annotationType");
this.scope = checkNotNull(scope, "scope");
}
@Override
public Object getSource() {
return source;
}
public Class<? extends Annotation> getAnnotationType() {
return annotationType;
}
public Scope getScope() {
return scope;
}
@Override
public <T> T acceptVisitor(ElementVisitor<T> visitor) {
return visitor.visit(this);
}
@Override
public void applyTo(Binder binder) {
binder.withSource(getSource()).bindScope(annotationType, scope);
}
@Override
public String toString() {
return MoreObjects.toStringHelper(ScopeBinding.class)
.add("annotationType", annotationType)
.add("scope", scope)
.add("source", Errors.convert(source))
.toString();
}
}
