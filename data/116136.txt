package net.i2p.client;
import net.i2p.data.DateAndFlags;
public class SendMessageOptions extends DateAndFlags {
private GzipOption _gzip = GzipOption.DEFAULT;
private static final int LS_MASK = 0x0100;
private static final int TAGS_SEND_MASK = 0x000f;
private static final int[] TAGS_SEND = {
0, 2, 4, 6, 8, 12, 16, 24,
32, 40, 51, 64, 80, 100, 125, 160
};
private static final int TAGS_REQD_MASK = 0x00f0;
private static final int[] TAGS_REQD = {
0, 2, 3, 6, 9, 14, 20, 27,
35, 45, 57, 72, 92, 117, 147, 192
};
public enum Reliability { DEFAULT, BEST_EFFORT, GUARANTEED, UNDEFINED }
private static final int BEST_EFFORT_MASK = 0x0200;
private static final int GUARANTEED_MASK = 0x0400;
private static final int RELIABILITY_MASK = BEST_EFFORT_MASK | GUARANTEED_MASK;
public void setSendLeaseSet(boolean yes) {
if (yes)
_flags &= ~LS_MASK;
else
_flags |= LS_MASK;
}
public boolean getSendLeaseSet() {
return getSendLeaseSet(_flags);
}
public static boolean getSendLeaseSet(int flags) {
return (flags & LS_MASK) == 0;
}
public void setTagsToSend(int tags) {
if (tags < 0)
throw new IllegalArgumentException();
_flags &= ~TAGS_SEND_MASK;
_flags |= valToCode(tags, TAGS_SEND);
}
public int getTagsToSend() {
return getTagsToSend(_flags);
}
public static int getTagsToSend(int flags) {
int exp = (flags & TAGS_SEND_MASK);
return codeToVal(exp, TAGS_SEND);
}
public void setTagThreshold(int tags) {
if (tags < 0)
throw new IllegalArgumentException();
_flags &= ~TAGS_REQD_MASK;
_flags |= valToCode(tags, TAGS_REQD) << 4;
}
public int getTagThreshold() {
return getTagThreshold(_flags);
}
public static int getTagThreshold(int flags) {
int exp = (flags & TAGS_REQD_MASK) >> 4;
return codeToVal(exp, TAGS_REQD);
}
private static int valToCode(int val, int[] codes) {
if (val > 0 && val <= codes[1])
return 1;
for (int i = 1; i < codes.length; i++) {
if (val < codes[i])
return i - 1;
}
return codes.length - 1;
}
private static int codeToVal(int code, int[] codes) {
return codes[code];
}
public void setReliability(Reliability r) {
_flags &= ~RELIABILITY_MASK;
switch (r) {
case BEST_EFFORT:
_flags |= BEST_EFFORT_MASK;
break;
case GUARANTEED:
_flags |= GUARANTEED_MASK;
break;
case UNDEFINED:
_flags |= RELIABILITY_MASK;
break;
case DEFAULT:
default:
break;
}
}
public Reliability getReliability() {
return getReliability(_flags);
}
public static Reliability getReliability(int flags) {
switch (flags & RELIABILITY_MASK) {
case BEST_EFFORT_MASK:
return Reliability.BEST_EFFORT;
case GUARANTEED_MASK:
return Reliability.GUARANTEED;
default:
case RELIABILITY_MASK:
return Reliability.UNDEFINED;
case 0:
return Reliability.DEFAULT;
}
}
public enum GzipOption { DEFAULT, GZIP_OFF, GZIP_ON }
public GzipOption getGzip() {
return _gzip;
}
public void setGzip(boolean yes) {
_gzip = yes? GzipOption.GZIP_ON : GzipOption.GZIP_OFF;
}
}
