package com.google.cloud.tools.jib.builder;
import com.google.cloud.tools.jib.event.EventHandlers;
import com.google.cloud.tools.jib.event.events.ProgressEvent;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
@RunWith(MockitoJUnitRunner.class)
public class ProgressEventDispatcherTest {
@Mock private EventHandlers mockEventHandlers;
@Test
public void testDispatch() {
try (ProgressEventDispatcher progressEventDispatcher =
ProgressEventDispatcher.newRoot(mockEventHandlers, "ignored", 10);
ProgressEventDispatcher ignored =
progressEventDispatcher.newChildProducer().create("ignored", 20)) {
}
ArgumentCaptor<ProgressEvent> progressEventArgumentCaptor =
ArgumentCaptor.forClass(ProgressEvent.class);
Mockito.verify(mockEventHandlers, Mockito.times(4))
.dispatch(progressEventArgumentCaptor.capture());
List<ProgressEvent> progressEvents = progressEventArgumentCaptor.getAllValues();
Assert.assertSame(progressEvents.get(0).getAllocation(), progressEvents.get(3).getAllocation());
Assert.assertSame(progressEvents.get(1).getAllocation(), progressEvents.get(2).getAllocation());
Assert.assertEquals(0, progressEvents.get(0).getUnits());
Assert.assertEquals(0, progressEvents.get(1).getUnits());
Assert.assertEquals(20, progressEvents.get(2).getUnits());
Assert.assertEquals(9, progressEvents.get(3).getUnits());
}
@Test
public void testDispatch_safeWithtooMuchProgress() {
try (ProgressEventDispatcher progressEventDispatcher =
ProgressEventDispatcher.newRoot(mockEventHandlers, "allocation description", 10)) {
progressEventDispatcher.dispatchProgress(6);
progressEventDispatcher.dispatchProgress(8);
progressEventDispatcher.dispatchProgress(1);
}
ArgumentCaptor<ProgressEvent> eventsCaptor = ArgumentCaptor.forClass(ProgressEvent.class);
Mockito.verify(mockEventHandlers, Mockito.times(4)).dispatch(eventsCaptor.capture());
List<ProgressEvent> progressEvents = eventsCaptor.getAllValues();
Assert.assertSame(progressEvents.get(0).getAllocation(), progressEvents.get(1).getAllocation());
Assert.assertSame(progressEvents.get(1).getAllocation(), progressEvents.get(2).getAllocation());
Assert.assertSame(progressEvents.get(2).getAllocation(), progressEvents.get(3).getAllocation());
Assert.assertEquals(10, progressEvents.get(0).getAllocation().getAllocationUnits());
Assert.assertEquals(0, progressEvents.get(0).getUnits());
Assert.assertEquals(6, progressEvents.get(1).getUnits());
Assert.assertEquals(4, progressEvents.get(2).getUnits());
Assert.assertEquals(0, progressEvents.get(3).getUnits());
}
@Test
public void testDispatch_safeWithTooManyChildren() {
try (ProgressEventDispatcher progressEventDispatcher =
ProgressEventDispatcher.newRoot(mockEventHandlers, "allocation description", 1);
ProgressEventDispatcher ignored1 =
progressEventDispatcher.newChildProducer().create("ignored", 5);
ProgressEventDispatcher ignored2 =
progressEventDispatcher.newChildProducer().create("ignored", 4)) {
}
ArgumentCaptor<ProgressEvent> eventsCaptor = ArgumentCaptor.forClass(ProgressEvent.class);
Mockito.verify(mockEventHandlers, Mockito.times(5)).dispatch(eventsCaptor.capture());
List<ProgressEvent> progressEvents = eventsCaptor.getAllValues();
Assert.assertEquals(1, progressEvents.get(0).getAllocation().getAllocationUnits());
Assert.assertEquals(5, progressEvents.get(1).getAllocation().getAllocationUnits());
Assert.assertEquals(4, progressEvents.get(2).getAllocation().getAllocationUnits());
Assert.assertSame(progressEvents.get(1).getAllocation(), progressEvents.get(4).getAllocation());
Assert.assertSame(progressEvents.get(2).getAllocation(), progressEvents.get(3).getAllocation());
Assert.assertEquals(0, progressEvents.get(0).getUnits()); 
Assert.assertEquals(0, progressEvents.get(1).getUnits()); 
Assert.assertEquals(0, progressEvents.get(2).getUnits()); 
Assert.assertEquals(4, progressEvents.get(3).getUnits()); 
Assert.assertEquals(5, progressEvents.get(4).getUnits()); 
}
}
