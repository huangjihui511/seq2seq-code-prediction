package org.jsoup.nodes;
import org.jsoup.Jsoup;
import org.jsoup.TextUtil;
import org.jsoup.parser.Tag;
import org.jsoup.select.NodeVisitor;
import org.junit.jupiter.api.Test;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
Tests Nodes
@author Jonathan Hedley, jonathan@hedley.net */
public class NodeTest {
@Test public void handlesBaseUri() {
Tag tag = Tag.valueOf("a");
Attributes attribs = new Attributes();
attribs.put("relHref", "/foo");
attribs.put("absHref", "http:
Element noBase = new Element(tag, "", attribs);
assertEquals("", noBase.absUrl("relHref")); 
assertEquals("http:
Element withBase = new Element(tag, "http:
assertEquals("http:
assertEquals("http:
assertEquals("", withBase.absUrl("noval"));
Element dodgyBase = new Element(tag, "wtf:
assertEquals("http:
assertEquals("", dodgyBase.absUrl("relHref")); 
}
@Test public void setBaseUriIsRecursive() {
Document doc = Jsoup.parse("<div><p></p></div>");
String baseUri = "https:
doc.setBaseUri(baseUri);
assertEquals(baseUri, doc.baseUri());
assertEquals(baseUri, doc.select("div").first().baseUri());
assertEquals(baseUri, doc.select("p").first().baseUri());
}
@Test public void handlesAbsPrefix() {
Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "https:
Element a = doc.select("a").first();
assertEquals("/foo", a.attr("href"));
assertEquals("https:
assertTrue(a.hasAttr("abs:href"));
}
@Test public void handlesAbsOnImage() {
Document doc = Jsoup.parse("<p><img src=\"/rez/osi_logo.png\" /></p>", "https:
Element img = doc.select("img").first();
assertEquals("https:
assertEquals(img.absUrl("src"), img.attr("abs:src"));
}
@Test public void handlesAbsPrefixOnHasAttr() {
Document doc = Jsoup.parse("<a id=1 href='/foo'>One</a> <a id=2 href='https:
Element one = doc.select("#1").first();
Element two = doc.select("#2").first();
assertFalse(one.hasAttr("abs:href"));
assertTrue(one.hasAttr("href"));
assertEquals("", one.absUrl("href"));
assertTrue(two.hasAttr("abs:href"));
assertTrue(two.hasAttr("href"));
assertEquals("https:
}
@Test public void literalAbsPrefix() {
Document doc = Jsoup.parse("<a abs:href='odd'>One</a>");
Element el = doc.select("a").first();
assertTrue(el.hasAttr("abs:href"));
assertEquals("odd", el.attr("abs:href"));
}
@Test public void handleAbsOnFileUris() {
Document doc = Jsoup.parse("<a href='password'>One/a><a href='/var/log/messages'>Two</a>", "file:/etc/");
Element one = doc.select("a").first();
assertEquals("file:/etc/password", one.absUrl("href"));
Element two = doc.select("a").get(1);
assertEquals("file:/var/log/messages", two.absUrl("href"));
}
@Test
public void handleAbsOnLocalhostFileUris() {
Document doc = Jsoup.parse("<a href='password'>One/a><a href='/var/log/messages'>Two</a>", "file:
Element one = doc.select("a").first();
assertEquals("file:
}
@Test
public void handlesAbsOnProtocolessAbsoluteUris() {
Document doc1 = Jsoup.parse("<a href='
Document doc2 = Jsoup.parse("<a href='
Element one = doc1.select("a").first();
Element two = doc2.select("a").first();
assertEquals("http:
assertEquals("https:
Document doc3 = Jsoup.parse("<img src=
assertEquals("https:
}
Test for an issue with Java's abs URL handler.
@Test public void absHandlesRelativeQuery() {
Document doc = Jsoup.parse("<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>", "https:
Element a1 = doc.select("a").first();
assertEquals("https:
Element a2 = doc.select("a").get(1);
assertEquals("https:
}
@Test public void absHandlesDotFromIndex() {
Document doc = Jsoup.parse("<a href='./one/two.html'>One</a>", "http:
Element a1 = doc.select("a").first();
assertEquals("http:
}
@Test public void testRemove() {
Document doc = Jsoup.parse("<p>One <span>two</span> three</p>");
Element p = doc.select("p").first();
p.childNode(0).remove();
assertEquals("two three", p.text());
assertEquals("<span>two</span> three", TextUtil.stripNewlines(p.html()));
}
@Test public void testReplace() {
Document doc = Jsoup.parse("<p>One <span>two</span> three</p>");
Element p = doc.select("p").first();
Element insert = doc.createElement("em").text("foo");
p.childNode(1).replaceWith(insert);
assertEquals("One <em>foo</em> three", p.html());
}
@Test public void ownerDocument() {
Document doc = Jsoup.parse("<p>Hello");
Element p = doc.select("p").first();
assertSame(p.ownerDocument(), doc);
assertSame(doc.ownerDocument(), doc);
assertNull(doc.parent());
}
@Test public void root() {
Document doc = Jsoup.parse("<div><p>Hello");
Element p = doc.select("p").first();
Node root = p.root();
assertSame(doc, root);
assertNull(root.parent());
assertSame(doc.root(), doc);
assertSame(doc.root(), doc.ownerDocument());
Element standAlone = new Element(Tag.valueOf("p"), "");
assertNull(standAlone.parent());
assertSame(standAlone.root(), standAlone);
assertNull(standAlone.ownerDocument());
}
@Test public void before() {
Document doc = Jsoup.parse("<p>One <b>two</b> three</p>");
Element newNode = new Element(Tag.valueOf("em"), "");
newNode.appendText("four");
doc.select("b").first().before(newNode);
assertEquals("<p>One <em>four</em><b>two</b> three</p>", doc.body().html());
doc.select("b").first().before("<i>five</i>");
assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", doc.body().html());
}
@Test public void after() {
Document doc = Jsoup.parse("<p>One <b>two</b> three</p>");
Element newNode = new Element(Tag.valueOf("em"), "");
newNode.appendText("four");
doc.select("b").first().after(newNode);
assertEquals("<p>One <b>two</b><em>four</em> three</p>", doc.body().html());
doc.select("b").first().after("<i>five</i>");
assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", doc.body().html());
}
@Test public void unwrap() {
Document doc = Jsoup.parse("<div>One <span>Two <b>Three</b></span> Four</div>");
Element span = doc.select("span").first();
Node twoText = span.childNode(0);
Node node = span.unwrap();
assertEquals("<div>One Two <b>Three</b> Four</div>", TextUtil.stripNewlines(doc.body().html()));
assertTrue(node instanceof TextNode);
assertEquals("Two ", ((TextNode) node).text());
assertEquals(node, twoText);
assertEquals(node.parent(), doc.select("div").first());
}
@Test public void unwrapNoChildren() {
Document doc = Jsoup.parse("<div>One <span></span> Two</div>");
Element span = doc.select("span").first();
Node node = span.unwrap();
assertEquals("<div>One  Two</div>", TextUtil.stripNewlines(doc.body().html()));
assertNull(node);
}
@Test public void traverse() {
Document doc = Jsoup.parse("<div><p>Hello</p></div><div>There</div>");
final StringBuilder accum = new StringBuilder();
doc.select("div").first().traverse(new NodeVisitor() {
@Override
public void head(Node node, int depth) {
accum.append("<").append(node.nodeName()).append(">");
}
@Override
public void tail(Node node, int depth) {
accum.append("</").append(node.nodeName()).append(">");
}
});
assertEquals("<div><p><#text></#text></p></div>", accum.toString());
}
@Test public void orphanNodeReturnsNullForSiblingElements() {
Node node = new Element(Tag.valueOf("p"), "");
Element el = new Element(Tag.valueOf("p"), "");
assertEquals(0, node.siblingIndex());
assertEquals(0, node.siblingNodes().size());
assertNull(node.previousSibling());
assertNull(node.nextSibling());
assertEquals(0, el.siblingElements().size());
assertNull(el.previousElementSibling());
assertNull(el.nextElementSibling());
}
@Test public void nodeIsNotASiblingOfItself() {
Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
Element p2 = doc.select("p").get(1);
assertEquals("Two", p2.text());
List<Node> nodes = p2.siblingNodes();
assertEquals(2, nodes.size());
assertEquals("<p>One</p>", nodes.get(0).outerHtml());
assertEquals("<p>Three</p>", nodes.get(1).outerHtml());
}
@Test public void childNodesCopy() {
Document doc = Jsoup.parse("<div id=1>Text 1 <p>One</p> Text 2 <p>Two<p>Three</div><div id=2>");
Element div1 = doc.select("#1").first();
Element div2 = doc.select("#2").first();
List<Node> divChildren = div1.childNodesCopy();
assertEquals(5, divChildren.size());
TextNode tn1 = (TextNode) div1.childNode(0);
TextNode tn2 = (TextNode) divChildren.get(0);
tn2.text("Text 1 updated");
assertEquals("Text 1 ", tn1.text());
div2.insertChildren(-1, divChildren);
assertEquals("<div id=\"1\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\"2\">Text 1 updated"
+"<p>One</p> Text 2 <p>Two</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html()));
}
@Test public void supportsClone() {
Document doc = org.jsoup.Jsoup.parse("<div class=foo>Text</div>");
Element el = doc.select("div").first();
assertTrue(el.hasClass("foo"));
Element elClone = doc.clone().select("div").first();
assertTrue(elClone.hasClass("foo"));
assertEquals("Text", elClone.text());
el.removeClass("foo");
el.text("None");
assertFalse(el.hasClass("foo"));
assertTrue(elClone.hasClass("foo"));
assertEquals("None", el.text());
assertEquals("Text", elClone.text());
}
@Test public void changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive() {
Document document = Jsoup.parse("<INPUT id=\"foo\" NAME=\"foo\" VALUE=\"\">");
Element inputElement = document.select("#foo").first();
inputElement.attr("value","bar");
assertEquals(singletonAttributes(), getAttributesCaseInsensitive(inputElement));
}
private Attributes getAttributesCaseInsensitive(Element element) {
Attributes matches = new Attributes();
for (Attribute attribute : element.attributes()) {
if (attribute.getKey().equalsIgnoreCase("value")) {
matches.put(attribute);
}
}
return matches;
}
private Attributes singletonAttributes() {
Attributes attributes = new Attributes();
attributes.put("value", "bar");
return attributes;
}
}
