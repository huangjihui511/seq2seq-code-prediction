package io.github.jhipster.sample.web.rest;
import io.github.jhipster.sample.domain.Label;
import io.github.jhipster.sample.repository.LabelRepository;
import io.github.jhipster.sample.web.rest.errors.BadRequestAlertException;
import io.github.jhipster.web.util.HeaderUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;
@RestController
@RequestMapping("/api")
@Transactional
public class LabelResource {
private final Logger log = LoggerFactory.getLogger(LabelResource.class);
private static final String ENTITY_NAME = "label";
@Value("${jhipster.clientApp.name}")
private String applicationName;
private final LabelRepository labelRepository;
public LabelResource(LabelRepository labelRepository) {
this.labelRepository = labelRepository;
}
@PostMapping("/labels")
public ResponseEntity<Label> createLabel(@Valid @RequestBody Label label) throws URISyntaxException {
log.debug("REST request to save Label : {}", label);
if (label.getId() != null) {
throw new BadRequestAlertException("A new label cannot already have an ID", ENTITY_NAME, "idexists");
}
Label result = labelRepository.save(label);
return ResponseEntity.created(new URI("/api/labels/" + result.getId()))
.headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))
.body(result);
}
@PutMapping("/labels")
public ResponseEntity<Label> updateLabel(@Valid @RequestBody Label label) throws URISyntaxException {
log.debug("REST request to update Label : {}", label);
if (label.getId() == null) {
throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
}
Label result = labelRepository.save(label);
return ResponseEntity.ok()
.headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, label.getId().toString()))
.body(result);
}
@GetMapping("/labels")
public List<Label> getAllLabels() {
log.debug("REST request to get all Labels");
return labelRepository.findAll();
}
@GetMapping("/labels/{id}")
public ResponseEntity<Label> getLabel(@PathVariable Long id) {
log.debug("REST request to get Label : {}", id);
Optional<Label> label = labelRepository.findById(id);
return ResponseUtil.wrapOrNotFound(label);
}
@DeleteMapping("/labels/{id}")
public ResponseEntity<Void> deleteLabel(@PathVariable Long id) {
log.debug("REST request to delete Label : {}", id);
labelRepository.deleteById(id);
return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();
}
}
