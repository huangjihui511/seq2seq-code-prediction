package com.alibaba.csp.sentinel.slots.block.flow.param;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import com.alibaba.csp.sentinel.slots.block.RuleConstant;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
public class ParamFlowRuleManagerTest {
@Before
public void setUp() {
ParamFlowRuleManager.loadRules(null);
ParameterMetricStorage.getMetricsMap().clear();
}
@After
public void tearDown() {
ParamFlowRuleManager.loadRules(null);
ParameterMetricStorage.getMetricsMap().clear();
}
@Test
public void testLoadParamRulesClearingUnusedMetrics() {
final String resA = "resA";
ParamFlowRule ruleA = new ParamFlowRule(resA)
.setCount(1)
.setParamIdx(0);
ParamFlowRuleManager.loadRules(Collections.singletonList(ruleA));
ParameterMetricStorage.getMetricsMap().put(resA, new ParameterMetric());
assertNotNull(ParameterMetricStorage.getParamMetricForResource(resA));
final String resB = "resB";
ParamFlowRule ruleB = new ParamFlowRule(resB)
.setCount(2)
.setParamIdx(1);
ParamFlowRuleManager.loadRules(Collections.singletonList(ruleB));
assertNull("The unused hot param metric should be cleared",
ParameterMetricStorage.getParamMetricForResource(resA));
}
@Test
public void testLoadParamRulesAndGet() {
final String resA = "abc";
final String resB = "foo";
final String resC = "baz";
ParamFlowRule ruleA = new ParamFlowRule(resA).setCount(10);
ParamFlowRule ruleB = new ParamFlowRule(resA)
.setCount(28)
.setParamIdx(1);
ParamFlowRule ruleC = new ParamFlowRule(resA)
.setCount(8)
.setParamIdx(1)
.setGrade(RuleConstant.FLOW_GRADE_THREAD);
ParamFlowRule ruleD = new ParamFlowRule(resB)
.setCount(9)
.setParamIdx(0)
.setParamFlowItemList(Arrays.asList(ParamFlowItem.newItem(7L, 6), ParamFlowItem.newItem(9L, 4)));
ParamFlowRuleManager.loadRules(Arrays.asList(ruleA, ruleB, ruleC, ruleD));
assertTrue(ParamFlowRuleManager.hasRules(resA));
assertTrue(ParamFlowRuleManager.hasRules(resB));
assertFalse(ParamFlowRuleManager.hasRules(resC));
List<ParamFlowRule> rulesForResA = ParamFlowRuleManager.getRulesOfResource(resA);
assertEquals(2, rulesForResA.size());
assertFalse(rulesForResA.contains(ruleA));
assertTrue(rulesForResA.contains(ruleB));
assertTrue(rulesForResA.contains(ruleC));
List<ParamFlowRule> rulesForResB = ParamFlowRuleManager.getRulesOfResource(resB);
assertEquals(1, rulesForResB.size());
assertEquals(ruleD, rulesForResB.get(0));
List<ParamFlowRule> allRules = ParamFlowRuleManager.getRules();
assertFalse(allRules.contains(ruleA));
assertTrue(allRules.contains(ruleB));
assertTrue(allRules.contains(ruleC));
assertTrue(allRules.contains(ruleD));
}
}
