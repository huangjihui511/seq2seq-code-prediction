package com.facebook.buck.parser.thrift;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-13")
public class BuildJobStateDaemonicParserState implements org.apache.thrift.TBase<BuildJobStateDaemonicParserState, BuildJobStateDaemonicParserState._Fields>, java.io.Serializable, Cloneable, Comparable<BuildJobStateDaemonicParserState> {
private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BuildJobStateDaemonicParserState");
private static final org.apache.thrift.protocol.TField CACHED_INCLUDES_FIELD_DESC = new org.apache.thrift.protocol.TField("cachedIncludes", org.apache.thrift.protocol.TType.MAP, (short)1);
private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
static {
schemes.put(StandardScheme.class, new BuildJobStateDaemonicParserStateStandardSchemeFactory());
schemes.put(TupleScheme.class, new BuildJobStateDaemonicParserStateTupleSchemeFactory());
}
public Map<String,List<String>> cachedIncludes; 
public enum _Fields implements org.apache.thrift.TFieldIdEnum {
CACHED_INCLUDES((short)1, "cachedIncludes");
private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
static {
for (_Fields field : EnumSet.allOf(_Fields.class)) {
byName.put(field.getFieldName(), field);
}
}
public static _Fields findByThriftId(int fieldId) {
switch(fieldId) {
case 1: 
return CACHED_INCLUDES;
default:
return null;
}
}
public static _Fields findByThriftIdOrThrow(int fieldId) {
_Fields fields = findByThriftId(fieldId);
if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
return fields;
}
public static _Fields findByName(String name) {
return byName.get(name);
}
private final short _thriftId;
private final String _fieldName;
_Fields(short thriftId, String fieldName) {
_thriftId = thriftId;
_fieldName = fieldName;
}
public short getThriftFieldId() {
return _thriftId;
}
public String getFieldName() {
return _fieldName;
}
}
private static final _Fields optionals[] = {_Fields.CACHED_INCLUDES};
public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
static {
Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
tmpMap.put(_Fields.CACHED_INCLUDES, new org.apache.thrift.meta_data.FieldMetaData("cachedIncludes", org.apache.thrift.TFieldRequirementType.OPTIONAL,
new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
metaDataMap = Collections.unmodifiableMap(tmpMap);
org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BuildJobStateDaemonicParserState.class, metaDataMap);
}
public BuildJobStateDaemonicParserState() {
}
public BuildJobStateDaemonicParserState(BuildJobStateDaemonicParserState other) {
if (other.isSetCachedIncludes()) {
Map<String,List<String>> __this__cachedIncludes = new HashMap<String,List<String>>(other.cachedIncludes.size());
for (Map.Entry<String, List<String>> other_element : other.cachedIncludes.entrySet()) {
String other_element_key = other_element.getKey();
List<String> other_element_value = other_element.getValue();
String __this__cachedIncludes_copy_key = other_element_key;
List<String> __this__cachedIncludes_copy_value = new ArrayList<String>(other_element_value);
__this__cachedIncludes.put(__this__cachedIncludes_copy_key, __this__cachedIncludes_copy_value);
}
this.cachedIncludes = __this__cachedIncludes;
}
}
public BuildJobStateDaemonicParserState deepCopy() {
return new BuildJobStateDaemonicParserState(this);
}
@Override
public void clear() {
this.cachedIncludes = null;
}
public int getCachedIncludesSize() {
return (this.cachedIncludes == null) ? 0 : this.cachedIncludes.size();
}
public void putToCachedIncludes(String key, List<String> val) {
if (this.cachedIncludes == null) {
this.cachedIncludes = new HashMap<String,List<String>>();
}
this.cachedIncludes.put(key, val);
}
public Map<String,List<String>> getCachedIncludes() {
return this.cachedIncludes;
}
public BuildJobStateDaemonicParserState setCachedIncludes(Map<String,List<String>> cachedIncludes) {
this.cachedIncludes = cachedIncludes;
return this;
}
public void unsetCachedIncludes() {
this.cachedIncludes = null;
}
public boolean isSetCachedIncludes() {
return this.cachedIncludes != null;
}
public void setCachedIncludesIsSet(boolean value) {
if (!value) {
this.cachedIncludes = null;
}
}
public void setFieldValue(_Fields field, Object value) {
switch (field) {
case CACHED_INCLUDES:
if (value == null) {
unsetCachedIncludes();
} else {
setCachedIncludes((Map<String,List<String>>)value);
}
break;
}
}
public Object getFieldValue(_Fields field) {
switch (field) {
case CACHED_INCLUDES:
return getCachedIncludes();
}
throw new IllegalStateException();
}
public boolean isSet(_Fields field) {
if (field == null) {
throw new IllegalArgumentException();
}
switch (field) {
case CACHED_INCLUDES:
return isSetCachedIncludes();
}
throw new IllegalStateException();
}
@Override
public boolean equals(Object that) {
if (that == null)
return false;
if (that instanceof BuildJobStateDaemonicParserState)
return this.equals((BuildJobStateDaemonicParserState)that);
return false;
}
public boolean equals(BuildJobStateDaemonicParserState that) {
if (that == null)
return false;
boolean this_present_cachedIncludes = true && this.isSetCachedIncludes();
boolean that_present_cachedIncludes = true && that.isSetCachedIncludes();
if (this_present_cachedIncludes || that_present_cachedIncludes) {
if (!(this_present_cachedIncludes && that_present_cachedIncludes))
return false;
if (!this.cachedIncludes.equals(that.cachedIncludes))
return false;
}
return true;
}
@Override
public int hashCode() {
List<Object> list = new ArrayList<Object>();
boolean present_cachedIncludes = true && (isSetCachedIncludes());
list.add(present_cachedIncludes);
if (present_cachedIncludes)
list.add(cachedIncludes);
return list.hashCode();
}
@Override
public int compareTo(BuildJobStateDaemonicParserState other) {
if (!getClass().equals(other.getClass())) {
return getClass().getName().compareTo(other.getClass().getName());
}
int lastComparison = 0;
lastComparison = Boolean.valueOf(isSetCachedIncludes()).compareTo(other.isSetCachedIncludes());
if (lastComparison != 0) {
return lastComparison;
}
if (isSetCachedIncludes()) {
lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cachedIncludes, other.cachedIncludes);
if (lastComparison != 0) {
return lastComparison;
}
}
return 0;
}
public _Fields fieldForId(int fieldId) {
return _Fields.findByThriftId(fieldId);
}
public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
}
public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
}
@Override
public String toString() {
StringBuilder sb = new StringBuilder("BuildJobStateDaemonicParserState(");
boolean first = true;
if (isSetCachedIncludes()) {
sb.append("cachedIncludes:");
if (this.cachedIncludes == null) {
sb.append("null");
} else {
sb.append(this.cachedIncludes);
}
first = false;
}
sb.append(")");
return sb.toString();
}
public void validate() throws org.apache.thrift.TException {
}
private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
try {
write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
} catch (org.apache.thrift.TException te) {
throw new java.io.IOException(te);
}
}
private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
try {
read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
} catch (org.apache.thrift.TException te) {
throw new java.io.IOException(te);
}
}
private static class BuildJobStateDaemonicParserStateStandardSchemeFactory implements SchemeFactory {
public BuildJobStateDaemonicParserStateStandardScheme getScheme() {
return new BuildJobStateDaemonicParserStateStandardScheme();
}
}
private static class BuildJobStateDaemonicParserStateStandardScheme extends StandardScheme<BuildJobStateDaemonicParserState> {
public void read(org.apache.thrift.protocol.TProtocol iprot, BuildJobStateDaemonicParserState struct) throws org.apache.thrift.TException {
org.apache.thrift.protocol.TField schemeField;
iprot.readStructBegin();
while (true)
{
schemeField = iprot.readFieldBegin();
if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
break;
}
switch (schemeField.id) {
case 1: 
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
struct.cachedIncludes = new HashMap<String,List<String>>(2*_map0.size);
String _key1;
List<String> _val2;
for (int _i3 = 0; _i3 < _map0.size; ++_i3)
{
_key1 = iprot.readString();
{
org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
_val2 = new ArrayList<String>(_list4.size);
String _elem5;
for (int _i6 = 0; _i6 < _list4.size; ++_i6)
{
_elem5 = iprot.readString();
_val2.add(_elem5);
}
iprot.readListEnd();
}
struct.cachedIncludes.put(_key1, _val2);
}
iprot.readMapEnd();
}
struct.setCachedIncludesIsSet(true);
} else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
}
break;
default:
org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
public void write(org.apache.thrift.protocol.TProtocol oprot, BuildJobStateDaemonicParserState struct) throws org.apache.thrift.TException {
struct.validate();
oprot.writeStructBegin(STRUCT_DESC);
if (struct.cachedIncludes != null) {
if (struct.isSetCachedIncludes()) {
oprot.writeFieldBegin(CACHED_INCLUDES_FIELD_DESC);
{
oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.cachedIncludes.size()));
for (Map.Entry<String, List<String>> _iter7 : struct.cachedIncludes.entrySet())
{
oprot.writeString(_iter7.getKey());
{
oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter7.getValue().size()));
for (String _iter8 : _iter7.getValue())
{
oprot.writeString(_iter8);
}
oprot.writeListEnd();
}
}
oprot.writeMapEnd();
}
oprot.writeFieldEnd();
}
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}
}
private static class BuildJobStateDaemonicParserStateTupleSchemeFactory implements SchemeFactory {
public BuildJobStateDaemonicParserStateTupleScheme getScheme() {
return new BuildJobStateDaemonicParserStateTupleScheme();
}
}
private static class BuildJobStateDaemonicParserStateTupleScheme extends TupleScheme<BuildJobStateDaemonicParserState> {
@Override
public void write(org.apache.thrift.protocol.TProtocol prot, BuildJobStateDaemonicParserState struct) throws org.apache.thrift.TException {
TTupleProtocol oprot = (TTupleProtocol) prot;
BitSet optionals = new BitSet();
if (struct.isSetCachedIncludes()) {
optionals.set(0);
}
oprot.writeBitSet(optionals, 1);
if (struct.isSetCachedIncludes()) {
{
oprot.writeI32(struct.cachedIncludes.size());
for (Map.Entry<String, List<String>> _iter9 : struct.cachedIncludes.entrySet())
{
oprot.writeString(_iter9.getKey());
{
oprot.writeI32(_iter9.getValue().size());
for (String _iter10 : _iter9.getValue())
{
oprot.writeString(_iter10);
}
}
}
}
}
}
@Override
public void read(org.apache.thrift.protocol.TProtocol prot, BuildJobStateDaemonicParserState struct) throws org.apache.thrift.TException {
TTupleProtocol iprot = (TTupleProtocol) prot;
BitSet incoming = iprot.readBitSet(1);
if (incoming.get(0)) {
{
org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
struct.cachedIncludes = new HashMap<String,List<String>>(2*_map11.size);
String _key12;
List<String> _val13;
for (int _i14 = 0; _i14 < _map11.size; ++_i14)
{
_key12 = iprot.readString();
{
org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
_val13 = new ArrayList<String>(_list15.size);
String _elem16;
for (int _i17 = 0; _i17 < _list15.size; ++_i17)
{
_elem16 = iprot.readString();
_val13.add(_elem16);
}
}
struct.cachedIncludes.put(_key12, _val13);
}
}
struct.setCachedIncludesIsSet(true);
}
}
}
}
