package com.oracle.truffle.llvm.parser.model.symbols.instructions;
import com.oracle.truffle.llvm.parser.model.SymbolTable;
import com.oracle.truffle.llvm.parser.model.visitors.SymbolVisitor;
import com.oracle.truffle.llvm.runtime.types.Type;
import com.oracle.truffle.llvm.parser.model.SymbolImpl;
public final class InsertValueInstruction extends ValueInstruction {
private SymbolImpl aggregate;
private SymbolImpl value;
private final int index;
private InsertValueInstruction(Type type, int index) {
super(type);
this.index = index;
}
@Override
public void accept(SymbolVisitor visitor) {
visitor.visit(this);
}
public SymbolImpl getAggregate() {
return aggregate;
}
public int getIndex() {
return index;
}
public SymbolImpl getValue() {
return value;
}
@Override
public void replace(SymbolImpl original, SymbolImpl replacement) {
if (aggregate == original) {
aggregate = replacement;
}
if (value == original) {
value = replacement;
}
}
public static InsertValueInstruction fromSymbols(SymbolTable symbols, Type type, int aggregate, int index, int value) {
final InsertValueInstruction inst = new InsertValueInstruction(type, index);
inst.aggregate = symbols.getForwardReferenced(aggregate, inst);
inst.value = symbols.getForwardReferenced(value, inst);
return inst;
}
}
