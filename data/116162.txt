package org.cybergarage.upnp.ssdp;
import java.net.InetAddress;
import java.util.Vector;
import org.cybergarage.net.HostInterface;
import org.cybergarage.upnp.device.SearchListener;
public class SSDPSearchSocketList extends Vector<SSDPSearchSocket>
{
private InetAddress[] binds = null;
private String multicastIPv4 = SSDP.ADDRESS;
private String multicastIPv6 = SSDP.getIPv6Address();
private int port = SSDP.PORT;
public SSDPSearchSocketList()
{
}
public SSDPSearchSocketList(InetAddress[] binds) {
this.binds = binds;
}
public SSDPSearchSocketList(InetAddress[] binds,int port, String multicastIPv4, String multicastIPv6) {
this.binds = binds;
this.port = port;
this.multicastIPv4 = multicastIPv4;
this.multicastIPv6 = multicastIPv6;
}
public SSDPSearchSocket getSSDPSearchSocket(int n)
{
return get(n);
}
public void addSearchListener(SearchListener listener)
{
int nServers = size();
for (int n=0; n<nServers; n++) {
SSDPSearchSocket sock = getSSDPSearchSocket(n);
sock.addSearchListener(listener);
}
}
public boolean open() {
InetAddress[] binds=this.binds;
String[] bindAddresses;
if(binds!=null){
bindAddresses = new String[binds.length];
for (int i = 0; i < binds.length; i++) {
bindAddresses[i] = binds[i].getHostAddress();
}
}else{
int nHostAddrs = HostInterface.getNHostAddresses();
bindAddresses = new String[nHostAddrs];
for (int n=0; n<nHostAddrs; n++) {
bindAddresses[n] = HostInterface.getHostAddress(n);
}
}
for (int i = 0; i < bindAddresses.length; i++) {
if(bindAddresses[i]!=null){
SSDPSearchSocket ssdpSearchSocket;
if(HostInterface.isIPv6Address(bindAddresses[i]))
ssdpSearchSocket = new SSDPSearchSocket(bindAddresses[i],port ,multicastIPv6 );
else
ssdpSearchSocket = new SSDPSearchSocket(bindAddresses[i],port,multicastIPv4 );
add(ssdpSearchSocket);
}
}
return true;
}
public void close()
{
int nSockets = size();
for (int n=0; n<nSockets; n++) {
SSDPSearchSocket sock = getSSDPSearchSocket(n);
sock.close();
}
clear();
}
public void start()
{
int nSockets = size();
for (int n=0; n<nSockets; n++) {
SSDPSearchSocket sock = getSSDPSearchSocket(n);
sock.start();
}
}
public void stop()
{
int nSockets = size();
for (int n=0; n<nSockets; n++) {
SSDPSearchSocket sock = getSSDPSearchSocket(n);
sock.stop();
}
}
}
