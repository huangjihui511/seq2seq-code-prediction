package org.spongepowered.api.data.manipulator.mutable.common;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.data.DataContainer;
import org.spongepowered.api.data.key.Key;
import org.spongepowered.api.data.manipulator.DataManipulator;
import org.spongepowered.api.data.manipulator.ImmutableDataManipulator;
import org.spongepowered.api.data.value.BaseValue;
import org.spongepowered.api.data.value.mutable.Value;
public abstract class AbstractBooleanData<M extends DataManipulator<M, I>, I extends ImmutableDataManipulator<I, M>> extends
AbstractSingleData<Boolean, M, I> {
@Deprecated
@SuppressWarnings("unchecked")
protected AbstractBooleanData(boolean value, Key<? extends BaseValue<Boolean>> usedKey, boolean defaultValue) {
this((Key<Value<Boolean>>) usedKey, value, defaultValue);
}
protected AbstractBooleanData(Key<Value<Boolean>> usedKey, boolean value) {
super(usedKey, value);
}
protected AbstractBooleanData(Key<Value<Boolean>> usedKey, boolean value, boolean defaultValue) {
super(usedKey, value, defaultValue);
}
@SuppressWarnings("unchecked")
@Override
protected Value<Boolean> getValueGetter() {
return Sponge.getRegistry().getValueFactory().createValue((Key<Value<Boolean>>) this.usedKey, this.value, this.defaultValue);
}
@Override
public DataContainer toContainer() {
return super.toContainer();
}
}
