package com.taobao.taokeeper.monitor.core.task.runable;
import static com.taobao.taokeeper.common.constant.SystemConstant.DELAY_SECS_OF_TWO_SERVER_ALIVE_CHECK_ZOOKEEPER;
import static com.taobao.taokeeper.common.constant.SystemConstant.ZOOKEEPER_MONITOR_PATH;
import static common.toolkit.java.constant.EmptyObjectConstant.EMPTY_STRING;
import static common.toolkit.java.constant.SymbolConstant.COLON;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.taobao.taokeeper.common.GlobalInstance;
import com.taobao.taokeeper.model.AlarmSettings;
import com.taobao.taokeeper.model.Subscriber;
import com.taobao.taokeeper.model.ZooKeeperCluster;
import com.taobao.taokeeper.model.type.Message;
import com.taobao.taokeeper.monitor.core.ThreadPoolManager;
import com.taobao.taokeeper.reporter.alarm.TbMessageSender;
import common.toolkit.java.util.ObjectUtil;
import common.toolkit.java.util.StringUtil;
import common.toolkit.java.util.io.ServletUtil;
public class ZKServerAliveCheck implements Runnable {
private static final Logger LOG = LoggerFactory.getLogger( ZKServerAliveCheck.class );
private ZooKeeperCluster zooKeeperCluster;
private AlarmSettings alarmSettings;
public ZKServerAliveCheck( ZooKeeperCluster zooKeeperCluster, AlarmSettings alarmSettings ) {
this.zooKeeperCluster = zooKeeperCluster;
this.alarmSettings    = alarmSettings;
}
@Override
public void run() {
try {
checkAliveAndAlarm();
} catch ( Exception e ) {
LOG.error( "Exception when check zk server alive, Error: " + e.getMessage(), e );
}
}
public void checkAliveAndAlarm() {
try {
if ( ObjectUtil.isBlank( this.zooKeeperCluster, this.alarmSettings ) || ObjectUtil.isBlank( this.zooKeeperCluster.getServerList() ) )
return;
List< String > serverList = this.zooKeeperCluster.getServerList();
if ( null == serverList || serverList.isEmpty() ) {
return;
}
for ( String server : serverList ) {
if ( StringUtil.isBlank( server ) )
continue;
String zkIp = ServletUtil.paraseIpAndPortFromServer( server )[0] ;
if ( 0 == GlobalInstance.getZooKeeperStatusType( zkIp ) ){
LOG.info( zkIp + " is checking, no need to check." );
continue;
}
GlobalInstance.putZooKeeperStatusType( zkIp, 0 );
LOG.info( zkIp + " not check, start to check now time..." );
String ip = server.split( COLON )[0];
String wangwangList = alarmSettings.getWangwangList();
String phoneList = alarmSettings.getPhoneList();
if ( !StringUtil.isBlank( alarmSettings.getMaxDelayOfCheck() ) ) {
Subscriber sub = null;
try {
sub = new Subscriber( server, ZOOKEEPER_MONITOR_PATH, Integer.parseInt( alarmSettings.getMaxDelayOfCheck() ) );
if ( !sub.checkIfAlive() ) {
GlobalInstance.putZooKeeperStatusType( ip, 2 );
if ( GlobalInstance.needAlarm.get() ) {
}
continue;
}
GlobalInstance.putZooKeeperStatusType( ip, 1 );
continue;
}
GlobalInstance.putZooKeeperStatusType( ip, 1 );
continue;
} catch ( Throwable e ) {
if ( GlobalInstance.needAlarm.get() ) {
}
GlobalInstance.putZooKeeperStatusType( ip, 2 );
LOG.info( "Exception when check #-" + this.zooKeeperCluster.getClusterName() + "-" + server + ", Error: " + e.getMessage(), e );
} finally {
if ( null != sub ) {
sub.close();
sub = null;
}
}
try {
Thread.sleep( 1000 * DELAY_SECS_OF_TWO_SERVER_ALIVE_CHECK_ZOOKEEPER );
} catch ( InterruptedException e ) {
}
}
return;
} catch ( Exception e ) {
LOG.error( "Exception when check zk server alive, Error: " + e.getMessage(), e );
} finally {
GlobalInstance.removeFromAllCheckingCluster( this.zooKeeperCluster.getClusterId() + EMPTY_STRING );
}
}
}
