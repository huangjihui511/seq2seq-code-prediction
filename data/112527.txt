import java.awt.BorderLayout;
import java.awt.Insets;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
public class TreeDemo extends DemoModule {
JTree tree;
public static void main(String[] args) {
TreeDemo demo = new TreeDemo(null);
demo.mainImpl();
}
@Override public String getName() {
};
public TreeDemo(SwingSet2 swingset) {
super(swingset, "TreeDemo", "toolbar/JTree.gif");
getDemoPanel().add(createTree(), BorderLayout.CENTER);
}
public JComponent createTree() {
DefaultMutableTreeNode top = new DefaultMutableTreeNode(getString("TreeDemo.music"));
DefaultMutableTreeNode catagory = null ;
DefaultMutableTreeNode artist = null;
DefaultMutableTreeNode record = null;
URL url = getClass().getResource("/resources/tree.txt");
try {
InputStream is = url.openStream();
InputStreamReader isr = new InputStreamReader(is, "UTF-8");
BufferedReader reader = new BufferedReader(isr);
String line = reader.readLine();
while(line != null) {
char linetype = line.charAt(0);
switch(linetype) {
case 'C':
catagory = new DefaultMutableTreeNode(line.substring(2));
top.add(catagory);
break;
case 'A':
if(catagory != null) {
catagory.add(artist = new DefaultMutableTreeNode(line.substring(2)));
}
break;
case 'R':
if(artist != null) {
artist.add(record = new DefaultMutableTreeNode(line.substring(2)));
}
break;
case 'S':
if(record != null) {
record.add(new DefaultMutableTreeNode(line.substring(2)));
}
break;
default:
break;
}
line = reader.readLine();
}
} catch (IOException e) {
}
tree = new JTree(top) {
public Insets getInsets() {
return new Insets(5,5,5,5);
}
};
tree.setEditable(true);
return new JScrollPane(tree);
}
void updateDragEnabled(boolean dragEnabled) {
tree.setDragEnabled(dragEnabled);
}
}
