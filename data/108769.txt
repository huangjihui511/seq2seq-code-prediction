package cn.hutool.core.text;
import cn.hutool.core.util.NumberUtil;
import cn.hutool.core.util.StrUtil;
public class TextSimilarity {
public static double similar(String strA, String strB) {
String newStrA, newStrB;
if (strA.length() < strB.length()) {
newStrA = removeSign(strB);
newStrB = removeSign(strA);
} else {
newStrA = removeSign(strA);
newStrB = removeSign(strB);
}
int temp = Math.max(newStrA.length(), newStrB.length());
if(0 == temp) {
return 1;
}
int temp2 = longestCommonSubstring(newStrA, newStrB).length();
return NumberUtil.div(temp2, temp);
}
public static String similar(String strA, String strB, int scale) {
return NumberUtil.formatPercent(similar(strA, strB), scale);
}
private static String removeSign(String str) {
int length = str.length();
StringBuilder sb = StrUtil.builder(length);
char c;
for (int i = 0; i < length; i++) {
c = str.charAt(i);
if(isValidChar(c)) {
sb.append(c);
}
}
return sb.toString();
}
private static boolean isValidChar(char charValue) {
return (charValue >= 0x4E00 && charValue <= 0X9FFF) || 
(charValue >= 'a' && charValue <= 'z') || 
(charValue >= 'A' && charValue <= 'Z') || 
(charValue >= '0' && charValue <= '9');
}
private static String longestCommonSubstring(String strA, String strB) {
char[] chars_strA = strA.toCharArray();
char[] chars_strB = strB.toCharArray();
int m = chars_strA.length;
int n = chars_strB.length;
int[][] matrix = new int[m + 1][n + 1];
for (int i = 1; i <= m; i++) {
for (int j = 1; j <= n; j++) {
if (chars_strA[i - 1] == chars_strB[j - 1]) {
matrix[i][j] = matrix[i - 1][j - 1] + 1;
} else {
matrix[i][j] = Math.max(matrix[i][j - 1], matrix[i - 1][j]);
}
}
}
char[] result = new char[matrix[m][n]];
int currentIndex = result.length - 1;
while (matrix[m][n] != 0) {
if (matrix[m][n] == matrix[m][n - 1]) {
n--;
} else if (matrix[m][n] == matrix[m - 1][n]) {
m--;
} else {
result[currentIndex] = chars_strA[m - 1];
currentIndex--;
n--;
m--;
}
}
return new String(result);
}
}
