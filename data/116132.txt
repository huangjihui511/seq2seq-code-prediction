package net.i2p.router.networkdb.kademlia;
import java.util.NoSuchElementException;
import java.util.Set;
import net.i2p.data.DatabaseEntry;
import net.i2p.data.Hash;
import net.i2p.data.LeaseSet;
import net.i2p.data.LeaseSet2;
import net.i2p.router.Job;
import net.i2p.router.RouterContext;
import net.i2p.util.Log;
class FloodfillStoreJob extends StoreJob {
private final FloodfillNetworkDatabaseFacade _facade;
private static final String PROP_RI_VERIFY = "router.verifyRouterInfoStore";
public FloodfillStoreJob(RouterContext context, FloodfillNetworkDatabaseFacade facade, Hash key, DatabaseEntry data, Job onSuccess, Job onFailure, long timeoutMs) {
this(context, facade, key, data, onSuccess, onFailure, timeoutMs, null);
}
public FloodfillStoreJob(RouterContext context, FloodfillNetworkDatabaseFacade facade, Hash key, DatabaseEntry data,
Job onSuccess, Job onFailure, long timeoutMs, Set<Hash> toSkip) {
super(context, facade, key, data, onSuccess, onFailure, timeoutMs, toSkip);
_facade = facade;
}
@Override
protected int getParallelization() { return 1; }
@Override
protected int getRedundancy() { return 1; }
@Override
protected void succeed() {
super.succeed();
final boolean shouldLog = _log.shouldInfo();
final Hash key = _state.getTarget();
if (_facade.isVerifyInProgress(key)) {
if (shouldLog)
_log.info("Skipping verify, one already in progress for: " + key);
return;
}
if (getContext().router().gracefulShutdownInProgress()) {
if (shouldLog)
_log.info("Skipping verify, shutdown in progress for: " + key);
return;
}
DatabaseEntry data = _state.getData();
final int type = data.getType();
final boolean isRouterInfo = type == DatabaseEntry.KEY_TYPE_ROUTERINFO;
if (isRouterInfo && !getContext().getBooleanProperty(PROP_RI_VERIFY)) {
_facade.routerInfoPublishSuccessful();
return;
}
final boolean isls2 = data.isLeaseSet() && type != DatabaseEntry.KEY_TYPE_LEASESET;
long published;
if (isls2) {
LeaseSet2 ls2 = (LeaseSet2) data;
published = ls2.getPublished();
} else {
published = data.getDate();
}
Hash sentTo = null;
try {
sentTo = _state.getSuccessful().iterator().next();
} catch (NoSuchElementException nsee) {}
Hash client;
if (type == DatabaseEntry.KEY_TYPE_ENCRYPTED_LS2) {
client = ((LeaseSet)data).getDestination().calculateHash();
} else {
client = key;
}
Job fvsj = new FloodfillVerifyStoreJob(getContext(), key, client,
published, type,
sentTo, _facade);
if (shouldLog)
_log.info(getJobId() + ": Succeeded sending key " + key +
", queueing verify job " + fvsj.getJobId());
getContext().jobQueue().addJob(fvsj);
}
@Override
public String getName() { return "Floodfill netDb store"; }
}
