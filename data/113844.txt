package psiprobe.beans;
import java.io.File;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.inject.Inject;
import javax.servlet.ServletContext;
import org.apache.catalina.Context;
import org.apache.catalina.Loader;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ClassUtils;
import psiprobe.model.Application;
import psiprobe.model.DisconnectedLogDestination;
import psiprobe.tools.ApplicationUtils;
import psiprobe.tools.Instruments;
import psiprobe.tools.logging.FileLogAccessor;
import psiprobe.tools.logging.LogDestination;
import psiprobe.tools.logging.catalina.CatalinaLoggerAccessor;
import psiprobe.tools.logging.commons.CommonsLoggerAccessor;
import psiprobe.tools.logging.jdk.Jdk14LoggerAccessor;
import psiprobe.tools.logging.jdk.Jdk14ManagerAccessor;
import psiprobe.tools.logging.log4j.Log4JLoggerAccessor;
import psiprobe.tools.logging.log4j.Log4JManagerAccessor;
import psiprobe.tools.logging.log4j2.Log4J2AppenderAccessor;
import psiprobe.tools.logging.log4j2.Log4J2LoggerConfigAccessor;
import psiprobe.tools.logging.log4j2.Log4J2LoggerContextAccessor;
import psiprobe.tools.logging.log4j2.Log4J2WebLoggerContextUtilsAccessor;
import psiprobe.tools.logging.logback.LogbackFactoryAccessor;
import psiprobe.tools.logging.logback.LogbackLoggerAccessor;
import psiprobe.tools.logging.slf4jlogback.TomcatSlf4jLogbackFactoryAccessor;
import psiprobe.tools.logging.slf4jlogback.TomcatSlf4jLogbackLoggerAccessor;
public class LogResolverBean {
private static final Logger logger = LoggerFactory.getLogger(LogResolverBean.class);
@Inject
private ContainerWrapperBean containerWrapper;
private List<String> stdoutFiles = new ArrayList<>();
public ContainerWrapperBean getContainerWrapper() {
return containerWrapper;
}
public void setContainerWrapper(ContainerWrapperBean containerWrapper) {
this.containerWrapper = containerWrapper;
}
public List<String> getStdoutFiles() {
return stdoutFiles;
}
@Autowired
public void setStdoutFiles(List<String> stdoutFiles) {
logger.info("stdoutFiles {}", stdoutFiles);
this.stdoutFiles = stdoutFiles;
}
public List<LogDestination> getLogDestinations(boolean all) {
List<LogDestination> allAppenders = getAllLogDestinations();
if (allAppenders == null) {
return null;
}
List<LogDestination> uniqueList = new LinkedList<>();
AbstractLogComparator cmp = new LogDestinationComparator(all);
Collections.sort(allAppenders, cmp);
for (LogDestination dest : allAppenders) {
if (Collections.binarySearch(uniqueList, dest, cmp) < 0) {
if (all || dest.getFile() == null || dest.getFile().exists()) {
uniqueList.add(new DisconnectedLogDestination().builder(dest));
}
}
}
return uniqueList;
}
public List<LogDestination> getLogSources(File logFile) {
List<LogDestination> filtered = new LinkedList<>();
List<LogDestination> sources = getLogSources();
for (LogDestination dest : sources) {
if (logFile.equals(dest.getFile())) {
filtered.add(dest);
}
}
return filtered;
}
public List<LogDestination> getLogSources() {
List<LogDestination> sources = new LinkedList<>();
List<LogDestination> allAppenders = getAllLogDestinations();
if (allAppenders != null) {
AbstractLogComparator cmp = new LogSourceComparator();
Collections.sort(allAppenders, cmp);
for (LogDestination dest : allAppenders) {
if (Collections.binarySearch(sources, dest, cmp) < 0) {
sources.add(new DisconnectedLogDestination().builder(dest));
}
}
}
return sources;
}
private List<LogDestination> getAllLogDestinations() {
if (!Instruments.isInitialized()) {
return null;
}
List<LogDestination> allAppenders = new ArrayList<>();
ClassLoader cl2 = Thread.currentThread().getContextClassLoader().getParent();
while (cl2 != null) {
interrogateClassLoader(cl2, null, allAppenders);
cl2 = cl2.getParent();
}
interrogateStdOutFiles(allAppenders);
List<Context> contexts = getContainerWrapper().getTomcatContainer().findContexts();
for (Context ctx : contexts) {
interrogateContext(ctx, allAppenders);
}
return allAppenders;
}
public LogDestination getLogDestination(String logType, String webapp, boolean context,
boolean root, String logName, String logIndex) {
LogDestination result = null;
Context ctx = null;
Application application = null;
if (webapp != null) {
ctx = getContainerWrapper().getTomcatContainer().findContext(webapp);
if (ctx != null) {
application = ApplicationUtils.getApplication(ctx, getContainerWrapper());
}
}
if (logName != null && "stdout".equals(logType)) {
result = getStdoutLogDestination(logName);
} else if (ctx != null && "catalina".equals(logType)) {
result = getCatalinaLogDestination(ctx, application);
} else if (logIndex != null && ("jdk".equals(logType) || "log4j".equals(logType)
|| "log4j2".equals(logType) || "logback".equals(logType))
|| "tomcatSlf4jLogback".equals(logType)) {
if (context && ctx != null && !"log4j2".equals(logType)) {
result = getCommonsLogDestination(ctx, application, logIndex);
} else if (ctx != null && "log4j2".equals(logType)) {
result = getLog4J2LogDestination(ctx, application, root, logName, logIndex);
} else {
ClassLoader cl;
ClassLoader prevCl = null;
if (ctx != null) {
cl = ctx.getLoader().getClassLoader();
prevCl = ClassUtils.overrideThreadContextClassLoader(cl);
} else {
cl = Thread.currentThread().getContextClassLoader().getParent();
}
try {
if ((root || logName != null) && logIndex != null) {
if ("jdk".equals(logType)) {
result = getJdk14LogDestination(cl, application, root, logName, logIndex);
} else if ("log4j".equals(logType)) {
result = getLog4JLogDestination(cl, application, root, logName, logIndex);
} else if ("logback".equals(logType)) {
result = getLogbackLogDestination(cl, application, root, logName, logIndex);
} else if ("tomcatSlf4jLogback".equals(logType)) {
result = getLogbackTomcatJuliLogDestination(cl, application, root, logName, logIndex);
}
}
} finally {
if (prevCl != null) {
ClassUtils.overrideThreadContextClassLoader(prevCl);
}
}
}
}
return result;
}
private void interrogateContext(Context ctx, List<LogDestination> allAppenders) {
Application application = ApplicationUtils.getApplication(ctx, getContainerWrapper());
ClassLoader cl = ctx.getLoader().getClassLoader();
Object contextLogger = ctx.getLogger();
if (contextLogger != null) {
if (contextLogger.getClass().getName().startsWith("org.apache.commons.logging")) {
CommonsLoggerAccessor commonsAccessor = new CommonsLoggerAccessor();
commonsAccessor.setTarget(contextLogger);
commonsAccessor.setApplication(application);
allAppenders.addAll(commonsAccessor.getDestinations());
} else if (contextLogger.getClass().getName().startsWith("org.apache.catalina.logger")) {
CatalinaLoggerAccessor catalinaAccessor = new CatalinaLoggerAccessor();
catalinaAccessor.setApplication(application);
catalinaAccessor.setTarget(contextLogger);
allAppenders.add(catalinaAccessor);
}
ServletContext servletContext = ctx.getServletContext();
try {
Log4J2LoggerContextAccessor loggerContextAccessor = null;
try {
Log4J2WebLoggerContextUtilsAccessor webLoggerContextUtilsAccessor =
new Log4J2WebLoggerContextUtilsAccessor(cl);
loggerContextAccessor = webLoggerContextUtilsAccessor.getWebLoggerContext(servletContext);
} catch (Exception e) {
logger.debug("Log4J2LoggerContextAccessor instantiation failed", e);
}
List<Object> loggerContexts = getLoggerContexts(cl);
for (Object loggerContext : loggerContexts) {
Map<String, Object> loggerConfigs = getLoggerConfigs(loggerContext);
for (Object loggerConfig : loggerConfigs.values()) {
Log4J2LoggerConfigAccessor logConfigAccessor = new Log4J2LoggerConfigAccessor();
logConfigAccessor.setTarget(loggerConfig);
logConfigAccessor.setApplication(application);
logConfigAccessor.setContext(true);
logConfigAccessor.setLoggerContext(loggerContextAccessor);
Method getAppenders =
MethodUtils.getAccessibleMethod(loggerConfig.getClass(), "getAppenders");
@SuppressWarnings("unchecked")
Map<String, Object> appenders = (Map<String, Object>) getAppenders.invoke(loggerConfig);
for (Object appender : appenders.values()) {
Log4J2AppenderAccessor appenderAccessor = new Log4J2AppenderAccessor();
appenderAccessor.setTarget(appender);
appenderAccessor.setLoggerAccessor(logConfigAccessor);
appenderAccessor.setApplication(application);
allAppenders.add(appenderAccessor);
}
}
}
} catch (Exception e) {
logger.debug("getting appenders failed", e);
}
}
if (application.isAvailable()) {
ClassLoader prevCl = ClassUtils.overrideThreadContextClassLoader(cl);
try {
interrogateClassLoader(cl, application, allAppenders);
} catch (Exception e) {
logger.error(
"Could not interrogate classloader loggers for {}. Enable debug logging to see the trace stack",
ctx.getName());
logger.debug("", e);
} finally {
if (prevCl != null) {
ClassUtils.overrideThreadContextClassLoader(prevCl);
}
}
}
}
private void interrogateClassLoader(ClassLoader cl, Application application,
List<LogDestination> appenders) {
String applicationName =
application != null ? "application \"" + application.getName() + "\"" : "server";
try {
Jdk14ManagerAccessor jdk14accessor = new Jdk14ManagerAccessor(cl);
jdk14accessor.setApplication(application);
appenders.addAll(jdk14accessor.getHandlers());
} catch (Exception e) {
logger.debug("Could not resolve JDK loggers for '{}'", applicationName, e);
}
try {
Log4JManagerAccessor log4JAccessor = new Log4JManagerAccessor(cl);
log4JAccessor.setApplication(application);
appenders.addAll(log4JAccessor.getAppenders());
} catch (Exception e) {
logger.debug("Could not resolve log4j loggers for '{}'", applicationName, e);
}
try {
LogbackFactoryAccessor logbackAccessor = new LogbackFactoryAccessor(cl);
logbackAccessor.setApplication(application);
appenders.addAll(logbackAccessor.getAppenders());
} catch (Exception e) {
logger.debug("Could not resolve logback loggers for '{}'", applicationName, e);
}
try {
TomcatSlf4jLogbackFactoryAccessor tomcatSlf4jLogbackAccessor =
new TomcatSlf4jLogbackFactoryAccessor(cl);
tomcatSlf4jLogbackAccessor.setApplication(application);
appenders.addAll(tomcatSlf4jLogbackAccessor.getAppenders());
} catch (Exception e) {
logger.debug("Could not resolve tomcat-slf4j-logback loggers for '{}'", applicationName, e);
}
}
private void interrogateStdOutFiles(List<LogDestination> appenders) {
for (String fileName : stdoutFiles) {
FileLogAccessor fla = resolveStdoutLogDestination(fileName);
if (fla != null) {
appenders.add(fla);
}
}
}
private LogDestination getStdoutLogDestination(String logName) {
for (String fileName : stdoutFiles) {
if (fileName.equals(logName)) {
FileLogAccessor fla = resolveStdoutLogDestination(fileName);
if (fla != null) {
return fla;
}
}
}
return null;
}
private FileLogAccessor resolveStdoutLogDestination(String fileName) {
File stdout = new File(System.getProperty("catalina.base"), "logs/" + fileName);
if (stdout.exists()) {
FileLogAccessor fla = new FileLogAccessor();
fla.setName(fileName);
fla.setFile(stdout);
return fla;
}
return null;
}
private LogDestination getCatalinaLogDestination(Context ctx, Application application) {
Object log = ctx.getLogger();
if (log != null) {
CatalinaLoggerAccessor logAccessor = new CatalinaLoggerAccessor();
logAccessor.setTarget(log);
logAccessor.setApplication(application);
if (logAccessor.getFile().exists()) {
return logAccessor;
}
}
return null;
}
private LogDestination getCommonsLogDestination(Context ctx, Application application,
String logIndex) {
Object contextLogger = ctx.getLogger();
CommonsLoggerAccessor commonsAccessor = new CommonsLoggerAccessor();
commonsAccessor.setTarget(contextLogger);
commonsAccessor.setApplication(application);
return commonsAccessor.getDestination(logIndex);
}
private LogDestination getJdk14LogDestination(ClassLoader cl, Application application,
boolean root, String logName, String handlerIndex) {
try {
Jdk14ManagerAccessor manager = new Jdk14ManagerAccessor(cl);
manager.setApplication(application);
Jdk14LoggerAccessor log = root ? manager.getRootLogger() : manager.getLogger(logName);
if (log != null) {
return log.getHandler(handlerIndex);
}
} catch (Exception e) {
logger.debug("getJdk14LogDestination failed", e);
}
return null;
}
private LogDestination getLog4JLogDestination(ClassLoader cl, Application application,
boolean root, String logName, String appenderName) {
try {
Log4JManagerAccessor manager = new Log4JManagerAccessor(cl);
manager.setApplication(application);
Log4JLoggerAccessor log = root ? manager.getRootLogger() : manager.getLogger(logName);
if (log != null) {
return log.getAppender(appenderName);
}
} catch (Exception e) {
logger.debug("getLog4JLogDestination failed", e);
}
return null;
}
private LogDestination getLog4J2LogDestination(Context ctx, Application application, boolean root,
String logName, String appenderName) {
Log4J2AppenderAccessor result = null;
try {
Loader loader = ctx.getLoader();
ClassLoader classLoader = loader.getClassLoader();
Log4J2WebLoggerContextUtilsAccessor webLoggerContextUtilsAccessor =
new Log4J2WebLoggerContextUtilsAccessor(classLoader);
Log4J2LoggerContextAccessor loggerContextAccessor =
webLoggerContextUtilsAccessor.getWebLoggerContext(ctx.getServletContext());
List<Object> loggerContexts = getLoggerContexts(classLoader);
Object loggerConfig = null;
for (Object loggerContext : loggerContexts) {
Map<String, Object> loggerConfigs = getLoggerConfigs(loggerContext);
loggerConfig = loggerConfigs.get(root ? "" : logName);
if (loggerConfig != null) {
break;
}
}
if (loggerConfig != null) {
Log4J2LoggerConfigAccessor accessor = new Log4J2LoggerConfigAccessor();
accessor.setTarget(loggerConfig);
accessor.setApplication(application);
accessor.setContext(true);
accessor.setLoggerContext(loggerContextAccessor);
result = accessor.getAppender(appenderName);
}
} catch (Exception e) {
logger.debug("getLog4J2LogDestination failed", e);
}
logger.debug("getLog4J2LogDestination(): OUT: result={}", result);
return result;
}
private Map<String, Object> getLoggerConfigs(Object loggerContext)
throws IllegalAccessException, InvocationTargetException {
Method getConfiguration =
MethodUtils.getAccessibleMethod(loggerContext.getClass(), "getConfiguration");
Object configuration = getConfiguration.invoke(loggerContext);
Method getLoggerConfigs =
MethodUtils.getAccessibleMethod(configuration.getClass(), "getLoggers");
return (Map<String, Object>) getLoggerConfigs.invoke(configuration);
}
private List<Object> getLoggerContexts(ClassLoader cl) throws ClassNotFoundException,
InstantiationException, IllegalAccessException, InvocationTargetException,
IllegalArgumentException, NoSuchMethodException, SecurityException {
Class<?> clazz =
cl.loadClass("org.apache.logging.log4j.core.selector.ClassLoaderContextSelector");
Object classLoaderContextSelector = clazz.getDeclaredConstructor().newInstance();
Method getLoggerContexts = MethodUtils.getAccessibleMethod(clazz, "getLoggerContexts");
return (List<Object>) getLoggerContexts.invoke(classLoaderContextSelector);
}
private LogDestination getLogbackLogDestination(ClassLoader cl, Application application,
boolean root, String logName, String appenderName) {
try {
LogbackFactoryAccessor manager = new LogbackFactoryAccessor(cl);
manager.setApplication(application);
LogbackLoggerAccessor log = root ? manager.getRootLogger() : manager.getLogger(logName);
if (log != null) {
return log.getAppender(appenderName);
}
} catch (Exception e) {
logger.debug("getLogbackLogDestination failed", e);
}
return null;
}
private LogDestination getLogbackTomcatJuliLogDestination(ClassLoader cl, Application application,
boolean root, String logName, String appenderName) {
try {
TomcatSlf4jLogbackFactoryAccessor manager = new TomcatSlf4jLogbackFactoryAccessor(cl);
manager.setApplication(application);
TomcatSlf4jLogbackLoggerAccessor log =
root ? manager.getRootLogger() : manager.getLogger(logName);
if (log != null) {
return log.getAppender(appenderName);
}
} catch (Exception e) {
logger.debug("getTomcatSlf4jLogbackLogDestination failed", e);
}
return null;
}
private abstract static class AbstractLogComparator
implements Comparator<LogDestination>, Serializable {
private static final long serialVersionUID = 1L;
protected static final char DELIM = '!';
@Override
public final int compare(LogDestination o1, LogDestination o2) {
String name1 = convertToString(o1);
String name2 = convertToString(o2);
return name1.compareTo(name2);
}
protected abstract String convertToString(LogDestination d1);
}
private static class LogDestinationComparator extends AbstractLogComparator
implements Serializable {
private static final long serialVersionUID = 1L;
private final boolean all;
public LogDestinationComparator(boolean all) {
this.all = all;
}
@Override
protected String convertToString(LogDestination dest) {
File file = dest.getFile();
String fileName = file == null ? "" : file.getAbsolutePath();
String name;
if (all) {
Application app = dest.getApplication();
String appName = app == null ? Character.toString(DELIM) : app.getName();
String context = dest.isContext() ? "is" : "not";
String root = dest.isRoot() ? "is" : "not";
String logType = dest.getLogType();
name = appName + DELIM + context + DELIM + root + DELIM + logType + DELIM + fileName;
} else {
name = fileName;
}
return name;
}
}
private static class LogSourceComparator extends AbstractLogComparator implements Serializable {
private static final long serialVersionUID = 1L;
@Override
protected String convertToString(LogDestination dest) {
File file = dest.getFile();
String fileName = file == null ? "" : file.getAbsolutePath();
Application app = dest.getApplication();
String appName = app == null ? Character.toString(DELIM) : app.getName();
String logType = dest.getLogType();
String context = dest.isContext() ? "is" : "not";
String root = dest.isRoot() ? "is" : "not";
String logName = dest.getName();
return appName + DELIM + logType + DELIM + context + DELIM + root + DELIM + logName + DELIM
+ fileName;
}
}
}
