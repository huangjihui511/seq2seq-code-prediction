package com.example.cloud.iot.examples;
import com.google.pubsub.v1.Topic;
import com.googlecode.lanterna.TextColor;
import com.googlecode.lanterna.screen.Screen;
import com.googlecode.lanterna.screen.TerminalScreen;
import com.googlecode.lanterna.terminal.DefaultTerminalFactory;
import com.googlecode.lanterna.terminal.Terminal;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
@RunWith(JUnit4.class)
@SuppressWarnings("checkstyle:abbreviationaswordinname")
public class ManagerIT {
private ByteArrayOutputStream bout;
private PrintStream out;
private MqttCommandsDemo app;
@Before
public void setUp() throws Exception {
bout = new ByteArrayOutputStream();
out = new PrintStream(bout);
System.setOut(out);
}
@After
public void tearDown() throws Exception {
System.setOut(null);
}
@Test
public void testTerminal() throws Exception {
Screen screen = null;
DefaultTerminalFactory defaultTerminalFactory = new DefaultTerminalFactory();
Terminal terminal = defaultTerminalFactory.createTerminal();
screen = new TerminalScreen(terminal);
Screen finalScreen = screen;
Thread deviceThread =
new Thread(
() -> {
try {
MqttCommandsDemo.startGui(finalScreen, new TextColor.RGB(255, 255, 255));
} catch (IOException e) {
e.printStackTrace();
}
});
deviceThread.join(3000);
System.out.println(terminal.getTerminalSize().toString());
Assert.assertTrue(terminal.getTerminalSize().toString().contains("x"));
Assert.assertTrue(terminal.getTerminalSize().toString().contains("{"));
Assert.assertTrue(terminal.getTerminalSize().toString().contains("}"));
}
@Test
public void testJsonValid() {
Assert.assertTrue(MqttCommandsDemo.isJsonValid("{test:true}"));
Assert.assertFalse(MqttCommandsDemo.isJsonValid("{test:false"));
}
}
