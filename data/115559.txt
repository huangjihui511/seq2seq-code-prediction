package com.netflix.astyanax;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.Set;
import com.netflix.astyanax.connectionpool.Host;
import com.netflix.astyanax.model.ColumnFamily;
import com.netflix.astyanax.model.ConsistencyLevel;
import com.netflix.astyanax.retry.RetryPolicy;
public interface MutationBatch extends Execution<Void> {
<K, C> ColumnListMutation<C> withRow(ColumnFamily<K, C> columnFamily, K rowKey);
<K> void deleteRow(Iterable<? extends ColumnFamily<K, ?>> columnFamilies, K rowKey);
void discardMutations();
void mergeShallow(MutationBatch other);
boolean isEmpty();
int getRowCount();
Map<ByteBuffer, Set<String>> getRowKeys();
MutationBatch pinToHost(Host host);
MutationBatch setConsistencyLevel(ConsistencyLevel consistencyLevel);
MutationBatch withConsistencyLevel(ConsistencyLevel consistencyLevel);
MutationBatch withRetryPolicy(RetryPolicy retry);
MutationBatch usingWriteAheadLog(WriteAheadLog manager);
MutationBatch lockCurrentTimestamp();
@Deprecated
MutationBatch setTimeout(long timeout);
MutationBatch setTimestamp(long timestamp);
MutationBatch withTimestamp(long timestamp);
MutationBatch withAtomicBatch(boolean condition);
ByteBuffer serialize() throws Exception;
void deserialize(ByteBuffer data) throws Exception;
MutationBatch withCaching(boolean condition);
}
