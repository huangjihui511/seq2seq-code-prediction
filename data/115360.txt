package io.flutter.actions;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.Computable;
import icons.FlutterIcons;
import io.flutter.FlutterBundle;
import io.flutter.FlutterConstants;
import io.flutter.FlutterInitializer;
import io.flutter.run.FlutterReloadManager;
import io.flutter.run.daemon.FlutterApp;
import org.jetbrains.annotations.NotNull;
import java.awt.event.InputEvent;
public class ReloadFlutterApp extends FlutterAppAction {
public static final String ID = "Flutter.ReloadFlutterApp"; 
public static final String TEXT = FlutterBundle.message("app.reload.action.text");
public static final String DESCRIPTION = FlutterBundle.message("app.reload.action.description");
public ReloadFlutterApp(@NotNull FlutterApp app, @NotNull Computable<Boolean> isApplicable) {
super(app, TEXT, DESCRIPTION, FlutterIcons.HotReload, isApplicable, ID);
copyShortcutFrom(ActionManager.getInstance().getAction("Flutter.Toolbar.ReloadAction"));
}
@Override
public void actionPerformed(@NotNull AnActionEvent e) {
final Project project = getEventProject(e);
if (project == null) {
return;
}
final boolean shouldRestart = (e.getModifiers() & InputEvent.SHIFT_MASK) != 0 && !"GoToAction".equals(e.getPlace());
if (shouldRestart) {
FlutterInitializer.sendAnalyticsAction(RestartFlutterApp.class.getSimpleName());
FlutterReloadManager.getInstance(project).saveAllAndRestart(getApp(), FlutterConstants.RELOAD_REASON_MANUAL);
}
else {
FlutterInitializer.sendAnalyticsAction(this);
FlutterReloadManager.getInstance(project).saveAllAndReload(getApp(), FlutterConstants.RELOAD_REASON_MANUAL);
}
}
@Override
public void update(@NotNull AnActionEvent e) {
super.update(e);
if (!getApp().appSupportsHotReload()) {
e.getPresentation().setEnabled(false);
}
}
}
