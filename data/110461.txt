package com.baomidou.mybatisplus.extension.parsers;
import java.util.Collection;
import java.util.Map;
import org.apache.ibatis.reflection.MetaObject;
import com.baomidou.mybatisplus.core.parser.ISqlParser;
import com.baomidou.mybatisplus.core.parser.SqlInfo;
import com.baomidou.mybatisplus.core.toolkit.Assert;
import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;
import com.baomidou.mybatisplus.core.toolkit.TableNameParser;
import lombok.Data;
import lombok.experimental.Accessors;
@Data
@Accessors(chain = true)
public class DynamicTableNameParser implements ISqlParser {
private Map<String, ITableNameHandler> tableNameHandlerMap;
@Override
public SqlInfo parser(MetaObject metaObject, String sql) {
Assert.isFalse(CollectionUtils.isEmpty(tableNameHandlerMap), "tableNameHandlerMap is empty.");
if (allowProcess(metaObject)) {
Collection<String> tables = new TableNameParser(sql).tables();
if (CollectionUtils.isNotEmpty(tables)) {
boolean sqlParsed = false;
String parsedSql = sql;
for (final String table : tables) {
ITableNameHandler tableNameHandler = tableNameHandlerMap.get(table);
if (null != tableNameHandler) {
parsedSql = tableNameHandler.process(metaObject, parsedSql, table);
sqlParsed = true;
}
}
if (sqlParsed) {
return SqlInfo.newInstance().setSql(parsedSql);
}
}
}
return null;
}
public boolean allowProcess(MetaObject metaObject) {
return true;
}
}
