package io.dropwizard.cli;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.dropwizard.Configuration;
import io.dropwizard.configuration.ConfigurationException;
import io.dropwizard.configuration.ConfigurationFactory;
import io.dropwizard.configuration.ConfigurationFactoryFactory;
import io.dropwizard.configuration.ConfigurationSourceProvider;
import io.dropwizard.setup.Bootstrap;
import io.dropwizard.util.Generics;
import net.sourceforge.argparse4j.inf.Argument;
import net.sourceforge.argparse4j.inf.Namespace;
import net.sourceforge.argparse4j.inf.Subparser;
import javax.annotation.Nullable;
import javax.validation.Validator;
import java.io.IOException;
public abstract class ConfiguredCommand<T extends Configuration> extends Command {
private boolean asynchronous;
@Nullable
private T configuration;
protected ConfiguredCommand(String name, String description) {
super(name, description);
this.asynchronous = false;
}
protected Class<T> getConfigurationClass() {
return Generics.getTypeParameter(getClass(), Configuration.class);
}
@Override
public void configure(Subparser subparser) {
addFileArgument(subparser);
}
protected Argument addFileArgument(Subparser subparser) {
return subparser.addArgument("file")
.nargs("?")
.help("application configuration file");
}
@Override
@SuppressWarnings("unchecked")
public void run(Bootstrap<?> wildcardBootstrap, Namespace namespace) throws Exception {
final Bootstrap<T> bootstrap = (Bootstrap<T>) wildcardBootstrap;
configuration = parseConfiguration(bootstrap.getConfigurationFactoryFactory(),
bootstrap.getConfigurationSourceProvider(),
bootstrap.getValidatorFactory().getValidator(),
namespace.getString("file"),
getConfigurationClass(),
bootstrap.getObjectMapper());
try {
if (configuration != null) {
configuration.getLoggingFactory().configure(bootstrap.getMetricRegistry(),
bootstrap.getApplication().getName());
}
run(bootstrap, namespace, configuration);
} finally {
if (!asynchronous) {
cleanup();
}
}
}
protected void cleanupAsynchronously() {
this.asynchronous = true;
}
protected void cleanup() {
if (configuration != null) {
configuration.getLoggingFactory().stop();
}
}
protected abstract void run(Bootstrap<T> bootstrap,
Namespace namespace,
T configuration) throws Exception;
private T parseConfiguration(ConfigurationFactoryFactory<T> configurationFactoryFactory,
ConfigurationSourceProvider provider,
Validator validator,
String path,
Class<T> klass,
ObjectMapper objectMapper) throws IOException, ConfigurationException {
final ConfigurationFactory<T> configurationFactory = configurationFactoryFactory
.create(klass, validator, objectMapper, "dw");
if (path != null) {
return configurationFactory.build(provider, path);
}
return configurationFactory.build();
}
}
