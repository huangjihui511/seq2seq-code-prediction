package br.com.leonardoz.features.collections;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
public class UsingConcurrentCollections {
public static void usingConcurrentHashMap() {
System.out.println("=== ConcurrentHashMap ===");
var executor = Executors.newCachedThreadPool();
var random = new Random();
var valuesPerUuid = new ConcurrentHashMap<UUID, Integer>();
valuesPerUuid.putIfAbsent(UUID.randomUUID(), random.nextInt(100));
for (int i = 0; i < 100; i++) {
if (i % 6 == 0) {
executor.execute(() -> {
UUID uuid = UUID.randomUUID();
Integer value = random.nextInt(10);
System.out.println("Added " + uuid + " - " + value);
valuesPerUuid.putIfAbsent(uuid, value);
});
} else {
executor.execute(() -> System.out.println("Printed " + valuesPerUuid.values().toString()));
}
}
executor.shutdown();
try {
executor.awaitTermination(2000, TimeUnit.SECONDS);
Thread.sleep(2000);
System.out.println("\n\n\n\n");
} catch (InterruptedException e) {
e.printStackTrace();
}
}
public static void usingCopyOnWriteArrayList() {
System.out.println("=== CopyOnWriteArrayList ===");
var executor = Executors.newCachedThreadPool();
var random = new Random();
var copyOnWriteArrayList = new CopyOnWriteArrayList<Integer>();
for (int i = 0; i < 100; i++) {
if (i % 8 == 0) {
executor.execute(() -> {
var value = random.nextInt(10);
System.err.println("Added " + value);
copyOnWriteArrayList.add(value);
});
} else {
executor.execute(() -> {
var builder = new StringBuilder();
for (var value : copyOnWriteArrayList) {
builder.append(value + " ");
}
System.out.println("Reading " + builder.toString());
});
}
}
executor.shutdown();
try {
executor.awaitTermination(2000, TimeUnit.SECONDS);
Thread.sleep(2000);
System.out.println("\n\n\n\n");
} catch (InterruptedException e) {
e.printStackTrace();
}
}
public static void usingBlockingQueue() {
System.out.println("=== BlockingQueue ===");
var uuidQueue = new LinkedBlockingQueue<UUID>(10);
System.out.println("Queue will execute for 10s");
Runnable runConsumer = () -> {
while (!Thread.currentThread().isInterrupted()) {
try {
var uuid = uuidQueue.take();
System.out.println("Consumed: " + uuid + " by " + Thread.currentThread().getName());
} catch (InterruptedException e) {
Thread.currentThread().interrupt();
System.err.println("Consumer Finished");
}
}
};
var consumer1 = new Thread(runConsumer);
consumer1.start();
var consumer2 = new Thread(runConsumer);
consumer2.start();
Runnable runProducer = () -> {
try {
while (!Thread.currentThread().isInterrupted()) {
Random r = new Random();
Thread.sleep(r.nextInt(1000));
UUID randomUUID = UUID.randomUUID();
System.out.println("Produced: " + randomUUID + " by " + Thread.currentThread().getName());
uuidQueue.put(randomUUID);
}
} catch (InterruptedException e) {
System.err.println("Producer Finished");
}
};
var producer1 = new Thread(runProducer);
producer1.start();
var producer2 = new Thread(runProducer);
producer2.start();
var producer3 = new Thread(runProducer);
producer3.start();
try {
Thread.sleep(10000);
producer1.interrupt();
producer2.interrupt();
producer3.interrupt();
consumer1.interrupt();
consumer2.interrupt();
} catch (InterruptedException e) {
e.printStackTrace();
}
}
public static void main(String[] args) {
usingConcurrentHashMap();
usingCopyOnWriteArrayList();
usingBlockingQueue();
}
}
