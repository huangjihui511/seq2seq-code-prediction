package net.i2p.router.transport.udp;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import net.i2p.crypto.SigType;
import net.i2p.data.Base64;
import net.i2p.data.ByteArray;
import net.i2p.data.DataHelper;
import net.i2p.data.router.RouterIdentity;
import net.i2p.data.SessionKey;
import net.i2p.data.Signature;
import net.i2p.data.i2np.DatabaseStoreMessage;
import net.i2p.data.i2np.I2NPMessage;
import net.i2p.router.OutNetMessage;
import net.i2p.router.RouterContext;
import net.i2p.router.transport.crypto.DHSessionKeyBuilder;
import net.i2p.util.Addresses;
import net.i2p.util.Log;
class OutboundEstablishState {
private final RouterContext _context;
private final Log _log;
private byte _sentX[];
private byte _bobIP[];
private int _bobPort;
private final DHSessionKeyBuilder.Factory _keyFactory;
private DHSessionKeyBuilder _keyBuilder;
private byte _receivedY[];
private byte _aliceIP[];
private int _alicePort;
private long _receivedRelayTag;
private long _receivedSignedOnTime;
private SessionKey _sessionKey;
private SessionKey _macKey;
private Signature _receivedSignature;
private byte[] _receivedEncryptedSignature;
private byte[] _receivedIV;
private long _sentSignedOnTime;
private Signature _sentSignature;
private final long _establishBegin;
private long _lastSend;
private long _nextSend;
private RemoteHostId _remoteHostId;
private final RemoteHostId _claimedAddress;
private final RouterIdentity _remotePeer;
private final boolean _allowExtendedOptions;
private final boolean _needIntroduction;
private final SessionKey _introKey;
private final Queue<OutNetMessage> _queuedMessages;
private OutboundState _currentState;
private long _introductionNonce;
private boolean _isFirstMessageOurDSM;
private final UDPAddress _remoteAddress;
private boolean _complete;
private int _confirmedSentCount;
private int _requestSentCount;
private int _introSentCount;
private long _confirmedSentTime;
private long _requestSentTime;
private long _introSentTime;
private int _rtt;
public enum OutboundState {
OB_STATE_UNKNOWN,
OB_STATE_REQUEST_SENT,
OB_STATE_CREATED_RECEIVED,
OB_STATE_CONFIRMED_PARTIALLY,
OB_STATE_CONFIRMED_COMPLETELY,
OB_STATE_PENDING_INTRO,
OB_STATE_INTRODUCED,
OB_STATE_VALIDATION_FAILED
}
private static final long RETRANSMIT_DELAY = 3000;
private static final long MAX_DELAY = 15*1000;
private static final long WAIT_FOR_HOLE_PUNCH_DELAY = 500;
ignored unless allowExtendedOptions is true
public OutboundEstablishState(RouterContext ctx, RemoteHostId claimedAddress,
RemoteHostId remoteHostId,
RouterIdentity remotePeer, boolean allowExtendedOptions,
boolean needIntroduction,
SessionKey introKey, UDPAddress addr,
DHSessionKeyBuilder.Factory dh) {
_context = ctx;
_log = ctx.logManager().getLog(OutboundEstablishState.class);
if (claimedAddress != null) {
_bobIP = claimedAddress.getIP();
_bobPort = claimedAddress.getPort();
} else {
_bobPort = -1;
}
_claimedAddress = claimedAddress;
_remoteHostId = remoteHostId;
_allowExtendedOptions = allowExtendedOptions;
_needIntroduction = needIntroduction;
_remotePeer = remotePeer;
_introKey = introKey;
_queuedMessages = new LinkedBlockingQueue<OutNetMessage>();
_establishBegin = ctx.clock().now();
_remoteAddress = addr;
_introductionNonce = -1;
_keyFactory = dh;
if (addr.getIntroducerCount() > 0) {
if (_log.shouldLog(Log.DEBUG))
_log.debug("new outbound establish to " + remotePeer.calculateHash() + ", with address: " + addr);
_currentState = OutboundState.OB_STATE_PENDING_INTRO;
} else {
_currentState = OutboundState.OB_STATE_UNKNOWN;
}
}
public synchronized OutboundState getState() { return _currentState; }
public synchronized boolean complete() {
boolean already = _complete;
_complete = true;
return already;
}
public UDPAddress getRemoteAddress() { return _remoteAddress; }
public void setIntroNonce(long nonce) { _introductionNonce = nonce; }
public long getIntroNonce() { return _introductionNonce; }
public boolean isExtendedOptionsAllowed() { return _allowExtendedOptions; }
public boolean needIntroduction() { return _needIntroduction; }
synchronized int getRTT() { return _rtt; }
public void addMessage(OutNetMessage msg) {
if (_queuedMessages.isEmpty()) {
I2NPMessage m = msg.getMessage();
if (m.getType() == DatabaseStoreMessage.MESSAGE_TYPE) {
DatabaseStoreMessage dsm = (DatabaseStoreMessage) m;
if (dsm.getKey().equals(_context.routerHash())) {
_isFirstMessageOurDSM = true;
}
}
}
if (!_queuedMessages.contains(msg))
_queuedMessages.offer(msg);
else if (_log.shouldLog(Log.WARN))
_log.warn("attempt to add duplicate msg to queue: " + msg);
}
public boolean isFirstMessageOurDSM() {
return _isFirstMessageOurDSM;
}
public OutNetMessage getNextQueuedMessage() {
return _queuedMessages.poll();
}
public RouterIdentity getRemoteIdentity() { return _remotePeer; }
public SessionKey getIntroKey() { return _introKey; }
private void prepareSessionRequest() {
_keyBuilder = _keyFactory.getBuilder();
byte X[] = _keyBuilder.getMyPublicValue().toByteArray();
if (X.length == 257) {
_sentX = new byte[256];
System.arraycopy(X, 1, _sentX, 0, _sentX.length);
} else if (X.length == 256) {
_sentX = X;
} else {
_sentX = new byte[256];
System.arraycopy(X, 0, _sentX, _sentX.length - X.length, X.length);
}
}
public synchronized byte[] getSentX() {
if (_sentX == null)
prepareSessionRequest();
return _sentX;
}
public synchronized byte[] getSentIP() { return _bobIP; }
public synchronized int getSentPort() { return _bobPort; }
public synchronized void receiveSessionCreated(UDPPacketReader.SessionCreatedReader reader) {
if (_currentState == OutboundState.OB_STATE_VALIDATION_FAILED) {
if (_log.shouldLog(Log.WARN))
_log.warn("Session created already failed");
return;
}
if (_receivedY != null) {
if (_log.shouldLog(Log.DEBUG))
_log.debug("Session created already received, ignoring");
return; 
}
_receivedY = new byte[UDPPacketReader.SessionCreatedReader.Y_LENGTH];
reader.readY(_receivedY, 0);
if (_aliceIP == null)
_aliceIP = new byte[reader.readIPSize()];
reader.readIP(_aliceIP, 0);
_alicePort = reader.readPort();
_receivedRelayTag = reader.readRelayTag();
_receivedSignedOnTime = reader.readSignedOnTime();
SigType type = _remotePeer.getSigningPublicKey().getType();
if (type == null) {
fail();
packetReceived();
return;
}
int sigLen = type.getSigLen();
int mod = sigLen % 16;
int pad = (mod == 0) ? 0 : (16 - mod);
int esigLen = sigLen + pad;
_receivedEncryptedSignature = new byte[esigLen];
reader.readEncryptedSignature(_receivedEncryptedSignature, 0, esigLen);
_receivedIV = new byte[UDPPacket.IV_SIZE];
reader.readIV(_receivedIV, 0);
if (_log.shouldLog(Log.DEBUG))
_log.debug("Receive session created:Sig: " + Base64.encode(_receivedEncryptedSignature)
+ "receivedIV: " + Base64.encode(_receivedIV)
+ "AliceIP: " + Addresses.toString(_aliceIP)
+ " RelayTag: " + _receivedRelayTag
+ " SignedOn: " + _receivedSignedOnTime
+ ' ' + this.toString());
if (_currentState == OutboundState.OB_STATE_UNKNOWN ||
_currentState == OutboundState.OB_STATE_REQUEST_SENT ||
_currentState == OutboundState.OB_STATE_INTRODUCED ||
_currentState == OutboundState.OB_STATE_PENDING_INTRO)
_currentState = OutboundState.OB_STATE_CREATED_RECEIVED;
if (_requestSentCount == 1) {
_rtt = (int) (_context.clock().now() - _requestSentTime);
}
packetReceived();
}
public synchronized boolean validateSessionCreated() {
if (_currentState == OutboundState.OB_STATE_VALIDATION_FAILED) {
if (_log.shouldLog(Log.WARN))
_log.warn("Session created already failed");
return false;
}
if (_receivedSignature != null) {
if (_log.shouldLog(Log.DEBUG))
_log.debug("Session created already validated");
return true;
}
boolean valid = true;
try {
generateSessionKey();
} catch (DHSessionKeyBuilder.InvalidPublicParameterException ippe) {
if (_log.shouldLog(Log.WARN))
_log.warn("Peer " + getRemoteHostId() + " sent us an invalid DH parameter", ippe);
valid = false;
}
if (valid)
decryptSignature();
if (valid && verifySessionCreated()) {
if (_log.shouldLog(Log.DEBUG))
_log.debug("Session created passed validation");
return true;
} else {
if (_log.shouldLog(Log.WARN))
_log.warn("Session created failed validation, clearing state for " + _remoteHostId.toString());
fail();
return false;
}
}
public synchronized void fail() {
_receivedY = null;
_aliceIP = null;
_receivedRelayTag = 0;
_receivedSignedOnTime = -1;
_receivedEncryptedSignature = null;
_receivedIV = null;
_receivedSignature = null;
if (_keyBuilder != null) {
if (_keyBuilder.getPeerPublicValue() == null)
_keyFactory.returnUnused(_keyBuilder);
_keyBuilder = null;
}
_currentState = OutboundState.OB_STATE_VALIDATION_FAILED;
_nextSend = _context.clock().now();
}
private void generateSessionKey() throws DHSessionKeyBuilder.InvalidPublicParameterException {
if (_sessionKey != null) return;
if (_keyBuilder == null)
throw new DHSessionKeyBuilder.InvalidPublicParameterException("Illegal state - never generated a key builder");
try {
_keyBuilder.setPeerPublicValue(_receivedY);
} catch (IllegalStateException ise) {
throw new DHSessionKeyBuilder.InvalidPublicParameterException("reused keys?", ise);
}
_sessionKey = _keyBuilder.getSessionKey();
ByteArray extra = _keyBuilder.getExtraBytes();
_macKey = new SessionKey(new byte[SessionKey.KEYSIZE_BYTES]);
System.arraycopy(extra.getData(), 0, _macKey.getData(), 0, SessionKey.KEYSIZE_BYTES);
if (_log.shouldLog(Log.DEBUG))
_log.debug("Established outbound keys.  cipher: " + _sessionKey
+ " mac: " + _macKey);
}
private void decryptSignature() {
if (_receivedEncryptedSignature == null) throw new NullPointerException("encrypted signature is null! this=" + this.toString());
if (_sessionKey == null) throw new NullPointerException("SessionKey is null!");
if (_receivedIV == null) throw new NullPointerException("IV is null!");
_context.aes().decrypt(_receivedEncryptedSignature, 0, _receivedEncryptedSignature, 0,
_sessionKey, _receivedIV, _receivedEncryptedSignature.length);
SigType type = _remotePeer.getSigningPublicKey().getType();
int sigLen = type.getSigLen();
int mod = sigLen % 16;
if (mod != 0) {
byte signatureBytes[] = new byte[sigLen];
System.arraycopy(_receivedEncryptedSignature, 0, signatureBytes, 0, sigLen);
_receivedSignature = new Signature(type, signatureBytes);
} else {
_receivedSignature = new Signature(type, _receivedEncryptedSignature);
}
if (_log.shouldLog(Log.DEBUG))
_log.debug("Decrypted received signature: " + Base64.encode(_receivedSignature.getData()));
}
private boolean verifySessionCreated() {
byte signed[] = new byte[256+256 
+ _aliceIP.length + 2
+ _bobIP.length + 2
+ 4 
+ 4 
];
int off = 0;
System.arraycopy(_sentX, 0, signed, off, _sentX.length);
off += _sentX.length;
System.arraycopy(_receivedY, 0, signed, off, _receivedY.length);
off += _receivedY.length;
System.arraycopy(_aliceIP, 0, signed, off, _aliceIP.length);
off += _aliceIP.length;
DataHelper.toLong(signed, off, 2, _alicePort);
off += 2;
System.arraycopy(_bobIP, 0, signed, off, _bobIP.length);
off += _bobIP.length;
DataHelper.toLong(signed, off, 2, _bobPort);
off += 2;
DataHelper.toLong(signed, off, 4, _receivedRelayTag);
off += 4;
DataHelper.toLong(signed, off, 4, _receivedSignedOnTime);
boolean valid = _context.dsa().verifySignature(_receivedSignature, signed, _remotePeer.getSigningPublicKey());
if (_log.shouldLog(Log.DEBUG) || (_log.shouldLog(Log.WARN) && !valid)) {
StringBuilder buf = new StringBuilder(128);
buf.append("Signed sessionCreated:");
buf.append(" Alice: ").append(Addresses.toString(_aliceIP, _alicePort));
buf.append(" Bob: ").append(Addresses.toString(_bobIP, _bobPort));
buf.append(" RelayTag: ").append(_receivedRelayTag);
buf.append(" SignedOn: ").append(_receivedSignedOnTime);
buf.append(" signature: ").append(Base64.encode(_receivedSignature.getData()));
if (valid)
_log.debug(buf.toString());
else if (_log.shouldLog(Log.WARN))
_log.warn("INVALID: " + buf.toString());
}
return valid;
}
public synchronized SessionKey getCipherKey() { return _sessionKey; }
public synchronized SessionKey getMACKey() { return _macKey; }
public synchronized long getReceivedRelayTag() { return _receivedRelayTag; }
public synchronized long getSentSignedOnTime() { return _sentSignedOnTime; }
public synchronized long getReceivedSignedOnTime() { return _receivedSignedOnTime; }
public synchronized byte[] getReceivedIP() { return _aliceIP; }
public synchronized int getReceivedPort() { return _alicePort; }
public synchronized void prepareSessionConfirmed() {
if (_sentSignedOnTime > 0)
return;
byte signed[] = new byte[256+256 
+ _aliceIP.length + 2
+ _bobIP.length + 2
+ 4 
+ 4 
];
_sentSignedOnTime = _context.clock().now() / 1000;
int off = 0;
System.arraycopy(_sentX, 0, signed, off, _sentX.length);
off += _sentX.length;
System.arraycopy(_receivedY, 0, signed, off, _receivedY.length);
off += _receivedY.length;
System.arraycopy(_aliceIP, 0, signed, off, _aliceIP.length);
off += _aliceIP.length;
DataHelper.toLong(signed, off, 2, _alicePort);
off += 2;
System.arraycopy(_bobIP, 0, signed, off, _bobIP.length);
off += _bobIP.length;
DataHelper.toLong(signed, off, 2, _bobPort);
off += 2;
DataHelper.toLong(signed, off, 4, _receivedRelayTag);
off += 4;
DataHelper.toLong(signed, off, 4, _sentSignedOnTime);
_sentSignature = _context.dsa().sign(signed, _context.keyManager().getSigningPrivateKey());
}
public synchronized Signature getSentSignature() { return _sentSignature; }
public synchronized void confirmedPacketsSent() {
_lastSend = _context.clock().now();
long delay;
if (_confirmedSentCount == 0) {
delay = RETRANSMIT_DELAY;
_confirmedSentTime = _lastSend;
} else {
delay = Math.min(RETRANSMIT_DELAY << _confirmedSentCount,
_confirmedSentTime + EstablishmentManager.OB_MESSAGE_TIMEOUT - _lastSend);
}
_confirmedSentCount++;
_nextSend = _lastSend + delay;
if (_log.shouldLog(Log.DEBUG))
_log.debug("Send confirm packets, nextSend in " + delay);
if (_currentState == OutboundState.OB_STATE_UNKNOWN ||
_currentState == OutboundState.OB_STATE_PENDING_INTRO ||
_currentState == OutboundState.OB_STATE_INTRODUCED ||
_currentState == OutboundState.OB_STATE_REQUEST_SENT ||
_currentState == OutboundState.OB_STATE_CREATED_RECEIVED)
_currentState = OutboundState.OB_STATE_CONFIRMED_PARTIALLY;
}
public long getConfirmedSentTime() { return _confirmedSentTime; }
public synchronized void requestSent() {
_lastSend = _context.clock().now();
long delay;
if (_requestSentCount == 0) {
delay = RETRANSMIT_DELAY;
_requestSentTime = _lastSend;
} else {
delay = Math.min(RETRANSMIT_DELAY << _requestSentCount,
_requestSentTime + EstablishmentManager.OB_MESSAGE_TIMEOUT - _lastSend);
}
_requestSentCount++;
_nextSend = _lastSend + delay;
if (_log.shouldLog(Log.DEBUG))
_log.debug("Send a request packet, nextSend in " + delay);
if (_currentState == OutboundState.OB_STATE_UNKNOWN ||
_currentState == OutboundState.OB_STATE_INTRODUCED)
_currentState = OutboundState.OB_STATE_REQUEST_SENT;
}
public long getRequestSentTime() { return _requestSentTime; }
public synchronized void introSent() {
_lastSend = _context.clock().now();
long delay;
if (_introSentCount == 0) {
delay = RETRANSMIT_DELAY;
_introSentTime = _lastSend;
} else {
delay = Math.min(RETRANSMIT_DELAY << _introSentCount,
_introSentTime + EstablishmentManager.OB_MESSAGE_TIMEOUT - _lastSend);
}
_introSentCount++;
_nextSend = _lastSend + delay;
if (_currentState == OutboundState.OB_STATE_UNKNOWN)
_currentState = OutboundState.OB_STATE_PENDING_INTRO;
}
public long getIntroSentTime() { return _introSentTime; }
public synchronized void introductionFailed() {
_nextSend = _context.clock().now();
}
public synchronized void introduced(byte bobIP[], int bobPort) {
if (_currentState != OutboundState.OB_STATE_PENDING_INTRO)
return; 
_nextSend = _context.clock().now() + WAIT_FOR_HOLE_PUNCH_DELAY; 
_currentState = OutboundState.OB_STATE_INTRODUCED;
if (_claimedAddress != null && bobPort == _bobPort && DataHelper.eq(bobIP, _bobIP)) {
_remoteHostId = _claimedAddress;
} else {
_bobIP = bobIP;
_bobPort = bobPort;
_remoteHostId = new RemoteHostId(bobIP, bobPort);
}
if (_log.shouldLog(Log.INFO))
_log.info("Introduced to " + _remoteHostId + ", now lets get on with establishing");
}
synchronized boolean receiveHolePunch() {
if (_currentState != OutboundState.OB_STATE_INTRODUCED)
return false;
if (_requestSentCount > 0)
return false;
long now = _context.clock().now();
if (_log.shouldLog(Log.INFO))
_log.info(toString() + " accelerating SessionRequest by " + (_nextSend - now) + " ms");
_nextSend = now;
return true;
}
public long getLifetime() { return _context.clock().now() - _establishBegin; }
public long getEstablishBeginTime() { return _establishBegin; }
public synchronized long getNextSendTime() { return _nextSend; }
RemoteHostId getRemoteHostId() { return _remoteHostId; }
RemoteHostId getClaimedAddress() { return _claimedAddress; }
public synchronized void dataReceived() {
packetReceived();
_currentState = OutboundState.OB_STATE_CONFIRMED_COMPLETELY;
}
private void packetReceived() {
_nextSend = _context.clock().now();
}
@Override
public String toString() {
return "OES " + _remoteHostId + ' ' + _currentState;
}
}
