package com.facebook.presto.cost;
import com.facebook.presto.spi.relation.VariableReferenceExpression;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.testng.annotations.Test;
import java.util.Optional;
import static com.facebook.presto.spi.type.VarcharType.VARCHAR;
import static com.facebook.presto.util.StructuralTestUtil.mapType;
public class TestUnnestStatsRule
extends BaseStatsCalculatorTest
{
@Test
public void testUnnestStatsNotPopulatedForMultiRow()
{
tester().assertStatsFor(
pb -> pb.unnest(
pb.values(pb.variable("some_map", mapType(VARCHAR, VARCHAR))),
ImmutableList.of(pb.variable("some_map", mapType(VARCHAR, VARCHAR))),
ImmutableMap.of(pb.variable("some_map", mapType(VARCHAR, VARCHAR)), ImmutableList.of(pb.variable("key"), pb.variable("value"))),
Optional.empty()))
.withSourceStats(0, PlanNodeStatsEstimate.builder()
.setOutputRowCount(2)
.addVariableStatistics(new VariableReferenceExpression("some_map", mapType(VARCHAR, VARCHAR)), VariableStatsEstimate.builder().setAverageRowSize(100).build())
.build())
.check(check -> check.equalTo(PlanNodeStatsEstimate.unknown()));
}
@Test
public void testUnntestStatsPopulated()
{
tester().assertStatsFor(
pb -> pb.unnest(
pb.values(pb.variable("some_map", mapType(VARCHAR, VARCHAR))),
ImmutableList.of(pb.variable("some_map", mapType(VARCHAR, VARCHAR))),
ImmutableMap.of(pb.variable("some_map", mapType(VARCHAR, VARCHAR)), ImmutableList.of(pb.variable("key", VARCHAR), pb.variable("value", VARCHAR))),
Optional.empty()))
.withSourceStats(0, PlanNodeStatsEstimate.builder()
.setOutputRowCount(1)
.addVariableStatistics(new VariableReferenceExpression("some_map", mapType(VARCHAR, VARCHAR)), VariableStatsEstimate.builder().setAverageRowSize(100).build())
.build())
.check(check -> check
.outputRowsCount(1)
.variableStats(new VariableReferenceExpression("some_map", mapType(VARCHAR, VARCHAR)), assertion -> assertion.averageRowSize(100))
.variableStats(new VariableReferenceExpression("key", VARCHAR), assertion -> assertion.averageRowSize(100))
.variableStats(new VariableReferenceExpression("value", VARCHAR), assertion -> assertion.averageRowSize(100)));
}
}
