package com.github.benmanes.caffeine.cache.impl;
import java.util.LinkedHashMap;
import java.util.Map;
import com.github.benmanes.caffeine.cache.BasicCache;
public final class LinkedHashMapCache<K, V> implements BasicCache<K, V> {
private final Map<K, V> map;
public LinkedHashMapCache(int maximumSize, boolean accessOrder) {
map = new BoundedLinkedHashMap<>(maximumSize, accessOrder);
}
@Override
public V get(K key) {
synchronized (map) {
return map.get(key);
}
}
@Override
public void put(K key, V value) {
synchronized (map) {
map.put(key, value);
}
}
@Override
public void clear() {
synchronized (map) {
map.clear();
}
}
static final class BoundedLinkedHashMap<K, V> extends LinkedHashMap<K, V> {
private static final long serialVersionUID = 1L;
private final int maximumSize;
public BoundedLinkedHashMap(int maximumSize, boolean accessOrder) {
super(maximumSize, 0.75f, accessOrder);
this.maximumSize = maximumSize;
}
@Override protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
return size() > maximumSize;
}
}
}
