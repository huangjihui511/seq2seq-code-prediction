package com.google.inject.internal;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.logging.Logger;
public class InternalFlags {
private static final Logger logger = Logger.getLogger(InternalFlags.class.getName());
private static final IncludeStackTraceOption INCLUDE_STACK_TRACES
= parseIncludeStackTraceOption();
private static final CustomClassLoadingOption CUSTOM_CLASS_LOADING
= parseCustomClassLoadingOption();
private static final NullableProvidesOption NULLABLE_PROVIDES
= parseNullableProvidesOption(NullableProvidesOption.ERROR);
public enum IncludeStackTraceOption {
OFF,
ONLY_FOR_DECLARING_SOURCE,
COMPLETE
}
public enum CustomClassLoadingOption {
OFF,
BRIDGE
}
public enum NullableProvidesOption {
IGNORE,
WARN,
ERROR
}
public static IncludeStackTraceOption getIncludeStackTraceOption() {
return INCLUDE_STACK_TRACES;
}
public static CustomClassLoadingOption getCustomClassLoadingOption() {
return CUSTOM_CLASS_LOADING;
}
public static NullableProvidesOption getNullableProvidesOption() {
return NULLABLE_PROVIDES;
}
private static IncludeStackTraceOption parseIncludeStackTraceOption() {
return getSystemOption("guice_include_stack_traces",
IncludeStackTraceOption.ONLY_FOR_DECLARING_SOURCE);
}
private static CustomClassLoadingOption parseCustomClassLoadingOption() {
return getSystemOption("guice_custom_class_loading",
CustomClassLoadingOption.BRIDGE, CustomClassLoadingOption.OFF);
}
private static NullableProvidesOption parseNullableProvidesOption(
NullableProvidesOption defaultValue) {
return getSystemOption("guice_check_nullable_provides_params", defaultValue);
}
private static <T extends Enum<T>> T getSystemOption(final String name, T defaultValue) {
return getSystemOption(name, defaultValue, defaultValue);
}
private static <T extends Enum<T>> T getSystemOption(final String name, T defaultValue,
T secureValue) {
Class<T> enumType = defaultValue.getDeclaringClass();
String value = null;
try {
value =
AccessController.doPrivileged(
new PrivilegedAction<String>() {
@Override
public String run() {
return System.getProperty(name);
}
});
return (value != null && value.length() > 0) ? Enum.valueOf(enumType, value) : defaultValue;
} catch (SecurityException e) {
return secureValue;
} catch (IllegalArgumentException e) {
logger.warning(value + " is not a valid flag value for " + name + ". "
+ " Values must be one of " + Arrays.asList(enumType.getEnumConstants()));
return defaultValue;
}
}
}
