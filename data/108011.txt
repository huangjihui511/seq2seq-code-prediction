package org.jsoup.nodes;
import org.jsoup.Jsoup;
import org.junit.jupiter.api.Test;
import static org.jsoup.nodes.Document.OutputSettings;
import static org.jsoup.nodes.Entities.EscapeMode.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
public class EntitiesTest {
@Test public void escape() {
String text = "Hello &<> Ã… Ã¥ Ï€ æ–° there Â¾ Â© Â»";
String escapedAscii = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(base));
String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(extended));
String escapedAsciiXhtml = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(xhtml));
String escapedUtfFull = Entities.escape(text, new OutputSettings().charset("UTF-8").escapeMode(extended));
String escapedUtfMin = Entities.escape(text, new OutputSettings().charset("UTF-8").escapeMode(xhtml));
assertEquals("Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;", escapedAscii);
assertEquals("Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;", escapedAsciiFull);
assertEquals("Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;", escapedAsciiXhtml);
assertEquals("Hello &amp;&lt;&gt; Ã… Ã¥ Ï€ æ–° there Â¾ Â© Â»", escapedUtfFull);
assertEquals("Hello &amp;&lt;&gt; Ã… Ã¥ Ï€ æ–° there Â¾ Â© Â»", escapedUtfMin);
assertEquals(text, Entities.unescape(escapedAscii));
assertEquals(text, Entities.unescape(escapedAsciiFull));
assertEquals(text, Entities.unescape(escapedAsciiXhtml));
assertEquals(text, Entities.unescape(escapedUtfFull));
assertEquals(text, Entities.unescape(escapedUtfMin));
}
@Test public void escapedSupplementary() {
String text = "\uD835\uDD59";
String escapedAscii = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(base));
assertEquals("&#x1d559;", escapedAscii);
String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(extended));
assertEquals("&hopf;", escapedAsciiFull);
String escapedUtf= Entities.escape(text, new OutputSettings().charset("UTF-8").escapeMode(extended));
assertEquals(text, escapedUtf);
}
@Test public void unescapeMultiChars() {
String text = "&NestedGreaterGreater; &nGg; &nGt; &nGtv; &Gt; &gg;"; 
String un = "â‰« â‹™Ì¸ â‰«âƒ’ â‰«Ì¸ â‰« â‰«";
assertEquals(un, Entities.unescape(text));
String escaped = Entities.escape(un, new OutputSettings().charset("ascii").escapeMode(extended));
assertEquals("&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;", escaped);
assertEquals(un, Entities.unescape(escaped));
}
@Test public void xhtml() {
assertEquals(38, xhtml.codepointForName("amp"));
assertEquals(62, xhtml.codepointForName("gt"));
assertEquals(60, xhtml.codepointForName("lt"));
assertEquals(34, xhtml.codepointForName("quot"));
assertEquals("amp", xhtml.nameForCodepoint(38));
assertEquals("gt", xhtml.nameForCodepoint(62));
assertEquals("lt", xhtml.nameForCodepoint(60));
assertEquals("quot", xhtml.nameForCodepoint(34));
}
@Test public void getByName() {
assertEquals("â‰«âƒ’", Entities.getByName("nGt"));
assertEquals("fj", Entities.getByName("fjlig"));
assertEquals("â‰«", Entities.getByName("gg"));
assertEquals("Â©", Entities.getByName("copy"));
}
@Test public void escapeSupplementaryCharacter() {
String text = new String(Character.toChars(135361));
String escapedAscii = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(base));
assertEquals("&#x210c1;", escapedAscii);
String escapedUtf = Entities.escape(text, new OutputSettings().charset("UTF-8").escapeMode(base));
assertEquals(text, escapedUtf);
}
@Test public void notMissingMultis() {
String text = "&nparsl;";
String un = "\u2AFD\u20E5";
assertEquals(un, Entities.unescape(text));
}
@Test public void notMissingSupplementals() {
String text = "&npolint; &qfr;";
String un = "â¨” \uD835\uDD2E"; 
assertEquals(un, Entities.unescape(text));
}
@Test public void unescape() {
String text = "Hello &AElig; &amp;&LT&gt; &reg &angst; &angst &#960; &#960 &#x65B0; there &! &frac34; &copy; &COPY;";
assertEquals("Hello Ã† &<> Â® Ã… &angst Ï€ Ï€ æ–° there &! Â¾ Â© Â©", Entities.unescape(text));
assertEquals("&0987654321; &unknown", Entities.unescape("&0987654321; &unknown"));
}
@Test public void strictUnescape() { 
String text = "Hello &amp= &amp;";
assertEquals("Hello &amp= &", Entities.unescape(text, true));
assertEquals("Hello &= &", Entities.unescape(text));
assertEquals("Hello &= &", Entities.unescape(text, false));
}
@Test public void caseSensitive() {
String unescaped = "Ãœ Ã¼ & &";
assertEquals("&Uuml; &uuml; &amp; &amp;",
Entities.escape(unescaped, new OutputSettings().charset("ascii").escapeMode(extended)));
String escaped = "&Uuml; &uuml; &amp; &AMP";
assertEquals("Ãœ Ã¼ & &", Entities.unescape(escaped));
}
@Test public void quoteReplacements() {
String escaped = "&#92; &#36;";
String unescaped = "\\ $";
assertEquals(unescaped, Entities.unescape(escaped));
}
@Test public void letterDigitEntities() {
String html = "<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>";
Document doc = Jsoup.parse(html);
doc.outputSettings().charset("ascii");
Element p = doc.select("p").first();
assertEquals("&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;", p.html());
assertEquals("Â¹Â²Â³Â¼Â½Â¾", p.text());
doc.outputSettings().charset("UTF-8");
assertEquals("Â¹Â²Â³Â¼Â½Â¾", p.html());
}
@Test public void noSpuriousDecodes() {
String string = "http:
assertEquals(string, Entities.unescape(string));
}
@Test public void escapesGtInXmlAttributesButNotInHtml() {
String docHtml = "<a title='<p>One</p>'>One</a>";
Document doc = Jsoup.parse(docHtml);
Element element = doc.select("a").first();
doc.outputSettings().escapeMode(base);
assertEquals("<a title=\"<p>One</p>\">One</a>", element.outerHtml());
doc.outputSettings().escapeMode(xhtml);
assertEquals("<a title=\"&lt;p>One&lt;/p>\">One</a>", element.outerHtml());
}
}
