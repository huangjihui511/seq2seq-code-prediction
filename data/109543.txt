package permissions.dispatcher;
import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Build;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.BDDMockito;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import androidx.core.content.PermissionChecker;
import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;
import static android.os.Build.VERSION_CODES.JELLY_BEAN;
import static android.os.Build.VERSION_CODES.KITKAT_WATCH;
import static android.os.Build.VERSION_CODES.O;
import static android.os.Build.VERSION_CODES.P;
import static android.os.Build.VERSION_CODES.Q;
import static junit.framework.Assert.assertEquals;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
@RunWith(PowerMockRunner.class)
@PrepareForTest({PermissionChecker.class})
@SuppressLint("NewApi")
public class ApiLevelTestSuite {
private static final int MOST_RECENT_API_LEVEL = Build.VERSION_CODES.M;
private static final int NEEDS_PERMISSION_CHECK = 1024;
private final Context mockContext;
public ApiLevelTestSuite() {
mockContext = Mockito.mock(Context.class);
}
@Before
public void beforeTest() throws Exception {
this.resetApiLevel();
PowerMockito.mockStatic(PermissionChecker.class);
BDDMockito.given(PermissionChecker.checkSelfPermission(any(Context.class), anyString())).willReturn(NEEDS_PERMISSION_CHECK);
}
@Test
public void testAssumeApiLevelWorking() throws Exception {
assumeApiLevel(ICE_CREAM_SANDWICH);
assertEquals(ICE_CREAM_SANDWICH, Build.VERSION.SDK_INT);
resetApiLevel();
assertEquals(0, Build.VERSION.SDK_INT);
}
@Test
public void testCheckSelfPermissionMockWorking() throws Exception {
assertEquals(NEEDS_PERMISSION_CHECK, PermissionChecker.checkSelfPermission(mockContext, "permission"));
}
@Test
public void testAddVoicemailPermission() throws Exception {
iteratePermissionCheck(Manifest.permission.ADD_VOICEMAIL, ICE_CREAM_SANDWICH);
}
@Test
public void testBodySensorsPermission() throws Exception {
iteratePermissionCheck(Manifest.permission.BODY_SENSORS, KITKAT_WATCH);
}
@Test
public void testReadCallLogPermission() throws Exception {
iteratePermissionCheck(Manifest.permission.READ_CALL_LOG, JELLY_BEAN);
}
@Test
public void testReadExternalStoragePermission() throws Exception {
iteratePermissionCheck(Manifest.permission.READ_EXTERNAL_STORAGE, JELLY_BEAN);
}
@Test
public void testWriteCallLogPermission() throws Exception {
iteratePermissionCheck(Manifest.permission.WRITE_CALL_LOG, JELLY_BEAN);
}
@Test
public void testBodySensors() throws Exception {
iteratePermissionCheck(Manifest.permission.BODY_SENSORS, KITKAT_WATCH);
}
@Test
public void testReadPhoneNumbers() throws Exception {
iteratePermissionCheck(Manifest.permission.READ_PHONE_NUMBERS, O);
}
@Test
public void testAnswerPhoneNumbers() throws Exception {
iteratePermissionCheck(Manifest.permission.ANSWER_PHONE_CALLS, O);
}
@Test
public void testAcceptHandOver() throws Exception {
iteratePermissionCheck(Manifest.permission.ACCEPT_HANDOVER, P);
}
@Test
public void testActivityRecognition() throws Exception {
iteratePermissionCheck(Manifest.permission.ACTIVITY_RECOGNITION, Q);
}
@Test
public void testAccessMediaLocation() throws Exception {
iteratePermissionCheck(Manifest.permission.ACCESS_MEDIA_LOCATION, Q);
}
@Test
public void testAccessBackgroundLocation() throws Exception {
iteratePermissionCheck(Manifest.permission.ACCESS_BACKGROUND_LOCATION, Q);
}
private void iteratePermissionCheck(String permission, int permissionMinLevel) throws Exception {
for (int apiLevel = 0; apiLevel <= MOST_RECENT_API_LEVEL; apiLevel++) {
assumeApiLevel(apiLevel);
boolean shouldAutoGrantPermission = apiLevel < permissionMinLevel;
boolean hasPermission = PermissionUtils.hasSelfPermissions(mockContext, permission);
if (shouldAutoGrantPermission != hasPermission) {
throw new AssertionError(permission + " check on API level " + apiLevel + " shouldn't return auto-grant=" + shouldAutoGrantPermission + " amd has-permission=" + hasPermission);
}
}
}
private void assumeApiLevel(int apiLevel) throws Exception {
Field sdkIntField = Build.VERSION.class.getDeclaredField("SDK_INT");
sdkIntField.setAccessible(true);
Field modifiersField = Field.class.getDeclaredField("modifiers");
modifiersField.setAccessible(true);
modifiersField.setInt(sdkIntField, sdkIntField.getModifiers() & ~Modifier.FINAL);
sdkIntField.set(null, apiLevel);
modifiersField.setInt(sdkIntField, sdkIntField.getModifiers() | Modifier.FINAL);
sdkIntField.setAccessible(false);
}
private void resetApiLevel() throws Exception {
this.assumeApiLevel(0);
}
}
