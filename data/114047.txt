package com.flipkart.android.proteus.value;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
public class Array extends Value {
private final List<Value> values;
public Array() {
values = new ArrayList<>();
}
public Array(Value[] values) {
this.values = Arrays.asList(values);
}
public Array(int capacity) {
values = new ArrayList<>(capacity);
}
@Override
public Array copy() {
Array result = new Array(values.size());
for (Value value : values) {
result.add(value.copy());
}
return result;
}
public void add(@Nullable Boolean bool) {
values.add(bool == null ? Null.INSTANCE : new Primitive(bool));
}
public void add(@Nullable Character character) {
values.add(character == null ? Null.INSTANCE : new Primitive(character));
}
public void add(@Nullable Number number) {
values.add(number == null ? Null.INSTANCE : new Primitive(number));
}
public void add(@Nullable String string) {
values.add(string == null ? Null.INSTANCE : new Primitive(string));
}
public void add(@Nullable Value value) {
if (value == null) {
value = Null.INSTANCE;
}
values.add(value);
}
public void add(int position, @Nullable Value value) {
if (value == null) {
value = Null.INSTANCE;
}
values.add(position, value);
}
public void addAll(@NonNull Array array) {
values.addAll(array.values);
}
public Value set(int index, @NonNull Value value) {
return values.set(index, value);
}
public boolean remove(@NonNull Value value) {
return values.remove(value);
}
public Value remove(int index) {
return values.remove(index);
}
public boolean contains(@NonNull Value value) {
return values.contains(value);
}
public int size() {
return values.size();
}
public Iterator<Value> iterator() {
return values.iterator();
}
public Value get(int i) {
return values.get(i);
}
@Override
public boolean equals(java.lang.Object o) {
return (o == this) || (o instanceof Array && ((Array) o).values.equals(values));
}
@Override
public int hashCode() {
return values.hashCode();
}
}
