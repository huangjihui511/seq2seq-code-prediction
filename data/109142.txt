package io.realm.internal;
import android.support.test.runner.AndroidJUnit4;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import java.util.concurrent.atomic.AtomicBoolean;
import io.realm.RealmConfiguration;
import io.realm.log.LogLevel;
import io.realm.log.RealmLog;
import io.realm.rule.TestRealmConfigurationFactory;
import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertFalse;
import static junit.framework.Assert.assertTrue;
import static junit.framework.Assert.fail;
@RunWith(AndroidJUnit4.class)
public class OsObjectStoreTests {
@Rule
public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
@Rule
public final ExpectedException thrown = ExpectedException.none();
@Before
public void setUp() {
RealmLog.setLevel(LogLevel.ERROR);
}
@After
public void tearDown() {
RealmLog.setLevel(LogLevel.WARN);
}
@Test
public void callWithLock() {
RealmConfiguration config = configFactory.createConfiguration();
OsSharedRealm sharedRealm = OsSharedRealm.getInstance(config);
assertFalse(OsObjectStore.callWithLock(config, new Runnable() {
@Override
public void run() {
fail();
}
}));
sharedRealm.close();
final AtomicBoolean callbackCalled = new AtomicBoolean(false);
assertTrue(OsObjectStore.callWithLock(config, new Runnable() {
@Override
public void run() {
callbackCalled.set(true);
}
}));
assertTrue(callbackCalled.get());
}
@Test
public void callWithLock_throwInCallback() {
RealmConfiguration config = configFactory.createConfiguration();
final RuntimeException exception = new RuntimeException();
try {
OsObjectStore.callWithLock(config, new Runnable() {
@Override
public void run() {
throw exception;
}
});
fail();
} catch (RuntimeException e) {
assertEquals(exception, e);
}
final AtomicBoolean callbackCalled = new AtomicBoolean(false);
assertTrue(OsObjectStore.callWithLock(config, new Runnable() {
@Override
public void run() {
callbackCalled.set(true);
}
}));
}
}
