package org.gnucash.android.export.ofx;
import android.database.sqlite.SQLiteDatabase;
import android.preference.PreferenceManager;
import android.util.Log;
import com.crashlytics.android.Crashlytics;
import org.gnucash.android.R;
import org.gnucash.android.app.GnuCashApplication;
import org.gnucash.android.db.adapter.AccountsDbAdapter;
import org.gnucash.android.export.ExportParams;
import org.gnucash.android.export.Exporter;
import org.gnucash.android.model.Account;
import org.gnucash.android.model.Transaction;
import org.gnucash.android.util.PreferencesHelper;
import org.gnucash.android.util.TimestampHelper;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
public class OfxExporter extends Exporter{
private List<Account> mAccountsList;
public OfxExporter(ExportParams params) {
super(params, null);
LOG_TAG = "OfxExporter";
}
public OfxExporter(ExportParams params, SQLiteDatabase db){
super(params, db);
LOG_TAG = "OfxExporter";
}
private void generateOfx(Document doc, Element parent){
Element transactionUid = doc.createElement(OfxHelper.TAG_TRANSACTION_UID);
transactionUid.appendChild(doc.createTextNode(OfxHelper.UNSOLICITED_TRANSACTION_ID));
Element statementTransactionResponse = doc.createElement(OfxHelper.TAG_STATEMENT_TRANSACTION_RESPONSE);
statementTransactionResponse.appendChild(transactionUid);
Element bankmsgs = doc.createElement(OfxHelper.TAG_BANK_MESSAGES_V1);
bankmsgs.appendChild(statementTransactionResponse);
parent.appendChild(bankmsgs);
AccountsDbAdapter accountsDbAdapter = mAccountsDbAdapter;
for (Account account : mAccountsList) {
if (account.getTransactionCount() == 0)
continue;
if (!GnuCashApplication.isDoubleEntryEnabled() && account.getName().contains(mContext.getString(R.string.imbalance_account_name)))
continue;
account.toOfx(doc, statementTransactionResponse, mExportParams.getExportStartTime());
accountsDbAdapter.markAsExported(account.getUID());
}
}
private String generateOfxExport() throws ExporterException {
DocumentBuilderFactory docFactory = DocumentBuilderFactory
.newInstance();
DocumentBuilder docBuilder;
try {
docBuilder = docFactory.newDocumentBuilder();
} catch (ParserConfigurationException e) {
throw new ExporterException(mExportParams, e);
}
Document document = docBuilder.newDocument();
Element root = document.createElement("OFX");
ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxHelper.OFX_HEADER);
document.appendChild(pi);
document.appendChild(root);
generateOfx(document, root);
boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(mContext)
.getBoolean(mContext.getString(R.string.key_xml_ofx_header), false);
PreferencesHelper.setLastExportTime(TimestampHelper.getTimestampFromNow());
StringWriter stringWriter = new StringWriter();
if (useXmlHeader){
write(document, stringWriter, false);
return stringWriter.toString();
} else {
Node ofxNode = document.getElementsByTagName("OFX").item(0);
write(ofxNode, stringWriter, true);
return OfxHelper.OFX_SGML_HEADER + '\n' + stringWriter.toString();
}
}
@Override
public List<String> generateExport() throws ExporterException {
mAccountsList = mAccountsDbAdapter.getExportableAccounts(mExportParams.getExportStartTime());
if (mAccountsList.isEmpty())
return new ArrayList<>(); 
BufferedWriter writer = null;
try {
File file = new File(getExportCacheFilePath());
writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
writer.write(generateOfxExport());
} catch (IOException e) {
throw new ExporterException(mExportParams, e);
} finally {
if (writer != null) {
try {
writer.close();
} catch (IOException e) {
throw new ExporterException(mExportParams, e);
}
}
}
List<String> exportedFiles = new ArrayList<>();
exportedFiles.add(getExportCacheFilePath());
return exportedFiles;
}
private void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
try {
TransformerFactory transformerFactory = TransformerFactory
.newInstance();
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(node);
StreamResult result = new StreamResult(outputWriter);
transformer.setOutputProperty("{http:
transformer.setOutputProperty(OutputKeys.INDENT, "yes");
if (omitXmlDeclaration) {
transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
}
transformer.transform(source, result);
} catch (TransformerException tfException) {
Log.e(LOG_TAG, tfException.getMessage());
Crashlytics.logException(tfException);
}
}
public String getExportMimeType(){
return "text/xml";
}
}
