package io.grpc.internal;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import io.grpc.Metadata;
import io.grpc.Status;
import io.grpc.internal.ClientStreamListener.RpcProgress;
public final class FailingClientStream extends NoopClientStream {
private boolean started;
private final Status error;
private final RpcProgress rpcProgress;
public FailingClientStream(Status error) {
this(error, RpcProgress.PROCESSED);
}
public FailingClientStream(Status error, RpcProgress rpcProgress) {
Preconditions.checkArgument(!error.isOk(), "error must not be OK");
this.error = error;
this.rpcProgress = rpcProgress;
}
@Override
public void start(ClientStreamListener listener) {
Preconditions.checkState(!started, "already started");
started = true;
listener.closed(error, rpcProgress, new Metadata());
}
@VisibleForTesting
Status getError() {
return error;
}
@Override
public void appendTimeoutInsight(InsightBuilder insight) {
insight.appendKeyValue("error", error).appendKeyValue("progress", rpcProgress);
}
}
