package net.openhft.affinity.impl;
import com.sun.jna.LastErrorException;
import com.sun.jna.Library;
import com.sun.jna.Native;
import net.openhft.affinity.IAffinity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.lang.management.ManagementFactory;
import java.util.BitSet;
public enum SolarisJNAAffinity implements IAffinity {
INSTANCE;
private static final Logger LOGGER = LoggerFactory.getLogger(SolarisJNAAffinity.class);
private final ThreadLocal<Integer> THREAD_ID = new ThreadLocal<>();
@Override
public BitSet getAffinity() {
return new BitSet();
}
@Override
public void setAffinity(final BitSet affinity) {
LOGGER.trace("unable to set mask to {} as the JNIa nd JNA libraries and not loaded", Utilities.toHexString(affinity));
}
@Override
public int getCpu() {
return -1;
}
@Override
public int getProcessId() {
final String name = ManagementFactory.getRuntimeMXBean().getName();
return Integer.parseInt(name.split("@")[0]);
}
@Override
public int getThreadId() {
Integer tid = THREAD_ID.get();
if (tid == null) {
tid = CLibrary.INSTANCE.pthread_self();
tid = tid & 0xFFFFFF;
THREAD_ID.set(tid);
}
return tid;
}
interface CLibrary extends Library {
CLibrary INSTANCE = (CLibrary)
Native.loadLibrary("c", CLibrary.class);
int pthread_self() throws LastErrorException;
}
}
