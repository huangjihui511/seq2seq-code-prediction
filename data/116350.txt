package org.spongepowered.api.event.block;
import com.google.common.collect.Lists;
import org.spongepowered.api.block.BlockSnapshot;
import org.spongepowered.api.block.BlockState;
import org.spongepowered.api.block.BlockType;
import org.spongepowered.api.block.BlockTypes;
import org.spongepowered.api.block.tileentity.TileEntity;
import org.spongepowered.api.data.Transaction;
import org.spongepowered.api.entity.Entity;
import org.spongepowered.api.event.Cancellable;
import org.spongepowered.api.event.Event;
import org.spongepowered.api.event.cause.Cause;
import org.spongepowered.api.event.cause.EventContextKeys;
import org.spongepowered.api.world.Location;
import org.spongepowered.api.world.World;
import java.util.List;
import java.util.function.Predicate;
public interface ChangeBlockEvent extends Event, Cancellable {
List<Transaction<BlockSnapshot>> getTransactions();
default List<Transaction<BlockSnapshot>> filter(Predicate<Location<World>> predicate) {
List<Transaction<BlockSnapshot>> invalidatedTransactions = Lists.newArrayList();
for (Transaction<BlockSnapshot> transaction: this.getTransactions()) {
if (!predicate.test(transaction.getOriginal().getLocation().get())) {
transaction.setValid(false);
invalidatedTransactions.add(transaction);
}
}
return invalidatedTransactions;
}
default void filterAll() {
for (Transaction<BlockSnapshot> transaction: this.getTransactions()) {
transaction.setValid(false);
}
}
interface Pre extends Event, Cancellable {
List<Location<World>> getLocations();
}
interface Decay extends ChangeBlockEvent {}
interface Grow extends ChangeBlockEvent {}
interface Break extends ChangeBlockEvent {}
interface Place extends ChangeBlockEvent {}
interface Modify extends ChangeBlockEvent {}
interface Post extends ChangeBlockEvent {}
}
