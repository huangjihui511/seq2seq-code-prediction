package net.glowstone.util.nbt;
import static com.google.common.base.Preconditions.checkNotNull;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.UUID;
import java.util.function.Consumer;
import java.util.function.DoubleConsumer;
import java.util.function.Function;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.stream.Collectors;
import lombok.Getter;
import net.glowstone.constants.ItemIds;
import net.glowstone.io.nbt.NbtSerialization;
import net.glowstone.util.DynamicallyTypedMapWithDoubles;
import net.glowstone.util.FloatConsumer;
import net.glowstone.util.ShortConsumer;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.jetbrains.annotations.NonNls;
public class CompoundTag extends Tag<Map<String, Tag>>
implements DynamicallyTypedMapWithDoubles<String> {
@Getter
private final Map<String, Tag> value = new LinkedHashMap<>();
public CompoundTag() {
super(TagType.COMPOUND);
}
public CompoundTag(Map<String, Tag> value) {
this();
this.value.putAll(value);
}
@Override
protected void valueToString(StringBuilder builder) {
builder.append(value.size()).append(" entries\n{\n"); 
for (Entry<String, Tag> entry : value.entrySet()) {
builder.append(" ").append(entry.getKey()).append(": ")
.append(entry.getValue().toString().replaceAll("\n", "\n ")).append("\n");
}
builder.append("}");
}
public boolean isEmpty() {
return value.isEmpty();
}
public boolean containsKey(@NonNls String key) {
return value.containsKey(key);
}
public void remove(@NonNls String key) {
value.remove(key);
}
public boolean matches(CompoundTag other) {
for (Entry<String, Tag> entry : value.entrySet()) {
if (!other.value.containsKey(entry.getKey())) {
return false;
}
Tag value = entry.getValue();
Tag otherValue = other.value.get(entry.getKey());
if ((value == null && otherValue != null) || (value != null && otherValue == null)) {
return false;
}
if (value != null) {
if (value.getClass() != otherValue.getClass()) {
return false;
}
if (value instanceof CompoundTag) {
if (!((CompoundTag) value).matches((CompoundTag) otherValue)) {
return false;
}
} else if (value instanceof IntArrayTag) {
if (!Arrays.equals(((IntArrayTag) value).getValue(),
((IntArrayTag) otherValue).getValue())) {
return false;
}
} else if (value instanceof ByteArrayTag) {
if (!Arrays.equals(((ByteArrayTag) value).getValue(),
((ByteArrayTag) otherValue).getValue())) {
return false;
}
} else if (!value.equals(otherValue)) {
return false;
}
}
}
return true;
}
public void mergeInto(CompoundTag other, boolean overwrite) {
for (String key : value.keySet()) {
if (!overwrite && other.containsKey(key)) {
continue;
}
other.put(key, value.get(key));
}
}
public Number getNumber(String key) {
return (Number) get(key, NumericTag.class);
}
public byte getByte(@NonNls String key) {
if (isInt(key)) {
return (byte) getInt(key);
}
return get(key, ByteTag.class);
}
public short getShort(@NonNls String key) {
if (isInt(key)) {
return (short) getInt(key);
}
return get(key, ShortTag.class);
}
public int getInt(@NonNls String key) {
if (isByte(key)) {
return (int) getByte(key);
} else if (isShort(key)) {
return (int) getShort(key);
} else if (isLong(key)) {
return (int) getLong(key);
}
return get(key, IntTag.class);
}
@Override
public boolean getBoolean(@NonNls String key) {
return getNumber(key).byteValue() != 0;
}
public boolean getBoolean(@NonNls String key, boolean defaultValue) {
return isNumeric(key) ? getBoolean(key) : defaultValue;
}
public long getLong(@NonNls String key) {
if (isInt(key)) {
return (long) getInt(key);
}
return get(key, LongTag.class);
}
public float getFloat(@NonNls String key) {
if (isDouble(key)) {
return (float) getDouble(key);
} else if (isInt(key)) {
return (float) getInt(key);
}
return get(key, FloatTag.class);
}
public double getDouble(@NonNls String key) {
if (isFloat(key)) {
return (double) getFloat(key);
} else if (isInt(key)) {
return (double) getInt(key);
}
return get(key, DoubleTag.class);
}
public byte[] getByteArray(@NonNls String key) {
return get(key, ByteArrayTag.class);
}
public String getString(@NonNls String key) {
return get(key, StringTag.class);
}
public int[] getIntArray(@NonNls String key) {
return get(key, IntArrayTag.class);
}
@SuppressWarnings("unchecked")
public <V> List<V> getList(@NonNls String key, TagType type) {
List<? extends Tag> original = getTagList(key, type);
List<V> result = new ArrayList<>(original.size());
if (type == TagType.COMPOUND) {
result.addAll(
original.stream().map(
item -> (V) new CompoundTag((Map<String, Tag>) item.getValue()))
.collect(Collectors.toList()));
} else {
result.addAll(
original.stream().map(
item -> (V) item.getValue()).collect(Collectors.toList()));
}
return result;
}
public CompoundTag getCompound(@NonNls String key) {
return getTag(key, CompoundTag.class);
}
public Optional<CompoundTag> tryGetCompound(@NonNls String key) {
if (isCompound(key)) {
return Optional.of(getCompound(key));
}
return Optional.empty();
}
public boolean readCompound(@NonNls String key, Consumer<? super CompoundTag> consumer) {
Optional<CompoundTag> tag = tryGetCompound(key);
tag.ifPresent(consumer);
return tag.isPresent();
}
private <V, T extends Tag<V>> boolean readTag(@NonNls String key, Class<T> clazz,
Consumer<? super V> consumer) {
if (is(key, clazz)) {
consumer.accept(get(key, clazz));
return true;
}
return false;
}
private <T> Optional<T> tryGetTag(@NonNls String key, Class<? extends Tag<T>> clazz) {
return is(key, clazz) ? Optional.of(get(key, clazz)) : Optional.empty();
}
public boolean readFloat(@NonNls String key, FloatConsumer consumer) {
if (isFloat(key)) {
consumer.accept(getFloat(key));
return true;
}
return false;
}
public boolean readDouble(@NonNls String key, DoubleConsumer consumer) {
if (isDouble(key)) {
consumer.accept(getDouble(key));
return true;
}
return false;
}
public boolean readInt(@NonNls String key, IntConsumer consumer) {
if (isInt(key)) {
consumer.accept(getInt(key));
return true;
}
return false;
}
public boolean readByteArray(@NonNls String key, Consumer<? super byte[]> consumer) {
return readTag(key, ByteArrayTag.class, consumer);
}
public boolean readIntArray(@NonNls String key, Consumer<? super int[]> consumer) {
return readTag(key, IntArrayTag.class, consumer);
}
public boolean readLong(@NonNls String key, LongConsumer consumer) {
if (isLong(key)) {
consumer.accept(getLong(key));
return true;
}
return false;
}
public Optional<Long> tryGetLong(@NonNls String key) {
return tryGetTag(key, LongTag.class);
}
public boolean readShort(@NonNls String key, ShortConsumer consumer) {
if (isShort(key)) {
consumer.accept(getShort(key));
return true;
}
return false;
}
public boolean readItem(@NonNls String key, Consumer<? super ItemStack> consumer) {
return readCompound(key, tag -> consumer.accept(NbtSerialization.readItem(tag)));
}
public boolean readBoolean(@NonNls String key, Consumer<? super Boolean> consumer) {
return readTag(key, ByteTag.class, byteVal -> consumer.accept(byteVal != 0));
}
public boolean readByte(@NonNls String key, Consumer<? super Byte> consumer) {
return readTag(key, ByteTag.class, consumer);
}
public boolean readBooleanNegated(@NonNls String key, Consumer<? super Boolean> consumer) {
return readTag(key, ByteTag.class, byteVal -> consumer.accept(byteVal == 0));
}
public <T> boolean readList(@NonNls String key, TagType type,
Consumer<? super List<T>> consumer) {
if (isList(key, type)) {
consumer.accept(getList(key, type));
return true;
}
return false;
}
public boolean readCompoundList(@NonNls String key,
Consumer<? super List<CompoundTag>> consumer) {
return readList(key, TagType.COMPOUND, consumer);
}
public boolean iterateCompoundList(@NonNls String key, Consumer<? super CompoundTag> consumer) {
return readCompoundList(key, compoundTags -> compoundTags.forEach(consumer));
}
public boolean readStringList(@NonNls String key, Consumer<? super List<String>> consumer) {
return readList(key, TagType.STRING, consumer);
}
public boolean readFloatList(@NonNls String key, Consumer<? super List<Float>> consumer) {
return readList(key, TagType.FLOAT, consumer);
}
public boolean readDoubleList(@NonNls String key, Consumer<? super List<Double>> consumer) {
return readList(key, TagType.DOUBLE, consumer);
}
public boolean readString(@NonNls String key, Consumer<? super String> consumer) {
return readTag(key, StringTag.class, consumer);
}
public Optional<Material> tryGetMaterial(@NonNls String key) {
if (!containsKey(key)) {
return Optional.empty();
}
switch (value.get(key).getType()) {
case STRING:
@NonNls String id = getString(key);
if (id.isEmpty()) {
return Optional.empty();
}
if (!id.contains(":")) {
id = "minecraft:" + id;
}
Material type = ItemIds.getBlock(id);
if (type == null) {
type = ItemIds.getItem(id);
}
return Optional.ofNullable(type);
case INT:
return Optional.ofNullable(Material.getMaterial(getInt(key)));
case SHORT:
return Optional.ofNullable(Material.getMaterial(getShort(key)));
case BYTE:
return Optional.ofNullable(Material.getMaterial(getByte(key)));
default:
return Optional.empty();
}
}
public Optional<String> tryGetString(@NonNls String key) {
return tryGetTag(key, StringTag.class);
}
public Optional<Integer> tryGetInt(@NonNls String key) {
return tryGetTag(key, IntTag.class);
}
public boolean readUuid(@NonNls String keyMost, @NonNls String keyLeast,
Consumer<? super UUID> consumer) {
if (isLong(keyMost) && isLong(keyLeast)) {
consumer.accept(new UUID(getLong(keyMost), getLong(keyLeast)));
return true;
}
return false;
}
public Optional<UUID> tryGetUuid(@NonNls String keyMost, @NonNls String keyLeast) {
if (isLong(keyMost) && isLong(keyLeast)) {
return Optional.of(new UUID(getLong(keyMost), getLong(keyLeast)));
}
return Optional.empty();
}
@SuppressWarnings("unchecked")
public List<CompoundTag> getCompoundList(@NonNls String key) {
return (List<CompoundTag>) getTagList(key, TagType.COMPOUND);
}
public boolean isNumeric(@NonNls String key) {
return is(key, NumericTag.class);
}
public boolean isByte(@NonNls String key) {
return is(key, ByteTag.class);
}
public boolean isShort(@NonNls String key) {
return is(key, ShortTag.class);
}
public boolean isInt(@NonNls String key) {
return is(key, IntTag.class);
}
public boolean isLong(@NonNls String key) {
return is(key, LongTag.class);
}
public boolean isFloat(@NonNls String key) {
return is(key, FloatTag.class);
}
public boolean isDouble(@NonNls String key) {
return is(key, DoubleTag.class);
}
public boolean isByteArray(@NonNls String key) {
return is(key, ByteArrayTag.class);
}
public boolean isString(@NonNls String key) {
return is(key, StringTag.class);
}
public boolean isIntArray(@NonNls String key) {
return is(key, IntArrayTag.class);
}
public boolean isList(@NonNls String key, TagType type) {
if (!is(key, ListTag.class)) {
return false;
}
ListTag tag = getTag(key, ListTag.class);
return tag.getChildType() == type;
}
public boolean isCompound(@NonNls String key) {
return is(key, CompoundTag.class);
}
public boolean isCompoundList(@NonNls String key) {
return isList(key, TagType.COMPOUND);
}
public void putBool(@NonNls String key, boolean value) {
putByte(key, value ? 1 : 0);
}
public void putByte(@NonNls String key, int value) {
put(key, new ByteTag((byte) value));
}
public void putShort(@NonNls String key, int value) {
put(key, new ShortTag((short) value));
}
public void putInt(@NonNls String key, int value) {
put(key, new IntTag(value));
}
public void putLong(@NonNls String key, long value) {
put(key, new LongTag(value));
}
public void putFloat(@NonNls String key, double value) {
put(key, new FloatTag((float) value));
}
public void putDouble(@NonNls String key, double value) {
put(key, new DoubleTag(value));
}
public void putByteArray(@NonNls String key, byte... value) {
put(key, new ByteArrayTag(value));
}
public void putString(@NonNls String key, @NonNls String value) {
put(key, new StringTag(value));
}
public void putIntArray(@NonNls String key, int... value) {
put(key, new IntArrayTag(value));
}
public <V> void putList(@NonNls String key, TagType type, List<V> value,
Function<? super V, ? extends Tag> tagCreator) {
List<Tag> result = new ArrayList<>(value.size());
for (V item : value) {
result.add(tagCreator.apply(item));
}
put(key, new ListTag<>(type, result));
}
public void putCompound(@NonNls String key, CompoundTag tag) {
put(key, tag);
}
public void putCompoundList(@NonNls String key, List<CompoundTag> list) {
put(key, new ListTag<>(TagType.COMPOUND, list));
}
public void putStringList(@NonNls String key, List<String> list) {
putList(key, TagType.STRING, list, StringTag::new);
}
public void putFloatList(@NonNls String key, List<Float> list) {
putList(key, TagType.FLOAT, list, FloatTag::new);
}
public void putDoubleList(@NonNls String key, List<Double> list) {
putList(key, TagType.DOUBLE, list, DoubleTag::new);
}
public void putLongList(@NonNls String key, List<Long> list) {
putList(key, TagType.LONG, list, LongTag::new);
}
private <T extends Tag<?>> boolean is(@NonNls String key, Class<T> clazz) {
if (!containsKey(key)) {
return false;
}
Tag tag = value.get(key);
return tag != null && clazz.isAssignableFrom(tag.getClass());
}
void put(String key, Tag tag) {
checkNotNull(key, "Key cannot be null"); 
checkNotNull(tag, "Tag cannot be null"); 
value.put(key, tag);
}
private <V, T extends Tag<V>> V get(@NonNls String key, Class<T> clazz) {
return getTag(key, clazz).getValue();
}
@SuppressWarnings("unchecked")
private <T extends Tag<?>> T getTag(@NonNls String key, Class<T> clazz) {
if (!is(key, clazz)) {
throw new IllegalArgumentException(
"Compound does not contain " + clazz.getSimpleName() + " \"" + key + "\"");
}
return (T) value.get(key);
}
private List<? extends Tag> getTagList(@NonNls String key, TagType type) {
ListTag<?> tag = getTag(key, ListTag.class);
if (tag.getValue().isEmpty()) {
return Arrays.asList();
}
if (tag.getChildType() != type) {
throw new IllegalArgumentException(
"List \"" + key + "\" contains " + tag.getChildType() + ", not " + type);
}
return tag.getValue();
}
}
