package com.google.cloud.tools.jib.event.progress;
import com.google.cloud.tools.jib.event.events.ProgressEvent;
import com.google.common.collect.ImmutableList;
import java.util.concurrent.atomic.DoubleAdder;
import java.util.function.Consumer;
public class ProgressEventHandler implements Consumer<ProgressEvent> {
public static class Update {
private final double progress;
private final ImmutableList<String> unfinishedLeafTasks;
private Update(double progress, ImmutableList<String> unfinishedLeafTasks) {
this.progress = progress;
this.unfinishedLeafTasks = unfinishedLeafTasks;
}
public double getProgress() {
return progress;
}
public ImmutableList<String> getUnfinishedLeafTasks() {
return unfinishedLeafTasks;
}
}
private final AllocationCompletionTracker completionTracker = new AllocationCompletionTracker();
private final DoubleAdder progress = new DoubleAdder();
private final Consumer<Update> updateNotifier;
public ProgressEventHandler(Consumer<Update> updateNotifier) {
this.updateNotifier = updateNotifier;
}
@Override
public void accept(ProgressEvent progressEvent) {
Allocation allocation = progressEvent.getAllocation();
long progressUnits = progressEvent.getUnits();
double allocationFraction = allocation.getFractionOfRoot();
if (progressUnits != 0) {
progress.add(progressUnits * allocationFraction);
}
if (completionTracker.updateProgress(allocation, progressUnits)) {
updateNotifier.accept(new Update(progress.sum(), completionTracker.getUnfinishedLeafTasks()));
}
}
}
