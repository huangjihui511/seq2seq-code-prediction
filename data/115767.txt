package org.springframework.integration.dispatcher;
import java.util.ArrayList;
import java.util.List;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageDeliveryException;
import org.springframework.util.StringUtils;
@SuppressWarnings("serial")
public class AggregateMessageDeliveryException extends MessageDeliveryException {
private final List<? extends Exception> aggregatedExceptions;
public AggregateMessageDeliveryException(Message<?> undeliveredMessage,
String description, List<? extends Exception> aggregatedExceptions) {
super(undeliveredMessage, description);
this.initCause(aggregatedExceptions.get(0));
this.aggregatedExceptions = new ArrayList<Exception>(aggregatedExceptions);
}
public List<? extends Exception> getAggregatedExceptions() {
return new ArrayList<Exception>(this.aggregatedExceptions);
}
@Override
public String getMessage() {
String baseMessage = super.getMessage();
StringBuilder message = new StringBuilder(appendPeriodIfNecessary(baseMessage))
.append(" Multiple causes:\n");
for (Exception exception : this.aggregatedExceptions) {
message.append(" " + exception.getMessage() + "\n");
}
message.append("See below for the stacktrace of the first cause.");
return message.toString();
}
private String appendPeriodIfNecessary(String baseMessage) {
if (!StringUtils.hasText(baseMessage)) {
return "";
}
else if (!baseMessage.endsWith(".")) {
return baseMessage + ".";
}
else {
return baseMessage;
}
}
}
