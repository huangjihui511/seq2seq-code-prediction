package com.google.inject.internal;
import com.google.inject.internal.InjectorImpl.InjectorOptions;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.List;
final class ConstructionContext<T> {
T currentReference;
boolean constructing;
List<DelegatingInvocationHandler<T>> invocationHandlers;
public T getCurrentReference() {
return currentReference;
}
public void removeCurrentReference() {
this.currentReference = null;
}
public void setCurrentReference(T currentReference) {
this.currentReference = currentReference;
}
public boolean isConstructing() {
return constructing;
}
public void startConstruction() {
this.constructing = true;
}
public void finishConstruction() {
this.constructing = false;
invocationHandlers = null;
}
public Object createProxy(InjectorOptions injectorOptions, Class<?> expectedType)
throws InternalProvisionException {
if (injectorOptions.disableCircularProxies) {
throw InternalProvisionException.circularDependenciesDisabled(expectedType);
}
if (!expectedType.isInterface()) {
throw InternalProvisionException.cannotProxyClass(expectedType);
}
if (invocationHandlers == null) {
invocationHandlers = new ArrayList<>();
}
DelegatingInvocationHandler<T> invocationHandler = new DelegatingInvocationHandler<>();
invocationHandlers.add(invocationHandler);
ClassLoader classLoader = BytecodeGen.getClassLoader(expectedType);
return expectedType.cast(
Proxy.newProxyInstance(
classLoader,
new Class[] {expectedType, CircularDependencyProxy.class},
invocationHandler));
}
public void setProxyDelegates(T delegate) {
if (invocationHandlers != null) {
for (DelegatingInvocationHandler<T> handler : invocationHandlers) {
handler.setDelegate(delegate);
}
invocationHandlers = null;
}
}
}
