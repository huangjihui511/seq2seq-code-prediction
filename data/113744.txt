package net.pms.io;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
public class BufferedOutputByteArrayImpl extends ByteArrayOutputStream implements BufferedOutputFile {
public BufferedOutputByteArrayImpl(OutputParams params) {
super(params.outputByteArrayStreamBufferSize > 512 ? params.outputByteArrayStreamBufferSize : 512);
}
public BufferedOutputByteArrayImpl(int size) {
super(size);
}
@Override
public synchronized InputStream getInputStream(long newReadPosition) {
if (newReadPosition < 0) {
throw new IndexOutOfBoundsException("Can't set new read position to a negative value (" + newReadPosition + ")");
}
int length = Math.max(count - (int) newReadPosition, 0);
if (newReadPosition > 0 && newReadPosition >= count) {
throw new IndexOutOfBoundsException("Can't skip to position " + newReadPosition + " since the length is " + count);
}
byte[] bufferCopy = new byte[length];
System.arraycopy(buf, (int) newReadPosition, bufferCopy, 0, length);
return new ByteArrayInputStream(bufferCopy);
}
@Override
public void write(byte[] b, int off, int len) {
super.write(b, off, len);
}
@Override
public void write(int b) {
super.write(b);
}
@Override
public void write(byte[] b) throws IOException {
super.write(b);
}
@Deprecated
@Override
public WaitBufferedInputStream getCurrentInputStream() {
return null;
}
@Deprecated
@Override
public long getWriteCount() {
return 0;
}
@Deprecated
@Override
public int read(boolean firstRead, long readCount) {
return 0;
}
@Deprecated
@Override
public int read(boolean firstRead, long readCount, byte[] b, int off, int len) {
return 0;
}
@Deprecated
@Override
public void attachThread(ProcessWrapper thread) {
}
@Deprecated
@Override
public void reset() {
}
@Deprecated
@Override
public void removeInputStream(WaitBufferedInputStream waitBufferedInputStream) {
}
@Deprecated
@Override
public void detachInputStream() {
}
}
