package com.sun.swingset3.codeview;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.net.URL;
import java.util.*;
public class SnippetMap {
private final HashMap<String, List<FileSnippets>> snippetSets = new HashMap<String, List<FileSnippets>>();
private String currentKey;
private List<FileSnippets> currentSet;
private FileSnippets currentFileSnippets;
private int currentFileSnippetsIndex;
private int currentSnippetIndex;
private Snippet currentSnippet;
private PropertyChangeSupport pcs;
public SnippetMap() {
pcs = new PropertyChangeSupport(this);
}
public void addPropertyChangeListener(PropertyChangeListener pcl) {
pcs.addPropertyChangeListener(pcl);
}
public void add(String key, URL codeFile, Snippet snippet) {
List<FileSnippets> fileSnippetList = snippetSets.get(key);
if (fileSnippetList == null) {
fileSnippetList = new ArrayList<FileSnippets>();
snippetSets.put(key, fileSnippetList);
}
FileSnippets fileSnippets = findFileSnippetsForFile(fileSnippetList, codeFile);
if (fileSnippets == null) {
fileSnippets = new FileSnippets(key, codeFile);
fileSnippetList.add(fileSnippets);
}
if (!fileSnippets.snippets.contains(snippet)) {
fileSnippets.snippets.add(snippet);
}
}
public Set<String> keySet() {
return snippetSets.keySet();
}
public int getSnippetCountForSet(String key) {
int count = 0;
URL files[] = getFilesForSet(key);
for(URL file : files) {
Snippet snippets[] = getSnippetsForFile(key, file);
count += snippets.length;
}
return count;
}
public URL[] getFilesForSet(String key) {
List<FileSnippets> fileSnippetList = snippetSets.get(key);
URL files[];
if (fileSnippetList != null) {
files = new URL[fileSnippetList.size()];
int i = 0;
for(FileSnippets fileSnippets : fileSnippetList) {
files[i++] = fileSnippets.file;
}
} else {
files = new URL[0];
}
return files;
}
public Snippet[] getSnippetsForFile(String key, URL file) {
List<FileSnippets> fileSnippetList = snippetSets.get(key);
FileSnippets fileSnippets = findFileSnippetsForFile(fileSnippetList, file);
if (fileSnippets != null) {
if (fileSnippets.snippets != null) {
return fileSnippets.snippets.toArray(new Snippet[0]);
}
}
return new Snippet[0];
}
public int getIndexForSnippet(Snippet snippet) {
List<FileSnippets> fileSnippetList = snippetSets.get(snippet.key);
if (fileSnippetList != null) {
int index = 1;
for(FileSnippets fileSnippets : fileSnippetList) {
for(Snippet snippetInFile : fileSnippets.snippets) {
if (snippetInFile == snippet) {
return index;
} else {
index++;
}
}
}
}
return -1;
}
public URL getFileForSnippet(Snippet snippet) {
List<FileSnippets> fileSnippetList = snippetSets.get(snippet.key);
if (fileSnippetList != null) {
for(FileSnippets fileSnippets : fileSnippetList) {
for(Snippet snippetInFile : fileSnippets.snippets) {
if (snippetInFile == snippet) {
return fileSnippets.file;
}
}
}
}
return null;
}
public boolean isEmpty() {
return snippetSets.isEmpty();
}
public int getSize() {
return snippetSets.size();
}
public void clear() {
snippetSets.clear();
setCurrentSnippet(null);
setCurrentSet(null);
}
public void setCurrentSet(String key) {
String oldKey = currentKey;
if (key == null) {
currentKey = null;
currentSet = null;
currentFileSnippets = null;
currentFileSnippetsIndex = -1;
currentSnippetIndex = -1;
} else {
List<FileSnippets> fileSnippetList = snippetSets.get(key);
if (fileSnippetList == null) {
throw new IllegalArgumentException("snippet key " + key + " does not exist.");
}
currentKey = key;
currentSet = fileSnippetList;
currentFileSnippetsIndex = 0;
currentFileSnippets = currentSet.get(currentFileSnippetsIndex);
currentSnippetIndex = 0;
currentSnippet = currentFileSnippets.snippets.get(currentSnippetIndex);
}
pcs.firePropertyChange("currentSet", oldKey, currentKey);
pcs.firePropertyChange("currentSnippet", null, currentSnippet);
}
public String getCurrentSet() {
return currentKey;
}
public Snippet getCurrentSnippet() {
return currentSnippet;
}
protected void setCurrentSnippet(Snippet snippet) {
Snippet oldCurrentSnippet = currentSnippet;
currentSnippet = snippet;
pcs.firePropertyChange("currentSnippet", oldCurrentSnippet, snippet);
}
public Snippet firstSnippet() {
if (currentKey != null) {
currentFileSnippetsIndex = 0;
currentFileSnippets = currentSet.get(currentFileSnippetsIndex);
currentSnippetIndex = 0;
Snippet firstSnippet = currentFileSnippets.snippets.get(currentSnippetIndex);
setCurrentSnippet(firstSnippet);
return getCurrentSnippet();
}
return null;
}
public boolean nextSnippetExists() {
if (currentKey != null) {
if (currentSnippetIndex+1 < currentFileSnippets.snippets.size()) {
return true;
}
if (currentFileSnippetsIndex+1 < currentSet.size()) {
return true;
}
}
return false;
}
public Snippet nextSnippet() {
if (currentKey != null) {
if (currentSnippetIndex+1 < currentFileSnippets.snippets.size()) {
setCurrentSnippet(currentFileSnippets.snippets.get(++currentSnippetIndex));
return getCurrentSnippet();
}
if (currentFileSnippetsIndex+1 < currentSet.size()) {
currentFileSnippets = currentSet.get(++currentFileSnippetsIndex);
currentSnippetIndex = 0;
setCurrentSnippet(currentFileSnippets.snippets.get(currentSnippetIndex));
return getCurrentSnippet();
}
}
return null;
}
public boolean previousSnippetExists() {
if (currentKey != null) {
if (currentSnippetIndex-1 >= 0) {
return true;
}
if (currentFileSnippetsIndex-1 >= 0) {
return true;
}
}
return false;
}
public Snippet previousSnippet() {
if (currentKey != null) {
if (currentSnippetIndex-1 >= 0) {
setCurrentSnippet(currentFileSnippets.snippets.get(--currentSnippetIndex));
return getCurrentSnippet();
}
if (currentFileSnippetsIndex-1 >= 0) {
currentFileSnippets = currentSet.get(--currentFileSnippetsIndex);
currentSnippetIndex = currentFileSnippets.snippets.size() - 1;
setCurrentSnippet(currentFileSnippets.snippets.get(currentSnippetIndex));
return getCurrentSnippet();
}
}
return null;
}
public Snippet lastSnippet() {
if (currentKey != null) {
currentFileSnippetsIndex = currentSet.size() - 1;
currentFileSnippets = currentSet.get(currentFileSnippetsIndex);
currentSnippetIndex = currentFileSnippets.snippets.size() - 1;
setCurrentSnippet(currentFileSnippets.snippets.get(currentSnippetIndex));
return getCurrentSnippet();
}
return null;
}
private static FileSnippets findFileSnippetsForFile(List<FileSnippets> fileSnippetList, URL file) {
for(FileSnippets fileSnippets : fileSnippetList) {
if (fileSnippets.file == file) {
return fileSnippets;
}
}
return null;
}
private static class FileSnippets {
public final String key;
public final URL file;
public final ArrayList<Snippet> snippets;
public FileSnippets(String key, URL file) {
this.key = key;
this.file = file;
snippets = new ArrayList<Snippet>();
}
}
}
