package com.facebook.presto.operator.aggregation;
import com.facebook.presto.spi.block.Block;
import com.facebook.presto.spi.block.BlockBuilder;
import com.facebook.presto.spi.type.StandardTypes;
import com.google.common.collect.ImmutableList;
import org.testng.annotations.Test;
import java.util.List;
import java.util.stream.LongStream;
import static com.facebook.presto.block.BlockAssertions.createLongsBlock;
import static com.facebook.presto.spi.type.BigintType.BIGINT;
public class TestBitwiseOrAggregation
extends AbstractTestAggregationFunction
{
@Override
public Block[] getSequenceBlocks(int start, int length)
{
BlockBuilder blockBuilder = BIGINT.createBlockBuilder(null, length);
for (int i = start; i < start + length; i++) {
BIGINT.writeLong(blockBuilder, i);
}
return new Block[] {blockBuilder.build()};
}
@Override
public Object getExpectedValue(int start, int length)
{
if (length == 0) {
return null;
}
return LongStream.range(start, start + length).reduce(start, (x, y) -> x | y);
}
@Override
protected String getFunctionName()
{
return "bitwise_or_agg";
}
@Override
protected List<String> getFunctionParameterTypes()
{
return ImmutableList.of(StandardTypes.BIGINT);
}
@Test
public void testNulls()
{
testAggregation(1L, createLongsBlock(1L, null));
testAggregation(1L, createLongsBlock(null, 1L));
}
}
