package com.JUtils.image;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
public class ImageUtil {
public static final float DEFAULT_QUALITY = 0.2125f ;
public static void addWaterMark(String imgPath, String markPath, int x, int y, float alpha,String destPath) throws Exception{
try {
BufferedImage bufferedImage = addWaterMark(imgPath, markPath, x, y, alpha);
ImageIO.write(bufferedImage, imageFormat(imgPath), new File(destPath));
} catch (Exception e) {
}
}
public static void addWaterMark(String imgPath, String markPath, int x, int y, float alpha,String format,String destPath) throws Exception{
try {
BufferedImage bufferedImage = addWaterMark(imgPath, markPath, x, y, alpha);
ImageIO.write(bufferedImage,format , new File(destPath));
} catch (Exception e) {
}
}
public static BufferedImage addWaterMark(String imgPath, String markPath, int x, int y, float alpha) throws Exception{
BufferedImage targetImage = null;
try {
Image img = ImageIO.read(new File(imgPath));
targetImage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_RGB);
Graphics2D g = targetImage.createGraphics();
g.drawImage(img, 0, 0, null);
Image markImg = ImageIO.read(new File(markPath));
g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, alpha));
g.drawImage(markImg, x, y, null);
g.dispose();
} catch (Exception e) {
}
return targetImage;
}
public static void addTextMark(String imgPath, String text, Font font, Color color, float x, float y, float alpha,String destPath) throws Exception{
try {
BufferedImage bufferedImage = addTextMark(imgPath, text, font, color, x, y, alpha);
ImageIO.write(bufferedImage, imageFormat(imgPath), new File(destPath));
} catch (Exception e) {
}
}
public static void addTextMark(String imgPath, String text, Font font, Color color, float x, float y, float alpha,String format,String destPath) throws Exception{
try {
BufferedImage bufferedImage = addTextMark(imgPath, text, font, color, x, y, alpha);
ImageIO.write(bufferedImage, format, new File(destPath));
} catch (Exception e) {
}
}
public static BufferedImage addTextMark(String imgPath, String text, Font font, Color color, float x, float y, float alpha) throws Exception{
BufferedImage targetImage = null;
try {
Image img = ImageIO.read(new File(imgPath));
targetImage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_RGB);
Graphics2D g = targetImage.createGraphics();
g.drawImage(img, 0, 0, null);
g.setColor(color);
g.setFont(Dfont);
g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, alpha));
g.drawString(text, x, y);
g.dispose();
} catch (Exception e) {
}
return targetImage;
}
public static void compressImage(String imgPath,float quality,int width, int height, boolean autoSize,String destPath)throws Exception{
try {
BufferedImage bufferedImage = compressImage(imgPath, quality, width, height, autoSize);
ImageIO.write(bufferedImage, imageFormat(imgPath), new File(destPath));
} catch (Exception e) {
}
}
public static void compressImage(String imgPath,float quality,int width, int height, boolean autoSize,String format,String destPath)throws Exception{
try {
BufferedImage bufferedImage = compressImage(imgPath, quality, width, height, autoSize);
ImageIO.write(bufferedImage, format, new File(destPath));
} catch (Exception e) {
}
}
public static BufferedImage compressImage(String imgPath,float quality,int width, int height, boolean autoSize)throws Exception{
BufferedImage targetImage = null;
if(quality<0F||quality>1F){
quality = DEFAULT_QUALITY;
}
try {
Image img = ImageIO.read(new File(imgPath));
int newwidth =( width > 0 ) ? width : img.getWidth(null);
int newheight = ( height > 0 )? height: img.getHeight(null);
if(autoSize){
double Widthrate = ((double) img.getWidth(null)) / (double) width + 0.1;
double heightrate = ((double) img.getHeight(null))/ (double) height + 0.1;
double rate = Widthrate > heightrate ? Widthrate : heightrate;
newwidth = (int) (((double) img.getWidth(null)) / rate);
newheight = (int) (((double) img.getHeight(null)) / rate);
}
targetImage = new BufferedImage(newwidth,newheight,BufferedImage.TYPE_INT_RGB);
Graphics2D g = targetImage.createGraphics();
g.drawImage(img, 0, 0, newwidth, newheight, null);
g.dispose();
} catch (Exception e) {
}
return targetImage;
}
public static void imageGray(String imgPath, String destPath)throws Exception{
imageGray(imgPath, imageFormat(imgPath), destPath);
}
public static void imageGray(String imgPath,String format, String destPath)throws Exception{
try {
BufferedImage bufferedImage = ImageIO.read(new File(imgPath));
ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
ColorConvertOp op = new ColorConvertOp(cs, null);
bufferedImage = op.filter(bufferedImage, null);
ImageIO.write(bufferedImage, format , new File(destPath));
} catch (Exception e) {
}
}
public static void imageLucency(String imgPath,String destPath)throws Exception{
try {
BufferedImage bufferedImage = imageLucency(imgPath);
ImageIO.write(bufferedImage, imageFormat(imgPath), new File(destPath));
} catch (Exception e) {
}
}
public static void imageLucency(String imgPath,String format,String destPath)throws Exception{
try {
BufferedImage bufferedImage = imageLucency(imgPath);
ImageIO.write(bufferedImage, format, new File(destPath));
} catch (Exception e) {
}
}
public static BufferedImage imageLucency(String imgPath)throws Exception{
BufferedImage targetImage = null;
try {
BufferedImage img = ImageIO.read(new FileInputStream(imgPath));
int alpha = 0;
executeRGB(img, alpha);
targetImage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_RGB);
Graphics2D g = targetImage.createGraphics();
g.drawImage(img, 0, 0, null);
g.dispose();
} catch (Exception e) {
}
return targetImage;
}
public static void executeRGB(BufferedImage img, int alpha) throws Exception{
for(int x=img.getMinX();x<img.getWidth();x++){
for(int y=img.getMinY();y<img.getHeight();y++){
rgb = img.getRGB(x, y);
int R =(rgb & 0xff0000 ) >> 16 ;
int G= (rgb & 0xff00 ) >> 8 ;
int B= (rgb & 0xff );
if(((255-R)<30) && ((255-G)<30) && ((255-B)<30)){
rgb = ((alpha + 1) << 24) | (rgb & 0x00ffffff);
img.setRGB(x, y, rgb);
}
}
}
}
public static void formatConvert(String imgPath, String format, String destPath)throws Exception{
try {
BufferedImage bufferedImage = ImageIO.read(new File(imgPath));
ImageIO.write(bufferedImage, format, new File(destPath));
} catch (IOException e) {
}
}
public static void formatConvert(BufferedImage bufferedImag, String format, String destPath)throws Exception{
try {
ImageIO.write(bufferedImag, format, new File(destPath));
} catch (IOException e) {
}
}
public static String imageFormat(String imgPath)throws Exception{
String[] filess = imgPath.split("\\\\");
String[] formats = filess[filess.length - 1].split("\\.");
return formats[formats.length - 1];
}
}
