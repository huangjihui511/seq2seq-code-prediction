package io.realm;
import android.support.test.InstrumentationRegistry;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.UUID;
import io.realm.ErrorCode;
import io.realm.ObjectServerError;
import io.realm.Realm;
import io.realm.SyncConfiguration;
import io.realm.SyncManager;
import io.realm.SyncSession;
import io.realm.SyncUser;
import io.realm.UserStore;
import io.realm.internal.network.AuthenticateResponse;
import io.realm.internal.objectserver.Token;
import io.realm.log.LogLevel;
import io.realm.log.RealmLog;
import io.realm.objectserver.utils.UserFactory;
public class SyncTestUtils {
public static final String USER_TOKEN = UUID.randomUUID().toString();
public static final String DEFAULT_AUTH_URL = "http:
private final static Method SYNC_MANAGER_GET_USER_STORE_METHOD;
private final static Method SYNC_USER_GET_ACCESS_TOKEN_METHOD;
private static int originalLogLevel; 
static {
try {
SYNC_MANAGER_GET_USER_STORE_METHOD = SyncManager.class.getDeclaredMethod("getUserStore");
SYNC_USER_GET_ACCESS_TOKEN_METHOD = SyncUser.class.getDeclaredMethod("getRefreshToken");
SYNC_MANAGER_GET_USER_STORE_METHOD.setAccessible(true);
SYNC_USER_GET_ACCESS_TOKEN_METHOD.setAccessible(true);
} catch (NoSuchMethodException e) {
throw new AssertionError(e);
}
}
public static void prepareEnvironmentForTest(){
Realm.init(InstrumentationRegistry.getTargetContext());
originalLogLevel = RealmLog.getLevel();
RealmLog.setLevel(LogLevel.DEBUG);
}
public static void restoreEnvironmentAfterTest() throws IOException {
UserFactory.logoutAllUsers();
RealmLog.setLevel(originalLogLevel);
if (BaseRealm.applicationContext != null) {
SyncManager.reset();
BaseRealm.applicationContext = null; 
}
deleteRosFiles();
Realm.init(InstrumentationRegistry.getTargetContext());
}
private static void deleteRosFiles() throws IOException {
File rosFiles = new File(InstrumentationRegistry.getContext().getFilesDir(),"realm-object-server");
deleteFile(rosFiles);
}
private static void deleteFile(File file) throws IOException {
if (file.isDirectory()) {
for (File c : file.listFiles()) {
deleteFile(c);
}
}
if (!file.delete()) {
throw new IllegalStateException("Failed to delete file or directory: " + file.getAbsolutePath());
}
}
public static SyncUser createTestAdminUser() {
return createTestUser(USER_TOKEN, UUID.randomUUID().toString(), DEFAULT_AUTH_URL, Long.MAX_VALUE, true);
}
public static SyncUser createTestUser() {
return createTestUser(USER_TOKEN, UUID.randomUUID().toString(), DEFAULT_AUTH_URL, Long.MAX_VALUE, false);
}
public static SyncUser createTestUser(long expires) {
return createTestUser(USER_TOKEN, UUID.randomUUID().toString(), DEFAULT_AUTH_URL, expires, false);
}
public static SyncUser createTestUser(String authUrl) {
return createTestUser(USER_TOKEN, UUID.randomUUID().toString(), authUrl, Long.MAX_VALUE, false);
}
public static SyncUser createNamedTestUser(String userIdentifier) {
return createTestUser(USER_TOKEN, userIdentifier, DEFAULT_AUTH_URL, Long.MAX_VALUE, false);
}
public static SyncUser createTestUser(String userTokenValue, String userIdentifier, String authUrl, long expires, boolean isAdmin) {
Token userToken = new Token(userTokenValue, userIdentifier, null, expires, null, isAdmin);
JSONObject obj = new JSONObject();
try {
JSONObject realmDesc = new JSONObject();
realmDesc.put("uri", "realm:
obj.put("authUrl", authUrl);
obj.put("userToken", userToken.toJson());
SyncUser syncUser = SyncUser.fromJson(obj.toString());
addToUserStore(syncUser);
return syncUser;
} catch (JSONException e) {
throw new RuntimeException(e);
}
}
public static AuthenticateResponse createLoginResponse(long expires) {
return createLoginResponse(USER_TOKEN, "JohnDoe", expires, false);
}
public static AuthenticateResponse createLoginResponse(String userTokenValue, String userIdentity, long expires, boolean isAdmin) {
try {
Token userToken = new Token(userTokenValue, userIdentity, null, expires, null, isAdmin);
JSONObject response = new JSONObject();
response.put("refresh_token", userToken.toJson());
return AuthenticateResponse.from(response.toString());
} catch (JSONException e) {
throw new RuntimeException(e);
}
}
public static AuthenticateResponse createErrorResponse(ErrorCode code) {
return AuthenticateResponse.from(new ObjectServerError(code, "dummy"));
}
public static Token getRefreshToken(SyncUser user) {
try {
return (Token) SYNC_USER_GET_ACCESS_TOKEN_METHOD.invoke(user);
} catch (IllegalAccessException | InvocationTargetException e) {
throw new AssertionError(e);
}
}
private static void addToUserStore(SyncUser user) {
try {
UserStore userStore = (UserStore) SYNC_MANAGER_GET_USER_STORE_METHOD.invoke(null);
userStore.put(user);
} catch (InvocationTargetException | IllegalAccessException e) {
throw new AssertionError(e);
}
}
public static void syncRealm(Realm realm) {
SyncConfiguration config = (SyncConfiguration) realm.getConfiguration();
SyncSession session = SyncManager.getSession(config);
try {
session.uploadAllLocalChanges();
session.downloadAllServerChanges();
} catch (InterruptedException e) {
throw new AssertionError(e);
}
realm.refresh();
}
}
