package com.github.benmanes.caffeine.jcache.event;
import static java.util.Objects.requireNonNull;
import java.util.Iterator;
import java.util.NoSuchElementException;
import javax.cache.Cache;
import javax.cache.event.CacheEntryEvent;
import javax.cache.event.EventType;
import org.checkerframework.checker.nullness.qual.Nullable;
final class JCacheEntryEvent<K, V> extends CacheEntryEvent<K, V>
implements Iterable<CacheEntryEvent<? extends K, ? extends V>> {
private static final long serialVersionUID = 1L;
private final K key;
private final boolean hasOldValue;
private final @Nullable V oldValue;
private final @Nullable V newValue;
JCacheEntryEvent(Cache<K, V> source, EventType eventType,
K key, boolean hasOldValue, @Nullable V oldValue, @Nullable V newValue) {
super(source, eventType);
this.key = requireNonNull(key);
this.hasOldValue = hasOldValue;
this.oldValue = oldValue;
this.newValue = newValue;
}
@Override
public K getKey() {
return key;
}
@Override
public @Nullable V getValue() {
return newValue;
}
@Override
public @Nullable V getOldValue() {
return oldValue;
}
@Override
public boolean isOldValueAvailable() {
return hasOldValue;
}
@Override
public <T> T unwrap(Class<T> clazz) {
if (!clazz.isInstance(this)) {
throw new IllegalArgumentException("Class " + clazz + " is unknown to this implementation");
}
@SuppressWarnings("unchecked")
T castedEntry = (T) this;
return castedEntry;
}
@Override
public Iterator<CacheEntryEvent<? extends K, ? extends V>> iterator() {
return new Iterator<CacheEntryEvent<? extends K, ? extends V>>() {
boolean hasNext = true;
@Override
public boolean hasNext() {
return hasNext;
}
@Override
public CacheEntryEvent<K, V> next() {
if (!hasNext()) {
throw new NoSuchElementException();
}
hasNext = false;
return JCacheEntryEvent.this;
}
};
}
}
