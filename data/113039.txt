package org.apache.fontbox.ttf;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
public final class OTFParser extends TTFParser
{
public OTFParser()
{
super();
}
public OTFParser(boolean isEmbedded)
{
this(isEmbedded, false);
}
public OTFParser(boolean isEmbedded, boolean parseOnDemand)
{
super(isEmbedded, parseOnDemand);
}
@Override
public OpenTypeFont parse(String file) throws IOException
{
return (OpenTypeFont)super.parse(file);
}
@Override
public OpenTypeFont parse(File file) throws IOException
{
return (OpenTypeFont)super.parse(file);
}
@Override
public OpenTypeFont parse(InputStream data) throws IOException
{
return (OpenTypeFont)super.parse(data);
}
@Override
OpenTypeFont parse(TTFDataStream raf) throws IOException
{
return (OpenTypeFont)super.parse(raf);
}
@Override
OpenTypeFont newFont(TTFDataStream raf)
{
return new OpenTypeFont(raf);
}
@Override
protected TTFTable readTable(TrueTypeFont font, String tag)
{
switch (tag)
{
case "BASE":
case "GDEF":
case "GPOS":
case "GSUB":
case "JSTF":
return new OTLTable(font);
case "CFF ":
return new CFFTable(font);
default:
return super.readTable(font, tag);
}
}
@Override
protected boolean allowCFF()
{
return true;
}
}
