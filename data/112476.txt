package com.codeborne.selenide.impl;
import com.codeborne.selenide.Driver;
import org.openqa.selenium.support.pagefactory.FieldDecorator;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
public class SelenidePageFactory {
public <PageObjectClass> PageObjectClass page(Driver driver, Class<PageObjectClass> pageObjectClass) {
try {
Constructor<PageObjectClass> constructor = pageObjectClass.getDeclaredConstructor();
constructor.setAccessible(true);
return page(driver, constructor.newInstance());
}
catch (Exception e) {
throw new RuntimeException("Failed to create new instance of " + pageObjectClass, e);
}
}
public <PageObjectClass, T extends PageObjectClass> PageObjectClass page(Driver driver, T pageObject) {
initElements(new SelenideFieldDecorator(this, driver, driver.getWebDriver()), pageObject);
return pageObject;
}
public void initElements(FieldDecorator decorator, Object page) {
Class<?> proxyIn = page.getClass();
while (proxyIn != Object.class) {
proxyFields(decorator, page, proxyIn);
proxyIn = proxyIn.getSuperclass();
}
}
private void proxyFields(FieldDecorator decorator, Object page, Class<?> proxyIn) {
Field[] fields = proxyIn.getDeclaredFields();
for (Field field : fields) {
if (isInitialized(page, field)) {
continue;
}
Object value = decorator.decorate(page.getClass().getClassLoader(), field);
if (value != null) {
try {
field.setAccessible(true);
field.set(page, value);
}
catch (IllegalAccessException e) {
throw new RuntimeException(e);
}
}
}
}
private boolean isInitialized(Object page, Field field) {
try {
field.setAccessible(true);
return field.get(page) != null;
}
catch (IllegalAccessException e) {
throw new RuntimeException(e);
}
}
}
