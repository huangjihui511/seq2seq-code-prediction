package com.JUtils.date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
public class DateUtils {
public static String getCurrentTime(String format){
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
Date date = new Date();
return sdf.format(date);
}
public static String getCurrentTime(){
return getCurrentTime(DateFormatUtils.DATE_FORMAT2);
}
public static Date getCurrentDate(String format){
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
String dateS = getCurrentTime(format);
Date date = null;
try {
date = sdf.parse(dateS);
} catch (ParseException e) {
e.printStackTrace();
}
return date;
}
public static Date getCurrentDate(){
return getCurrentDate(DateFormatUtils.DATE_FORMAT2);
}
public static String addYearToDate(int year,Date date,String format){
Calendar calender = getCalendar(date,format);
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
calender.add(Calendar.YEAR, year);
return sdf.format(calender.getTime());
}
public static String addYearToDate(int year,String date,String format){
Date newDate = new Date();
if(null != date && !"".equals(date)){
newDate = string2Date(date, format);
}
return addYearToDate(year, newDate, format);
}
public static String addMothToDate(int month,Date date,String format) {
Calendar calender = getCalendar(date,format);
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
calender.add(Calendar.MONTH, month);
return sdf.format(calender.getTime());
}
public static String addMothToDate(int month,String date,String format) {
Date newDate = new Date();
if(null != date && !"".equals(date)){
newDate = string2Date(date, format);
}
return addMothToDate(month, newDate, format);
}
public static String addDayToDate(int day,Date date,String format) {
Calendar calendar = getCalendar(date, format);
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
calendar.add(Calendar.DATE, day);
return sdf.format(calendar.getTime());
}
public static String addDayToDate(int day,String date,String format) {
Date newDate = new Date();
if(null != date && !"".equals(date)){
newDate = string2Date(date, format);
}
return addDayToDate(day, newDate, format);
}
public static String addHourToDate(int hour,Date date,String format) {
Calendar calendar = getCalendar(date, format);
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
calendar.add(Calendar.HOUR, hour);
return sdf.format(calendar.getTime());
}
public static String addHourToDate(int hour,String date,String format) {
Date newDate = new Date();
if(null != date && !"".equals(date)){
newDate = string2Date(date, format);
}
return addHourToDate(hour, newDate, format);
}
public static String addMinuteToDate(int minute,Date date,String format) {
Calendar calendar = getCalendar(date, format);
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
calendar.add(Calendar.MINUTE, minute);
return sdf.format(calendar.getTime());
}
public static String addMinuteToDate(int minute,String date,String format){
Date newDate = new Date();
if(null != date && !"".equals(date)){
newDate = string2Date(date, format);
}
return addMinuteToDate(minute, newDate, format);
}
public static String addSecondToDate(int second,Date date,String format){
Calendar calendar = getCalendar(date, format);
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
calendar.add(Calendar.SECOND, second);
return sdf.format(calendar.getTime());
}
public static String addSecondToDate(int second,String date,String format){
Date newDate = new Date();
if(null != date && !"".equals(date)){
newDate = string2Date(date, format);
}
return addSecondToDate(second, newDate, format);
}
public static Calendar getCalendar(Date date,String format){
if(date == null){
date = getCurrentDate(format);
}
Calendar calender = Calendar.getInstance();
calender.setTime(date);
return calender;
}
public static Date string2Date(String value){
if(value == null || "".equals(value)){
return null;
}
SimpleDateFormat sdf = DateFormatUtils.getFormat(DateFormatUtils.DATE_FORMAT2);
Date date = null;
try {
value = DateFormatUtils.formatDate(value, DateFormatUtils.DATE_FORMAT2);
date = sdf.parse(value);
} catch (Exception e) {
e.printStackTrace();
}
return date;
}
public static Date string2Date(String value,String format){
if(value == null || "".equals(value)){
return null;
}
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
Date date = null;
try {
value = DateFormatUtils.formatDate(value, format);
date = sdf.parse(value);
} catch (Exception e) {
e.printStackTrace();
}
return date;
}
public static String date2String(Date value,String format){
if(value == null){
return null;
}
SimpleDateFormat sdf = DateFormatUtils.getFormat(format);
return sdf.format(value);
}
public static String date2String(Date value){
if(value == null){
return null;
}
SimpleDateFormat sdf = DateFormatUtils.getFormat(DateFormatUtils.DATE_FORMAT2);
return sdf.format(value);
}
public static int getCurrentYear(Date value){
String date = date2String(value, DateFormatUtils.DATE_YEAR);
return Integer.valueOf(date);
}
public static int getCurrentYear(String value) {
Date date = string2Date(value, DateFormatUtils.DATE_YEAR);
Calendar calendar = getCalendar(date, DateFormatUtils.DATE_YEAR);
return calendar.get(Calendar.YEAR);
}
public static int getCurrentMonth(Date value){
String date = date2String(value, DateFormatUtils.DATE_MONTH);
return Integer.valueOf(date);
}
public static int getCurrentMonth(String value) {
Date date = string2Date(value, DateFormatUtils.DATE_MONTH);
Calendar calendar = getCalendar(date, DateFormatUtils.DATE_MONTH);
return calendar.get(Calendar.MONTH);
}
public static int getCurrentDay(Date value){
String date = date2String(value, DateFormatUtils.DATE_DAY);
return Integer.valueOf(date);
}
public static int getCurrentDay(String value){
Date date = string2Date(value, DateFormatUtils.DATE_DAY);
Calendar calendar = getCalendar(date, DateFormatUtils.DATE_DAY);
return calendar.get(Calendar.DATE);
}
public static String getCurrentWeek(Date value) {
Calendar calendar = getCalendar(value, DateFormatUtils.DATE_FORMAT1);
int weekIndex = calendar.get(Calendar.DAY_OF_WEEK) - 1 < 0 ? 0 : calendar.get(Calendar.DAY_OF_WEEK) - 1;
return weeks[weekIndex];
}
public static String getCurrentWeek(String value) {
Date date = string2Date(value, DateFormatUtils.DATE_FORMAT1);
return getCurrentWeek(date);
}
public static int getCurrentHour(Date value){
String date = date2String(value, DateFormatUtils.DATE_HOUR);
return Integer.valueOf(date);
}
public static int getCurrentHour(String value) {
Date date = string2Date(value, DateFormatUtils.DATE_HOUR);
Calendar calendar = getCalendar(date, DateFormatUtils.DATE_HOUR);
return calendar.get(Calendar.DATE);
}
public static int getCurrentMinute(Date value){
String date = date2String(value, DateFormatUtils.DATE_MINUTE);
return Integer.valueOf(date);
}
public static int getCurrentMinute(String value){
Date date = string2Date(value, DateFormatUtils.DATE_MINUTE);
Calendar calendar = getCalendar(date, DateFormatUtils.DATE_MINUTE);
return calendar.get(Calendar.MINUTE);
}
public static int compareDate(String startDay,String endDay,int stype) {
int n = 0;
startDay = DateFormatUtils.formatDate(startDay, "yyyy-MM-dd");
endDay = DateFormatUtils.formatDate(endDay, "yyyy-MM-dd");
String formatStyle = "yyyy-MM-dd";
if(1 == stype){
formatStyle = "yyyy-MM";
}else if(2 == stype){
formatStyle = "yyyy";
}
endDay = endDay==null ? getCurrentTime("yyyy-MM-dd") : endDay;
DateFormat df = new SimpleDateFormat(formatStyle);
Calendar c1 = Calendar.getInstance();
Calendar c2 = Calendar.getInstance();
try {
c1.setTime(df.parse(startDay));
c2.setTime(df.parse(endDay));
} catch (Exception e) {
e.printStackTrace();
}
n++;
if(stype==1){
}
else{
}
}
n = n-1;
if(stype==2){
n = (int)n/365;
}
return n;
}
public static int compareTime(String startTime , String endTime , int type) {
if(endTime == null || "".equals(endTime)){
endTime = getCurrentTime();
}
SimpleDateFormat sdf = DateFormatUtils.getFormat("");
int value = 0;
try {
Date begin = sdf.parse(startTime);
Date end = sdf.parse(endTime);
value = (int) (between % (24 * 36000) / 3600);
}
else if(type == 2){
value = (int) (between % 3600 / 60);
}
else if(type == 3){
value = (int) (between % 60 / 60);
}
} catch (ParseException e) {
e.printStackTrace();
}
return value;
}
public static int compare(String date1, String date2,String format) {
DateFormat df = DateFormatUtils.getFormat(format);
try {
Date dt1 = df.parse(date1);
Date dt2 = df.parse(date2);
if (dt1.getTime() > dt2.getTime()) {
return 1;
} else if (dt1.getTime() < dt2.getTime()) {
return -1;
} else {
return 0;
}
} catch (Exception exception) {
exception.printStackTrace();
}
return 0;
}
public static String getMonthFirstDate(String date){
date = DateFormatUtils.formatDate(date);
return DateFormatUtils.formatDate(date, "yyyy-MM") + "-01";
}
public static String getMonthLastDate(String date) {
Date strDate = DateUtils.string2Date(getMonthFirstDate(date));
Calendar calendar = Calendar.getInstance();
calendar.setTime(strDate);
calendar.add(Calendar.MONTH, 1);
calendar.add(Calendar.DAY_OF_YEAR, -1);
return DateFormatUtils.formatDate(calendar.getTime());
}
@SuppressWarnings("static-access")
public static Date getWeekFirstDate(Date date) {
Calendar now = Calendar.getInstance();
now.setTime(date);
int today = now.get(Calendar.DAY_OF_WEEK);
now.set(now.DATE, first_day_of_week);
return now.getTime();
}
@SuppressWarnings("static-access")
public static Date geWeektLastDate(Date date) {
Calendar now = Calendar.getInstance();
now.setTime(date);
int today = now.get(Calendar.DAY_OF_WEEK);
now.set(now.DATE, last_day_of_week);
return now.getTime();
}
}
