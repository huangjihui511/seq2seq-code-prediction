package com.github.benmanes.caffeine.cache.local;
import static com.github.benmanes.caffeine.cache.Specifications.WRITE_QUEUE;
import static com.github.benmanes.caffeine.cache.Specifications.WRITE_QUEUE_TYPE;
import javax.lang.model.element.Modifier;
import com.github.benmanes.caffeine.cache.Feature;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
public final class AddWriteBuffer extends LocalCacheRule {
@Override
protected boolean applies() {
return !(Feature.usesWriteQueue(context.parentFeatures)
|| !Feature.usesWriteQueue(context.generateFeatures));
}
@Override
protected void execute() {
context.constructor.addStatement(
"this.writeBuffer = new $T<>(WRITE_BUFFER_MIN, WRITE_BUFFER_MAX)", WRITE_QUEUE_TYPE);
context.cache.addField(FieldSpec.builder(
WRITE_QUEUE, "writeBuffer", Modifier.FINAL).build());
context.cache.addMethod(MethodSpec.methodBuilder("writeBuffer")
.addModifiers(context.protectedFinalModifiers())
.addStatement("return writeBuffer")
.returns(WRITE_QUEUE)
.build());
context.cache.addMethod(MethodSpec.methodBuilder("buffersWrites")
.addModifiers(context.protectedFinalModifiers())
.addStatement("return true")
.returns(boolean.class)
.build());
}
}
