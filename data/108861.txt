package the.bytecode.club.bytecodeviewer.decompilers.bytecode;
import java.util.Arrays;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.FieldInsnNode;
import org.objectweb.asm.tree.IincInsnNode;
import org.objectweb.asm.tree.InsnNode;
import org.objectweb.asm.tree.JumpInsnNode;
import org.objectweb.asm.tree.LabelNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MultiANewArrayInsnNode;
import org.objectweb.asm.tree.TypeInsnNode;
import org.objectweb.asm.tree.VarInsnNode;
import eu.bibl.banalysis.filter.InstructionFilter;
import eu.bibl.banalysis.filter.OpcodeFilter;
import eu.bibl.banalysis.filter.insn.FieldInstructionFilter;
import eu.bibl.banalysis.filter.insn.IincInstructionFilter;
import eu.bibl.banalysis.filter.insn.InsnInstructionFilter;
import eu.bibl.banalysis.filter.insn.JumpInstructionFilter;
import eu.bibl.banalysis.filter.insn.LdcInstructionFilter;
import eu.bibl.banalysis.filter.insn.MethodInstructionFilter;
import eu.bibl.banalysis.filter.insn.MultiANewArrayInstructionFilter;
import eu.bibl.banalysis.filter.insn.TypeInstructionFilter;
import eu.bibl.banalysis.filter.insn.VarInstructionFilter;
public class InstructionPattern implements Opcodes {
protected int pointer;
protected InstructionFilter[] filters;
protected AbstractInsnNode[] lastMatch;
public InstructionPattern(AbstractInsnNode[] insns) {
filters = translate(insns);
lastMatch = new AbstractInsnNode[insns.length];
}
public InstructionPattern(int[] opcodes) {
filters = new InstructionFilter[opcodes.length];
lastMatch = new AbstractInsnNode[opcodes.length];
for (int i = 0; i < opcodes.length; i++) {
filters[i] = new OpcodeFilter(opcodes[i]);
}
}
public InstructionPattern(InstructionFilter[] filters) {
this.filters = filters;
lastMatch = new AbstractInsnNode[filters.length];
}
public boolean accept(AbstractInsnNode ain) {
if (pointer >= filters.length)
reset();
InstructionFilter filter = filters[pointer];
if (filter.accept(ain)) {
lastMatch[pointer] = ain;
if (pointer >= (filters.length - 1)) {
return true;
}
pointer++;
} else {
reset();
}
return false;
}
public AbstractInsnNode[] getLastMatch() {
return lastMatch;
}
public void resetMatch() {
reset();
AbstractInsnNode[] match = lastMatch;
lastMatch = new AbstractInsnNode[match.length];
}
public void reset() {
pointer = 0;
}
public static InstructionFilter[] translate(AbstractInsnNode[] ains) {
InstructionFilter[] filters = new InstructionFilter[ains.length];
for (int i = 0; i < ains.length; i++) {
filters[i] = translate(ains[i]);
}
return filters;
}
public static InstructionFilter translate(AbstractInsnNode ain) {
if (ain instanceof LdcInsnNode) {
return new LdcInstructionFilter(((LdcInsnNode) ain).cst);
} else if (ain instanceof TypeInsnNode) {
return new TypeInstructionFilter(ain.getOpcode(),
((TypeInsnNode) ain).desc);
} else if (ain instanceof FieldInsnNode) {
return new FieldInstructionFilter(ain.getOpcode(),
((FieldInsnNode) ain).owner, ((FieldInsnNode) ain).name,
((FieldInsnNode) ain).desc);
} else if (ain instanceof MethodInsnNode) {
return new MethodInstructionFilter(ain.getOpcode(),
((MethodInsnNode) ain).owner, ((MethodInsnNode) ain).name,
((MethodInsnNode) ain).desc);
} else if (ain instanceof VarInsnNode) {
return new VarInstructionFilter(ain.getOpcode(),
((VarInsnNode) ain).var);
} else if (ain instanceof InsnNode) {
return new InsnInstructionFilter(ain.getOpcode());
} else if (ain instanceof IincInsnNode) {
return new IincInstructionFilter(((IincInsnNode) ain).incr,
((IincInsnNode) ain).var);
} else if (ain instanceof JumpInsnNode) {
return new JumpInstructionFilter(ain.getOpcode());
} else if (ain instanceof LabelNode) {
return InstructionFilter.ACCEPT_ALL; 
} else if (ain instanceof MultiANewArrayInsnNode) {
return new MultiANewArrayInstructionFilter(
((MultiANewArrayInsnNode) ain).desc,
((MultiANewArrayInsnNode) ain).dims);
} else {
return InstructionFilter.ACCEPT_ALL;
}
}
public static void main(String[] args) {
AbstractInsnNode[] ains = new AbstractInsnNode[]{
new LdcInsnNode("ldc"), new VarInsnNode(ASTORE, 0),
new LdcInsnNode("ldc")};
InstructionPattern pattern = new InstructionPattern(
new AbstractInsnNode[]{new LdcInsnNode("ldc"),
new VarInsnNode(-1, -1)});
for (AbstractInsnNode ain : ains) {
if (pattern.accept(ain)) {
System.out.println(Arrays.toString(pattern.getLastMatch()));
}
}
}
}
