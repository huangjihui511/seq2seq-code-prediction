package org.apache.fontbox.ttf;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.awt.geom.GeneralPath;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
class GlyphRenderer
{
private static final Log LOG = LogFactory.getLog(GlyphRenderer.class);
private GlyphDescription glyphDescription;
GlyphRenderer(GlyphDescription glyphDescription)
{
this.glyphDescription = glyphDescription;
}
public GeneralPath getPath()
{
Point[] points = describe(glyphDescription);
return calculatePath(points);
}
private Point[] describe(GlyphDescription gd)
{
int endPtIndex = 0;
int endPtOfContourIndex = -1;
Point[] points = new Point[gd.getPointCount()];
for (int i = 0; i < gd.getPointCount(); i++)
{
if (endPtOfContourIndex == -1)
{
endPtOfContourIndex = gd.getEndPtOfContours(endPtIndex);
}
boolean endPt = endPtOfContourIndex == i;
if (endPt)
{
endPtIndex++;
endPtOfContourIndex = -1;
}
points[i] = new Point(gd.getXCoordinate(i), gd.getYCoordinate(i),
(gd.getFlags(i) & GlyfDescript.ON_CURVE) != 0, endPt);
}
return points;
}
private GeneralPath calculatePath(Point[] points)
{
GeneralPath path = new GeneralPath();
int start = 0;
for (int p = 0, len = points.length; p < len; ++p)
{
if (points[p].endOfContour)
{
Point firstPoint = points[start];
Point lastPoint = points[p];
List<Point> contour = new ArrayList<>();
for (int q = start; q <= p; ++q)
{
contour.add(points[q]);
}
if (points[start].onCurve)
{
contour.add(firstPoint);
}
else if (points[p].onCurve)
{
contour.add(0, lastPoint);
}
else
{
Point pmid = midValue(firstPoint, lastPoint);
contour.add(0, pmid);
contour.add(pmid);
}
moveTo(path, contour.get(0));
for (int j = 1, clen = contour.size(); j < clen; j++)
{
Point pnow = contour.get(j);
if (pnow.onCurve)
{
lineTo(path, pnow);
}
else if (contour.get(j + 1).onCurve)
{
quadTo(path, pnow, contour.get(j + 1));
++j;
}
else
{
quadTo(path, pnow, midValue(pnow, contour.get(j + 1)));
}
}
path.closePath();
start = p + 1;
}
}
return path;
}
private void moveTo(GeneralPath path, Point point)
{
path.moveTo(point.x, point.y);
if (LOG.isDebugEnabled())
{
LOG.trace("moveTo: " + String.format(Locale.US, "%d,%d", point.x, point.y));
}
}
private void lineTo(GeneralPath path, Point point)
{
path.lineTo(point.x, point.y);
if (LOG.isDebugEnabled())
{
LOG.trace("lineTo: " + String.format(Locale.US, "%d,%d", point.x, point.y));
}
}
private void quadTo(GeneralPath path, Point ctrlPoint, Point point)
{
path.quadTo(ctrlPoint.x, ctrlPoint.y, point.x, point.y);
if (LOG.isDebugEnabled())
{
LOG.trace("quadTo: " + String.format(Locale.US, "%d,%d %d,%d", ctrlPoint.x, ctrlPoint.y,
point.x, point.y));
}
}
private int midValue(int a, int b)
{
return a + (b - a) / 2;
}
private Point midValue(Point point1, Point point2)
{
return new Point(midValue(point1.x, point2.x), midValue(point1.y, point2.y));
}
private static class Point
{
private int x = 0;
private int y = 0;
private boolean onCurve = true;
private boolean endOfContour = false;
Point(int xValue, int yValue, boolean onCurveValue, boolean endOfContourValue)
{
x = xValue;
y = yValue;
onCurve = onCurveValue;
endOfContour = endOfContourValue;
}
Point(int xValue, int yValue)
{
this(xValue, yValue, true, false);
}
@Override
public String toString()
{
return String.format(Locale.US, "Point(%d,%d,%s,%s)", x, y, onCurve ? "onCurve" : "",
endOfContour ? "endOfContour" : "");
}
}
}
