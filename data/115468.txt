package org.gnucash.android.importer;
import android.database.sqlite.SQLiteDatabase;
import android.support.annotation.NonNull;
import android.util.Log;
import com.crashlytics.android.Crashlytics;
import org.gnucash.android.app.GnuCashApplication;
import org.gnucash.android.db.DatabaseHelper;
import org.gnucash.android.db.adapter.AccountsDbAdapter;
import org.gnucash.android.db.adapter.BooksDbAdapter;
import org.gnucash.android.db.adapter.BudgetAmountsDbAdapter;
import org.gnucash.android.db.adapter.BudgetsDbAdapter;
import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
import org.gnucash.android.db.adapter.DatabaseAdapter;
import org.gnucash.android.db.adapter.PricesDbAdapter;
import org.gnucash.android.db.adapter.RecurrenceDbAdapter;
import org.gnucash.android.db.adapter.ScheduledActionDbAdapter;
import org.gnucash.android.db.adapter.SplitsDbAdapter;
import org.gnucash.android.db.adapter.TransactionsDbAdapter;
import org.gnucash.android.export.xml.GncXmlHelper;
import org.gnucash.android.model.Account;
import org.gnucash.android.model.AccountType;
import org.gnucash.android.model.BaseModel;
import org.gnucash.android.model.Book;
import org.gnucash.android.model.Budget;
import org.gnucash.android.model.BudgetAmount;
import org.gnucash.android.model.Commodity;
import org.gnucash.android.model.Money;
import org.gnucash.android.model.PeriodType;
import org.gnucash.android.model.Price;
import org.gnucash.android.model.Recurrence;
import org.gnucash.android.model.ScheduledAction;
import org.gnucash.android.model.Split;
import org.gnucash.android.model.Transaction;
import org.gnucash.android.model.TransactionType;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.regex.Pattern;
public class GncXmlHandler extends DefaultHandler {
private static final String NO_CURRENCY_CODE = "XXX";
private static final String LOG_TAG = "GnuCashAccountImporter";
^             anchor for start of string
#             the literal #
(             start of group
?:            indicate a non-capturing group that doesn't generate back-references
[0-9a-fA-F]   hexadecimal digit
{3}           three times
)             end of group
{2}           repeat twice
$             anchor for end of string
public static final String ACCOUNT_COLOR_HEX_REGEX = "^#(?:[0-9a-fA-F]{3}){2}$";
AccountsDbAdapter mAccountsDbAdapter;
StringBuilder mContent;
Account mAccount;
List<Account> mAccountList;
List<Account> mTemplatAccountList;
Map<String, String> mTemplateAccountToTransactionMap;
HashMap<String, Account> mAccountMap;
Account mRootAccount;
Transaction mTransaction;
List<Transaction> mTransactionList;
List<Transaction> mTemplateTransactions;
Split mSplit;
BigDecimal mQuantity;
BigDecimal mValue;
Price mPrice;
boolean mPriceCommodity;
boolean mPriceCurrency;
List<Price> mPriceList;
boolean mNegativeQuantity;
List<Split> mAutoBalanceSplits;
String mIgnoreElement = null;
ScheduledAction mScheduledAction;
List<ScheduledAction> mScheduledActionsList;
List<Budget> mBudgetList;
Budget mBudget;
Recurrence mRecurrence;
BudgetAmount mBudgetAmount;
boolean mInColorSlot        = false;
boolean mInPlaceHolderSlot  = false;
boolean mInFavoriteSlot     = false;
boolean mISO4217Currency    = false;
boolean mIsDatePosted       = false;
boolean mIsDateEntered      = false;
boolean mIsNote             = false;
boolean mInDefaultTransferAccount = false;
boolean mInExported         = false;
boolean mInTemplates        = false;
boolean mInSplitAccountSlot = false;
boolean mInCreditNumericSlot = false;
boolean mInDebitNumericSlot = false;
boolean mIsScheduledStart   = false;
boolean mIsScheduledEnd     = false;
boolean mIsLastRun          = false;
boolean mIsRecurrenceStart  = false;
boolean mInBudgetSlot       = false;
String mSlotTagAttribute = null;
String mBudgetAmountAccountUID = null;
int mRecurrenceMultiplier   = 1;
boolean mIgnoreTemplateTransaction = true;
boolean mIgnoreScheduledAction = false;
@Deprecated
private long mRecurrencePeriod = 0;
private TransactionsDbAdapter mTransactionsDbAdapter;
private ScheduledActionDbAdapter mScheduledActionsDbAdapter;
private CommoditiesDbAdapter mCommoditiesDbAdapter;
private PricesDbAdapter mPricesDbAdapter;
private Map<String, Integer> mCurrencyCount;
private BudgetsDbAdapter mBudgetsDbAdapter;
private Book mBook;
private SQLiteDatabase mainDb;
public GncXmlHandler() {
init();
}
private void init() {
mBook = new Book();
DatabaseHelper databaseHelper = new DatabaseHelper(GnuCashApplication.getAppContext(), mBook.getUID());
mainDb = databaseHelper.getWritableDatabase();
mTransactionsDbAdapter = new TransactionsDbAdapter(mainDb, new SplitsDbAdapter(mainDb));
mAccountsDbAdapter = new AccountsDbAdapter(mainDb, mTransactionsDbAdapter);
RecurrenceDbAdapter recurrenceDbAdapter = new RecurrenceDbAdapter(mainDb);
mScheduledActionsDbAdapter = new ScheduledActionDbAdapter(mainDb, recurrenceDbAdapter);
mCommoditiesDbAdapter = new CommoditiesDbAdapter(mainDb);
mPricesDbAdapter = new PricesDbAdapter(mainDb);
mBudgetsDbAdapter = new BudgetsDbAdapter(mainDb, new BudgetAmountsDbAdapter(mainDb), recurrenceDbAdapter);
mContent = new StringBuilder();
mAccountList = new ArrayList<>();
mAccountMap = new HashMap<>();
mTransactionList = new ArrayList<>();
mScheduledActionsList = new ArrayList<>();
mBudgetList = new ArrayList<>();
mTemplatAccountList = new ArrayList<>();
mTemplateTransactions = new ArrayList<>();
mTemplateAccountToTransactionMap = new HashMap<>();
mAutoBalanceSplits = new ArrayList<>();
mPriceList = new ArrayList<>();
mCurrencyCount = new HashMap<>();
}
@Override
public void startElement(String uri, String localName,
String qualifiedName, Attributes attributes) throws SAXException {
switch (qualifiedName){
case GncXmlHelper.TAG_ACCOUNT:
mAccount = new Account(""); 
mISO4217Currency = false;
break;
case GncXmlHelper.TAG_TRANSACTION:
mTransaction = new Transaction(""); 
mTransaction.setExported(true);     
mISO4217Currency = false;
break;
case GncXmlHelper.TAG_TRN_SPLIT:
mSplit = new Split(Money.getZeroInstance(), "");
break;
case GncXmlHelper.TAG_DATE_POSTED:
mIsDatePosted = true;
break;
case GncXmlHelper.TAG_DATE_ENTERED:
mIsDateEntered = true;
break;
case GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS:
mInTemplates = true;
break;
case GncXmlHelper.TAG_SCHEDULED_ACTION:
mScheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
break;
case GncXmlHelper.TAG_SX_START:
mIsScheduledStart = true;
break;
case GncXmlHelper.TAG_SX_END:
mIsScheduledEnd = true;
break;
case GncXmlHelper.TAG_SX_LAST:
mIsLastRun = true;
break;
case GncXmlHelper.TAG_RX_START:
mIsRecurrenceStart = true;
break;
case GncXmlHelper.TAG_PRICE:
mPrice = new Price();
break;
case GncXmlHelper.TAG_PRICE_CURRENCY:
mPriceCurrency = true;
mPriceCommodity = false;
mISO4217Currency = false;
break;
case GncXmlHelper.TAG_PRICE_COMMODITY:
mPriceCurrency = false;
mPriceCommodity = true;
mISO4217Currency = false;
break;
case GncXmlHelper.TAG_BUDGET:
mBudget = new Budget();
break;
case GncXmlHelper.TAG_GNC_RECURRENCE:
case GncXmlHelper.TAG_BUDGET_RECURRENCE:
mRecurrenceMultiplier = 1;
mRecurrence = new Recurrence(PeriodType.MONTH);
break;
case GncXmlHelper.TAG_BUDGET_SLOTS:
mInBudgetSlot = true;
break;
case GncXmlHelper.TAG_SLOT:
if (mInBudgetSlot){
mBudgetAmount = new BudgetAmount(mBudget.getUID(), mBudgetAmountAccountUID);
}
break;
case GncXmlHelper.TAG_SLOT_VALUE:
mSlotTagAttribute = attributes.getValue(GncXmlHelper.ATTR_KEY_TYPE);
break;
}
}
@Override
public void endElement(String uri, String localName, String qualifiedName) throws SAXException {
String characterString = mContent.toString().trim();
if (mIgnoreElement != null) {
if (qualifiedName.equals(mIgnoreElement)) {
mIgnoreElement = null;
}
mContent.setLength(0);
return;
}
switch (qualifiedName) {
case GncXmlHelper.TAG_ACCT_NAME:
mAccount.setName(characterString);
mAccount.setFullName(characterString);
break;
case GncXmlHelper.TAG_ACCT_ID:
mAccount.setUID(characterString);
break;
case GncXmlHelper.TAG_ACCT_TYPE:
AccountType accountType = AccountType.valueOf(characterString);
mAccount.setAccountType(accountType);
mAccount.setHidden(accountType == AccountType.ROOT); 
break;
case GncXmlHelper.TAG_COMMODITY_SPACE:
if (characterString.equals("ISO4217") || characterString.equals("CURRENCY") ) {
mISO4217Currency = true;
} else {
mPrice = null;
}
break;
case GncXmlHelper.TAG_COMMODITY_ID:
String currencyCode = mISO4217Currency ? characterString : NO_CURRENCY_CODE;
Commodity commodity = mCommoditiesDbAdapter.getCommodity(currencyCode);
if (mAccount != null) {
if (commodity != null) {
mAccount.setCommodity(commodity);
} else {
throw new SAXException("Commodity with '" + currencyCode
+ "' currency code not found in the database");
}
if (mCurrencyCount.containsKey(currencyCode)) {
mCurrencyCount.put(currencyCode, mCurrencyCount.get(currencyCode) + 1);
} else {
mCurrencyCount.put(currencyCode, 1);
}
}
if (mTransaction != null) {
mTransaction.setCommodity(commodity);
}
if (mPrice != null) {
if (mPriceCommodity) {
mPrice.setCommodityUID(mCommoditiesDbAdapter.getCommodityUID(currencyCode));
mPriceCommodity = false;
}
if (mPriceCurrency) {
mPrice.setCurrencyUID(mCommoditiesDbAdapter.getCommodityUID(currencyCode));
mPriceCurrency = false;
}
}
break;
case GncXmlHelper.TAG_ACCT_DESCRIPTION:
mAccount.setDescription(characterString);
break;
case GncXmlHelper.TAG_PARENT_UID:
mAccount.setParentUID(characterString);
break;
case GncXmlHelper.TAG_ACCOUNT:
if (!mInTemplates) { 
mAccountList.add(mAccount);
mAccountMap.put(mAccount.getUID(), mAccount);
if (mAccount.getAccountType() == AccountType.ROOT) {
if (mRootAccount == null) {
mRootAccount = mAccount;
} else {
throw new SAXException("Multiple ROOT accounts exist in book");
}
}
mAccount = null;
mISO4217Currency = false;
}
break;
case GncXmlHelper.TAG_SLOT:
break;
case GncXmlHelper.TAG_SLOT_KEY:
switch (characterString) {
case GncXmlHelper.KEY_PLACEHOLDER:
mInPlaceHolderSlot = true;
break;
case GncXmlHelper.KEY_COLOR:
mInColorSlot = true;
break;
case GncXmlHelper.KEY_FAVORITE:
mInFavoriteSlot = true;
break;
case GncXmlHelper.KEY_NOTES:
mIsNote = true;
break;
case GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT:
mInDefaultTransferAccount = true;
break;
case GncXmlHelper.KEY_EXPORTED:
mInExported = true;
break;
case GncXmlHelper.KEY_SPLIT_ACCOUNT_SLOT:
mInSplitAccountSlot = true;
break;
case GncXmlHelper.KEY_CREDIT_NUMERIC:
mInCreditNumericSlot = true;
break;
case GncXmlHelper.KEY_DEBIT_NUMERIC:
mInDebitNumericSlot = true;
break;
}
if (mInBudgetSlot && mBudgetAmountAccountUID == null){
mBudgetAmountAccountUID = characterString;
mBudgetAmount.setAccountUID(characterString);
} else if (mInBudgetSlot){
mBudgetAmount.setPeriodNum(Long.parseLong(characterString));
}
break;
case GncXmlHelper.TAG_SLOT_VALUE:
if (mInPlaceHolderSlot) {
mAccount.setPlaceHolderFlag(Boolean.parseBoolean(characterString));
mInPlaceHolderSlot = false;
} else if (mInColorSlot) {
String color = characterString.trim();
if (!color.equals("Not Set")) {
if (!Pattern.matches(ACCOUNT_COLOR_HEX_REGEX, color))
color = "#" + color.replaceAll(".(.)?", "$1").replace("null", "");
try {
if (mAccount != null)
mAccount.setColor(color);
} catch (IllegalArgumentException ex) {
Log.e(LOG_TAG, "Invalid color code '" + color + "' for account " + mAccount.getName());
Crashlytics.logException(ex);
}
}
mInColorSlot = false;
} else if (mInFavoriteSlot) {
mAccount.setFavorite(Boolean.parseBoolean(characterString));
mInFavoriteSlot = false;
} else if (mIsNote) {
if (mTransaction != null) {
mTransaction.setNote(characterString);
mIsNote = false;
}
} else if (mInDefaultTransferAccount) {
mAccount.setDefaultTransferAccountUID(characterString);
mInDefaultTransferAccount = false;
} else if (mInExported) {
if (mTransaction != null) {
mTransaction.setExported(Boolean.parseBoolean(characterString));
mInExported = false;
}
} else if (mInTemplates && mInSplitAccountSlot) {
mSplit.setAccountUID(characterString);
mInSplitAccountSlot = false;
} else if (mInTemplates && mInCreditNumericSlot) {
handleEndOfTemplateNumericSlot(characterString, TransactionType.CREDIT);
} else if (mInTemplates && mInDebitNumericSlot) {
handleEndOfTemplateNumericSlot(characterString, TransactionType.DEBIT);
} else if (mInBudgetSlot){
if (mSlotTagAttribute.equals(GncXmlHelper.ATTR_VALUE_NUMERIC)) {
try {
BigDecimal bigDecimal = GncXmlHelper.parseSplitAmount(characterString);
mBudgetAmount.setAmount(new Money(bigDecimal, Commodity.DEFAULT_COMMODITY));
} catch (ParseException e) {
mBudgetAmount.setAmount(Money.getZeroInstance()); 
e.printStackTrace();
} finally {
mBudget.addBudgetAmount(mBudgetAmount);
}
mSlotTagAttribute = GncXmlHelper.ATTR_VALUE_FRAME;
} else {
mBudgetAmountAccountUID = null;
}
}
break;
case GncXmlHelper.TAG_BUDGET_SLOTS:
mInBudgetSlot = false;
break;
case GncXmlHelper.TAG_TRX_ID:
mTransaction.setUID(characterString);
break;
case GncXmlHelper.TAG_TRN_DESCRIPTION:
mTransaction.setDescription(characterString);
break;
case GncXmlHelper.TAG_TS_DATE:
try {
if (mIsDatePosted && mTransaction != null) {
mTransaction.setTime(GncXmlHelper.parseDate(characterString));
mIsDatePosted = false;
}
if (mIsDateEntered && mTransaction != null) {
Timestamp timestamp = new Timestamp(GncXmlHelper.parseDate(characterString));
mTransaction.setCreatedTimestamp(timestamp);
mIsDateEntered = false;
}
if (mPrice != null) {
mPrice.setDate(new Timestamp(GncXmlHelper.parseDate(characterString)));
}
} catch (ParseException e) {
Crashlytics.logException(e);
String message = "Unable to parse transaction time - " + characterString;
Log.e(LOG_TAG, message + "\n" + e.getMessage());
Crashlytics.log(message);
throw new SAXException(message, e);
}
break;
case GncXmlHelper.TAG_RECURRENCE_PERIOD: 
mRecurrencePeriod = Long.parseLong(characterString);
mTransaction.setTemplate(mRecurrencePeriod > 0);
break;
case GncXmlHelper.TAG_SPLIT_ID:
mSplit.setUID(characterString);
break;
case GncXmlHelper.TAG_SPLIT_MEMO:
mSplit.setMemo(characterString);
break;
case GncXmlHelper.TAG_SPLIT_VALUE:
try {
String q = characterString;
if (q.charAt(0) == '-') {
mNegativeQuantity = true;
q = q.substring(1);
} else {
mNegativeQuantity = false;
}
mValue = GncXmlHelper.parseSplitAmount(characterString).abs(); 
} catch (ParseException e) {
String msg = "Error parsing split quantity - " + characterString;
Crashlytics.log(msg);
Crashlytics.logException(e);
throw new SAXException(msg, e);
}
break;
case GncXmlHelper.TAG_SPLIT_QUANTITY:
try {
mQuantity = GncXmlHelper.parseSplitAmount(characterString).abs();
} catch (ParseException e) {
String msg = "Error parsing split quantity - " + characterString;
Crashlytics.log(msg);
Crashlytics.logException(e);
throw new SAXException(msg, e);
}
break;
case GncXmlHelper.TAG_SPLIT_ACCOUNT:
if (!mInTemplates) {
mSplit.setType(mNegativeQuantity ? TransactionType.CREDIT : TransactionType.DEBIT);
mSplit.setQuantity(new Money(mQuantity, getCommodityForAccount(characterString)));
mSplit.setValue(new Money(mValue, mTransaction.getCommodity()));
mSplit.setAccountUID(characterString);
} else {
if (!mIgnoreTemplateTransaction)
mTemplateAccountToTransactionMap.put(characterString, mTransaction.getUID());
}
break;
case GncXmlHelper.TAG_TRN_SPLIT:
mTransaction.addSplit(mSplit);
break;
case GncXmlHelper.TAG_TRANSACTION:
mTransaction.setTemplate(mInTemplates);
Split imbSplit = mTransaction.createAutoBalanceSplit();
if (imbSplit != null) {
mAutoBalanceSplits.add(imbSplit);
}
if (mInTemplates){
if (!mIgnoreTemplateTransaction)
mTemplateTransactions.add(mTransaction);
} else {
mTransactionList.add(mTransaction);
}
if (mRecurrencePeriod > 0) { 
mTransaction.setTemplate(true);
ScheduledAction scheduledAction = ScheduledAction.parseScheduledAction(mTransaction, mRecurrencePeriod);
mScheduledActionsList.add(scheduledAction);
}
mRecurrencePeriod = 0;
mIgnoreTemplateTransaction = true;
mTransaction = null;
break;
case GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS:
mInTemplates = false;
break;
case GncXmlHelper.TAG_SX_ID:
mScheduledAction.setUID(characterString);
break;
case GncXmlHelper.TAG_SX_NAME:
if (characterString.equals(ScheduledAction.ActionType.BACKUP.name()))
mScheduledAction.setActionType(ScheduledAction.ActionType.BACKUP);
else
mScheduledAction.setActionType(ScheduledAction.ActionType.TRANSACTION);
break;
case GncXmlHelper.TAG_SX_ENABLED:
mScheduledAction.setEnabled(characterString.equals("y"));
break;
case GncXmlHelper.TAG_SX_AUTO_CREATE:
mScheduledAction.setAutoCreate(characterString.equals("y"));
break;
case GncXmlHelper.TAG_SX_NUM_OCCUR:
mScheduledAction.setTotalPlannedExecutionCount(Integer.parseInt(characterString));
break;
case GncXmlHelper.TAG_RX_MULT:
mRecurrenceMultiplier = Integer.parseInt(characterString);
break;
case GncXmlHelper.TAG_RX_PERIOD_TYPE:
try {
PeriodType periodType = PeriodType.valueOf(characterString.toUpperCase());
mRecurrence.setPeriodType(periodType);
mRecurrence.setMultiplier(mRecurrenceMultiplier);
} catch (IllegalArgumentException ex){ 
String msg = "Unsupported period constant: " + characterString;
Log.e(LOG_TAG, msg);
Crashlytics.logException(ex);
mIgnoreScheduledAction = true;
}
break;
case GncXmlHelper.TAG_GDATE:
try {
long date = GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime();
if (mIsScheduledStart && mScheduledAction != null) {
mScheduledAction.setCreatedTimestamp(new Timestamp(date));
mIsScheduledStart = false;
}
if (mIsScheduledEnd && mScheduledAction != null) {
mScheduledAction.setEndTime(date);
mIsScheduledEnd = false;
}
if (mIsLastRun && mScheduledAction != null) {
mScheduledAction.setLastRun(date);
mIsLastRun = false;
}
if (mIsRecurrenceStart && mScheduledAction != null){
mRecurrence.setPeriodStart(new Timestamp(date));
mIsRecurrenceStart = false;
}
} catch (ParseException e) {
String msg = "Error parsing scheduled action date " + characterString;
Log.e(LOG_TAG, msg + e.getMessage());
Crashlytics.log(msg);
Crashlytics.logException(e);
throw new SAXException(msg, e);
}
break;
case GncXmlHelper.TAG_SX_TEMPL_ACCOUNT:
if (mScheduledAction.getActionType() == ScheduledAction.ActionType.TRANSACTION) {
mScheduledAction.setActionUID(mTemplateAccountToTransactionMap.get(characterString));
} else {
mScheduledAction.setActionUID(BaseModel.generateUID());
}
break;
case GncXmlHelper.TAG_GNC_RECURRENCE:
if (mScheduledAction != null){
mScheduledAction.setRecurrence(mRecurrence);
}
break;
case GncXmlHelper.TAG_SCHEDULED_ACTION:
if (mScheduledAction.getActionUID() != null && !mIgnoreScheduledAction) {
if (mScheduledAction.getRecurrence().getPeriodType() == PeriodType.WEEK) {
setMinimalScheduledActionByDays();
}
mScheduledActionsList.add(mScheduledAction);
int count = generateMissedScheduledTransactions(mScheduledAction);
Log.i(LOG_TAG, String.format("Generated %d transactions from scheduled action", count));
}
mIgnoreScheduledAction = false;
break;
case GncXmlHelper.TAG_PRICE_ID:
mPrice.setUID(characterString);
break;
case GncXmlHelper.TAG_PRICE_SOURCE:
if (mPrice != null) {
mPrice.setSource(characterString);
}
break;
case GncXmlHelper.TAG_PRICE_VALUE:
if (mPrice != null) {
String[] parts = characterString.split("/");
if (parts.length != 2) {
String message = "Illegal price - " + characterString;
Log.e(LOG_TAG, message);
Crashlytics.log(message);
throw new SAXException(message);
} else {
mPrice.setValueNum(Long.valueOf(parts[0]));
mPrice.setValueDenom(Long.valueOf(parts[1]));
Log.d(getClass().getName(), "price " + characterString +
" .. " + mPrice.getValueNum() + "/" + mPrice.getValueDenom());
}
}
break;
case GncXmlHelper.TAG_PRICE_TYPE:
if (mPrice != null) {
mPrice.setType(characterString);
}
break;
case GncXmlHelper.TAG_PRICE:
if (mPrice != null) {
mPriceList.add(mPrice);
mPrice = null;
}
break;
case GncXmlHelper.TAG_BUDGET:
if (mBudget.getBudgetAmounts().size() > 0) 
mBudgetList.add(mBudget);
break;
case GncXmlHelper.TAG_BUDGET_NAME:
mBudget.setName(characterString);
break;
case GncXmlHelper.TAG_BUDGET_DESCRIPTION:
mBudget.setDescription(characterString);
break;
case GncXmlHelper.TAG_BUDGET_NUM_PERIODS:
mBudget.setNumberOfPeriods(Long.parseLong(characterString));
break;
case GncXmlHelper.TAG_BUDGET_RECURRENCE:
mBudget.setRecurrence(mRecurrence);
break;
}
mContent.setLength(0);
}
@Override
public void characters(char[] chars, int start, int length) throws SAXException {
mContent.append(chars, start, length);
}
@Override
public void endDocument() throws SAXException {
super.endDocument();
HashMap<String, String> mapFullName = new HashMap<>(mAccountList.size());
HashMap<String, Account> mapImbalanceAccount = new HashMap<>();
if (mRootAccount == null) {
mRootAccount = new Account("ROOT");
mRootAccount.setAccountType(AccountType.ROOT);
mAccountList.add(mRootAccount);
mAccountMap.put(mRootAccount.getUID(), mRootAccount);
}
String imbalancePrefix = AccountsDbAdapter.getImbalanceAccountPrefix();
for(Account account:mAccountList) {
mapFullName.put(account.getUID(), null);
boolean topLevel = false;
if (account.getParentUID() == null && account.getAccountType() != AccountType.ROOT) {
account.setParentUID(mRootAccount.getUID());
topLevel = true;
}
if (topLevel || (mRootAccount.getUID().equals(account.getParentUID()))) {
if (account.getName().startsWith(imbalancePrefix)) {
mapImbalanceAccount.put(account.getName().substring(imbalancePrefix.length()), account);
}
}
}
for (Split split: mAutoBalanceSplits) {
String currencyCode = split.getAccountUID();
Account imbAccount = mapImbalanceAccount.get(currencyCode);
if (imbAccount == null) {
imbAccount = new Account(imbalancePrefix + currencyCode, mCommoditiesDbAdapter.getCommodity(currencyCode));
imbAccount.setParentUID(mRootAccount.getUID());
imbAccount.setAccountType(AccountType.BANK);
mapImbalanceAccount.put(currencyCode, imbAccount);
mAccountList.add(imbAccount);
}
split.setAccountUID(imbAccount.getUID());
}
java.util.Stack<Account> stack = new Stack<>();
for (Account account:mAccountList){
if (mapFullName.get(account.getUID()) != null) {
continue;
}
stack.push(account);
String parentAccountFullName;
while (!stack.isEmpty()) {
Account acc = stack.peek();
if (acc.getAccountType() == AccountType.ROOT) {
mapFullName.put(acc.getUID(), AccountsDbAdapter.ROOT_ACCOUNT_FULL_NAME);
stack.pop();
continue;
}
String parentUID = acc.getParentUID();
Account parentAccount = mAccountMap.get(parentUID);
if (parentAccount.getAccountType() == AccountType.ROOT) {
mapFullName.put(acc.getUID(), acc.getName());
stack.pop();
continue;
}
parentAccountFullName = mapFullName.get(parentUID);
if (parentAccountFullName == null) {
stack.push(parentAccount);
continue;
}
mapFullName.put(acc.getUID(), parentAccountFullName +
AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + acc.getName());
stack.pop();
}
}
for (Account account:mAccountList){
account.setFullName(mapFullName.get(account.getUID()));
}
String mostAppearedCurrency = "";
int mostCurrencyAppearance = 0;
for (Map.Entry<String, Integer> entry : mCurrencyCount.entrySet()) {
if (entry.getValue() > mostCurrencyAppearance) {
mostCurrencyAppearance = entry.getValue();
mostAppearedCurrency = entry.getKey();
}
}
if (mostCurrencyAppearance > 0) {
GnuCashApplication.setDefaultCurrencyCode(mostAppearedCurrency);
}
saveToDatabase();
}
private void saveToDatabase() {
BooksDbAdapter booksDbAdapter = BooksDbAdapter.getInstance();
mBook.setRootAccountUID(mRootAccount.getUID());
mBook.setDisplayName(booksDbAdapter.generateDefaultBookName());
long startTime = System.nanoTime();
mAccountsDbAdapter.beginTransaction();
Log.d(getClass().getSimpleName(), "bulk insert starts");
try {
mAccountsDbAdapter.enableForeignKey(false);
Log.d(getClass().getSimpleName(), "before clean up db");
mAccountsDbAdapter.deleteAllRecords();
Log.d(getClass().getSimpleName(), String.format("deb clean up done %d ns", System.nanoTime()-startTime));
long nAccounts = mAccountsDbAdapter.bulkAddRecords(mAccountList, DatabaseAdapter.UpdateMethod.insert);
Log.d("Handler:", String.format("%d accounts inserted", nAccounts));
long nSchedActions = mScheduledActionsDbAdapter.bulkAddRecords(mScheduledActionsList, DatabaseAdapter.UpdateMethod.insert);
Log.d("Handler:", String.format("%d scheduled actions inserted", nSchedActions));
long nTempTransactions = mTransactionsDbAdapter.bulkAddRecords(mTemplateTransactions, DatabaseAdapter.UpdateMethod.insert);
Log.d("Handler:", String.format("%d template transactions inserted", nTempTransactions));
long nTransactions = mTransactionsDbAdapter.bulkAddRecords(mTransactionList, DatabaseAdapter.UpdateMethod.insert);
Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
long nPrices = mPricesDbAdapter.bulkAddRecords(mPriceList, DatabaseAdapter.UpdateMethod.insert);
Log.d(getClass().getSimpleName(), String.format("%d prices inserted", nPrices));
long endTime = System.nanoTime();
Log.d(getClass().getSimpleName(), String.format("bulk insert time: %d", endTime - startTime));
booksDbAdapter.addRecord(mBook, DatabaseAdapter.UpdateMethod.insert);
mAccountsDbAdapter.setTransactionSuccessful();
} finally {
mAccountsDbAdapter.enableForeignKey(true);
mAccountsDbAdapter.endTransaction();
mainDb.close(); 
}
}
public @NonNull String getBookUID(){
return mBook.getUID();
}
private Commodity getCommodityForAccount(String accountUID){
try {
return mAccountMap.get(accountUID).getCommodity();
} catch (Exception e) {
Crashlytics.logException(e);
return Commodity.DEFAULT_COMMODITY;
}
}
private void handleEndOfTemplateNumericSlot(String characterString, TransactionType splitType) {
try {
if (mSplit.getValue().equals(
new Money(BigDecimal.ZERO, mSplit.getValue().getCommodity()))) {
BigDecimal amountBigD = GncXmlHelper.parseSplitAmount(characterString);
Money amount = new Money(amountBigD, getCommodityForAccount(mSplit.getAccountUID()));
mSplit.setValue(amount);
mSplit.setType(splitType);
mIgnoreTemplateTransaction = false; 
}
} catch (NumberFormatException | ParseException e) {
String msg = "Error parsing template credit split amount " + characterString;
Log.e(LOG_TAG, msg + "\n" + e.getMessage());
Crashlytics.log(msg);
Crashlytics.logException(e);
} finally {
if (splitType == TransactionType.CREDIT)
mInCreditNumericSlot = false;
else
mInDebitNumericSlot = false;
}
}
private int generateMissedScheduledTransactions(ScheduledAction scheduledAction){
if (scheduledAction.getActionType() != ScheduledAction.ActionType.TRANSACTION
|| !scheduledAction.isEnabled() || !scheduledAction.shouldAutoCreate()
|| (scheduledAction.getEndTime() > 0 && scheduledAction.getEndTime() > System.currentTimeMillis())
|| (scheduledAction.getTotalPlannedExecutionCount() > 0 && scheduledAction.getExecutionCount() >= scheduledAction.getTotalPlannedExecutionCount())){
return 0;
}
long lastRuntime = scheduledAction.getStartTime();
if (scheduledAction.getLastRunTime() > 0){
lastRuntime = scheduledAction.getLastRunTime();
}
int generatedTransactionCount = 0;
long period = scheduledAction.getPeriod();
final String actionUID = scheduledAction.getActionUID();
while ((lastRuntime = lastRuntime + period) <= System.currentTimeMillis()){
for (Transaction templateTransaction : mTemplateTransactions) {
if (templateTransaction.getUID().equals(actionUID)){
Transaction transaction = new Transaction(templateTransaction, true);
transaction.setTime(lastRuntime);
transaction.setScheduledActionUID(scheduledAction.getUID());
mTransactionList.add(transaction);
List<Split> autoBalanceSplits = transaction.getSplits(transaction.getCurrencyCode());
mAutoBalanceSplits.addAll(autoBalanceSplits);
scheduledAction.setExecutionCount(scheduledAction.getExecutionCount() + 1);
++generatedTransactionCount;
break;
}
}
}
scheduledAction.setLastRun(lastRuntime);
return generatedTransactionCount;
}
private void setMinimalScheduledActionByDays() {
Calendar calendar = Calendar.getInstance();
calendar.setTime(new Date(mScheduledAction.getStartTime()));
mScheduledAction.getRecurrence().setByDays(
Collections.singletonList(calendar.get(Calendar.DAY_OF_WEEK)));
}
}
