package com.googlecode.dex2jar.ir.stmt;
import java.util.Set;
import java.util.TreeSet;
import com.googlecode.dex2jar.ir.ET;
import com.googlecode.dex2jar.ir.LabelAndLocalMapper;
import com.googlecode.dex2jar.ir.expr.Value;
public abstract class Stmt {
public static abstract class E0Stmt extends Stmt {
public E0Stmt(ST type) {
super(type, ET.E0);
}
}
public static abstract class E1Stmt extends Stmt {
public Value op;
public E1Stmt(ST type, Value op) {
super(type, ET.E1);
this.op = op;
}
@Override
public Value getOp() {
return op;
}
public void setOp(Value op) {
this.op = op;
}
}
public static abstract class E2Stmt extends Stmt {
public Value op1;
public Value op2;
public E2Stmt(ST type, Value op1, Value op2) {
super(type, ET.E2);
this.op1 = op1;
this.op2 = op2;
}
@Override
public Value getOp1() {
return op1;
}
@Override
public Value getOp2() {
return op2;
}
public void setOp1(Value op1) {
this.op1 = op1;
}
public void setOp2(Value op2) {
this.op2 = op2;
}
}
public static final int CAN_CONTINUE = 1 << 0;
public static final int CAN_BRNANCH = 1 << 1;
public static final int CAN_SWITCH = 1 << 2;
public static final int CAN_THROW = 1 << 3;
public static final int MAY_THROW=1<<4;
public static enum ST {
LOCAL_START(CAN_CONTINUE), 
LOCAL_END(CAN_CONTINUE), 
ASSIGN(CAN_CONTINUE | MAY_THROW), IDENTITY(CAN_CONTINUE), LABEL(CAN_CONTINUE), LOCK(CAN_CONTINUE | CAN_THROW), NOP(
CAN_CONTINUE), UNLOCK(CAN_CONTINUE | CAN_THROW), VOID_INVOKE(CAN_CONTINUE | CAN_THROW), FILL_ARRAY_DATA(
CAN_CONTINUE | CAN_THROW), 
RETURN(MAY_THROW), RETURN_VOID(0), THROW(CAN_THROW), 
GOTO(CAN_BRNANCH), IF(CAN_CONTINUE | CAN_BRNANCH | MAY_THROW), 
LOOKUP_SWITCH(CAN_SWITCH | MAY_THROW), TABLE_SWITCH(CAN_SWITCH | MAY_THROW), ;
private int config;
ST(int config) {
this.config = config;
}
public boolean canBranch() {
return 0 != (CAN_BRNANCH & config);
}
public boolean canContinue() {
return 0 != (CAN_CONTINUE & config);
}
public boolean canSwitch() {
return 0 != (CAN_SWITCH & config);
}
public boolean mayThrow() {
return 0 != (MAY_THROW & config);
}
public boolean canThrow() {
return 0 != (CAN_THROW & config);
}
}
public Set<Stmt> _cfg_froms;
public Set<LabelStmt> exceptionHandlers;
public boolean visited;
public Object frame;
public Stmt _ts_default_next;
public final ET et;
public int id;
StmtList list;
Stmt next;
Stmt pre;
public final ST st;
protected Stmt(ST st, ET et) {
this.st = st;
this.et = et;
}
public abstract Stmt clone(LabelAndLocalMapper mapper);
public final Stmt getNext() {
return next;
}
public Value getOp() {
return null;
}
public Value getOp1() {
return null;
}
public Value getOp2() {
return null;
}
public Value[] getOps() {
return null;
}
public final Stmt getPre() {
return pre;
}
public void setOp(Value op) {
}
public void setOp1(Value op) {
}
public void setOp2(Value op) {
}
public void setOps(Value[] op) {
}
}
