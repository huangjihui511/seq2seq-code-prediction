package com.JUtils.sensitiveword;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
public class SensitiveWordInit {
@SuppressWarnings("rawtypes")
public HashMap sensitiveWordMap;
SensitiveWordInit(){
super();
}
@SuppressWarnings("rawtypes")
Map initKeyWord(){
try {
Set<String> keyWordSet = readSensitiveWordFile();
addSensitiveWordToHashMap(keyWordSet);
} catch (Exception e) {
e.printStackTrace();
}
return sensitiveWordMap;
}
@SuppressWarnings({ "rawtypes", "unchecked" })
private void addSensitiveWordToHashMap(Set<String> keyWordSet) {
String key = null;
Map nowMap = null;
Map<String, String> newWorMap = null;
Iterator<String> iterator = keyWordSet.iterator();
while(iterator.hasNext()){
nowMap = sensitiveWordMap;
for(int i = 0 ; i < key.length() ; i++){
nowMap = (Map) wordMap;
}
newWorMap = new HashMap<String,String>();
nowMap.put(keyChar, newWorMap);
nowMap = newWorMap;
}
if(i == key.length() - 1){
}
}
}
}
@SuppressWarnings("resource")
private Set<String> readSensitiveWordFile() throws Exception{
Set<String> set = null;
InputStreamReader read = new InputStreamReader(new FileInputStream(file),ENCODING);
try {
set = new HashSet<String>();
BufferedReader bufferedReader = new BufferedReader(read);
String txt = null;
set.add(txt);
}
}
}
} catch (Exception e) {
throw e;
}finally{
}
return set;
}
}
