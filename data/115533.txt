package com.JUtils.encrypt;
public class EncryptAndDecryptUtils {
public static String md5Encrypt(String value){
String result = null;
if(value != null && !"".equals(value.trim())){
result = MD5Utils.encrypt(value,MD5Utils.MD5_KEY);
}
return result;
}
public static String shaEncrypt(String value){
String result = null;
if(value != null && !"".equals(value.trim())){
result = MD5Utils.encrypt(value,MD5Utils.SHA_KEY);
}
return result;
}
public static String base64Encrypt(String value){
String result = null;
if(value != null && !"".equals(value.trim())){
result = Base64Utils.encrypt(value.getBytes());
}
return result;
}
public static String base64Decrypt(String value){
String result = null;
try {
if(value != null && !"".equals(value.trim())){
byte[] bytes = Base64Utils.decrypt(value);
result = new String(bytes);
}
} catch (Exception e) {
e.printStackTrace();
}
return result;
}
public static String desEncrypt(String value,String key){
key = key == null ? DESUtils.KEY : key;
String result = null;
try {
if(value != null && !"".equals(value.trim())){
result = DESUtils.encrypt(value, key);
}
} catch (Exception e) {
e.printStackTrace();
}
return result;
}
public static String desDecrypt(String value,String key){
key = key == null ? DESUtils.KEY : key;
String result = null;
try {
if(value != null && !"".equals(value.trim())){
result = DESUtils.decrypt(value, key);
}
} catch (Exception e) {
e.printStackTrace();
}
return result;
}
public static String aesEncrypt(String value,String key ){
key = key == null ? AESUtils.KEY : key;
String result = null;
try {
if(value != null && !"".equals(value.trim())){		
result = AESUtils.encrypt(value,key);
}
} catch (Exception e) {
e.printStackTrace();
}
return result;
}
public static String aesDecrypt(String value , String key){
key = key == null ? AESUtils.KEY : key;
String result = null;
try {
if(value != null && !"".equals(value.trim())){		
result = AESUtils.decrypt(value,key);
}
} catch (Exception e) {
e.printStackTrace();
}
return result;
}
}
