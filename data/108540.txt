package org.deeplearning4j.models.word2vec;
import lombok.extern.slf4j.Slf4j;
import org.deeplearning4j.models.embeddings.WeightLookupTable;
import org.deeplearning4j.models.embeddings.reader.ModelUtils;
import org.deeplearning4j.models.embeddings.wordvectors.WordVectors;
import org.deeplearning4j.models.word2vec.wordstore.VocabCache;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.compression.AbstractStorage;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.ops.transforms.Transforms;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
@Slf4j
public class StaticWord2Vec implements WordVectors {
private List<Map<Integer, INDArray>> cacheWrtDevice = new ArrayList<>();
private AbstractStorage<Integer> storage;
private long cachePerDevice = 0L;
private VocabCache<VocabWord> vocabCache;
private String unk = null;
private StaticWord2Vec() {
}
@Override
public String getUNK() {
return unk;
}
@Override
public void setUNK(String newUNK) {
this.unk = newUNK;
}
protected void init() {
if (storage.size() != vocabCache.numWords())
throw new RuntimeException("Number of words in Vocab isn't matching number of stored Vectors. vocab: ["
+ vocabCache.numWords() + "]; storage: [" + storage.size() + "]");
for (int i = 0; i < Nd4j.getAffinityManager().getNumberOfDevices(); i++) {
cacheWrtDevice.add(new ConcurrentHashMap<Integer, INDArray>());
}
}
@Override
public boolean hasWord(String word) {
return vocabCache.containsWord(word);
}
@Override
public Collection<String> wordsNearest(INDArray words, int top) {
throw new UnsupportedOperationException("Method isn't implemented. Please use usual Word2Vec implementation");
}
@Override
public Collection<String> wordsNearestSum(INDArray words, int top) {
throw new UnsupportedOperationException("Method isn't implemented. Please use usual Word2Vec implementation");
}
@Override
public Collection<String> wordsNearestSum(String word, int n) {
throw new UnsupportedOperationException("Method isn't implemented. Please use usual Word2Vec implementation");
}
@Override
public Collection<String> wordsNearestSum(Collection<String> positive, Collection<String> negative, int top) {
throw new UnsupportedOperationException("Method isn't implemented. Please use usual Word2Vec implementation");
}
@Override
public Map<String, Double> accuracy(List<String> questions) {
throw new UnsupportedOperationException("Method isn't implemented. Please use usual Word2Vec implementation");
}
@Override
public int indexOf(String word) {
return vocabCache.indexOf(word);
}
@Override
public List<String> similarWordsInVocabTo(String word, double accuracy) {
throw new UnsupportedOperationException("Method isn't implemented. Please use usual Word2Vec implementation");
}
@Override
public double[] getWordVector(String word) {
return getWordVectorMatrix(word).data().asDouble();
}
@Override
public INDArray getWordVectorMatrixNormalized(String word) {
return Transforms.unitVec(getWordVectorMatrix(word));
}
@Override
public INDArray getWordVectorMatrix(String word) {
int idx = 0;
if (hasWord(word))
idx = vocabCache.indexOf(word);
else if (getUNK() != null)
idx = vocabCache.indexOf(getUNK());
else
return null;
int deviceId = Nd4j.getAffinityManager().getDeviceForCurrentThread();
INDArray array = null;
if (cachePerDevice > 0 && cacheWrtDevice.get(deviceId).containsKey(idx))
return cacheWrtDevice.get(Nd4j.getAffinityManager().getDeviceForCurrentThread()).get(idx);
array = storage.get(idx);
if (cachePerDevice > 0) {
long arrayBytes = array.length() * array.data().getElementSize();
if ((arrayBytes * cacheWrtDevice.get(deviceId).size()) + arrayBytes < cachePerDevice)
cacheWrtDevice.get(deviceId).put(idx, array);
}
return array;
}
@Override
public INDArray getWordVectors(Collection<String> labels) {
List<INDArray> words = new ArrayList<>();
for (String label : labels) {
if (hasWord(label) || getUNK() != null)
words.add(getWordVectorMatrix(label));
}
return Nd4j.vstack(words);
}
@Override
public INDArray getWordVectorsMean(Collection<String> labels) {
INDArray matrix = getWordVectors(labels);
return matrix.mean(1);
}
@Override
public Collection<String> wordsNearest(Collection<String> positive, Collection<String> negative, int top) {
throw new UnsupportedOperationException("Method isn't implemented. Please use usual Word2Vec implementation");
}
@Override
public Collection<String> wordsNearest(String word, int n) {
throw new UnsupportedOperationException("Method isn't implemented. Please use usual Word2Vec implementation");
}
@Override
public double similarity(String label1, String label2) {
if (label1 == null || label2 == null) {
log.debug("LABELS: " + label1 + ": " + (label1 == null ? "null" : "exists") + ";" + label2 + " vec2:"
+ (label2 == null ? "null" : "exists"));
return Double.NaN;
}
INDArray vec1 = getWordVectorMatrix(label1).dup();
INDArray vec2 = getWordVectorMatrix(label2).dup();
if (vec1 == null || vec2 == null) {
log.debug(label1 + ": " + (vec1 == null ? "null" : "exists") + ";" + label2 + " vec2:"
+ (vec2 == null ? "null" : "exists"));
return Double.NaN;
}
if (label1.equals(label2))
return 1.0;
vec1 = Transforms.unitVec(vec1);
vec2 = Transforms.unitVec(vec2);
return Transforms.cosineSim(vec1, vec2);
}
@Override
public VocabCache vocab() {
return vocabCache;
}
@Override
public WeightLookupTable lookupTable() {
throw new UnsupportedOperationException("Method isn't implemented. Please use usual Word2Vec implementation");
}
@Override
public void setModelUtils(ModelUtils utils) {
}
@Override
public void loadWeightsInto(INDArray array) {
int n = (int)vocabSize();
INDArray zero = null;
for( int i=0; i<n; i++ ){
INDArray arr = storage.get(i);
if(arr == null){    
if(zero == null)
zero = Nd4j.create(array.dataType(), 1, array.size(1));
arr = zero;
}
array.putRow(i, arr);
}
}
@Override
public long vocabSize() {
return storage.size();
}
@Override
public int vectorSize() {
INDArray arr = storage.get(0);
if(arr != null)
return (int)arr.length();
int vs = (int)vocabSize();
for( int i=1; i<vs; i++ ){
arr = storage.get(0);
if(arr != null)
return (int)arr.length();
}
throw new UnsupportedOperationException("No vectors found");
}
@Override
public boolean jsonSerializable() {
return false;
}
@Override
public boolean outOfVocabularySupported() {
return false;
}
public static class Builder {
private AbstractStorage<Integer> storage;
private long cachePerDevice = 0L;
private VocabCache<VocabWord> vocabCache;
public Builder(AbstractStorage<Integer> storage, VocabCache<VocabWord> vocabCache) {
this.storage = storage;
this.vocabCache = vocabCache;
}
public Builder setCachePerDevice(long bytes) {
this.cachePerDevice = bytes;
return this;
}
public StaticWord2Vec build() {
StaticWord2Vec word2Vec = new StaticWord2Vec();
word2Vec.cachePerDevice = this.cachePerDevice;
word2Vec.storage = this.storage;
word2Vec.vocabCache = this.vocabCache;
word2Vec.init();
return word2Vec;
}
}
}
