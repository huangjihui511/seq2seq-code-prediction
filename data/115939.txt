package net.openhft.affinity;
import net.openhft.affinity.testimpl.TestFileLockBasedLockChecker;
import org.junit.Assert;
import org.junit.Assume;
import org.junit.Before;
import org.junit.Test;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import static net.openhft.affinity.LockCheck.IS_LINUX;
public class FileLockLockCheckTest {
private static final String TMP = System.getProperty("java.io.tmpdir");
private static final String TARGET = System.getProperty("project.build.directory", findTarget());
private final TestFileLockBasedLockChecker lockChecker = new TestFileLockBasedLockChecker();
private int cpu = 11;
private static String findTarget() {
for (File dir = new File(System.getProperty("user.dir")); dir != null; dir = dir.getParentFile()) {
File target = new File(dir, "target");
if (target.exists())
return target.getAbsolutePath();
}
return TMP + "/target";
}
@Before
public void before() {
Assume.assumeTrue(IS_LINUX);
System.setProperty("java.io.tmpdir", TARGET + "/" + System.nanoTime());
}
@Test
public void test() throws IOException {
Assert.assertTrue(LockCheck.isCpuFree(cpu));
LockCheck.updateCpu(cpu);
Assert.assertEquals(LockCheck.getPID(), LockCheck.getProcessForCpu(cpu));
}
@Test
public void testPidOnLinux() {
Assert.assertTrue(LockCheck.isProcessRunning(LockCheck.getPID()));
}
@Test
public void testReplace() throws IOException {
cpu++;
Assert.assertTrue(LockCheck.isCpuFree(cpu + 1));
LockCheck.replacePid(cpu, 123L);
Assert.assertEquals(123L, LockCheck.getProcessForCpu(cpu));
}
@Test
public void shouldNotBlowUpIfPidFileIsEmpty() throws Exception {
LockCheck.updateCpu(cpu);
final File file = lockChecker.doToFile(cpu);
new RandomAccessFile(file, "rw").setLength(0);
LockCheck.isCpuFree(cpu);
}
}
