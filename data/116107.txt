package net.i2p.router.message;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import net.i2p.data.Certificate;
import net.i2p.data.PublicKey;
import net.i2p.data.router.RouterInfo;
import net.i2p.data.i2np.DeliveryInstructions;
class GarlicConfig {
private RouterInfo _recipient;
private PublicKey _recipientPublicKey;
private final Certificate _cert;
private final long _id;
private final long _expiration;
private final List<GarlicConfig> _cloveConfigs;
private final DeliveryInstructions _instructions;
public GarlicConfig(Certificate cert, long id, long expiration, DeliveryInstructions di) {
this(new ArrayList<GarlicConfig>(4), cert, id, expiration, di);
}
protected GarlicConfig(List<GarlicConfig> cloveConfigs, Certificate cert, long id,
long expiration, DeliveryInstructions di) {
_cert = cert;
_id = id;
_expiration = expiration;
_cloveConfigs = cloveConfigs;
_instructions = di;
}
public void setRecipient(RouterInfo info) { _recipient = info; }
public RouterInfo getRecipient() { return _recipient; }
public void setRecipientPublicKey(PublicKey recipientPublicKey) { _recipientPublicKey = recipientPublicKey; }
public PublicKey getRecipientPublicKey() { return _recipientPublicKey; }
public Certificate getCertificate() { return _cert; }
public long getId() { return _id; }
public long getExpiration() { return _expiration; }
public DeliveryInstructions getDeliveryInstructions() { return _instructions; }
public void setRequestAck(boolean request) { _requestAck = request; }
public boolean getRequestAck() { return _requestAck; }
public void setReplyThroughRouter(RouterInfo replyThroughRouter) { _replyThroughRouter = replyThroughRouter; }
public RouterInfo getReplyThroughRouter() { return _replyThroughRouter; }
public void setReplyInstructions(DeliveryInstructions instructions) { _replyInstructions = instructions; }
public DeliveryInstructions getReplyInstructions() { return _replyInstructions; }
public long getReplyBlockMessageId() { return _replyBlockMessageId; }
public void setReplyBlockMessageId(long id) { _replyBlockMessageId = id; }
public Certificate getReplyBlockCertificate() { return _replyBlockCertificate; }
public void setReplyBlockCertificate(Certificate cert) { _replyBlockCertificate = cert; }
public long getReplyBlockExpiration() { return _replyBlockExpiration; }
public void setReplyBlockExpiration(long expiration) { _replyBlockExpiration = expiration; }
public void addClove(GarlicConfig config) {
if (config != null) {
_cloveConfigs.add(config);
}
}
public int getCloveCount() { return _cloveConfigs.size(); }
public GarlicConfig getClove(int index) { return _cloveConfigs.get(index); }
public void clearCloves() { _cloveConfigs.clear(); }
protected String getSubData() { return ""; }
private final static String NL = System.getProperty("line.separator");
@Override
public String toString() {
StringBuilder buf = new StringBuilder();
buf.append("<garlicConfig>").append(NL);
buf.append("<certificate>").append(getCertificate()).append("</certificate>").append(NL);
buf.append("<instructions>").append(getDeliveryInstructions()).append("</instructions>").append(NL);
buf.append("<expiration>").append(new Date(getExpiration())).append("</expiration>").append(NL);
buf.append("<garlicId>").append(getId()).append("</garlicId>").append(NL);
buf.append("<recipient>").append(getRecipient()).append("</recipient>").append(NL);
buf.append("<recipientPublicKey>").append(getRecipientPublicKey()).append("</recipientPublicKey>").append(NL);
buf.append(getSubData());
buf.append("<subcloves>").append(NL);
for (int i = 0; i < getCloveCount(); i++)
buf.append("<clove>").append(getClove(i)).append("</clove>").append(NL);
buf.append("</subcloves>").append(NL);
buf.append("</garlicConfig>").append(NL);
return buf.toString();
}
}
