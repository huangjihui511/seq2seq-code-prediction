package com.example.appengine;
import com.example.time.Clock;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;
import com.google.common.collect.ImmutableList;
import java.util.Date;
import java.util.List;
abstract class AbstractGuestbook {
private final DatastoreService datastore;
private final UserService userService;
private final Clock clock;
AbstractGuestbook(Clock clock) {
this.datastore = DatastoreServiceFactory.getDatastoreService();
this.userService = UserServiceFactory.getUserService();
this.clock = clock;
}
public Greeting appendGreeting(String content) {
Greeting greeting =
Greeting.create(
createGreeting(datastore, userService.getCurrentUser(), clock.now().toDate(), content));
return greeting;
}
protected abstract Entity createGreeting(
DatastoreService datastore, User user, Date date, String content);
public List<Greeting> listGreetings() {
ImmutableList.Builder<Greeting> greetings = ImmutableList.builder();
for (Entity entity : listGreetingEntities(datastore)) {
greetings.add(Greeting.create(entity));
}
return greetings.build();
}
protected abstract List<Entity> listGreetingEntities(DatastoreService datastore);
}
