package org.cybergarage.upnp;
import org.cybergarage.net.HostInterface;
import org.cybergarage.soap.SOAP;
import org.cybergarage.upnp.ssdp.SSDP;
import org.cybergarage.util.Debug;
import org.cybergarage.xml.Parser;
public class UPnP
{
public final static String XML_CLASS_PROPERTTY="cyberlink.upnp.xml.parser";
public final static String NAME = "CyberLinkJava";
public final static String VERSION = "3.0";
public final static int SERVER_RETRY_COUNT = 4;
public final static int DEFAULT_EXPIRED_DEVICE_EXTRA_TIME = 60;
public final static String getServerName()
{
String osName = System.getProperty("os.name");
String osVer = System.getProperty("os.version");
return osName + "/" + osVer + " UPnP/1.0 " + NAME + "/" + VERSION;
}
public final static String INMPR03 = "INMPR03";
public final static String INMPR03_VERSION = "1.0";
public final static int INMPR03_DISCOVERY_OVER_WIRELESS_COUNT = 4;
public final static String XML_DECLARATION = "<?xml version=\"1.0\" encoding=\"utf-8\"?>";
public final static int CONFIGID_UPNP_ORG_MAX = 16777215;
public final static int USE_ONLY_IPV6_ADDR = 1;
public final static int USE_LOOPBACK_ADDR = 2;
public final static int USE_IPV6_LINK_LOCAL_SCOPE = 3;
public final static int USE_IPV6_SUBNET_SCOPE = 4;
public final static int USE_IPV6_ADMINISTRATIVE_SCOPE = 5;
public final static int USE_IPV6_SITE_LOCAL_SCOPE = 6;
public final static int USE_IPV6_GLOBAL_SCOPE = 7;
public final static int USE_SSDP_SEARCHRESPONSE_MULTIPLE_INTERFACES = 8;
public final static int USE_ONLY_IPV4_ADDR = 9;
public final static void setEnable(int value)
{
switch (value) {
case USE_ONLY_IPV6_ADDR:
{
HostInterface.USE_ONLY_IPV6_ADDR = true;
}
break;
case USE_ONLY_IPV4_ADDR:
{
HostInterface.USE_ONLY_IPV4_ADDR = true;
}
break;
case USE_LOOPBACK_ADDR:
{
HostInterface.USE_LOOPBACK_ADDR = true;
}
break;
case USE_IPV6_LINK_LOCAL_SCOPE:
{
SSDP.setIPv6Address(SSDP.IPV6_LINK_LOCAL_ADDRESS);
}
break;
case USE_IPV6_SUBNET_SCOPE:
{
SSDP.setIPv6Address(SSDP.IPV6_SUBNET_ADDRESS);
}
break;
case USE_IPV6_ADMINISTRATIVE_SCOPE:
{
SSDP.setIPv6Address(SSDP.IPV6_ADMINISTRATIVE_ADDRESS);
}
break;
case USE_IPV6_SITE_LOCAL_SCOPE:
{
SSDP.setIPv6Address(SSDP.IPV6_SITE_LOCAL_ADDRESS);
}
break;
case USE_IPV6_GLOBAL_SCOPE:
{
SSDP.setIPv6Address(SSDP.IPV6_GLOBAL_ADDRESS);
}
break;
}
}
public final static void setDisable(int value)
{
switch (value) {
case USE_ONLY_IPV6_ADDR:
{
HostInterface.USE_ONLY_IPV6_ADDR = false;
}
break;
case USE_ONLY_IPV4_ADDR:
{
HostInterface.USE_ONLY_IPV4_ADDR = false;
}
break;
case USE_LOOPBACK_ADDR:
{
HostInterface.USE_LOOPBACK_ADDR = false;
}
break;
}
}
public final static boolean isEnabled(int value)
{
switch (value) {
case USE_ONLY_IPV6_ADDR:
{
return HostInterface.USE_ONLY_IPV6_ADDR;
}
case USE_ONLY_IPV4_ADDR:
{
return HostInterface.USE_ONLY_IPV4_ADDR;
}
case USE_LOOPBACK_ADDR:
{
return HostInterface.USE_LOOPBACK_ADDR;
}
}
return false;
}
private static final String toUUID(int seed)
{
String id = Integer.toString(seed & 0xFFFF, 16);
int idLen = id.length();
String uuid = "";
for (int n=0; n<(4-idLen); n++)
uuid += "0";
uuid += id;
return uuid;
}
public static final String createUUID()
{
long time1 = System.currentTimeMillis();
long time2 = (long)((double)System.currentTimeMillis() * Math.random());
return
toUUID((int)(time1 & 0xFFFF)) + "-" +
toUUID((int)((time1 >> 32) | 0xA000) & 0xFFFF) + "-" +
toUUID((int)(time2 & 0xFFFF)) + "-" +
toUUID((int)((time2 >> 32) | 0xE000) & 0xFFFF);
}
public static final int createBootId()
{
return (int)(System.currentTimeMillis() / 1000L);
}
public static final int caluculateConfigId(String configXml)
{
if (configXml == null)
return 0;
int configId = 0;
int configLen = configXml.length();
for (int n=0; n<configLen; n++) {
configId += configXml.codePointAt(n);
if (configId < CONFIGID_UPNP_ORG_MAX)
continue;
configId = configId % CONFIGID_UPNP_ORG_MAX;
}
return configId;
}
private static Parser xmlParser;
public final static void setXMLParser(Parser parser)
{
xmlParser = parser;
SOAP.setXMLParser(parser);
}
public final static Parser getXMLParser()
{
if(xmlParser == null){
xmlParser = loadDefaultXMLParser();
if(xmlParser == null)
throw new RuntimeException("No XML parser defined. And unable to laod any. \n" +
"Try to invoke UPnP.setXMLParser before UPnP.getXMLParser");
SOAP.setXMLParser(xmlParser);
}
return xmlParser;
}
private static Parser loadDefaultXMLParser() {
Parser parser = null;
String[] parserClass = new String[]{
System.getProperty(XML_CLASS_PROPERTTY),
"org.cybergarage.xml.parser.JaxpParser"
};
for (int i = 0; i < parserClass.length; i++) {
if(parserClass[i]==null)
continue;
try {
parser = (Parser) Class.forName(parserClass[i]).getDeclaredConstructor().newInstance();
return parser;
} catch (Throwable e) {
Debug.warning("Unable to load "+parserClass[i]+" as XMLParser due to "+e);
}
}
return null;
}
public final static int DEFAULT_TTL = 4;
private static int timeToLive = DEFAULT_TTL;
public final static void setTimeToLive(int value)
{
timeToLive = value;
}
public final static int getTimeToLive()
{
return timeToLive;
}
static
{
setTimeToLive(DEFAULT_TTL);
}
public final static void initialize()
{
}
}
