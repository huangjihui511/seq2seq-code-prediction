package com.twelvemonkeys.servlet.jsp.droplet.taglib;
import com.twelvemonkeys.lang.StringUtil;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
public class NestingHandler extends DefaultHandler {
private String includeTagName = "include";
private String paramTagName = "param";
private String openParamTagName = "oparam";
private boolean inIncludeTag = false;
private String namespacePrefix = null;
private String namespaceURI = null;
private NestingValidator validator = null;
public NestingHandler(String pNamespacePrefix, String pNameSpaceURI,
NestingValidator pValidator) {
namespacePrefix = pNamespacePrefix;
namespaceURI = pNameSpaceURI;
validator = pValidator;
}
public void startElement(String pNamespaceURI, String pLocalName,
String pQualifiedName, Attributes pAttributes)
throws SAXException {
String namespacePrefix = !StringUtil.isEmpty(pNamespaceURI)
? getNSPrefixFromURI(pNamespaceURI)
: getNamespacePrefix(pQualifiedName);
String localName = !StringUtil.isEmpty(pLocalName)
? pLocalName : getLocalName(pQualifiedName);
if (namespacePrefix.equals(namespacePrefix)) {
System.out.println("startElement:\nnamespaceURI=" + pNamespaceURI
+ " namespacePrefix=" + namespacePrefix
+ " localName=" + localName
+ " qName=" + pQualifiedName
+ " attributes=" + pAttributes);
}
if (localName.equals(includeTagName)) {
if (inIncludeTag) {
validator.reportError("Cannot nest " + namespacePrefix + ":"
+ includeTagName);
}
inIncludeTag = true;
}
else if (localName.equals(paramTagName)) {
if (!inIncludeTag) {
validator.reportError(this.namespacePrefix + ":"
+ paramTagName
+ " can only appear within "
+ this.namespacePrefix + ":"
+ includeTagName);
}
}
else if (localName.equals(openParamTagName)) {
if (!inIncludeTag) {
validator.reportError(this.namespacePrefix + ":"
+ openParamTagName
+ " can only appear within "
+ this.namespacePrefix + ":"
+ includeTagName);
}
inIncludeTag = false;
}
else {
if (inIncludeTag && !localName.equals("text")) {
validator.reportError(namespacePrefix + ":" + localName
+ " can not appear within "
+ this.namespacePrefix + ":"
+ includeTagName);
}
}
}
public void endElement(String pNamespaceURI,
String pLocalName,
String pQualifiedName)
throws SAXException {
String namespacePrefix = !StringUtil.isEmpty(pNamespaceURI)
? getNSPrefixFromURI(pNamespaceURI)
: getNamespacePrefix(pQualifiedName);
String localName = !StringUtil.isEmpty(pLocalName)
? pLocalName : getLocalName(pQualifiedName);
if (namespacePrefix.equals(namespacePrefix)) {
System.out.println("endElement:\nnamespaceURI=" + pNamespaceURI
+ " namespacePrefix=" + namespacePrefix
+ " localName=" + localName
+ " qName=" + pQualifiedName);
}
if (namespacePrefix.equals(this.namespacePrefix)
&& localName.equals(includeTagName)) {
inIncludeTag = false;
}
else if (namespacePrefix.equals(this.namespacePrefix)
&& localName.equals(openParamTagName)) {
inIncludeTag = true; 
}
}
private String getNSPrefixFromURI(String pNamespaceURI) {
return (pNamespaceURI.equals(namespaceURI)
? namespacePrefix : "");
}
private String getNamespacePrefix(String pQualifiedName) {
return pQualifiedName.substring(0, pQualifiedName.indexOf(':'));
}
private String getLocalName(String pQualifiedName) {
return pQualifiedName.substring(pQualifiedName.indexOf(':') + 1);
}
}
