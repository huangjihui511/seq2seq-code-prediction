package net.pms.formats.v2;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static org.apache.commons.lang3.StringUtils.isEmpty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class AudioProperties {
private static final Logger LOGGER = LoggerFactory.getLogger(AudioProperties.class);
private static final Pattern intPattern = Pattern.compile("([\\+-]?\\d+)([eE][\\+-]?\\d+)?");
private int numberOfChannels = 2;
private int audioDelay = 0;
private int sampleFrequency = 48000;
public int getAttribute(AudioAttribute attribute) {
switch (attribute) {
case CHANNELS_NUMBER:
return getNumberOfChannels();
case DELAY:
return getAudioDelay();
case SAMPLE_FREQUENCY:
return getSampleFrequency();
default:
throw new IllegalArgumentException("Unimplemented attribute");
}
}
public int getNumberOfChannels() {
return numberOfChannels;
}
public void setNumberOfChannels(int numberOfChannels) {
if (numberOfChannels < 1) {
throw new IllegalArgumentException("Channel number can't be less than 1.");
}
this.numberOfChannels = numberOfChannels;
}
public void setNumberOfChannels(String mediaInfoValue) {
this.numberOfChannels = getChannelsNumberFromLibMediaInfo(mediaInfoValue);
}
public int getAudioDelay() {
return audioDelay;
}
public void setAudioDelay(int audioDelay) {
this.audioDelay = audioDelay;
}
public void setAudioDelay(String mediaInfoValue) {
this.audioDelay = getAudioDelayFromLibMediaInfo(mediaInfoValue);
}
public int getSampleFrequency() {
return sampleFrequency;
}
public void setSampleFrequency(int sampleFrequency) {
if (sampleFrequency < 1) {
throw new IllegalArgumentException("Sample frequency can't be less than 1 Hz.");
}
this.sampleFrequency = sampleFrequency;
}
public void setSampleFrequency(String mediaInfoValue) {
this.sampleFrequency = getSampleFrequencyFromLibMediaInfo(mediaInfoValue);
}
public static int getChannelsNumberFromLibMediaInfo(String mediaInfoValue) {
if (isEmpty(mediaInfoValue)) {
LOGGER.warn("Empty value passed in. Returning default number 2.");
return 2;
}
int result = -1;
Matcher intMatcher = intPattern.matcher(mediaInfoValue);
while (intMatcher.find()) {
String matchResult = intMatcher.group();
try {
int currentResult = Integer.parseInt(matchResult);
if (currentResult > result) {
result = currentResult;
}
} catch (NumberFormatException ex) {
LOGGER.warn("NumberFormatException during parsing substring {} from value {}", matchResult, mediaInfoValue);
}
}
if (result <= 0) {
LOGGER.warn("Can't parse value {}. Returning default number 2.", mediaInfoValue);
return 2;
} else {
return result;
}
}
public static int getAudioDelayFromLibMediaInfo(String mediaInfoValue) {
if (isEmpty(mediaInfoValue)) {
LOGGER.warn("Empty value passed in. Returning default number 0.");
return 0;
}
int result = 0;
Matcher intMatcher = intPattern.matcher(mediaInfoValue);
if (intMatcher.find()) {
String matchResult = intMatcher.group();
try {
result = Integer.parseInt(matchResult);
} catch (NumberFormatException ex) {
LOGGER.warn("NumberFormatException during parsing substring {} from value {}", matchResult, mediaInfoValue);
}
}
return result;
}
public static int getSampleFrequencyFromLibMediaInfo(String mediaInfoValue) {
if (isEmpty(mediaInfoValue)) {
LOGGER.warn("Empty value passed in. Returning default number 48000 Hz.");
return 48000;
}
int result = -1;
Matcher intMatcher = intPattern.matcher(mediaInfoValue);
while (intMatcher.find()) {
String matchResult = intMatcher.group();
try {
int currentResult = Integer.parseInt(matchResult);
if (currentResult > result) {
result = currentResult;
}
} catch (NumberFormatException ex) {
LOGGER.warn("NumberFormatException during parsing substring {} from value {}", matchResult, mediaInfoValue);
}
}
if (result < 1) {
LOGGER.warn("Can't parse value {}. Returning default number 48000 Hz.", mediaInfoValue);
return 48000;
} else {
return result;
}
}
@Override
public String toString() {
StringBuilder result = new StringBuilder();
if (getNumberOfChannels() == 1) {
result.append("Channel: ").append(getNumberOfChannels());
} else {
result.append("Channels: ").append(getNumberOfChannels());
}
result.append(", Sample Frequency: ").append(getSampleFrequency()).append(" Hz");
if (getAudioDelay() != 0) {
result.append(", Delay: ").append(getAudioDelay());
}
return result.toString();
}
}
