package org.apache.fontbox.ttf;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
class RAFDataStream extends TTFDataStream
{
private RandomAccessFile raf = null;
private File ttfFile = null;
private static final int BUFFERSIZE = 16384;
RAFDataStream(String name, String mode) throws IOException
{
this( new File( name ), mode );
}
RAFDataStream(File file, String mode) throws IOException
{
raf = new BufferedRandomAccessFile(file, mode, BUFFERSIZE);
ttfFile = file;
}
@Override
public short readSignedShort() throws IOException
{
return raf.readShort();
}
@Override
public long getCurrentPosition() throws IOException
{
return raf.getFilePointer();
}
@Override
public void close() throws IOException
{
if (raf != null)
{
raf.close();
raf = null;
}
}
@Override
public int read() throws IOException
{
return raf.read();
}
@Override
public int readUnsignedShort() throws IOException
{
return raf.readUnsignedShort();
}
@Override
public long readLong() throws IOException
{
return raf.readLong();
}
@Override
public void seek(long pos) throws IOException
{
raf.seek( pos );
}
@Override
public int read(byte[] b, int off, int len) throws IOException
{
return raf.read(b, off, len);
}
@Override
public InputStream getOriginalData() throws IOException
{
return new FileInputStream( ttfFile );
}
@Override
public long getOriginalDataSize()
{
return ttfFile.length();
}
}
