package org.springframework.integration.support.json;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.integration.mapping.BytesMessageMapper;
import org.springframework.integration.support.MutableMessage;
import org.springframework.integration.support.MutableMessageHeaders;
import org.springframework.integration.support.utils.PatternMatchUtils;
import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.GenericMessage;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
public class EmbeddedJsonHeadersMessageMapper implements BytesMessageMapper {
protected final Log logger = LogFactory.getLog(getClass()); 
private final ObjectMapper objectMapper;
private final String[] headerPatterns;
private final boolean allHeaders;
private boolean rawBytes = true;
private boolean caseSensitive;
public EmbeddedJsonHeadersMessageMapper() {
this("*");
}
public EmbeddedJsonHeadersMessageMapper(String... headerPatterns) {
this(JacksonJsonUtils.messagingAwareMapper(), headerPatterns);
}
public EmbeddedJsonHeadersMessageMapper(ObjectMapper objectMapper) {
this(objectMapper, "*");
}
public EmbeddedJsonHeadersMessageMapper(ObjectMapper objectMapper, String... headerPatterns) {
this.objectMapper = objectMapper;
this.headerPatterns = Arrays.copyOf(headerPatterns, headerPatterns.length);
this.allHeaders = this.headerPatterns.length == 1 && this.headerPatterns[0].equals("*");
}
public void setRawBytes(boolean rawBytes) {
this.rawBytes = rawBytes;
}
public void setCaseSensitive(boolean caseSensitive) {
this.caseSensitive = caseSensitive;
}
public Collection<String> getHeaderPatterns() {
return Arrays.asList(this.headerPatterns);
}
@Override
public byte[] fromMessage(Message<?> message) {
Map<String, Object> headersToEncode =
this.allHeaders
? message.getHeaders()
: pruneHeaders(message.getHeaders());
if (this.rawBytes && message.getPayload() instanceof byte[]) {
return fromBytesPayload((byte[]) message.getPayload(), headersToEncode);
}
else {
Message<?> messageToEncode = message;
if (!this.allHeaders) {
if (!headersToEncode.containsKey(MessageHeaders.ID)) {
headersToEncode.put(MessageHeaders.ID, MessageHeaders.ID_VALUE_NONE);
}
if (!headersToEncode.containsKey(MessageHeaders.TIMESTAMP)) {
headersToEncode.put(MessageHeaders.TIMESTAMP, -1L);
}
messageToEncode = new MutableMessage<>(message.getPayload(), headersToEncode);
}
try {
return this.objectMapper.writeValueAsBytes(messageToEncode);
}
catch (JsonProcessingException e) {
throw new UncheckedIOException(e);
}
}
}
private Map<String, Object> pruneHeaders(MessageHeaders messageHeaders) {
return messageHeaders
.entrySet()
.stream()
.filter(e -> matchHeader(e.getKey()))
.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
}
private boolean matchHeader(String header) {
return Boolean.TRUE.equals(this.caseSensitive
? PatternMatchUtils.smartMatch(header, this.headerPatterns)
: PatternMatchUtils.smartMatchIgnoreCase(header, this.headerPatterns));
}
private byte[] fromBytesPayload(byte[] payload, Map<String, Object> headersToEncode) {
try {
byte[] headers = this.objectMapper.writeValueAsBytes(headersToEncode);
ByteBuffer buffer = ByteBuffer.wrap(new byte[8 + headers.length + payload.length]);
buffer.putInt(headers.length);
buffer.put(headers);
buffer.putInt(payload.length);
buffer.put(payload);
return buffer.array();
}
catch (JsonProcessingException e) {
throw new UncheckedIOException(e);
}
}
@Override
public Message<?> toMessage(byte[] bytes, @Nullable Map<String, Object> headers) {
Message<?> message = null;
try {
message = decodeNativeFormat(bytes, headers);
}
catch (@SuppressWarnings("unused") Exception e) {
}
if (message == null) {
try {
message = (Message<?>) this.objectMapper.readValue(bytes, Object.class);
}
catch (Exception e) {
if (this.logger.isDebugEnabled()) {
this.logger.debug("Failed to decode JSON", e);
}
}
}
if (message != null) {
return message;
}
else {
return headers == null ? new GenericMessage<>(bytes) : new GenericMessage<>(bytes, headers);
}
}
@Nullable
private Message<?> decodeNativeFormat(byte[] bytes, @Nullable Map<String, Object> headersToAdd) throws IOException {
ByteBuffer buffer = ByteBuffer.wrap(bytes);
if (buffer.remaining() > 4) {
int headersLen = buffer.getInt();
if (headersLen >= 0 && headersLen < buffer.remaining() - 4) {
buffer.position(headersLen + 4);
int payloadLen = buffer.getInt();
if (payloadLen != buffer.remaining()) {
return null;
}
else {
buffer.position(4);
@SuppressWarnings("unchecked")
Map<String, Object> headers = this.objectMapper.readValue(bytes, buffer.position(), headersLen,
Map.class);
buffer.position(buffer.position() + headersLen);
buffer.getInt();
Object payload;
byte[] payloadBytes = new byte[payloadLen];
buffer.get(payloadBytes);
payload = payloadBytes;
if (headersToAdd != null) {
headersToAdd.forEach(headers::putIfAbsent);
}
return new GenericMessage<>(payload, new MutableMessageHeaders(headers));
}
}
}
return null;
}
}
