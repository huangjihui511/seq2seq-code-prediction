package com.netflix.astyanax;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import com.netflix.astyanax.connectionpool.ConnectionPool;
import com.netflix.astyanax.connectionpool.Operation;
import com.netflix.astyanax.connectionpool.OperationResult;
import com.netflix.astyanax.connectionpool.TokenRange;
import com.netflix.astyanax.connectionpool.exceptions.ConnectionException;
import com.netflix.astyanax.connectionpool.exceptions.OperationException;
import com.netflix.astyanax.cql.CqlStatement;
import com.netflix.astyanax.ddl.KeyspaceDefinition;
import com.netflix.astyanax.ddl.SchemaChangeResult;
import com.netflix.astyanax.model.ColumnFamily;
import com.netflix.astyanax.partitioner.Partitioner;
import com.netflix.astyanax.query.ColumnFamilyQuery;
import com.netflix.astyanax.retry.RetryPolicy;
import com.netflix.astyanax.serializers.UnknownComparatorException;
public interface Keyspace {
AstyanaxConfiguration getConfig();
String getKeyspaceName();
Partitioner getPartitioner() throws ConnectionException;
String describePartitioner() throws ConnectionException;
List<TokenRange> describeRing() throws ConnectionException;
List<TokenRange> describeRing(String dc) throws ConnectionException;
List<TokenRange> describeRing(String dc, String rack) throws ConnectionException;
List<TokenRange> describeRing(boolean cached) throws ConnectionException;
KeyspaceDefinition describeKeyspace() throws ConnectionException;
Properties getKeyspaceProperties() throws ConnectionException;
Properties getColumnFamilyProperties(String columnFamily) throws ConnectionException;
SerializerPackage getSerializerPackage(String cfName, boolean ignoreErrors) throws ConnectionException,
UnknownComparatorException;
MutationBatch prepareMutationBatch();
<K, C> ColumnFamilyQuery<K, C> prepareQuery(ColumnFamily<K, C> cf);
<K, C> ColumnMutation prepareColumnMutation(ColumnFamily<K, C> columnFamily, K rowKey, C column);
<K, C> OperationResult<Void> truncateColumnFamily(ColumnFamily<K, C> columnFamily) throws OperationException,
ConnectionException;
OperationResult<Void> truncateColumnFamily(String columnFamily) throws ConnectionException;
OperationResult<Void> testOperation(Operation<?, ?> operation) throws ConnectionException;
OperationResult<Void> testOperation(Operation<?, ?> operation, RetryPolicy retry) throws ConnectionException;
<K, C> OperationResult<SchemaChangeResult> createColumnFamily(ColumnFamily<K, C> columnFamily, Map<String, Object> options) throws ConnectionException ;
OperationResult<SchemaChangeResult> createColumnFamily(Properties props) throws ConnectionException;
OperationResult<SchemaChangeResult> createColumnFamily(Map<String, Object> options) throws ConnectionException ;
<K, C> OperationResult<SchemaChangeResult> updateColumnFamily(ColumnFamily<K, C> columnFamily, Map<String, Object> options) throws ConnectionException ;
OperationResult<SchemaChangeResult> updateColumnFamily(Properties props) throws ConnectionException ;
OperationResult<SchemaChangeResult> updateColumnFamily(Map<String, Object> options) throws ConnectionException;
OperationResult<SchemaChangeResult> dropColumnFamily(String columnFamilyName) throws ConnectionException ;
<K, C> OperationResult<SchemaChangeResult> dropColumnFamily(ColumnFamily<K, C> columnFamily) throws ConnectionException ;
OperationResult<SchemaChangeResult> createKeyspace(Map<String, Object> options) throws ConnectionException ;
OperationResult<SchemaChangeResult> createKeyspaceIfNotExists(Map<String, Object> options) throws ConnectionException ;
OperationResult<SchemaChangeResult> createKeyspace(Properties properties) throws ConnectionException;
OperationResult<SchemaChangeResult> createKeyspaceIfNotExists(Properties properties) throws ConnectionException;
OperationResult<SchemaChangeResult> createKeyspace(Map<String, Object> options, Map<ColumnFamily, Map<String, Object>> cfs) throws ConnectionException ;
OperationResult<SchemaChangeResult> createKeyspaceIfNotExists(Map<String, Object> options, Map<ColumnFamily, Map<String, Object>> cfs) throws ConnectionException ;
OperationResult<SchemaChangeResult> updateKeyspace(Map<String, Object> options) throws ConnectionException ;
OperationResult<SchemaChangeResult> updateKeyspace(Properties props) throws ConnectionException;
OperationResult<SchemaChangeResult> dropKeyspace() throws ConnectionException ;
Map<String, List<String>> describeSchemaVersions() throws ConnectionException;
CqlStatement prepareCqlStatement();
ConnectionPool<?> getConnectionPool() throws ConnectionException;
}
