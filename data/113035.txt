package org.apache.fontbox.pfb;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
public class PfbParser
{
private static final int PFB_HEADER_LENGTH = 18;
private static final int START_MARKER = 0x80;
private static final int ASCII_MARKER = 0x01;
private static final int BINARY_MARKER = 0x02;
private static final int[] PFB_RECORDS = {ASCII_MARKER, BINARY_MARKER,
ASCII_MARKER};
private static final int BUFFER_SIZE = 0xffff;
private byte[] pfbdata;
private int[] lengths;
public PfbParser(final String filename) throws IOException
{
this( new BufferedInputStream(new FileInputStream(filename),BUFFER_SIZE) );
}
public PfbParser(final InputStream in) throws IOException
{
byte[] pfb = readPfbInput(in);
parsePfb(pfb);
}
public PfbParser(final byte[] bytes) throws IOException
{
parsePfb(bytes);
}
private void parsePfb(final byte[] pfb) throws IOException
{
ByteArrayInputStream in = new ByteArrayInputStream(pfb);
pfbdata = new byte[pfb.length - PFB_HEADER_LENGTH];
lengths = new int[PFB_RECORDS.length];
int pointer = 0;
for (int records = 0; records < PFB_RECORDS.length; records++)
{
if (in.read() != START_MARKER)
{
throw new IOException("Start marker missing");
}
if (in.read() != PFB_RECORDS[records])
{
throw new IOException("Incorrect record type");
}
int size = in.read();
size += in.read() << 8;
size += in.read() << 16;
size += in.read() << 24;
lengths[records] = size;
if (pointer >= pfbdata.length)
{
throw new EOFException("attempted to read past EOF");
}
int got = in.read(pfbdata, pointer, size);
if (got < 0)
{
throw new EOFException();
}
pointer += got;
}
}
private byte[] readPfbInput(final InputStream in) throws IOException
{
ByteArrayOutputStream out = new ByteArrayOutputStream();
byte[] tmpbuf = new byte[BUFFER_SIZE];
int amountRead = -1;
while ((amountRead = in.read(tmpbuf)) != -1)
{
out.write(tmpbuf, 0, amountRead);
}
return out.toByteArray();
}
public int[] getLengths()
{
return lengths;
}
public byte[] getPfbdata()
{
return pfbdata;
}
public InputStream getInputStream()
{
return new ByteArrayInputStream(pfbdata);
}
public int size()
{
return pfbdata.length;
}
public byte[] getSegment1()
{
return Arrays.copyOfRange(pfbdata, 0, lengths[0]);
}
public byte[] getSegment2()
{
return Arrays.copyOfRange(pfbdata, lengths[0], lengths[0] + lengths[1]);
}
}
