package com.jiang.android.rxjavaapp.database;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import java.util.ArrayList;
import java.util.List;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
public class operatorsDao extends AbstractDao<operators, Long> {
public static final String TABLENAME = "OPERATORS";
public static class Properties {
public final static Property Id = new Property(0, Long.class, "id", true, "_id");
public final static Property Name = new Property(1, String.class, "name", false, "NAME");
public final static Property Outer_id = new Property(2, Long.class, "outer_id", false, "OUTER_ID");
};
private DaoSession daoSession;
public operatorsDao(DaoConfig config) {
super(config);
}
public operatorsDao(DaoConfig config, DaoSession daoSession) {
super(config, daoSession);
this.daoSession = daoSession;
}
public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
String constraint = ifNotExists? "IF NOT EXISTS ": "";
db.execSQL("CREATE TABLE " + constraint + "\"OPERATORS\" (" + 
"\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + 
"\"NAME\" TEXT," + 
"\"OUTER_ID\" INTEGER);"); 
}
public static void dropTable(SQLiteDatabase db, boolean ifExists) {
String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPERATORS\"";
db.execSQL(sql);
}
@Override
protected void bindValues(SQLiteStatement stmt, operators entity) {
stmt.clearBindings();
Long id = entity.getId();
if (id != null) {
stmt.bindLong(1, id);
}
String name = entity.getName();
if (name != null) {
stmt.bindString(2, name);
}
Long outer_id = entity.getOuter_id();
if (outer_id != null) {
stmt.bindLong(3, outer_id);
}
}
@Override
protected void attachEntity(operators entity) {
super.attachEntity(entity);
entity.__setDaoSession(daoSession);
}
@Override
public Long readKey(Cursor cursor, int offset) {
return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
}
@Override
public operators readEntity(Cursor cursor, int offset) {
operators entity = new operators( 
cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), 
cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), 
cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) 
);
return entity;
}
@Override
public void readEntity(Cursor cursor, operators entity, int offset) {
entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
entity.setOuter_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
}
@Override
protected Long updateKeyAfterInsert(operators entity, long rowId) {
entity.setId(rowId);
return rowId;
}
@Override
public Long getKey(operators entity) {
if(entity != null) {
return entity.getId();
} else {
return null;
}
}
@Override
protected boolean isEntityUpdateable() {
return true;
}
private String selectDeep;
protected String getSelectDeep() {
if (selectDeep == null) {
StringBuilder builder = new StringBuilder("SELECT ");
SqlUtils.appendColumns(builder, "T", getAllColumns());
builder.append(',');
SqlUtils.appendColumns(builder, "T0", daoSession.getAlloperatorsDao().getAllColumns());
builder.append(" FROM OPERATORS T");
builder.append(" LEFT JOIN ALLOPERATORS T0 ON T.\"OUTER_ID\"=T0.\"_id\"");
builder.append(' ');
selectDeep = builder.toString();
}
return selectDeep;
}
protected operators loadCurrentDeep(Cursor cursor, boolean lock) {
operators entity = loadCurrent(cursor, 0, lock);
int offset = getAllColumns().length;
alloperators alloperators = loadCurrentOther(daoSession.getAlloperatorsDao(), cursor, offset);
entity.setAlloperators(alloperators);
return entity;
}
public operators loadDeep(Long key) {
assertSinglePk();
if (key == null) {
return null;
}
StringBuilder builder = new StringBuilder(getSelectDeep());
builder.append("WHERE ");
SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
String sql = builder.toString();
String[] keyArray = new String[] { key.toString() };
Cursor cursor = db.rawQuery(sql, keyArray);
try {
boolean available = cursor.moveToFirst();
if (!available) {
return null;
} else if (!cursor.isLast()) {
throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
}
return loadCurrentDeep(cursor, true);
} finally {
cursor.close();
}
}
public List<operators> loadAllDeepFromCursor(Cursor cursor) {
int count = cursor.getCount();
List<operators> list = new ArrayList<operators>(count);
if (cursor.moveToFirst()) {
if (identityScope != null) {
identityScope.lock();
identityScope.reserveRoom(count);
}
try {
do {
list.add(loadCurrentDeep(cursor, false));
} while (cursor.moveToNext());
} finally {
if (identityScope != null) {
identityScope.unlock();
}
}
}
return list;
}
protected List<operators> loadDeepAllAndCloseCursor(Cursor cursor) {
try {
return loadAllDeepFromCursor(cursor);
} finally {
cursor.close();
}
}
public List<operators> queryDeep(String where, String... selectionArg) {
Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
return loadDeepAllAndCloseCursor(cursor);
}
}
