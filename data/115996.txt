package com.taobao.taokeeper.monitor.core.task;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TimerTask;
import org.I0Itec.zkclient.ZkClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.context.WebApplicationContext;
import com.taobao.taokeeper.common.GlobalInstance;
import com.taobao.taokeeper.common.type.NodePathCheckRule;
import com.taobao.taokeeper.common.util.AlarmSettingUtil;
import com.taobao.taokeeper.dao.AlarmSettingsDAO;
import com.taobao.taokeeper.dao.ZooKeeperClusterDAO;
import com.taobao.taokeeper.model.AlarmSettings;
import com.taobao.taokeeper.model.ZooKeeperCluster;
import com.taobao.taokeeper.model.type.Message;
import com.taobao.taokeeper.monitor.core.ThreadPoolManager;
import com.taobao.taokeeper.reporter.alarm.TbMessageSender;
import common.toolkit.java.exception.DaoException;
import common.toolkit.java.util.ObjectUtil;
import common.toolkit.java.util.StringUtil;
import common.toolkit.java.util.collection.CollectionUtil;
import common.toolkit.java.util.collection.ListUtil;
public class ZooKeeperNodeChecker extends TimerTask{
private static final Logger LOG = LoggerFactory.getLogger( ZooKeeperNodeChecker.class );
private WebApplicationContext wac;
private AlarmSettingsDAO alarmSettingsDAO;
public ZooKeeperNodeChecker(){
wac = ContextLoader.getCurrentWebApplicationContext();
alarmSettingsDAO = ( AlarmSettingsDAO ) wac.getBean( "alarmSettingsDAO" );
}
@Override
public void run() {
if( !GlobalInstance.need_node_checker ){
LOG.info( "No need to check node name, need_node_checker= " + GlobalInstance.need_node_checker );
return;
}
try {
ZooKeeperClusterDAO zooKeeperClusterDAO = ( ZooKeeperClusterDAO ) wac.getBean( "zooKeeperClusterDAO" );
try {
List< ZooKeeperCluster > zooKeeperClusterSet = null;
Map< Integer, ZooKeeperCluster > zooKeeperClusterMap = GlobalInstance.getAllZooKeeperCluster();
if ( null == zooKeeperClusterMap ) {
zooKeeperClusterSet = zooKeeperClusterDAO.getAllDetailZooKeeperCluster();
} else {
zooKeeperClusterSet = new ArrayList< ZooKeeperCluster >();
zooKeeperClusterSet.addAll( zooKeeperClusterMap.values() );
}
if ( null == zooKeeperClusterSet || zooKeeperClusterSet.isEmpty() ) {
} else {
this.checkNodePath( zookeeperCluster );
}
}
} catch ( DaoException daoException ) {
LOG.warn( "Error when handle data base" + daoException.getMessage() );
} catch ( Exception e ) {
e.printStackTrace();
}
} catch ( Throwable e ) {
e.printStackTrace();
}
}
private void checkNodePath( final ZooKeeperCluster zookeeperCluster ) {
if( ObjectUtil.isBlank( zookeeperCluster ) || CollectionUtil.isBlank( zookeeperCluster.getServerList()  ) ){
return;
}
AlarmSettings alarmSettings = null;
try {
alarmSettings = alarmSettingsDAO.getAlarmSettingsByCulsterId( zookeeperCluster.getClusterId() );
} catch ( DaoException e ) {
e.printStackTrace();
}
if ( ObjectUtil.isBlank( alarmSettings ) ) {
return;
}
List<String> zkServerList = zookeeperCluster.getServerList();
if( CollectionUtil.isBlank( zkServerList ) ){
return;
}
String strNodePathCheckRule = StringUtil.trimToEmpty( alarmSettings.getNodePathCheckRule() );
String wangwangList               = alarmSettings.getWangwangList();
NodePathCheckRule nodePathCheckRule = null;
try {
nodePathCheckRule = AlarmSettingUtil.parseNodePathCheckRuleFromString( strNodePathCheckRule );
} catch ( Exception e ) {
LOG.warn( e.getMessage() );
e.printStackTrace();
return;
}
if( ObjectUtil.isBlank( nodePathCheckRule ) ){
return;
}
Map<String,List<String>> pathOnlyCanBeExist = nodePathCheckRule.getPathOnlyCanBeExist();
Map<String,List<String>> pathCanNotBeExist = nodePathCheckRule.getPathCanNotBeExist();
if( CollectionUtil.isBlank( pathOnlyCanBeExist ) && CollectionUtil.isBlank( pathCanNotBeExist ) ){
return;
}
", serverList: " + zookeeperCluster.getServerList()  + " " +
nodePathCheckRule );
ZkClient zkClient= new ZkClient( ListUtil.toString( zkServerList ), 5000, 5000 );
if( !CollectionUtil.isBlank( pathOnlyCanBeExist )  ){
for(  String path : pathOnlyCanBeExist.keySet() ){
List<String> listConfig = pathOnlyCanBeExist.get( path );
List<String> listReal = null;
try {
listReal = zkClient.getChildren( path );
} catch ( Exception e ) {
e.printStackTrace();
}
if( CollectionUtil.isBlank( listReal ) ){
continue;
}
for( String pathReal : listReal ){
pathReal = StringUtil.trimToEmpty( pathReal );
if( !listConfig.contains( pathReal ) ){
if ( GlobalInstance.needAlarm.get() ) {
ThreadPoolManager.addJobToMessageSendExecutor(
new TbMessageSender(
new Message( wangwangList,
Message.MessageType.WANGWANG ) ) );
}
}
}
}
}
if( !CollectionUtil.isBlank( pathCanNotBeExist )  ){
for(  String path : pathCanNotBeExist.keySet() ){
List<String> listConfig = pathCanNotBeExist.get( path );
List<String> listReal = null;
try {
listReal = zkClient.getChildren( path );
} catch ( Exception e ) {
}
if( CollectionUtil.isBlank( listReal ) ){
continue;
}
for( String pathConfig : listConfig ){
pathConfig = StringUtil.trimToEmpty( pathConfig );
if( listReal.contains( pathConfig ) ){
if ( GlobalInstance.needAlarm.get() ) {
ThreadPoolManager.addJobToMessageSendExecutor(
new TbMessageSender(
new Message( wangwangList,
Message.MessageType.WANGWANG ) ) );
}
}
}
}
}
}
public static void main( String[] args ) {
Thread thread = new Thread( new ZooKeeperNodeChecker() );
thread.start();
}
}
