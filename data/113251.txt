package org.pf4j;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.pf4j.plugin.PluginJar;
import org.pf4j.plugin.TestExtension;
import org.pf4j.plugin.TestExtensionPoint;
import org.pf4j.plugin.TestPlugin;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
public class JarPluginManagerTest {
private PluginJar pluginJar;
private JarPluginManager pluginManager;
@TempDir
Path pluginsPath;
@BeforeEach
public void setUp() throws IOException {
pluginJar = new PluginJar.Builder(pluginsPath.resolve("test-plugin.jar"), "test-plugin")
.pluginClass(TestPlugin.class.getName())
.pluginVersion("1.2.3")
.extension(TestExtension.class.getName())
.build();
pluginManager = new JarPluginManager(pluginsPath);
}
@AfterEach
public void tearDown() {
pluginJar = null;
pluginManager = null;
}
@Test
public void getExtensions() {
pluginManager.loadPlugins();
pluginManager.startPlugins();
List<TestExtensionPoint> extensions = pluginManager.getExtensions(TestExtensionPoint.class);
assertEquals(1, extensions.size());
String something = extensions.get(0).saySomething();
assertEquals(new TestExtension().saySomething(), something);
}
@Test
public void unloadPlugin() throws Exception {
pluginManager.loadPlugins();
assertEquals(1, pluginManager.getPlugins().size());
boolean unloaded = pluginManager.unloadPlugin(pluginJar.pluginId());
assertTrue(unloaded);
assertTrue(pluginJar.file().exists());
}
@Test
public void deletePlugin() throws Exception {
pluginManager.loadPlugins();
assertEquals(1, pluginManager.getPlugins().size());
boolean deleted = pluginManager.deletePlugin(pluginJar.pluginId());
assertTrue(deleted);
assertFalse(pluginJar.file().exists());
}
}
