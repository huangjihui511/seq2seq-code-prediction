package org.springframework.integration.codec.kryo;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import org.springframework.integration.codec.Codec;
import org.springframework.util.Assert;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import com.esotericsoftware.kryo.pool.KryoFactory;
import com.esotericsoftware.kryo.pool.KryoPool;
public abstract class AbstractKryoCodec implements Codec {
protected final KryoPool pool; 
protected AbstractKryoCodec() {
KryoFactory factory = () -> {
Kryo kryo = new Kryo();
configureKryoInstance(kryo);
return kryo;
};
this.pool = new KryoPool.Builder(factory).softReferences().build();
}
@Override
public void encode(final Object object, OutputStream outputStream) {
Assert.notNull(object, "cannot encode a null object");
Assert.notNull(outputStream, "'outputSteam' cannot be null");
final Output output = (outputStream instanceof Output ? (Output) outputStream : new Output(outputStream));
this.pool.run(kryo -> {
doEncode(kryo, object, output);
return Void.class;
});
output.close();
}
@Override
public <T> T decode(byte[] bytes, Class<T> type) throws IOException {
Assert.notNull(bytes, "'bytes' cannot be null");
final Input input = new Input(bytes);
try {
return decode(input, type);
}
finally {
input.close();
}
}
@Override
public <T> T decode(InputStream inputStream, final Class<T> type) {
Assert.notNull(inputStream, "'inputStream' cannot be null");
Assert.notNull(type, "'type' cannot be null");
final Input input = (inputStream instanceof Input ? (Input) inputStream : new Input(inputStream));
T result = null;
try {
result = this.pool.run(kryo -> doDecode(kryo, input, type));
}
finally {
input.close();
}
return result;
}
@Override
public byte[] encode(Object object) throws IOException {
ByteArrayOutputStream bos = new ByteArrayOutputStream();
encode(object, bos);
byte[] bytes = bos.toByteArray();
bos.close();
return bytes;
}
protected abstract void doEncode(Kryo kryo, Object object, Output output);
protected abstract <T> T doDecode(Kryo kryo, Input input, Class<T> type);
protected abstract void configureKryoInstance(Kryo kryo);
}
