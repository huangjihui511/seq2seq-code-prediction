package com.google.api.client.xml;
import com.google.api.client.util.Beta;
import com.google.api.client.util.ObjectParser;
import com.google.api.client.util.Preconditions;
import com.google.api.client.util.Types;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
@Beta
public class XmlObjectParser implements ObjectParser {
private final XmlNamespaceDictionary namespaceDictionary;
public XmlObjectParser(XmlNamespaceDictionary namespaceDictionary) {
this.namespaceDictionary = Preconditions.checkNotNull(namespaceDictionary);
}
public final XmlNamespaceDictionary getNamespaceDictionary() {
return namespaceDictionary;
}
private Object readObject(XmlPullParser parser, Type dataType)
throws XmlPullParserException, IOException {
Preconditions.checkArgument(dataType instanceof Class<?>, "dataType has to be of Class<?>");
Object result = Types.newInstance((Class<?>) dataType);
Xml.parseElement(parser, result, namespaceDictionary, null);
return result;
}
@SuppressWarnings("unchecked")
public <T> T parseAndClose(InputStream in, Charset charset, Class<T> dataClass)
throws IOException {
return (T) parseAndClose(in, charset, (Type) dataClass);
}
public Object parseAndClose(InputStream in, Charset charset, Type dataType) throws IOException {
try {
XmlPullParser parser = Xml.createParser();
parser.setInput(in, charset.name());
return readObject(parser, dataType);
} catch (XmlPullParserException e) {
IOException exception = new IOException();
exception.initCause(e);
throw exception;
} finally {
in.close();
}
}
@SuppressWarnings("unchecked")
public <T> T parseAndClose(Reader reader, Class<T> dataClass) throws IOException {
return (T) parseAndClose(reader, (Type) dataClass);
}
public Object parseAndClose(Reader reader, Type dataType) throws IOException {
try {
XmlPullParser parser = Xml.createParser();
parser.setInput(reader);
return readObject(parser, dataType);
} catch (XmlPullParserException e) {
IOException exception = new IOException();
exception.initCause(e);
throw exception;
} finally {
reader.close();
}
}
}
