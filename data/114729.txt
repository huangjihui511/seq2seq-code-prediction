package com.springboot.demo.common.auth;
import com.springboot.demo.sys.entity.SysMenu;
import com.springboot.demo.sys.entity.SysRole;
import com.springboot.demo.sys.entity.SysUser;
import com.springboot.demo.sys.service.SysMenuService;
import com.springboot.demo.sys.service.SysRoleService;
import com.springboot.demo.sys.service.SysUserService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.*;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import javax.annotation.Resource;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
@Slf4j
public class ShiroRealm extends AuthorizingRealm {
@Resource
private SysUserService userService;
@Resource
private SysRoleService roleService;
@Resource
private SysMenuService menuService;
@Override
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
SysUser user = (SysUser) SecurityUtils.getSubject().getPrincipals().getPrimaryPrincipal();
String userName = user.getUsername();
SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();
List<SysRole> roleList = roleService.findUserRole(userName);
Set<String> roleSet = roleList.stream().map(SysRole::getRoleName).collect(Collectors.toSet());
authorizationInfo.setRoles(roleSet);
List<SysMenu> permissionList = menuService.findUserPermissions(userName);
Set<String> permissionSet = permissionList.stream().map(SysMenu::getPerms).collect(Collectors.toSet());
authorizationInfo.setStringPermissions(permissionSet);
return authorizationInfo;
}
@Override
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
String userName = (String) authenticationToken.getPrincipal();
String password = new String((char[]) authenticationToken.getCredentials());
SysUser user = userService.findByName(userName);
if (user == null) {
}
if (!password.equals(user.getPassword())) {
}
if ("0".equals(user.getStatus())) {
}
return new SimpleAuthenticationInfo(user, password, userName);
}
}
