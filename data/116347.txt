package org.spongepowered.api.util;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
public final class CollectionUtils {
@SuppressWarnings("unchecked")
public static <K, V> Map<K, V> copyMap(Map<? extends K, ? extends V> map) {
try {
if (map instanceof HashMap) {
return (Map<K, V>) ((HashMap<? extends K, ? extends V>) map).clone();
} else if (map instanceof IdentityHashMap) {
return (Map<K, V>) ((IdentityHashMap<?, ?>) map).clone();
} else if (map instanceof EnumMap) {
return (Map<K, V>) ((EnumMap<?, V>) map).clone();
} else if (map instanceof TreeMap) {
return (Map<K, V>) ((TreeMap<K, V>) map).clone();
} else if (map instanceof ConcurrentHashMap) {
return (Map<K, V>) new ConcurrentHashMap<>(map);
}
} catch (Exception ignored) {
}
return new HashMap<>(map);
}
@SuppressWarnings("unchecked")
public static <T> List<T> copyList(List<? extends T> list) {
try {
if (list instanceof ArrayList) {
return (List<T>) ((ArrayList<? extends T>) list).clone();
} else if (list instanceof LinkedList) {
return (List<T>) ((LinkedList<? extends T>) list).clone();
} else if (list instanceof CopyOnWriteArrayList) {
return (List<T>) ((CopyOnWriteArrayList<T>) list).clone();
}
} catch (Exception ignored) {
}
return new ArrayList<>(list);
}
private CollectionUtils() {
throw new AssertionError("You should not be attempting to instantiate this class.");
}
}
