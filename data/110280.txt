package de.codecentric.boot.admin.client.config;
import org.junit.Test;
import org.springframework.mock.env.MockEnvironment;
import static org.assertj.core.api.Assertions.assertThat;
public class ClientPropertiesTest {
@Test
public void should_default_autoDeregister_to_false() {
MockEnvironment env = new MockEnvironment();
ClientProperties clientProperties = new ClientProperties();
assertThat(clientProperties.isAutoDeregistration(env)).isFalse();
clientProperties.setAutoDeregistration(false);
assertThat(clientProperties.isAutoDeregistration(env)).isFalse();
clientProperties.setAutoDeregistration(true);
assertThat(clientProperties.isAutoDeregistration(env)).isTrue();
}
@Test
public void should_default_autoDeregister_to_true() {
MockEnvironment env = new MockEnvironment();
env.setProperty("VCAP_APPLICATION", "");
ClientProperties clientProperties = new ClientProperties();
assertThat(clientProperties.isAutoDeregistration(env)).isTrue();
clientProperties.setAutoDeregistration(false);
assertThat(clientProperties.isAutoDeregistration(env)).isFalse();
clientProperties.setAutoDeregistration(true);
assertThat(clientProperties.isAutoDeregistration(env)).isTrue();
}
@Test
public void should_return_all_admiUrls() {
ClientProperties clientProperties = new ClientProperties();
clientProperties.setApiPath("register");
clientProperties.setUrl(new String[] { "http:
assertThat(clientProperties.getAdminUrl()).containsExactly("http:
}
}
