package com.datumbox.framework.core.common.dataobjects;
import com.datumbox.framework.common.dataobjects.AssociativeArray;
import java.io.Serializable;
import java.util.Objects;
public class Record implements Serializable {
private static final long serialVersionUID = 1L;
private final AssociativeArray x;
private final Object y;
private final Object yPredicted;
private final AssociativeArray yPredictedProbabilities;
public Record(AssociativeArray x, Object y) {
this(x, y, null, null);
}
public Record(AssociativeArray x, Object y, Object yPredicted, AssociativeArray yPredictedProbabilities) {
this.x = AssociativeArray.copy2Unmodifiable(x);
this.y = y;
this.yPredicted = yPredicted;
if (yPredictedProbabilities != null) {
this.yPredictedProbabilities = AssociativeArray.copy2Unmodifiable(yPredictedProbabilities);
}
else {
this.yPredictedProbabilities = null;
}
}
public AssociativeArray getX() {
return x;
}
public Object getY() {
return y;
}
public Object getYPredicted() {
return yPredicted;
}
public AssociativeArray getYPredictedProbabilities() {
return yPredictedProbabilities;
}
@Override
public int hashCode() {
int hash = 7;
hash = 23 * hash + Objects.hashCode(this.x);
hash = 23 * hash + Objects.hashCode(this.y);
return hash;
}
@Override
public boolean equals(Object obj) {
if (obj == null) {
return false;
}
else if (getClass() != obj.getClass()) {
return false;
}
final Record other = (Record) obj;
if (!Objects.equals(this.y, other.y)) {
return false;
}
else if (!Objects.equals(this.x, other.x)) {
return false;
}
return true;
}
@Override
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append("x => ");
sb.append(String.valueOf(x));
sb.append(" | ");
sb.append("y => ");
sb.append(String.valueOf(y));
sb.append(" | ");
sb.append("yPredicted => ");
sb.append(String.valueOf(yPredicted));
sb.append(" | ");
sb.append("yPredictedProbabilities => ");
sb.append(String.valueOf(yPredictedProbabilities));
return sb.toString();
}
}
