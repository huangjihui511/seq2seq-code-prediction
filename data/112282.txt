package com.github.jknack.handlebars.cache;
import static org.apache.commons.lang3.Validate.notNull;
import java.io.IOException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import org.apache.commons.lang3.tuple.Pair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.github.jknack.handlebars.Parser;
import com.github.jknack.handlebars.Template;
import com.github.jknack.handlebars.io.TemplateSource;
public class ConcurrentMapTemplateCache implements TemplateCache {
private final Logger logger = LoggerFactory.getLogger(getClass());
private final ConcurrentMap<TemplateSource, Pair<TemplateSource, Template>> cache;
private boolean reload;
protected ConcurrentMapTemplateCache(
final ConcurrentMap<TemplateSource, Pair<TemplateSource, Template>> cache) {
this.cache = notNull(cache, "The cache is required.");
}
public ConcurrentMapTemplateCache() {
this(new ConcurrentHashMap<TemplateSource, Pair<TemplateSource, Template>>());
}
@Override
public void clear() {
cache.clear();
}
@Override
public void evict(final TemplateSource source) {
cache.remove(source);
}
@Override
public Template get(final TemplateSource source, final Parser parser) throws IOException {
notNull(source, "The source is required.");
notNull(parser, "The parser is required.");
return cacheGet(source, parser);
}
@Override
public ConcurrentMapTemplateCache setReload(final boolean reload) {
this.reload = reload;
return this;
}
private Template cacheGet(final TemplateSource source, final Parser parser) throws IOException {
Pair<TemplateSource, Template> entry = cache.get(source);
if (entry == null) {
logger.debug("Loading: {}", source);
entry = Pair.of(source, parser.parse(source));
cache.put(source, entry);
} else if (reload && source.lastModified() != entry.getKey().lastModified()) {
evict(source);
logger.debug("Reloading: {}", source);
entry = Pair.of(source, parser.parse(source));
cache.put(source, entry);
} else {
logger.debug("Found in cache: {}", source);
}
return entry.getValue();
}
}
