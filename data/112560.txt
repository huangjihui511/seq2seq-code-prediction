package com.sun.swingset3.demos.table;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
public class IMDBLink {
private IMDBLink() {
}
public static String getMovieURIString(String movieTitle, int year) throws IOException {
ArrayList<String> matches = new ArrayList<String>();
URL url;
BufferedReader reader;
try {
String urlKey = URLEncoder.encode(movieTitle, "UTF-8");
url = new URL("http:
urlKey + "&iscqry=");
} catch (Exception ex) {
System.err.println(ex);
return null;
}
URLConnection conn = url.openConnection();
conn.connect();
reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
String line;
String imdbString = ".imdb.com";
String titleStrings[] = {"/title", "/Title"};
while ((line = reader.readLine()) != null) {
for (String titleString : titleStrings) {
String scrapeKey = imdbString + titleString;
int index = line.indexOf(scrapeKey);
if (index != -1) {
int len = scrapeKey.length();
String imdbURL = "http:
line.substring(index, index + len) +
line.substring(index + len, index + len + 10);
if (!matches.contains(imdbURL)) {
matches.add(imdbURL);
}
}
}
}
reader.close();
if (matches.size() > 1) {
for (String matchURL : matches) {
if (verifyYear(matchURL, year)) {
return matchURL;
}
}
}
return matches.isEmpty()? null : matches.get(0);
}
private static boolean verifyYear(String imdbURL, int movieYear) throws IOException {
boolean yearMatches = false;
URLConnection conn = new URL(imdbURL).openConnection();
conn.connect();
BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
String line;
while ((line = reader.readLine()) != null) {
int index = line.indexOf("</title>");
if (index != -1) {
try {
int year = Integer.parseInt(line.substring(index - 5, index - 1));
yearMatches = year == movieYear || year == movieYear - 1;
} catch (NumberFormatException ex) {
}
break; 
}
}
reader.close();
return yearMatches;
}
}
