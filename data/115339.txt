package io.flutter.actions;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.DataContext;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.fileEditor.FileDocumentManager;
import com.intellij.openapi.project.DumbAwareAction;
import com.intellij.openapi.project.Project;
import io.flutter.FlutterBundle;
import io.flutter.FlutterInitializer;
import io.flutter.FlutterMessages;
import io.flutter.FlutterUtils;
import io.flutter.bazel.Workspace;
import io.flutter.pub.PubRoot;
import io.flutter.sdk.FlutterSdk;
import io.flutter.utils.FlutterModuleUtils;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
public abstract class FlutterSdkAction extends DumbAwareAction {
private static final Logger LOG = Logger.getInstance(FlutterSdkAction.class);
@Override
public void actionPerformed(@NotNull AnActionEvent event) {
final Project project = DumbAwareAction.getEventProject(event);
if (enableActionInBazelContext()) {
final Workspace workspace = FlutterModuleUtils.getFlutterBazelWorkspace(project);
if (workspace != null) {
FlutterInitializer.sendAnalyticsAction(this);
FileDocumentManager.getInstance().saveAllDocuments();
startCommandInBazelContext(project, workspace);
return;
}
}
final FlutterSdk sdk = project != null ? FlutterSdk.getFlutterSdk(project) : null;
if (sdk == null) {
showMissingSdkDialog(project);
return;
}
FlutterInitializer.sendAnalyticsAction(this);
FileDocumentManager.getInstance().saveAllDocuments();
startCommand(project, sdk, PubRoot.forEventWithRefresh(event), event.getDataContext());
}
public abstract void startCommand(@NotNull Project project,
@NotNull FlutterSdk sdk,
@Nullable PubRoot root,
@NotNull DataContext context);
public void startCommandInBazelContext(@NotNull Project project, @NotNull Workspace workspace) {
throw new Error("This method should not be called directly, but should be overridden.");
}
public boolean enableActionInBazelContext() {
return false;
}
public static void showMissingSdkDialog(Project project) {
final int response = FlutterMessages.showDialog(project, FlutterBundle.message("flutter.sdk.notAvailable.message"),
FlutterBundle.message("flutter.sdk.notAvailable.title"),
new String[]{"Yes, configure", "No, thanks"}, -1);
if (response == 0) {
FlutterUtils.openFlutterSettings(project);
}
}
}
