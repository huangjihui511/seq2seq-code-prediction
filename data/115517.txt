package com.JUtils.QRCode;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Hashtable;
import javax.imageio.ImageIO;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
public class MatrixToImageWriterEx {
private static final MatrixToLogoImageConfig DEFAULT_CONFIG = new MatrixToLogoImageConfig();
public static BitMatrix createQRCode(String content, int width, int height){
Hashtable<EncodeHintType, Object> hints = new Hashtable<EncodeHintType, Object>();
hints.put(EncodeHintType.CHARACTER_SET, "utf-8");
hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
hints.put(EncodeHintType.MARGIN, 1);
BitMatrix matrix = null;
try {
matrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);
} catch (WriterException e) {
e.printStackTrace();
}
return matrix;
}
public static void writeToFile(BitMatrix matrix, String format, String imagePath, String logoPath) throws IOException {
MatrixToImageWriter.writeToFile(matrix, format, new File(imagePath), new MatrixToImageConfig());
BufferedImage img = ImageIO.read(new File(imagePath));
MatrixToImageWriterEx.overlapImage(img, format, imagePath, logoPath, DEFAULT_CONFIG);
}
public static void writeToFile(BitMatrix matrix, String format, String imagePath, String logoPath, MatrixToLogoImageConfig logoConfig) throws IOException {
MatrixToImageWriter.writeToFile(matrix, format, new File(imagePath), new MatrixToImageConfig());
BufferedImage img = ImageIO.read(new File(imagePath));
MatrixToImageWriterEx.overlapImage(img, format, imagePath, logoPath, logoConfig);
}
public static void overlapImage(BufferedImage image, String formate, String imagePath, String logoPath, MatrixToLogoImageConfig logoConfig) {
try {
drawImage(logoPath, image, logoConfig);
ImageIO.write(image, formate, new File(imagePath));
} catch (Exception e) {
e.printStackTrace();
}
}
public static void overlapImage(BitMatrix matrix,String formate,String logoPath,MatrixToLogoImageConfig logoConfig,OutputStream out) throws IOException{
BufferedImage image = MatrixToImageWriter.toBufferedImage(matrix);
drawImage(logoPath, image, logoConfig);
ImageIO.write(image, formate, out);
}
public static void overlapImage(BufferedImage image,String formate,String logoPath,MatrixToLogoImageConfig logoConfig,OutputStream out) throws IOException{
drawImage(logoPath, image, logoConfig);
ImageIO.write(image, formate, out);
}
private static void drawImage(String logoPath,BufferedImage image,MatrixToLogoImageConfig logoConfig) throws IOException{
if(logoConfig == null){
logoConfig = DEFAULT_CONFIG;
}
try {
BufferedImage logo = ImageIO.read(new File(logoPath));
logo.setRGB(0, 0, BufferedImage.TYPE_INT_BGR);
Graphics2D g = image.createGraphics();
int width = image.getWidth() / logoConfig.getLogoPart();
int height = image.getHeight() / logoConfig.getLogoPart();
int x = (image.getWidth() - width) / 2;
int y = (image.getHeight() - height) / 2;
g.drawImage(logo, x, y, width, height, null);
g.dispose();
}
}
}
