package com.google.cloud.tools.jib.filesystem;
import com.google.common.io.Resources;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
public class DirectoryWalkerTest {
private final Set<Path> walkedPaths = new HashSet<>();
private final PathConsumer addToWalkedPaths = walkedPaths::add;
private Path testDir;
@Before
public void setUp() throws URISyntaxException {
testDir = Paths.get(Resources.getResource("core/layer").toURI());
}
@Test
public void testWalk() throws IOException {
new DirectoryWalker(testDir).walk(addToWalkedPaths);
Set<Path> expectedPaths =
new HashSet<>(
Arrays.asList(
testDir,
testDir.resolve("a"),
testDir.resolve("a").resolve("b"),
testDir.resolve("a").resolve("b").resolve("bar"),
testDir.resolve("c"),
testDir.resolve("c").resolve("cat"),
testDir.resolve("foo")));
Assert.assertEquals(expectedPaths, walkedPaths);
}
@Test
public void testWalk_withFilter() throws IOException {
new DirectoryWalker(testDir)
.filter(path -> path.getParent().equals(testDir))
.filter(path -> !path.endsWith("foo"))
.walk(addToWalkedPaths);
Set<Path> expectedPaths =
new HashSet<>(Arrays.asList(testDir.resolve("a"), testDir.resolve("c")));
Assert.assertEquals(expectedPaths, walkedPaths);
}
@Test
public void testWalk_withFilterRoot() throws IOException {
new DirectoryWalker(testDir).filterRoot().walk(addToWalkedPaths);
Set<Path> expectedPaths =
new HashSet<>(
Arrays.asList(
testDir.resolve("a"),
testDir.resolve("a").resolve("b"),
testDir.resolve("a").resolve("b").resolve("bar"),
testDir.resolve("c"),
testDir.resolve("c").resolve("cat"),
testDir.resolve("foo")));
Assert.assertEquals(expectedPaths, walkedPaths);
}
}
