package org.gnucash.android.db.adapter;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.support.annotation.NonNull;
import android.util.Log;
import org.gnucash.android.R;
import org.gnucash.android.app.GnuCashApplication;
import org.gnucash.android.db.DatabaseHelper;
import org.gnucash.android.db.DatabaseSchema.BookEntry;
import org.gnucash.android.model.Book;
import org.gnucash.android.ui.settings.PreferenceActivity;
import org.gnucash.android.util.TimestampHelper;
import java.util.ArrayList;
import java.util.List;
public class BooksDbAdapter extends DatabaseAdapter<Book> {
public BooksDbAdapter(SQLiteDatabase db) {
super(db, BookEntry.TABLE_NAME, new String[] {
BookEntry.COLUMN_DISPLAY_NAME,
BookEntry.COLUMN_ROOT_GUID,
BookEntry.COLUMN_TEMPLATE_GUID,
BookEntry.COLUMN_SOURCE_URI,
BookEntry.COLUMN_ACTIVE,
BookEntry.COLUMN_UID,
BookEntry.COLUMN_LAST_SYNC
});
}
public static BooksDbAdapter getInstance(){
return GnuCashApplication.getBooksDbAdapter();
}
@Override
public Book buildModelInstance(@NonNull Cursor cursor) {
String rootAccountGUID = cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_ROOT_GUID));
String rootTemplateGUID =  cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_TEMPLATE_GUID));
String uriString = cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_SOURCE_URI));
String displayName = cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_DISPLAY_NAME));
int active = cursor.getInt(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_ACTIVE));
String lastSync = cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_LAST_SYNC));
Book book = new Book(rootAccountGUID);
book.setDisplayName(displayName);
book.setRootTemplateUID(rootTemplateGUID);
book.setSourceUri(uriString == null ? null : Uri.parse(uriString));
book.setActive(active > 0);
book.setLastSync(TimestampHelper.getTimestampFromUtcString(lastSync));
populateBaseModelAttributes(cursor, book);
return book;
}
@Override
protected @NonNull SQLiteStatement setBindings(@NonNull SQLiteStatement stmt, @NonNull final Book book) {
stmt.clearBindings();
String displayName = book.getDisplayName() == null ? generateDefaultBookName() : book.getDisplayName();
stmt.bindString(1, displayName);
stmt.bindString(2, book.getRootAccountUID());
stmt.bindString(3, book.getRootTemplateUID());
if (book.getSourceUri() != null)
stmt.bindString(4, book.getSourceUri().toString());
stmt.bindLong(5, book.isActive() ? 1L : 0L);
stmt.bindString(6, book.getUID());
stmt.bindString(7, TimestampHelper.getUtcStringFromTimestamp(book.getLastSync()));
return stmt;
}
public boolean deleteBook(@NonNull String bookUID){
Context context = GnuCashApplication.getAppContext();
boolean result = context.deleteDatabase(bookUID);
if (result) 
result &= deleteRecord(bookUID);
PreferenceActivity.getBookSharedPreferences(bookUID).edit().clear().apply();
return result;
}
public String setActive(@NonNull String bookUID){
if (bookUID == null)
return getActiveBookUID();
ContentValues contentValues = new ContentValues();
contentValues.put(BookEntry.COLUMN_ACTIVE, 0);
mDb.update(mTableName, contentValues, null, null); 
contentValues.clear();
contentValues.put(BookEntry.COLUMN_ACTIVE, 1);
mDb.update(mTableName, contentValues, BookEntry.COLUMN_UID + " = ?", new String[]{bookUID});
return bookUID;
}
public boolean isActive(String bookUID){
String isActive = getAttribute(bookUID, BookEntry.COLUMN_ACTIVE);
return Integer.parseInt(isActive) > 0;
}
public @NonNull String getActiveBookUID(){
try (Cursor cursor = mDb.query(mTableName,
new String[]{BookEntry.COLUMN_UID},
BookEntry.COLUMN_ACTIVE + "= 1",
null,
null,
null,
null,
"1")) {
if (cursor.getCount() == 0) {
NoActiveBookFoundException e = new NoActiveBookFoundException(
"There is no active book in the app."
+ "This should NEVER happen, fix your bugs!\n"
+ getNoActiveBookFoundExceptionInfo());
e.printStackTrace();
throw e;
}
cursor.moveToFirst();
return cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_UID));
}
}
private String getNoActiveBookFoundExceptionInfo() {
StringBuilder info = new StringBuilder("UID, created, source\n");
for (Book book : getAllRecords()) {
info.append(String.format("%s, %s, %s\n",
book.getUID(),
book.getCreatedTimestamp(),
book.getSourceUri()));
}
return info.toString();
}
public class NoActiveBookFoundException extends RuntimeException {
public NoActiveBookFoundException(String message) {
super(message);
}
}
public void fixBooksDatabase() {
Log.w(LOG_TAG, "Looking for books to set as active...");
if (getRecordsCount() <= 0) {
Log.w(LOG_TAG, "No books found in the database. Recovering books records...");
recoverBookRecords();
}
setFirstBookAsActive();
}
private void recoverBookRecords() {
for (String dbName : getBookDatabases()) {
Book book = new Book(getRootAccountUID(dbName));
book.setUID(dbName);
book.setDisplayName(generateDefaultBookName());
addRecord(book);
Log.w(LOG_TAG, "Recovered book record: " + book.getUID());
}
}
private String getRootAccountUID(String dbName) {
Context context = GnuCashApplication.getAppContext();
DatabaseHelper databaseHelper = new DatabaseHelper(context, dbName);
SQLiteDatabase db = databaseHelper.getReadableDatabase();
AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(db,
new TransactionsDbAdapter(db, new SplitsDbAdapter(db)));
String uid = accountsDbAdapter.getOrCreateGnuCashRootAccountUID();
db.close();
return uid;
}
private void setFirstBookAsActive() {
Book firstBook = getAllRecords().get(0);
firstBook.setActive(true);
addRecord(firstBook);
Log.w(LOG_TAG, "Book " + firstBook.getUID() + " set as active.");
}
private List<String> getBookDatabases() {
List<String> bookDatabases = new ArrayList<>();
for (String database : GnuCashApplication.getAppContext().databaseList()) {
if (isBookDatabase(database)) {
bookDatabases.add(database);
}
}
return bookDatabases;
}
private boolean isBookDatabase(String databaseName) {
return databaseName.matches("[a-z0-9]{32}"); 
}
public @NonNull List<String> getAllBookUIDs(){
List<String> bookUIDs = new ArrayList<>();
try (Cursor cursor = mDb.query(true, mTableName, new String[]{BookEntry.COLUMN_UID},
null, null, null, null, null, null)) {
while (cursor.moveToNext()) {
bookUIDs.add(cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_UID)));
}
}
return bookUIDs;
}
public @NonNull String getActiveBookDisplayName(){
Cursor cursor = mDb.query(mTableName,
new String[]{BookEntry.COLUMN_DISPLAY_NAME}, BookEntry.COLUMN_ACTIVE + " = 1",
null, null, null, null);
try {
if (cursor.moveToFirst()){
return cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_DISPLAY_NAME));
}
} finally {
cursor.close();
}
return "Book1";
}
public @NonNull String generateDefaultBookName() {
long bookCount = getRecordsCount() + 1;
String sql = "SELECT COUNT(*) FROM " + mTableName + " WHERE " + BookEntry.COLUMN_DISPLAY_NAME + " = ?";
SQLiteStatement statement = mDb.compileStatement(sql);
while (true) {
Context context = GnuCashApplication.getAppContext();
String name = context.getString(R.string.book_default_name, bookCount);
statement.clearBindings();
statement.bindString(1, name);
long nameCount = statement.simpleQueryForLong();
if (nameCount == 0) {
return name;
}
bookCount++;
}
}
}
