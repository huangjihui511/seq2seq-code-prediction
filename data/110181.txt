package com.google.auto.common;
import static com.google.common.base.Preconditions.checkArgument;
import static javax.lang.model.type.TypeKind.ARRAY;
import static javax.lang.model.type.TypeKind.DECLARED;
import javax.lang.model.element.AnnotationValue;
import javax.lang.model.element.AnnotationValueVisitor;
import javax.lang.model.type.TypeMirror;
public final class SimpleTypeAnnotationValue implements AnnotationValue {
private final TypeMirror value;
private SimpleTypeAnnotationValue(TypeMirror value) {
checkArgument(
value.getKind().isPrimitive()
|| value.getKind().equals(DECLARED)
|| value.getKind().equals(ARRAY),
"value must be a primitive, array, or declared type, but was %s (%s)",
value.getKind(),
value);
if (value.getKind().equals(DECLARED)) {
checkArgument(
MoreTypes.asDeclared(value).getTypeArguments().isEmpty(),
"value must not be a parameterized type: %s",
value);
}
this.value = value;
}
public static AnnotationValue of(TypeMirror value) {
return new SimpleTypeAnnotationValue(value);
}
@Override
public TypeMirror getValue() {
return value;
}
@Override
public String toString() {
return value + ".class";
}
@Override
public <R, P> R accept(AnnotationValueVisitor<R, P> visitor, P parameter) {
return visitor.visitType(getValue(), parameter);
}
}
