package io.vertx.core.dns;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.VertxOptions;
import io.vertx.core.json.JsonObject;
@DataObject(generateConverter = true)
public class DnsClientOptions {
public static final int DEFAULT_PORT = -1;
public static final String DEFAULT_HOST = null;
public static final long DEFAULT_QUERY_TIMEOUT = 5000;
public static final boolean DEFAULT_LOG_ENABLED = false;
public static final boolean DEFAULT_RECURSION_DESIRED = true;
private int port = DEFAULT_PORT;
private String host = DEFAULT_HOST;
private long queryTimeout = DEFAULT_QUERY_TIMEOUT;
private boolean logActivity = DEFAULT_LOG_ENABLED;
private boolean recursionDesired = DEFAULT_RECURSION_DESIRED;
public DnsClientOptions() {
}
public DnsClientOptions(JsonObject json) {
DnsClientOptionsConverter.fromJson(json, this);
}
public DnsClientOptions(DnsClientOptions other) {
port = other.port;
host = other.host;
queryTimeout = other.queryTimeout;
logActivity = other.logActivity;
recursionDesired = other.recursionDesired;
}
public int getPort() {
return port;
}
public DnsClientOptions setPort(int port) {
if (port<1 && port!=DEFAULT_PORT) {
throw new IllegalArgumentException("DNS client port " + port + " must be > 0 or equal to DEFAULT_PORT");
}
this.port = port;
return this;
}
public String getHost() {
return host;
}
public DnsClientOptions setHost(String host) {
this.host = host;
return this;
}
public long getQueryTimeout() {
return queryTimeout;
}
public DnsClientOptions setQueryTimeout(long queryTimeout) {
if (queryTimeout < 1) {
throw new IllegalArgumentException("queryTimeout must be > 0");
}
this.queryTimeout = queryTimeout;
return this;
}
public boolean getLogActivity() {
return logActivity;
}
public DnsClientOptions setLogActivity(boolean logActivity) {
this.logActivity = logActivity;
return this;
}
public boolean isRecursionDesired() {
return recursionDesired;
}
public DnsClientOptions setRecursionDesired(boolean recursionDesired) {
this.recursionDesired = recursionDesired;
return this;
}
public JsonObject toJson() {
JsonObject json = new JsonObject();
DnsClientOptionsConverter.toJson(this, json);
return json;
}
}
