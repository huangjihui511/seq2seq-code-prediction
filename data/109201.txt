package io.realm.examples.newsreader.model;
import android.support.annotation.NonNull;
import android.support.annotation.UiThread;
import java.io.Closeable;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import io.reactivex.Flowable;
import io.reactivex.Observable;
import io.reactivex.subjects.BehaviorSubject;
import io.realm.Realm;
import io.realm.RealmResults;
import io.realm.Sort;
import io.realm.examples.newsreader.NewsReaderApplication;
import io.realm.examples.newsreader.R;
import io.realm.examples.newsreader.model.entity.NYTimesStory;
import io.realm.examples.newsreader.model.network.NYTimesDataLoader;
import timber.log.Timber;
public class Repository implements Closeable {
private static final long MINIMUM_NETWORK_WAIT_SEC = 120; 
private final Realm realm;
private final NYTimesDataLoader dataLoader;
private final String apiKey;
private Map<String, Long> lastNetworkRequest = new HashMap<>();
private BehaviorSubject<Boolean> networkLoading = BehaviorSubject.createDefault(false);
@UiThread
public Repository() {
realm = Realm.getDefaultInstance();
dataLoader = new NYTimesDataLoader();
apiKey = NewsReaderApplication.getContext().getString(R.string.nyc_top_stories_api_key);
}
@UiThread
public Observable<Boolean> networkInUse() {
return networkLoading.hide();
}
@UiThread
public Flowable<RealmResults<NYTimesStory>> loadNewsFeed(@NonNull String sectionKey, boolean forceReload) {
if (forceReload || timeSinceLastNetworkRequest(sectionKey) > MINIMUM_NETWORK_WAIT_SEC) {
dataLoader.loadData(sectionKey, apiKey, realm, networkLoading);
lastNetworkRequest.put(sectionKey, System.currentTimeMillis());
}
return realm.where(NYTimesStory.class)
.equalTo(NYTimesStory.API_SECTION, sectionKey)
.sort(NYTimesStory.PUBLISHED_DATE, Sort.DESCENDING)
.findAllAsync()
.asFlowable();
}
private long timeSinceLastNetworkRequest(@NonNull String sectionKey) {
Long lastRequest = lastNetworkRequest.get(sectionKey);
if (lastRequest != null) {
return TimeUnit.SECONDS.convert(System.currentTimeMillis() - lastRequest, TimeUnit.MILLISECONDS);
} else {
return Long.MAX_VALUE;
}
}
@UiThread
public void updateStoryReadState(final String storyId, final boolean read) {
realm.executeTransactionAsync(new Realm.Transaction() {
@Override
public void execute(Realm realm) {
NYTimesStory persistedStory = realm.where(NYTimesStory.class).equalTo(NYTimesStory.URL, storyId).findFirst();
if (persistedStory != null) {
persistedStory.setRead(read);
} else {
Timber.e("Trying to update a story that no longer exists: %1$s", storyId);
}
}
}, new Realm.Transaction.OnError() {
@Override
public void onError(Throwable throwable) {
Timber.e(throwable, "Failed to save data.");
}
});
}
@UiThread
public Flowable<NYTimesStory> loadStory(final String storyId) {
return realm.where(NYTimesStory.class).equalTo(NYTimesStory.URL, storyId).findFirstAsync()
.<NYTimesStory>asFlowable()
.filter(story -> story.isLoaded());
}
@UiThread
public void close() {
realm.close();
}
}
