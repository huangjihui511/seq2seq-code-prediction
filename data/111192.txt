package com.github.benmanes.caffeine.cache.local;
import static com.github.benmanes.caffeine.cache.Specifications.STATS_COUNTER;
import static com.github.benmanes.caffeine.cache.Specifications.TICKER;
import javax.lang.model.element.Modifier;
import com.github.benmanes.caffeine.cache.Feature;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
public final class AddStats extends LocalCacheRule {
@Override
protected boolean applies() {
return context.generateFeatures.contains(Feature.STATS);
}
@Override
protected void execute() {
addIsRecording();
addStatsTicker();
addStatsCounter();
}
private void addIsRecording() {
context.cache.addMethod(MethodSpec.methodBuilder("isRecordingStats")
.addModifiers(context.publicFinalModifiers())
.addStatement("return true")
.returns(boolean.class)
.build());
}
private void addStatsCounter() {
context.constructor.addStatement("this.statsCounter = builder.getStatsCounterSupplier().get()");
context.cache.addField(FieldSpec.builder(
STATS_COUNTER, "statsCounter", Modifier.FINAL).build());
context.cache.addMethod(MethodSpec.methodBuilder("statsCounter")
.addModifiers(context.publicFinalModifiers())
.addStatement("return statsCounter")
.returns(STATS_COUNTER)
.build());
}
private void addStatsTicker() {
context.cache.addMethod(MethodSpec.methodBuilder("statsTicker")
.addModifiers(context.publicFinalModifiers())
.addStatement("return $T.systemTicker()", TICKER)
.returns(TICKER)
.build());
}
}
