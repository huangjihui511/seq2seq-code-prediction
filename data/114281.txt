package com.datumbox.framework.core.machinelearning.common.abstracts.algorithms;
import com.datumbox.framework.common.Configuration;
import com.datumbox.framework.common.dataobjects.*;
import com.datumbox.framework.common.storage.interfaces.StorageEngine;
import com.datumbox.framework.common.storage.interfaces.StorageEngine.MapType;
import com.datumbox.framework.common.storage.interfaces.StorageEngine.StorageHint;
import com.datumbox.framework.core.common.utilities.MapMethods;
import com.datumbox.framework.core.common.dataobjects.Dataframe;
import com.datumbox.framework.core.common.dataobjects.Record;
import com.datumbox.framework.core.machinelearning.MLBuilder;
import com.datumbox.framework.core.machinelearning.common.abstracts.AbstractTrainer;
import com.datumbox.framework.core.machinelearning.common.abstracts.modelers.AbstractClassifier;
import com.datumbox.framework.core.machinelearning.common.dataobjects.TrainableBundle;
import com.datumbox.framework.core.machinelearning.ensemblelearning.FixedCombinationRules;
import com.datumbox.framework.core.statistics.descriptivestatistics.Descriptives;
import com.datumbox.framework.core.statistics.sampling.SimpleRandomSampling;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
public abstract class AbstractBoostingBagging<MP extends AbstractBoostingBagging.AbstractModelParameters, TP extends AbstractBoostingBagging.AbstractTrainingParameters> extends AbstractClassifier<MP, TP> {
private final TrainableBundle bundle;
private static final String STORAGE_INDICATOR = "Cmp";
private static final int MAX_NUM_OF_RETRIES = 2;
public static abstract class AbstractModelParameters extends AbstractClassifier.AbstractModelParameters {
private List<Double> weakClassifierWeights = new ArrayList<>();
protected AbstractModelParameters(StorageEngine storageEngine) {
super(storageEngine);
}
public List<Double> getWeakClassifierWeights() {
return weakClassifierWeights;
}
protected void setWeakClassifierWeights(List<Double> weakClassifierWeights) {
this.weakClassifierWeights = weakClassifierWeights;
}
}
public static abstract class AbstractTrainingParameters extends AbstractClassifier.AbstractTrainingParameters {
private int maxWeakClassifiers = 5; 
private AbstractClassifier.AbstractTrainingParameters weakClassifierTrainingParameters; 
public int getMaxWeakClassifiers() {
return maxWeakClassifiers;
}
public void setMaxWeakClassifiers(int maxWeakClassifiers) {
this.maxWeakClassifiers = maxWeakClassifiers;
}
public AbstractClassifier.AbstractTrainingParameters getWeakClassifierTrainingParameters() {
return weakClassifierTrainingParameters;
}
public void setWeakClassifierTrainingParameters(AbstractClassifier.AbstractTrainingParameters weakClassifierTrainingParameters) {
this.weakClassifierTrainingParameters = weakClassifierTrainingParameters;
}
}
protected AbstractBoostingBagging(TP trainingParameters, Configuration configuration) {
super(trainingParameters, configuration);
bundle  = new TrainableBundle(configuration.getStorageConfiguration().getStorageNameSeparator());
}
protected AbstractBoostingBagging(String storageName, Configuration configuration) {
super(storageName, configuration);
bundle  = new TrainableBundle(configuration.getStorageConfiguration().getStorageNameSeparator());
}
@Override
protected void _predict(Dataframe newData) {
initBundle();
List<Double> weakClassifierWeights = knowledgeBase.getModelParameters().getWeakClassifierWeights();
StorageEngine storageEngine = knowledgeBase.getStorageEngine();
Map<Object, DataTable2D> tmp_recordDecisions = storageEngine.getBigMap("tmp_recordDecisions", Object.class, DataTable2D.class, MapType.HASHMAP, StorageHint.IN_DISK, false, true);
for(Integer rId : newData.index()) {
tmp_recordDecisions.put(rId, new DataTable2D());
}
AssociativeArray classifierWeightsArray = new AssociativeArray();
int totalWeakClassifiers = weakClassifierWeights.size();
for(int i=0;i<totalWeakClassifiers;++i) {
AbstractClassifier mlclassifier = (AbstractClassifier) bundle.get(STORAGE_INDICATOR + i);
mlclassifier.predict(newData);
classifierWeightsArray.put(i, weakClassifierWeights.get(i));
for(Map.Entry<Integer, Record> e : newData.entries()) {
Integer rId = e.getKey();
Record r = e.getValue();
AssociativeArray classProbabilities = r.getYPredictedProbabilities();
DataTable2D rDecisions = tmp_recordDecisions.get(rId);
rDecisions.put(i, classProbabilities);
tmp_recordDecisions.put(rId, rDecisions); 
}
}
for(Map.Entry<Integer, Record> e : newData.entries()) {
Integer rId = e.getKey();
Record r = e.getValue();
AssociativeArray combinedClassVotes = FixedCombinationRules.weightedAverage(tmp_recordDecisions.get(rId), classifierWeightsArray);
Descriptives.normalize(combinedClassVotes);
newData._unsafe_set(rId, new Record(r.getX(), r.getY(), MapMethods.selectMaxKeyValue(combinedClassVotes).getKey(), combinedClassVotes));
}
storageEngine.dropBigMap("tmp_recordDecisions", tmp_recordDecisions);
}
@Override
protected void _fit(Dataframe trainingData) {
Configuration configuration = knowledgeBase.getConfiguration();
TP trainingParameters = knowledgeBase.getTrainingParameters();
MP modelParameters = knowledgeBase.getModelParameters();
resetBundle();
int n = trainingData.size();
Set<Object> classesSet = modelParameters.getClasses();
for(Record r : trainingData) {
Object theClass=r.getY();
classesSet.add(theClass);
}
AssociativeArray observationWeights = new AssociativeArray();
for(Integer rId : trainingData.index()) {
observationWeights.put(rId, 1.0/n); 
}
AbstractClassifier.AbstractTrainingParameters weakClassifierTrainingParameters = trainingParameters.getWeakClassifierTrainingParameters();
int totalWeakClassifiers = trainingParameters.getMaxWeakClassifiers();
int i=0;
int retryCounter = 0;
while(i<totalWeakClassifiers) {
logger.debug("Training Weak learner {}", i);
FlatDataList sampledIDs = SimpleRandomSampling.weightedSampling(observationWeights, n, true).toFlatDataList();
Dataframe sampledTrainingDataset = trainingData.getSubset(sampledIDs);
AbstractClassifier mlclassifier = MLBuilder.create(weakClassifierTrainingParameters, configuration);
mlclassifier.fit(sampledTrainingDataset);
sampledTrainingDataset.close();
mlclassifier.predict(trainingData);
Status status = updateObservationAndClassifierWeights(trainingData, observationWeights);
if(status == Status.IGNORE) {
mlclassifier.close();
}
else {
bundle.put(STORAGE_INDICATOR + i, mlclassifier);
}
if(status==Status.STOP) {
logger.debug("Skipping further training due to low error");
break;
}
else if(status==Status.IGNORE) {
if(retryCounter<MAX_NUM_OF_RETRIES) {
logger.debug("Ignoring last weak learner due to high error");
++retryCounter;
continue;
}
else {
logger.debug("Too many retries, skipping further training");
break;
}
}
else if(status==Status.NEXT) {
retryCounter = 0; 
}
i++;
}
}
protected enum Status {
NEXT,
STOP,
IGNORE;
}
protected abstract Status updateObservationAndClassifierWeights(Dataframe validationDataset, AssociativeArray observationWeights);
@Override
public void save(String storageName) {
initBundle();
super.save(storageName);
String knowledgeBaseName = createKnowledgeBaseName(storageName, knowledgeBase.getConfiguration().getStorageConfiguration().getStorageNameSeparator());
bundle.save(knowledgeBaseName);
}
@Override
public void delete() {
initBundle();
bundle.delete();
super.delete();
}
@Override
public void close() {
initBundle();
bundle.close();
super.close();
}
private void resetBundle() {
bundle.delete();
}
private void initBundle() {
Configuration configuration = knowledgeBase.getConfiguration();
StorageEngine storageEngine = knowledgeBase.getStorageEngine();
MP modelParameters = knowledgeBase.getModelParameters();
TP trainingParameters = knowledgeBase.getTrainingParameters();
String separator = configuration.getStorageConfiguration().getStorageNameSeparator();
Class<AbstractClassifier> weakClassifierClass = trainingParameters.getWeakClassifierTrainingParameters().getTClass();
int totalWeakClassifiers = Math.min(modelParameters.getWeakClassifierWeights().size(), trainingParameters.getMaxWeakClassifiers());
for(int i=0;i<totalWeakClassifiers;i++) {
String key = STORAGE_INDICATOR + i;
if (!bundle.containsKey(key)) {
bundle.put(key, MLBuilder.load(weakClassifierClass, storageEngine.getStorageName() + separator + key, configuration));
}
}
}
}
