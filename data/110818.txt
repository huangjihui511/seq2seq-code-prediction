package org.jsoup.internal;
import org.jsoup.Jsoup;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.Collections;
import static org.jsoup.internal.StringUtil.normaliseWhitespace;
import static org.jsoup.internal.StringUtil.resolve;
import static org.junit.jupiter.api.Assertions.*;
public class StringUtilTest {
@Test
public void join() {
assertEquals("", StringUtil.join(Collections.singletonList(""), " "));
assertEquals("one", StringUtil.join(Collections.singletonList("one"), " "));
assertEquals("one two three", StringUtil.join(Arrays.asList("one", "two", "three"), " "));
}
@Test public void padding() {
assertEquals("", StringUtil.padding(0));
assertEquals(" ", StringUtil.padding(1));
assertEquals(" ", StringUtil.padding(2));
assertEquals(" ", StringUtil.padding(15));
assertEquals(" ", StringUtil.padding(45));
}
@Test public void paddingInACan() {
String[] padding = StringUtil.padding;
assertEquals(21, padding.length);
for (int i = 0; i < padding.length; i++) {
assertEquals(i, padding[i].length());
}
}
@Test public void isBlank() {
assertTrue(StringUtil.isBlank(null));
assertTrue(StringUtil.isBlank(""));
assertTrue(StringUtil.isBlank(" "));
assertTrue(StringUtil.isBlank(" \r\n "));
assertFalse(StringUtil.isBlank("hello"));
assertFalse(StringUtil.isBlank("   hello   "));
}
@Test public void isNumeric() {
assertFalse(StringUtil.isNumeric(null));
assertFalse(StringUtil.isNumeric(" "));
assertFalse(StringUtil.isNumeric("123 546"));
assertFalse(StringUtil.isNumeric("hello"));
assertFalse(StringUtil.isNumeric("123.334"));
assertTrue(StringUtil.isNumeric("1"));
assertTrue(StringUtil.isNumeric("1234"));
}
@Test public void isWhitespace() {
assertTrue(StringUtil.isWhitespace('\t'));
assertTrue(StringUtil.isWhitespace('\n'));
assertTrue(StringUtil.isWhitespace('\r'));
assertTrue(StringUtil.isWhitespace('\f'));
assertTrue(StringUtil.isWhitespace(' '));
assertFalse(StringUtil.isWhitespace('\u00a0'));
assertFalse(StringUtil.isWhitespace('\u2000'));
assertFalse(StringUtil.isWhitespace('\u3000'));
}
@Test public void normaliseWhiteSpace() {
assertEquals(" ", normaliseWhitespace(" \r \n \r\n"));
assertEquals(" hello there ", normaliseWhitespace("   hello   \r \n  there    \n"));
assertEquals("hello", normaliseWhitespace("hello"));
assertEquals("hello there", normaliseWhitespace("hello\nthere"));
}
@Test public void normaliseWhiteSpaceHandlesHighSurrogates() {
String test71540chars = "\ud869\udeb2\u304b\u309a  1";
String test71540charsExpectedSingleWhitespace = "\ud869\udeb2\u304b\u309a 1";
assertEquals(test71540charsExpectedSingleWhitespace, normaliseWhitespace(test71540chars));
String extractedText = Jsoup.parse(test71540chars).text();
assertEquals(test71540charsExpectedSingleWhitespace, extractedText);
}
@Test public void resolvesRelativeUrls() {
assertEquals("http:
assertEquals("http:
assertEquals("http:
assertEquals("https:
assertEquals("http:
assertEquals("https:
assertEquals("https:
assertEquals("https:
assertEquals("https:
assertEquals("https:
assertEquals("", resolve("wrong", "also wrong"));
assertEquals("ftp:
assertEquals("ftp:
assertEquals("ftp:
}
}
