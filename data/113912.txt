package org.spongepowered.mod.event;
import net.minecraftforge.fml.common.eventhandler.Event;
import net.minecraftforge.fml.common.eventhandler.IEventListener;
import org.spongepowered.api.event.Cancellable;
import org.spongepowered.common.event.RegisteredListener;
public class ForgeToSpongeEventData {
private final Event forgeEvent;
private final IEventListener[] forgeListeners;
private final boolean useCauseStackManager;
private org.spongepowered.api.event.Event spongeEvent;
private RegisteredListener.Cache spongeListenerCache;
private boolean beforeModifications = false;
private boolean forced = false;
public ForgeToSpongeEventData(Event forgeEvent, final IEventListener[] forgeListeners) {
this.forgeEvent = forgeEvent;
this.forgeListeners = forgeListeners;
this.useCauseStackManager = SpongeModEventManager.shouldUseCauseStackManager(false);
}
public Event getForgeEvent() {
return this.forgeEvent;
}
public org.spongepowered.api.event.Event getSpongeEvent() {
return this.spongeEvent;
}
public IEventListener[] getForgeListeners() {
return this.forgeListeners;
}
public boolean useCauseStackManager() {
return this.useCauseStackManager;
}
public boolean isBeforeModifications() {
return this.beforeModifications;
}
public boolean isForced() {
return this.forced;
}
public RegisteredListener.Cache getSpongeListenerCache() {
return this.spongeListenerCache;
}
public void setBeforeModifications(boolean beforeModifications) {
this.beforeModifications = beforeModifications;
}
public void setForced(boolean forced) {
this.forced = forced;
}
public void setSpongeEvent(org.spongepowered.api.event.Event event) {
this.spongeEvent = event;
}
public void setSpongeListenerCache(RegisteredListener.Cache cache) {
this.spongeListenerCache = cache;
}
public void propagateCancelled() {
if (this.spongeEvent instanceof Cancellable && this.forgeEvent.isCancelable() && !this.forgeEvent.isCanceled()) {
this.forgeEvent.setCanceled(((Cancellable) this.spongeEvent).isCancelled());
}
}
}
