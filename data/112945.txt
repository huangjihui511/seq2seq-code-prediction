package io.kubernetes.client.extended.workqueue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class DefaultWorkQueueTest {
private static final Logger LOGGER = LoggerFactory.getLogger(DefaultWorkQueueTest.class);
@Test
public void testMultiProducerAndConsumers() throws Exception {
DefaultWorkQueue<String> queue = new DefaultWorkQueue<>();
final int producerCount = 10;
final int consumerCount = 5;
CountDownLatch producerLatch = new CountDownLatch(producerCount);
for (int i = 0; i < producerCount; i++) {
final int num = i;
Thread t =
new Thread(
() -> {
try {
for (int j = 0; j < 50; j++) {
queue.add(String.valueOf(num));
Thread.sleep(10);
}
} catch (Exception e) {
} finally {
producerLatch.countDown();
}
});
t.start();
}
CountDownLatch consumerLatch = new CountDownLatch(consumerCount);
for (int i = 0; i < consumerCount; i++) {
final int num = i;
Thread t =
new Thread(
() -> {
try {
for (; ; ) {
String item = queue.get();
assertNotEquals(
"Got an item added after shutdown.", "added after shutdown!", item);
if (item == null) {
return;
}
LOGGER.info("Worker {}: begin processing {}", num, item);
Thread.sleep(50);
LOGGER.info("Worker {}: done processing {}", num, item);
queue.done(item);
}
} catch (Exception e) {
} finally {
consumerLatch.countDown();
}
});
t.start();
}
producerLatch.await();
queue.shutDown();
queue.add("added after shutdown!");
consumerLatch.await();
}
@Test
public void testAddWhileProcessing() throws Exception {
DefaultWorkQueue<String> queue = new DefaultWorkQueue<>();
final int producerCount = 10;
final int consumerCount = 5;
CountDownLatch producerLatch = new CountDownLatch(producerCount);
for (int i = 0; i < producerCount; i++) {
final int num = i;
Thread t =
new Thread(
() -> {
queue.add(String.valueOf(num));
producerLatch.countDown();
});
t.start();
}
CountDownLatch consumerLatch = new CountDownLatch(consumerCount);
for (int i = 0; i < consumerCount; i++) {
Thread t =
new Thread(
() -> {
Map<String, Integer> counters = new HashMap<>();
try {
for (; ; ) {
String item = queue.get();
if (item == null) {
return;
}
counters.putIfAbsent(item, 1);
counters.computeIfPresent(item, (s, integer) -> counters.get(s) + 1);
if (counters.get(item) < 2) {
queue.add(item);
}
queue.done(item);
}
} catch (Exception e) {
} finally {
consumerLatch.countDown();
}
});
t.start();
}
producerLatch.await();
queue.shutDown();
consumerLatch.await();
}
@Test
public void testLen() throws Exception {
DefaultWorkQueue<String> queue = new DefaultWorkQueue<>();
queue.add("foo");
assertEquals(1, queue.length());
queue.add("bar");
assertEquals(2, queue.length());
queue.add("foo"); 
assertEquals(2, queue.length());
}
@Test
public void testReinsert() throws Exception {
DefaultWorkQueue<String> queue = new DefaultWorkQueue<>();
queue.add("foo");
String item = queue.get();
assertEquals("foo", item);
queue.add(item);
queue.done(item);
item = queue.get();
assertEquals("foo", item);
queue.done(item);
assertEquals(0, queue.length());
}
}
