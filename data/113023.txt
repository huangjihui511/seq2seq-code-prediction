package org.apache.pdfbox.examples.lucene;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.IndexWriterConfig.OpenMode;
import org.apache.lucene.index.Term;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
public final class IndexPDFFiles
{
private IndexPDFFiles()
{
}
public static void main(String[] args)
{
String usage = "java org.apache.pdfbox.lucene.IndexPDFFiles"
+ " [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\n\n"
+ "This indexes all PDF documents in DOCS_PATH, creating a Lucene index"
+ "in INDEX_PATH that can be searched with SearchFiles";
String indexPath = "index";
String docsPath = null;
boolean create = true;
for (int i = 0; i < args.length; i++)
{
switch (args[i])
{
case "-index":
indexPath = args[i + 1];
i++;
break;
case "-docs":
docsPath = args[i + 1];
i++;
break;
case "-update":
create = false;
break;
default:
break;
}
}
if (docsPath == null)
{
System.err.println("Usage: " + usage);
System.exit(1);
}
final File docDir = new File(docsPath);
if (!docDir.exists() || !docDir.canRead())
{
System.out.println("Document directory '" + docDir.getAbsolutePath()
+ "' does not exist or is not readable, please check the path");
System.exit(1);
}
Date start = new Date();
try
{
System.out.println("Indexing to directory '" + indexPath + "'...");
try (Directory dir = FSDirectory.open(new File(indexPath).toPath()))
{
Analyzer analyzer = new StandardAnalyzer();
IndexWriterConfig iwc = new IndexWriterConfig(analyzer);
if (create)
{
iwc.setOpenMode(OpenMode.CREATE);
}
else
{
iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);
}
try (final IndexWriter writer = new IndexWriter(dir, iwc))
{
indexDocs(writer, docDir);
}
}
Date end = new Date();
System.out.println(end.getTime() - start.getTime() + " total milliseconds");
}
catch (IOException e)
{
System.out.println(" caught a " + e.getClass() + "\n with message: " + e.getMessage());
}
}
static void indexDocs(IndexWriter writer, File file) throws IOException
{
if (file.canRead())
{
if (file.isDirectory())
{
String[] files = file.list();
if (files != null)
{
for (String fileName : files)
{
indexDocs(writer, new File(file, fileName));
}
}
}
else
{
FileInputStream fis;
try
{
fis = new FileInputStream(file);
}
catch (FileNotFoundException fnfe)
{
return;
}
try
{
String path = file.getName().toUpperCase();
Document doc;
if (path.toLowerCase().endsWith(".pdf"))
{
System.out.println("Indexing PDF document: " + file);
doc = LucenePDFDocument.getDocument(file);
}
else
{
System.out.println("Skipping " + file);
return;
}
if (writer.getConfig().getOpenMode() == OpenMode.CREATE)
{
System.out.println("adding " + file);
writer.addDocument(doc);
}
else
{
System.out.println("updating " + file);
writer.updateDocument(new Term("uid", LucenePDFDocument.createUID(file)), doc);
}
}
finally
{
fis.close();
}
}
}
}
}
