[["public", "View", "onCreateView", "(", "LayoutInflater", "inflater", ",", "@", "Nullable", "ViewGroup", "container", ",", "@", "Nullable", "Bundle", "savedInstanceState", ")", "{"], ["View", "layout", "=", "inflater", ".", "inflate", "(", "R", ".", "layout", ".", "fragment_rxbus_top", ",", "container", ",", "false", ")", ";"]]
[["public", "View", "onCreateView", "(", "LayoutInflater", "inflater", ",", "@", "Nullable", "ViewGroup", "container", ",", "@", "Nullable", "Bundle", "savedInstanceState", ")", "{", "View", "layout", "=", "inflater", ".", "inflate", "(", "R", ".", "layout", ".", "fragment_rxbus_top", ",", "container", ",", "false", ")", ";"], ["ButterKnife", ".", "bind", "(", "this", ",", "layout", ")", ";"]]
[["public", "View", "onCreateView", "(", "LayoutInflater", "inflater", ",", "@", "Nullable", "ViewGroup", "container", ",", "@", "Nullable", "Bundle", "savedInstanceState", ")", "{", "View", "layout", "=", "inflater", ".", "inflate", "(", "R", ".", "layout", ".", "fragment_rxbus_top", ",", "container", ",", "false", ")", ";", "ButterKnife", ".", "bind", "(", "this", ",", "layout", ")", ";"], ["return", "layout", ";"]]
[["public", "View", "onCreateView", "(", "LayoutInflater", "inflater", ",", "@", "Nullable", "ViewGroup", "container", ",", "@", "Nullable", "Bundle", "savedInstanceState", ")", "{", "View", "layout", "=", "inflater", ".", "inflate", "(", "R", ".", "layout", ".", "fragment_rxbus_top", ",", "container", ",", "false", ")", ";", "ButterKnife", ".", "bind", "(", "this", ",", "layout", ")", ";", "return", "layout", ";"], ["}"]]
[["public", "View", "onCreateView", "(", "LayoutInflater", "inflater", ",", "@", "Nullable", "ViewGroup", "container", ",", "@", "Nullable", "Bundle", "savedInstanceState", ")", "{", "View", "layout", "=", "inflater", ".", "inflate", "(", "R", ".", "layout", ".", "fragment_rxbus_top", ",", "container", ",", "false", ")", ";", "ButterKnife", ".", "bind", "(", "this", ",", "layout", ")", ";", "return", "layout", ";", "}"], []]
[["private", "void", "bigMapInitializer", "(", "StorageEngine", "storageEngine", ")", "{"], ["for", "(", "Field", "field", ":", "ReflectionMethods", ".", "getAllFields", "(", "new", "LinkedList", "<", ">", "(", ")", ",", "this", ".", "getClass", "(", ")", ")", ")", "{"]]
[["private", "void", "bigMapInitializer", "(", "StorageEngine", "storageEngine", ")", "{", "for", "(", "Field", "field", ":", "ReflectionMethods", ".", "getAllFields", "(", "new", "LinkedList", "<", ">", "(", ")", ",", "this", ".", "getClass", "(", ")", ")", ")", "{"], ["if", "(", "field", ".", "isAnnotationPresent", "(", "BigMap", ".", "class", ")", ")", "{"]]
[["private", "void", "bigMapInitializer", "(", "StorageEngine", "storageEngine", ")", "{", "for", "(", "Field", "field", ":", "ReflectionMethods", ".", "getAllFields", "(", "new", "LinkedList", "<", ">", "(", ")", ",", "this", ".", "getClass", "(", ")", ")", ")", "{", "if", "(", "field", ".", "isAnnotationPresent", "(", "BigMap", ".", "class", ")", ")", "{"], ["initializeBigMapField", "(", "storageEngine", ",", "field", ")", ";"]]
[["private", "void", "bigMapInitializer", "(", "StorageEngine", "storageEngine", ")", "{", "for", "(", "Field", "field", ":", "ReflectionMethods", ".", "getAllFields", "(", "new", "LinkedList", "<", ">", "(", ")", ",", "this", ".", "getClass", "(", ")", ")", ")", "{", "if", "(", "field", ".", "isAnnotationPresent", "(", "BigMap", ".", "class", ")", ")", "{", "initializeBigMapField", "(", "storageEngine", ",", "field", ")", ";"], ["}"]]
[["private", "void", "bigMapInitializer", "(", "StorageEngine", "storageEngine", ")", "{", "for", "(", "Field", "field", ":", "ReflectionMethods", ".", "getAllFields", "(", "new", "LinkedList", "<", ">", "(", ")", ",", "this", ".", "getClass", "(", ")", ")", ")", "{", "if", "(", "field", ".", "isAnnotationPresent", "(", "BigMap", ".", "class", ")", ")", "{", "initializeBigMapField", "(", "storageEngine", ",", "field", ")", ";", "}"], ["}"]]
[["private", "void", "bigMapInitializer", "(", "StorageEngine", "storageEngine", ")", "{", "for", "(", "Field", "field", ":", "ReflectionMethods", ".", "getAllFields", "(", "new", "LinkedList", "<", ">", "(", ")", ",", "this", ".", "getClass", "(", ")", ")", ")", "{", "if", "(", "field", ".", "isAnnotationPresent", "(", "BigMap", ".", "class", ")", ")", "{", "initializeBigMapField", "(", "storageEngine", ",", "field", ")", ";", "}", "}"], ["}"]]
[["private", "void", "bigMapInitializer", "(", "StorageEngine", "storageEngine", ")", "{", "for", "(", "Field", "field", ":", "ReflectionMethods", ".", "getAllFields", "(", "new", "LinkedList", "<", ">", "(", ")", ",", "this", ".", "getClass", "(", ")", ")", ")", "{", "if", "(", "field", ".", "isAnnotationPresent", "(", "BigMap", ".", "class", ")", ")", "{", "initializeBigMapField", "(", "storageEngine", ",", "field", ")", ";", "}", "}", "}"], []]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{"], ["field", ".", "setAccessible", "(", "true", ")", ";"]]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{", "field", ".", "setAccessible", "(", "true", ")", ";"], ["try", "{"]]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{", "field", ".", "setAccessible", "(", "true", ")", ";", "try", "{"], ["BigMap", "a", "=", "field", ".", "getAnnotation", "(", "BigMap", ".", "class", ")", ";"]]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{", "field", ".", "setAccessible", "(", "true", ")", ";", "try", "{", "BigMap", "a", "=", "field", ".", "getAnnotation", "(", "BigMap", ".", "class", ")", ";"], ["field", ".", "set", "(", "this", ",", "storageEngine", ".", "getBigMap", "(", "field", ".", "getName", "(", ")", ",", "a", ".", "keyClass", "(", ")", ",", "a", ".", "valueClass", "(", ")", ",", "a", ".", "mapType", "(", ")", ",", "a", ".", "storageHint", "(", ")", ",", "a", ".", "concurrent", "(", ")", ",", "false", ")", ")", ";"]]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{", "field", ".", "setAccessible", "(", "true", ")", ";", "try", "{", "BigMap", "a", "=", "field", ".", "getAnnotation", "(", "BigMap", ".", "class", ")", ";", "field", ".", "set", "(", "this", ",", "storageEngine", ".", "getBigMap", "(", "field", ".", "getName", "(", ")", ",", "a", ".", "keyClass", "(", ")", ",", "a", ".", "valueClass", "(", ")", ",", "a", ".", "mapType", "(", ")", ",", "a", ".", "storageHint", "(", ")", ",", "a", ".", "concurrent", "(", ")", ",", "false", ")", ")", ";"], ["}"]]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{", "field", ".", "setAccessible", "(", "true", ")", ";", "try", "{", "BigMap", "a", "=", "field", ".", "getAnnotation", "(", "BigMap", ".", "class", ")", ";", "field", ".", "set", "(", "this", ",", "storageEngine", ".", "getBigMap", "(", "field", ".", "getName", "(", ")", ",", "a", ".", "keyClass", "(", ")", ",", "a", ".", "valueClass", "(", ")", ",", "a", ".", "mapType", "(", ")", ",", "a", ".", "storageHint", "(", ")", ",", "a", ".", "concurrent", "(", ")", ",", "false", ")", ")", ";", "}"], ["catch", "(", "IllegalArgumentException", "|", "IllegalAccessException", "ex", ")", "{"]]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{", "field", ".", "setAccessible", "(", "true", ")", ";", "try", "{", "BigMap", "a", "=", "field", ".", "getAnnotation", "(", "BigMap", ".", "class", ")", ";", "field", ".", "set", "(", "this", ",", "storageEngine", ".", "getBigMap", "(", "field", ".", "getName", "(", ")", ",", "a", ".", "keyClass", "(", ")", ",", "a", ".", "valueClass", "(", ")", ",", "a", ".", "mapType", "(", ")", ",", "a", ".", "storageHint", "(", ")", ",", "a", ".", "concurrent", "(", ")", ",", "false", ")", ")", ";", "}", "catch", "(", "IllegalArgumentException", "|", "IllegalAccessException", "ex", ")", "{"], ["throw", "new", "RuntimeException", "(", "ex", ")", ";"]]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{", "field", ".", "setAccessible", "(", "true", ")", ";", "try", "{", "BigMap", "a", "=", "field", ".", "getAnnotation", "(", "BigMap", ".", "class", ")", ";", "field", ".", "set", "(", "this", ",", "storageEngine", ".", "getBigMap", "(", "field", ".", "getName", "(", ")", ",", "a", ".", "keyClass", "(", ")", ",", "a", ".", "valueClass", "(", ")", ",", "a", ".", "mapType", "(", ")", ",", "a", ".", "storageHint", "(", ")", ",", "a", ".", "concurrent", "(", ")", ",", "false", ")", ")", ";", "}", "catch", "(", "IllegalArgumentException", "|", "IllegalAccessException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ")", ";"], ["}"]]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{", "field", ".", "setAccessible", "(", "true", ")", ";", "try", "{", "BigMap", "a", "=", "field", ".", "getAnnotation", "(", "BigMap", ".", "class", ")", ";", "field", ".", "set", "(", "this", ",", "storageEngine", ".", "getBigMap", "(", "field", ".", "getName", "(", ")", ",", "a", ".", "keyClass", "(", ")", ",", "a", ".", "valueClass", "(", ")", ",", "a", ".", "mapType", "(", ")", ",", "a", ".", "storageHint", "(", ")", ",", "a", ".", "concurrent", "(", ")", ",", "false", ")", ")", ";", "}", "catch", "(", "IllegalArgumentException", "|", "IllegalAccessException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ")", ";", "}"], ["}"]]
[["private", "void", "initializeBigMapField", "(", "StorageEngine", "storageEngine", ",", "Field", "field", ")", "{", "field", ".", "setAccessible", "(", "true", ")", ";", "try", "{", "BigMap", "a", "=", "field", ".", "getAnnotation", "(", "BigMap", ".", "class", ")", ";", "field", ".", "set", "(", "this", ",", "storageEngine", ".", "getBigMap", "(", "field", ".", "getName", "(", ")", ",", "a", ".", "keyClass", "(", ")", ",", "a", ".", "valueClass", "(", ")", ",", "a", ".", "mapType", "(", ")", ",", "a", ".", "storageHint", "(", ")", ",", "a", ".", "concurrent", "(", ")", ",", "false", ")", ")", ";", "}", "catch", "(", "IllegalArgumentException", "|", "IllegalAccessException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ")", ";", "}", "}"], []]
[["protected", "void", "animateRemoveImpl", "(", "final", "RecyclerView", ".", "ViewHolder", "holder", ")", "{"], ["ViewCompat", ".", "animate", "(", "holder", ".", "itemView", ")", ".", "scaleX", "(", "0", ")", ".", "scaleY", "(", "0", ")", ".", "setDuration", "(", "getRemoveDuration", "(", ")", ")", ".", "setInterpolator", "(", "mInterpolator", ")", ".", "setListener", "(", "new", "DefaultRemoveVpaListener", "(", "holder", ")", ")", ".", "setStartDelay", "(", "getRemoveDelay", "(", "holder", ")", ")", ".", "start", "(", ")", ";"]]
[["protected", "void", "animateRemoveImpl", "(", "final", "RecyclerView", ".", "ViewHolder", "holder", ")", "{", "ViewCompat", ".", "animate", "(", "holder", ".", "itemView", ")", ".", "scaleX", "(", "0", ")", ".", "scaleY", "(", "0", ")", ".", "setDuration", "(", "getRemoveDuration", "(", ")", ")", ".", "setInterpolator", "(", "mInterpolator", ")", ".", "setListener", "(", "new", "DefaultRemoveVpaListener", "(", "holder", ")", ")", ".", "setStartDelay", "(", "getRemoveDelay", "(", "holder", ")", ")", ".", "start", "(", ")", ";"], ["}"]]
[["protected", "void", "animateRemoveImpl", "(", "final", "RecyclerView", ".", "ViewHolder", "holder", ")", "{", "ViewCompat", ".", "animate", "(", "holder", ".", "itemView", ")", ".", "scaleX", "(", "0", ")", ".", "scaleY", "(", "0", ")", ".", "setDuration", "(", "getRemoveDuration", "(", ")", ")", ".", "setInterpolator", "(", "mInterpolator", ")", ".", "setListener", "(", "new", "DefaultRemoveVpaListener", "(", "holder", ")", ")", ".", "setStartDelay", "(", "getRemoveDelay", "(", "holder", ")", ")", ".", "start", "(", ")", ";", "}"], []]
[["protected", "void", "animateAddImpl", "(", "final", "RecyclerView", ".", "ViewHolder", "holder", ")", "{"], ["ViewCompat", ".", "animate", "(", "holder", ".", "itemView", ")", ".", "scaleX", "(", "1", ")", ".", "scaleY", "(", "1", ")", ".", "setDuration", "(", "getAddDuration", "(", ")", ")", ".", "setInterpolator", "(", "mInterpolator", ")", ".", "setListener", "(", "new", "DefaultAddVpaListener", "(", "holder", ")", ")", ".", "setStartDelay", "(", "getAddDelay", "(", "holder", ")", ")", ".", "start", "(", ")", ";"]]
[["protected", "void", "animateAddImpl", "(", "final", "RecyclerView", ".", "ViewHolder", "holder", ")", "{", "ViewCompat", ".", "animate", "(", "holder", ".", "itemView", ")", ".", "scaleX", "(", "1", ")", ".", "scaleY", "(", "1", ")", ".", "setDuration", "(", "getAddDuration", "(", ")", ")", ".", "setInterpolator", "(", "mInterpolator", ")", ".", "setListener", "(", "new", "DefaultAddVpaListener", "(", "holder", ")", ")", ".", "setStartDelay", "(", "getAddDelay", "(", "holder", ")", ")", ".", "start", "(", ")", ";"], ["}"]]
[["protected", "void", "animateAddImpl", "(", "final", "RecyclerView", ".", "ViewHolder", "holder", ")", "{", "ViewCompat", ".", "animate", "(", "holder", ".", "itemView", ")", ".", "scaleX", "(", "1", ")", ".", "scaleY", "(", "1", ")", ".", "setDuration", "(", "getAddDuration", "(", ")", ")", ".", "setInterpolator", "(", "mInterpolator", ")", ".", "setListener", "(", "new", "DefaultAddVpaListener", "(", "holder", ")", ")", ".", "setStartDelay", "(", "getAddDelay", "(", "holder", ")", ")", ".", "start", "(", ")", ";", "}"], []]
[["protected", "AbstractListData", "(", "List", "<", "E", ">", "value", ",", "Key", "<", "?", "extends", "BaseValue", "<", "List", "<", "E", ">", ">", ">", "usedKey", ")", "{"], ["this", "(", "(", "Key", "<", "ListValue", "<", "E", ">", ">", ")", "usedKey", ",", "value", ")", ";"]]
[["protected", "AbstractListData", "(", "List", "<", "E", ">", "value", ",", "Key", "<", "?", "extends", "BaseValue", "<", "List", "<", "E", ">", ">", ">", "usedKey", ")", "{", "this", "(", "(", "Key", "<", "ListValue", "<", "E", ">", ">", ")", "usedKey", ",", "value", ")", ";"], ["}"]]
[["protected", "AbstractListData", "(", "List", "<", "E", ">", "value", ",", "Key", "<", "?", "extends", "BaseValue", "<", "List", "<", "E", ">", ">", ">", "usedKey", ")", "{", "this", "(", "(", "Key", "<", "ListValue", "<", "E", ">", ">", ")", "usedKey", ",", "value", ")", ";", "}"], []]
[["protected", "AbstractListData", "(", "Key", "<", "ListValue", "<", "E", ">", ">", "usedKey", ",", "List", "<", "E", ">", "value", ",", "List", "<", "E", ">", "defaultValue", ")", "{"], ["super", "(", "usedKey", ",", "CollectionUtils", ".", "copyList", "(", "value", ")", ",", "CollectionUtils", ".", "copyList", "(", "defaultValue", ")", ")", ";"]]
[["protected", "AbstractListData", "(", "Key", "<", "ListValue", "<", "E", ">", ">", "usedKey", ",", "List", "<", "E", ">", "value", ",", "List", "<", "E", ">", "defaultValue", ")", "{", "super", "(", "usedKey", ",", "CollectionUtils", ".", "copyList", "(", "value", ")", ",", "CollectionUtils", ".", "copyList", "(", "defaultValue", ")", ")", ";"], ["}"]]
[["protected", "AbstractListData", "(", "Key", "<", "ListValue", "<", "E", ">", ">", "usedKey", ",", "List", "<", "E", ">", "value", ",", "List", "<", "E", ">", "defaultValue", ")", "{", "super", "(", "usedKey", ",", "CollectionUtils", ".", "copyList", "(", "value", ")", ",", "CollectionUtils", ".", "copyList", "(", "defaultValue", ")", ")", ";", "}"], []]
[["protected", "ListValue", "<", "E", ">", "getValueGetter", "(", ")", "{"], ["return", "Sponge", ".", "getRegistry", "(", ")", ".", "getValueFactory", "(", ")", ".", "createListValue", "(", "(", "Key", "<", "ListValue", "<", "E", ">", ">", ")", "this", ".", "usedKey", ",", "getValue", "(", ")", ",", "CollectionUtils", ".", "copyList", "(", "this", ".", "defaultValue", ")", ")", ";"]]
[["protected", "ListValue", "<", "E", ">", "getValueGetter", "(", ")", "{", "return", "Sponge", ".", "getRegistry", "(", ")", ".", "getValueFactory", "(", ")", ".", "createListValue", "(", "(", "Key", "<", "ListValue", "<", "E", ">", ">", ")", "this", ".", "usedKey", ",", "getValue", "(", ")", ",", "CollectionUtils", ".", "copyList", "(", "this", ".", "defaultValue", ")", ")", ";"], ["}"]]
[["protected", "ListValue", "<", "E", ">", "getValueGetter", "(", ")", "{", "return", "Sponge", ".", "getRegistry", "(", ")", ".", "getValueFactory", "(", ")", ".", "createListValue", "(", "(", "Key", "<", "ListValue", "<", "E", ">", ">", ")", "this", ".", "usedKey", ",", "getValue", "(", ")", ",", "CollectionUtils", ".", "copyList", "(", "this", ".", "defaultValue", ")", ")", ";", "}"], []]
[["public", "<", "V", ">", "Optional", "<", "V", ">", "get", "(", "Key", "<", "?", "extends", "BaseValue", "<", "V", ">", ">", "key", ")", "{"], ["return", "key", "==", "this", ".", "usedKey", "?", "Optional", ".", "of", "(", "(", "V", ")", "getValue", "(", ")", ")", ":", "super", ".", "get", "(", "key", ")", ";"]]
[["public", "<", "V", ">", "Optional", "<", "V", ">", "get", "(", "Key", "<", "?", "extends", "BaseValue", "<", "V", ">", ">", "key", ")", "{", "return", "key", "==", "this", ".", "usedKey", "?", "Optional", ".", "of", "(", "(", "V", ")", "getValue", "(", ")", ")", ":", "super", ".", "get", "(", "key", ")", ";"], ["}"]]
[["public", "<", "V", ">", "Optional", "<", "V", ">", "get", "(", "Key", "<", "?", "extends", "BaseValue", "<", "V", ">", ">", "key", ")", "{", "return", "key", "==", "this", ".", "usedKey", "?", "Optional", ".", "of", "(", "(", "V", ")", "getValue", "(", ")", ")", ":", "super", ".", "get", "(", "key", ")", ";", "}"], []]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{"], ["String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";"]]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{", "String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";"], ["return", "Arrays", ".", "asList", "(", "new", "Object", "[", "]", "[", "]", "{"]]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{", "String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";", "return", "Arrays", ".", "asList", "(", "new", "Object", "[", "]", "[", "]", "{"], ["{"]]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{", "String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";", "return", "Arrays", ".", "asList", "(", "new", "Object", "[", "]", "[", "]", "{", "{"], ["baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}"]]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{", "String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";", "return", "Arrays", ".", "asList", "(", "new", "Object", "[", "]", "[", "]", "{", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}"], [",", "{"]]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{", "String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";", "return", "Arrays", ".", "asList", "(", "new", "Object", "[", "]", "[", "]", "{", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}", ",", "{"], ["baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}"]]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{", "String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";", "return", "Arrays", ".", "asList", "(", "new", "Object", "[", "]", "[", "]", "{", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}", ",", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}"], ["}"]]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{", "String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";", "return", "Arrays", ".", "asList", "(", "new", "Object", "[", "]", "[", "]", "{", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}", ",", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}", "}"], [")", ";"]]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{", "String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";", "return", "Arrays", ".", "asList", "(", "new", "Object", "[", "]", "[", "]", "{", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}", ",", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}", "}", ")", ";"], ["}"]]
[["public", "static", "Collection", "<", "Object", "[", "]", ">", "data", "(", ")", "throws", "Exception", "{", "String", "baseZnode", "=", "Base", ".", "createBaseZNode", "(", ")", ";", "return", "Arrays", ".", "asList", "(", "new", "Object", "[", "]", "[", "]", "{", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}", ",", "{", "baseZnode", ",", "baseZnode", ",", "ClientResponse", ".", "Status", ".", "NO_CONTENT", "}", "}", ")", ";", "}"], []]
[["public", "void", "verify", "(", "String", "type", ")", "throws", "Exception", "{"], ["if", "(", "expectedStatus", "!=", "ClientResponse", ".", "Status", ".", "NOT_FOUND", ")", "{"]]
[["public", "void", "verify", "(", "String", "type", ")", "throws", "Exception", "{", "if", "(", "expectedStatus", "!=", "ClientResponse", ".", "Status", ".", "NOT_FOUND", ")", "{"], ["zpath", "=", "zk", ".", "create", "(", "zpath", ",", "null", ",", "Ids", ".", "OPEN_ACL_UNSAFE", ",", "CreateMode", ".", "PERSISTENT_SEQUENTIAL", ")", ";"]]
[["public", "void", "verify", "(", "String", "type", ")", "throws", "Exception", "{", "if", "(", "expectedStatus", "!=", "ClientResponse", ".", "Status", ".", "NOT_FOUND", ")", "{", "zpath", "=", "zk", ".", "create", "(", "zpath", ",", "null", ",", "Ids", ".", "OPEN_ACL_UNSAFE", ",", "CreateMode", ".", "PERSISTENT_SEQUENTIAL", ")", ";"], ["}"]]
[["public", "void", "verify", "(", "String", "type", ")", "throws", "Exception", "{", "if", "(", "expectedStatus", "!=", "ClientResponse", ".", "Status", ".", "NOT_FOUND", ")", "{", "zpath", "=", "zk", ".", "create", "(", "zpath", ",", "null", ",", "Ids", ".", "OPEN_ACL_UNSAFE", ",", "CreateMode", ".", "PERSISTENT_SEQUENTIAL", ")", ";", "}"], ["ClientResponse", "cr", "=", "znodesr", ".", "path", "(", "zpath", ")", ".", "accept", "(", "type", ")", ".", "type", "(", "type", ")", ".", "delete", "(", "ClientResponse", ".", "class", ")", ";"]]
[["public", "void", "verify", "(", "String", "type", ")", "throws", "Exception", "{", "if", "(", "expectedStatus", "!=", "ClientResponse", ".", "Status", ".", "NOT_FOUND", ")", "{", "zpath", "=", "zk", ".", "create", "(", "zpath", ",", "null", ",", "Ids", ".", "OPEN_ACL_UNSAFE", ",", "CreateMode", ".", "PERSISTENT_SEQUENTIAL", ")", ";", "}", "ClientResponse", "cr", "=", "znodesr", ".", "path", "(", "zpath", ")", ".", "accept", "(", "type", ")", ".", "type", "(", "type", ")", ".", "delete", "(", "ClientResponse", ".", "class", ")", ";"], ["Assert", ".", "assertEquals", "(", "expectedStatus", ",", "cr", ".", "getClientResponseStatus", "(", ")", ")", ";"]]
[["public", "void", "verify", "(", "String", "type", ")", "throws", "Exception", "{", "if", "(", "expectedStatus", "!=", "ClientResponse", ".", "Status", ".", "NOT_FOUND", ")", "{", "zpath", "=", "zk", ".", "create", "(", "zpath", ",", "null", ",", "Ids", ".", "OPEN_ACL_UNSAFE", ",", "CreateMode", ".", "PERSISTENT_SEQUENTIAL", ")", ";", "}", "ClientResponse", "cr", "=", "znodesr", ".", "path", "(", "zpath", ")", ".", "accept", "(", "type", ")", ".", "type", "(", "type", ")", ".", "delete", "(", "ClientResponse", ".", "class", ")", ";", "Assert", ".", "assertEquals", "(", "expectedStatus", ",", "cr", ".", "getClientResponseStatus", "(", ")", ")", ";"], ["Stat", "stat", "=", "zk", ".", "exists", "(", "zpath", ",", "false", ")", ";"]]
[["public", "void", "verify", "(", "String", "type", ")", "throws", "Exception", "{", "if", "(", "expectedStatus", "!=", "ClientResponse", ".", "Status", ".", "NOT_FOUND", ")", "{", "zpath", "=", "zk", ".", "create", "(", "zpath", ",", "null", ",", "Ids", ".", "OPEN_ACL_UNSAFE", ",", "CreateMode", ".", "PERSISTENT_SEQUENTIAL", ")", ";", "}", "ClientResponse", "cr", "=", "znodesr", ".", "path", "(", "zpath", ")", ".", "accept", "(", "type", ")", ".", "type", "(", "type", ")", ".", "delete", "(", "ClientResponse", ".", "class", ")", ";", "Assert", ".", "assertEquals", "(", "expectedStatus", ",", "cr", ".", "getClientResponseStatus", "(", ")", ")", ";", "Stat", "stat", "=", "zk", ".", "exists", "(", "zpath", ",", "false", ")", ";"], ["Assert", ".", "assertNull", "(", "stat", ")", ";"]]
[["public", "void", "verify", "(", "String", "type", ")", "throws", "Exception", "{", "if", "(", "expectedStatus", "!=", "ClientResponse", ".", "Status", ".", "NOT_FOUND", ")", "{", "zpath", "=", "zk", ".", "create", "(", "zpath", ",", "null", ",", "Ids", ".", "OPEN_ACL_UNSAFE", ",", "CreateMode", ".", "PERSISTENT_SEQUENTIAL", ")", ";", "}", "ClientResponse", "cr", "=", "znodesr", ".", "path", "(", "zpath", ")", ".", "accept", "(", "type", ")", ".", "type", "(", "type", ")", ".", "delete", "(", "ClientResponse", ".", "class", ")", ";", "Assert", ".", "assertEquals", "(", "expectedStatus", ",", "cr", ".", "getClientResponseStatus", "(", ")", ")", ";", "Stat", "stat", "=", "zk", ".", "exists", "(", "zpath", ",", "false", ")", ";", "Assert", ".", "assertNull", "(", "stat", ")", ";"], ["}"]]
[["public", "void", "verify", "(", "String", "type", ")", "throws", "Exception", "{", "if", "(", "expectedStatus", "!=", "ClientResponse", ".", "Status", ".", "NOT_FOUND", ")", "{", "zpath", "=", "zk", ".", "create", "(", "zpath", ",", "null", ",", "Ids", ".", "OPEN_ACL_UNSAFE", ",", "CreateMode", ".", "PERSISTENT_SEQUENTIAL", ")", ";", "}", "ClientResponse", "cr", "=", "znodesr", ".", "path", "(", "zpath", ")", ".", "accept", "(", "type", ")", ".", "type", "(", "type", ")", ".", "delete", "(", "ClientResponse", ".", "class", ")", ";", "Assert", ".", "assertEquals", "(", "expectedStatus", ",", "cr", ".", "getClientResponseStatus", "(", ")", ")", ";", "Stat", "stat", "=", "zk", ".", "exists", "(", "zpath", ",", "false", ")", ";", "Assert", ".", "assertNull", "(", "stat", ")", ";", "}"], []]
[["public", "static", "void", "save", "(", "String", "key", ",", "Class", "proxyClass", ")", "{"], ["if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{"]]
[["public", "static", "void", "save", "(", "String", "key", ",", "Class", "proxyClass", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{"], ["synchronized", "(", "cache", ")", "{"]]
[["public", "static", "void", "save", "(", "String", "key", ",", "Class", "proxyClass", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "synchronized", "(", "cache", ")", "{"], ["if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{"]]
[["public", "static", "void", "save", "(", "String", "key", ",", "Class", "proxyClass", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "synchronized", "(", "cache", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{"], ["cache", ".", "put", "(", "key", ",", "proxyClass", ")", ";"]]
[["public", "static", "void", "save", "(", "String", "key", ",", "Class", "proxyClass", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "synchronized", "(", "cache", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "cache", ".", "put", "(", "key", ",", "proxyClass", ")", ";"], ["}"]]
[["public", "static", "void", "save", "(", "String", "key", ",", "Class", "proxyClass", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "synchronized", "(", "cache", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "cache", ".", "put", "(", "key", ",", "proxyClass", ")", ";", "}"], ["}"]]
[["public", "static", "void", "save", "(", "String", "key", ",", "Class", "proxyClass", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "synchronized", "(", "cache", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "cache", ".", "put", "(", "key", ",", "proxyClass", ")", ";", "}", "}"], ["}"]]
[["public", "static", "void", "save", "(", "String", "key", ",", "Class", "proxyClass", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "synchronized", "(", "cache", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "cache", ".", "put", "(", "key", ",", "proxyClass", ")", ";", "}", "}", "}"], ["}"]]
[["public", "static", "void", "save", "(", "String", "key", ",", "Class", "proxyClass", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "synchronized", "(", "cache", ")", "{", "if", "(", "!", "cache", ".", "containsKey", "(", "key", ")", ")", "{", "cache", ".", "put", "(", "key", ",", "proxyClass", ")", ";", "}", "}", "}", "}"], []]
[["public", "void", "testCropEX", "(", ")", "{"], ["try", "{"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{"], ["crop", "(", "src", ",", "3200", ",", "2400", ")", ";"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";"], ["Assert", ".", "assertTrue", "(", "false", ")", ";"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";"], ["}"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}"], ["catch", "(", "Exception", "e", ")", "{"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{"], ["Assert", ".", "assertTrue", "(", "true", ")", ";"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";"], ["}"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}"], ["try", "{"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{"], ["crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";"], ["Assert", ".", "assertTrue", "(", "false", ")", ";"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";"], ["}"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}"], ["catch", "(", "Exception", "e", ")", "{"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{"], ["Assert", ".", "assertTrue", "(", "true", ")", ";"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";"], ["}"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}"], ["try", "{"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{"], ["crop", "(", "src", ",", "-", "100", ",", "-", "200", ",", "-", "4", ",", "-", "4", ")", ";"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "100", ",", "-", "200", ",", "-", "4", ",", "-", "4", ")", ";"], ["Assert", ".", "assertTrue", "(", "false", ")", ";"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "100", ",", "-", "200", ",", "-", "4", ",", "-", "4", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";"], ["}"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "100", ",", "-", "200", ",", "-", "4", ",", "-", "4", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}"], ["catch", "(", "Exception", "e", ")", "{"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "100", ",", "-", "200", ",", "-", "4", ",", "-", "4", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{"], ["Assert", ".", "assertTrue", "(", "true", ")", ";"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "100", ",", "-", "200", ",", "-", "4", ",", "-", "4", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";"], ["}"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "100", ",", "-", "200", ",", "-", "4", ",", "-", "4", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}"], ["}"]]
[["public", "void", "testCropEX", "(", ")", "{", "try", "{", "crop", "(", "src", ",", "3200", ",", "2400", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "8", ",", "-", "10", ",", "100", ",", "100", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "try", "{", "crop", "(", "src", ",", "-", "100", ",", "-", "200", ",", "-", "4", ",", "-", "4", ")", ";", "Assert", ".", "assertTrue", "(", "false", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Assert", ".", "assertTrue", "(", "true", ")", ";", "}", "}"], []]
[["public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "throws", "IOException", ",", "GitAPIException", "{"], ["try", "(", "Repository", "repo", "=", "CookbookHelper", ".", "openJGitCookbookRepository", "(", ")", ")", "{"]]
[["public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "throws", "IOException", ",", "GitAPIException", "{", "try", "(", "Repository", "repo", "=", "CookbookHelper", ".", "openJGitCookbookRepository", "(", ")", ")", "{"], ["runDiff", "(", "repo", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"README.md\"", ")", ";"]]
[["public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "throws", "IOException", ",", "GitAPIException", "{", "try", "(", "Repository", "repo", "=", "CookbookHelper", ".", "openJGitCookbookRepository", "(", ")", ")", "{", "runDiff", "(", "repo", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"README.md\"", ")", ";"], ["runDiff", "(", "repo", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"README.md\"", ")", ";"]]
[["public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "throws", "IOException", ",", "GitAPIException", "{", "try", "(", "Repository", "repo", "=", "CookbookHelper", ".", "openJGitCookbookRepository", "(", ")", ")", "{", "runDiff", "(", "repo", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"README.md\"", ")", ";", "runDiff", "(", "repo", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"README.md\"", ")", ";"], ["runDiff", "(", "repo", ",", "\"7b2e6193a39726510ed9d0f66a779665d0e4ce23^\"", ",", "\"7b2e6193a39726510ed9d0f66a779665d0e4ce23\"", ",", "\"build.gradle\"", ")", ";"]]
[["public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "throws", "IOException", ",", "GitAPIException", "{", "try", "(", "Repository", "repo", "=", "CookbookHelper", ".", "openJGitCookbookRepository", "(", ")", ")", "{", "runDiff", "(", "repo", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"README.md\"", ")", ";", "runDiff", "(", "repo", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"README.md\"", ")", ";", "runDiff", "(", "repo", ",", "\"7b2e6193a39726510ed9d0f66a779665d0e4ce23^\"", ",", "\"7b2e6193a39726510ed9d0f66a779665d0e4ce23\"", ",", "\"build.gradle\"", ")", ";"], ["}"]]
[["public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "throws", "IOException", ",", "GitAPIException", "{", "try", "(", "Repository", "repo", "=", "CookbookHelper", ".", "openJGitCookbookRepository", "(", ")", ")", "{", "runDiff", "(", "repo", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"README.md\"", ")", ";", "runDiff", "(", "repo", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"README.md\"", ")", ";", "runDiff", "(", "repo", ",", "\"7b2e6193a39726510ed9d0f66a779665d0e4ce23^\"", ",", "\"7b2e6193a39726510ed9d0f66a779665d0e4ce23\"", ",", "\"build.gradle\"", ")", ";", "}"], ["}"]]
[["public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "throws", "IOException", ",", "GitAPIException", "{", "try", "(", "Repository", "repo", "=", "CookbookHelper", ".", "openJGitCookbookRepository", "(", ")", ")", "{", "runDiff", "(", "repo", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"README.md\"", ")", ";", "runDiff", "(", "repo", ",", "\"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d\"", ",", "\"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9\"", ",", "\"README.md\"", ")", ";", "runDiff", "(", "repo", ",", "\"7b2e6193a39726510ed9d0f66a779665d0e4ce23^\"", ",", "\"7b2e6193a39726510ed9d0f66a779665d0e4ce23\"", ",", "\"build.gradle\"", ")", ";", "}", "}"], []]
[["private", "static", "void", "runDiff", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{"], ["DiffEntry", "diff", "=", "diffFile", "(", "repo", ",", "oldCommit", ",", "newCommit", ",", "path", ")", ";"]]
[["private", "static", "void", "runDiff", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "DiffEntry", "diff", "=", "diffFile", "(", "repo", ",", "oldCommit", ",", "newCommit", ",", "path", ")", ";"], ["System", ".", "out", ".", "println", "(", "\"Showing diff of \"", "+", "path", ")", ";"]]
[["private", "static", "void", "runDiff", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "DiffEntry", "diff", "=", "diffFile", "(", "repo", ",", "oldCommit", ",", "newCommit", ",", "path", ")", ";", "System", ".", "out", ".", "println", "(", "\"Showing diff of \"", "+", "path", ")", ";"], ["try", "(", "DiffFormatter", "formatter", "=", "new", "DiffFormatter", "(", "System", ".", "out", ")", ")", "{"]]
[["private", "static", "void", "runDiff", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "DiffEntry", "diff", "=", "diffFile", "(", "repo", ",", "oldCommit", ",", "newCommit", ",", "path", ")", ";", "System", ".", "out", ".", "println", "(", "\"Showing diff of \"", "+", "path", ")", ";", "try", "(", "DiffFormatter", "formatter", "=", "new", "DiffFormatter", "(", "System", ".", "out", ")", ")", "{"], ["formatter", ".", "setRepository", "(", "repo", ")", ";"]]
[["private", "static", "void", "runDiff", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "DiffEntry", "diff", "=", "diffFile", "(", "repo", ",", "oldCommit", ",", "newCommit", ",", "path", ")", ";", "System", ".", "out", ".", "println", "(", "\"Showing diff of \"", "+", "path", ")", ";", "try", "(", "DiffFormatter", "formatter", "=", "new", "DiffFormatter", "(", "System", ".", "out", ")", ")", "{", "formatter", ".", "setRepository", "(", "repo", ")", ";"], ["formatter", ".", "format", "(", "diff", ")", ";"]]
[["private", "static", "void", "runDiff", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "DiffEntry", "diff", "=", "diffFile", "(", "repo", ",", "oldCommit", ",", "newCommit", ",", "path", ")", ";", "System", ".", "out", ".", "println", "(", "\"Showing diff of \"", "+", "path", ")", ";", "try", "(", "DiffFormatter", "formatter", "=", "new", "DiffFormatter", "(", "System", ".", "out", ")", ")", "{", "formatter", ".", "setRepository", "(", "repo", ")", ";", "formatter", ".", "format", "(", "diff", ")", ";"], ["}"]]
[["private", "static", "void", "runDiff", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "DiffEntry", "diff", "=", "diffFile", "(", "repo", ",", "oldCommit", ",", "newCommit", ",", "path", ")", ";", "System", ".", "out", ".", "println", "(", "\"Showing diff of \"", "+", "path", ")", ";", "try", "(", "DiffFormatter", "formatter", "=", "new", "DiffFormatter", "(", "System", ".", "out", ")", ")", "{", "formatter", ".", "setRepository", "(", "repo", ")", ";", "formatter", ".", "format", "(", "diff", ")", ";", "}"], ["}"]]
[["private", "static", "void", "runDiff", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "DiffEntry", "diff", "=", "diffFile", "(", "repo", ",", "oldCommit", ",", "newCommit", ",", "path", ")", ";", "System", ".", "out", ".", "println", "(", "\"Showing diff of \"", "+", "path", ")", ";", "try", "(", "DiffFormatter", "formatter", "=", "new", "DiffFormatter", "(", "System", ".", "out", ")", ")", "{", "formatter", ".", "setRepository", "(", "repo", ")", ";", "formatter", ".", "format", "(", "diff", ")", ";", "}", "}"], []]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{"], ["try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{"], ["RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";"], ["RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";", "RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";"], ["CanonicalTreeParser", "treeParser", "=", "new", "CanonicalTreeParser", "(", ")", ";"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";", "RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";", "CanonicalTreeParser", "treeParser", "=", "new", "CanonicalTreeParser", "(", ")", ";"], ["try", "(", "ObjectReader", "reader", "=", "repository", ".", "newObjectReader", "(", ")", ")", "{"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";", "RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";", "CanonicalTreeParser", "treeParser", "=", "new", "CanonicalTreeParser", "(", ")", ";", "try", "(", "ObjectReader", "reader", "=", "repository", ".", "newObjectReader", "(", ")", ")", "{"], ["treeParser", ".", "reset", "(", "reader", ",", "tree", ".", "getId", "(", ")", ")", ";"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";", "RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";", "CanonicalTreeParser", "treeParser", "=", "new", "CanonicalTreeParser", "(", ")", ";", "try", "(", "ObjectReader", "reader", "=", "repository", ".", "newObjectReader", "(", ")", ")", "{", "treeParser", ".", "reset", "(", "reader", ",", "tree", ".", "getId", "(", ")", ")", ";"], ["}"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";", "RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";", "CanonicalTreeParser", "treeParser", "=", "new", "CanonicalTreeParser", "(", ")", ";", "try", "(", "ObjectReader", "reader", "=", "repository", ".", "newObjectReader", "(", ")", ")", "{", "treeParser", ".", "reset", "(", "reader", ",", "tree", ".", "getId", "(", ")", ")", ";", "}"], ["walk", ".", "dispose", "(", ")", ";"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";", "RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";", "CanonicalTreeParser", "treeParser", "=", "new", "CanonicalTreeParser", "(", ")", ";", "try", "(", "ObjectReader", "reader", "=", "repository", ".", "newObjectReader", "(", ")", ")", "{", "treeParser", ".", "reset", "(", "reader", ",", "tree", ".", "getId", "(", ")", ")", ";", "}", "walk", ".", "dispose", "(", ")", ";"], ["return", "treeParser", ";"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";", "RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";", "CanonicalTreeParser", "treeParser", "=", "new", "CanonicalTreeParser", "(", ")", ";", "try", "(", "ObjectReader", "reader", "=", "repository", ".", "newObjectReader", "(", ")", ")", "{", "treeParser", ".", "reset", "(", "reader", ",", "tree", ".", "getId", "(", ")", ")", ";", "}", "walk", ".", "dispose", "(", ")", ";", "return", "treeParser", ";"], ["}"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";", "RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";", "CanonicalTreeParser", "treeParser", "=", "new", "CanonicalTreeParser", "(", ")", ";", "try", "(", "ObjectReader", "reader", "=", "repository", ".", "newObjectReader", "(", ")", ")", "{", "treeParser", ".", "reset", "(", "reader", ",", "tree", ".", "getId", "(", ")", ")", ";", "}", "walk", ".", "dispose", "(", ")", ";", "return", "treeParser", ";", "}"], ["}"]]
[["private", "static", "AbstractTreeIterator", "prepareTreeParser", "(", "Repository", "repository", ",", "String", "objectId", ")", "throws", "IOException", "{", "try", "(", "RevWalk", "walk", "=", "new", "RevWalk", "(", "repository", ")", ")", "{", "RevCommit", "commit", "=", "walk", ".", "parseCommit", "(", "repository", ".", "resolve", "(", "objectId", ")", ")", ";", "RevTree", "tree", "=", "walk", ".", "parseTree", "(", "commit", ".", "getTree", "(", ")", ".", "getId", "(", ")", ")", ";", "CanonicalTreeParser", "treeParser", "=", "new", "CanonicalTreeParser", "(", ")", ";", "try", "(", "ObjectReader", "reader", "=", "repository", ".", "newObjectReader", "(", ")", ")", "{", "treeParser", ".", "reset", "(", "reader", ",", "tree", ".", "getId", "(", ")", ")", ";", "}", "walk", ".", "dispose", "(", ")", ";", "return", "treeParser", ";", "}", "}"], []]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{"], ["Config", "config", "=", "new", "Config", "(", ")", ";"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";"], ["config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";"], ["DiffConfig", "diffConfig", "=", "config", ".", "get", "(", "DiffConfig", ".", "KEY", ")", ";"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";", "DiffConfig", "diffConfig", "=", "config", ".", "get", "(", "DiffConfig", ".", "KEY", ")", ";"], ["try", "(", "Git", "git", "=", "new", "Git", "(", "repo", ")", ")", "{"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";", "DiffConfig", "diffConfig", "=", "config", ".", "get", "(", "DiffConfig", ".", "KEY", ")", ";", "try", "(", "Git", "git", "=", "new", "Git", "(", "repo", ")", ")", "{"], ["List", "<", "DiffEntry", ">", "diffList", "=", "git", ".", "diff", "(", ")", ".", "setOldTree", "(", "prepareTreeParser", "(", "repo", ",", "oldCommit", ")", ")", ".", "setNewTree", "(", "prepareTreeParser", "(", "repo", ",", "newCommit", ")", ")", ".", "setPathFilter", "(", "FollowFilter", ".", "create", "(", "path", ",", "diffConfig", ")", ")", ".", "call", "(", ")", ";"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";", "DiffConfig", "diffConfig", "=", "config", ".", "get", "(", "DiffConfig", ".", "KEY", ")", ";", "try", "(", "Git", "git", "=", "new", "Git", "(", "repo", ")", ")", "{", "List", "<", "DiffEntry", ">", "diffList", "=", "git", ".", "diff", "(", ")", ".", "setOldTree", "(", "prepareTreeParser", "(", "repo", ",", "oldCommit", ")", ")", ".", "setNewTree", "(", "prepareTreeParser", "(", "repo", ",", "newCommit", ")", ")", ".", "setPathFilter", "(", "FollowFilter", ".", "create", "(", "path", ",", "diffConfig", ")", ")", ".", "call", "(", ")", ";"], ["if", "(", "diffList", ".", "size", "(", ")", "==", "0", ")", "return", "null", ";"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";", "DiffConfig", "diffConfig", "=", "config", ".", "get", "(", "DiffConfig", ".", "KEY", ")", ";", "try", "(", "Git", "git", "=", "new", "Git", "(", "repo", ")", ")", "{", "List", "<", "DiffEntry", ">", "diffList", "=", "git", ".", "diff", "(", ")", ".", "setOldTree", "(", "prepareTreeParser", "(", "repo", ",", "oldCommit", ")", ")", ".", "setNewTree", "(", "prepareTreeParser", "(", "repo", ",", "newCommit", ")", ")", ".", "setPathFilter", "(", "FollowFilter", ".", "create", "(", "path", ",", "diffConfig", ")", ")", ".", "call", "(", ")", ";", "if", "(", "diffList", ".", "size", "(", ")", "==", "0", ")", "return", "null", ";"], ["if", "(", "diffList", ".", "size", "(", ")", ">", "1", ")", "throw", "new", "RuntimeException", "(", "\"invalid diff\"", ")", ";"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";", "DiffConfig", "diffConfig", "=", "config", ".", "get", "(", "DiffConfig", ".", "KEY", ")", ";", "try", "(", "Git", "git", "=", "new", "Git", "(", "repo", ")", ")", "{", "List", "<", "DiffEntry", ">", "diffList", "=", "git", ".", "diff", "(", ")", ".", "setOldTree", "(", "prepareTreeParser", "(", "repo", ",", "oldCommit", ")", ")", ".", "setNewTree", "(", "prepareTreeParser", "(", "repo", ",", "newCommit", ")", ")", ".", "setPathFilter", "(", "FollowFilter", ".", "create", "(", "path", ",", "diffConfig", ")", ")", ".", "call", "(", ")", ";", "if", "(", "diffList", ".", "size", "(", ")", "==", "0", ")", "return", "null", ";", "if", "(", "diffList", ".", "size", "(", ")", ">", "1", ")", "throw", "new", "RuntimeException", "(", "\"invalid diff\"", ")", ";"], ["return", "diffList", ".", "get", "(", "0", ")", ";"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";", "DiffConfig", "diffConfig", "=", "config", ".", "get", "(", "DiffConfig", ".", "KEY", ")", ";", "try", "(", "Git", "git", "=", "new", "Git", "(", "repo", ")", ")", "{", "List", "<", "DiffEntry", ">", "diffList", "=", "git", ".", "diff", "(", ")", ".", "setOldTree", "(", "prepareTreeParser", "(", "repo", ",", "oldCommit", ")", ")", ".", "setNewTree", "(", "prepareTreeParser", "(", "repo", ",", "newCommit", ")", ")", ".", "setPathFilter", "(", "FollowFilter", ".", "create", "(", "path", ",", "diffConfig", ")", ")", ".", "call", "(", ")", ";", "if", "(", "diffList", ".", "size", "(", ")", "==", "0", ")", "return", "null", ";", "if", "(", "diffList", ".", "size", "(", ")", ">", "1", ")", "throw", "new", "RuntimeException", "(", "\"invalid diff\"", ")", ";", "return", "diffList", ".", "get", "(", "0", ")", ";"], ["}"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";", "DiffConfig", "diffConfig", "=", "config", ".", "get", "(", "DiffConfig", ".", "KEY", ")", ";", "try", "(", "Git", "git", "=", "new", "Git", "(", "repo", ")", ")", "{", "List", "<", "DiffEntry", ">", "diffList", "=", "git", ".", "diff", "(", ")", ".", "setOldTree", "(", "prepareTreeParser", "(", "repo", ",", "oldCommit", ")", ")", ".", "setNewTree", "(", "prepareTreeParser", "(", "repo", ",", "newCommit", ")", ")", ".", "setPathFilter", "(", "FollowFilter", ".", "create", "(", "path", ",", "diffConfig", ")", ")", ".", "call", "(", ")", ";", "if", "(", "diffList", ".", "size", "(", ")", "==", "0", ")", "return", "null", ";", "if", "(", "diffList", ".", "size", "(", ")", ">", "1", ")", "throw", "new", "RuntimeException", "(", "\"invalid diff\"", ")", ";", "return", "diffList", ".", "get", "(", "0", ")", ";", "}"], ["}"]]
[["private", "static", "@", "NonNull", "DiffEntry", "diffFile", "(", "Repository", "repo", ",", "String", "oldCommit", ",", "String", "newCommit", ",", "String", "path", ")", "throws", "IOException", ",", "GitAPIException", "{", "Config", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "setBoolean", "(", "\"diff\"", ",", "null", ",", "\"renames\"", ",", "true", ")", ";", "DiffConfig", "diffConfig", "=", "config", ".", "get", "(", "DiffConfig", ".", "KEY", ")", ";", "try", "(", "Git", "git", "=", "new", "Git", "(", "repo", ")", ")", "{", "List", "<", "DiffEntry", ">", "diffList", "=", "git", ".", "diff", "(", ")", ".", "setOldTree", "(", "prepareTreeParser", "(", "repo", ",", "oldCommit", ")", ")", ".", "setNewTree", "(", "prepareTreeParser", "(", "repo", ",", "newCommit", ")", ")", ".", "setPathFilter", "(", "FollowFilter", ".", "create", "(", "path", ",", "diffConfig", ")", ")", ".", "call", "(", ")", ";", "if", "(", "diffList", ".", "size", "(", ")", "==", "0", ")", "return", "null", ";", "if", "(", "diffList", ".", "size", "(", ")", ">", "1", ")", "throw", "new", "RuntimeException", "(", "\"invalid diff\"", ")", ";", "return", "diffList", ".", "get", "(", "0", ")", ";", "}", "}"], []]
[["public", "int", "hashCode", "(", ")", "{"], ["final", "int", "prime", "=", "31", ";"]]
[["public", "int", "hashCode", "(", ")", "{", "final", "int", "prime", "=", "31", ";"], ["int", "result", "=", "1", ";"]]
[["public", "int", "hashCode", "(", ")", "{", "final", "int", "prime", "=", "31", ";", "int", "result", "=", "1", ";"], ["result", "=", "prime", "*", "result", "+", "(", "(", "gameName", "==", "null", ")", "?", "0", ":", "gameName", ".", "hashCode", "(", ")", ")", ";"]]
[["public", "int", "hashCode", "(", ")", "{", "final", "int", "prime", "=", "31", ";", "int", "result", "=", "1", ";", "result", "=", "prime", "*", "result", "+", "(", "(", "gameName", "==", "null", ")", "?", "0", ":", "gameName", ".", "hashCode", "(", ")", ")", ";"], ["result", "=", "prime", "*", "result", "+", "(", "(", "id", "==", "null", ")", "?", "0", ":", "id", ".", "hashCode", "(", ")", ")", ";"]]
[["public", "int", "hashCode", "(", ")", "{", "final", "int", "prime", "=", "31", ";", "int", "result", "=", "1", ";", "result", "=", "prime", "*", "result", "+", "(", "(", "gameName", "==", "null", ")", "?", "0", ":", "gameName", ".", "hashCode", "(", ")", ")", ";", "result", "=", "prime", "*", "result", "+", "(", "(", "id", "==", "null", ")", "?", "0", ":", "id", ".", "hashCode", "(", ")", ")", ";"], ["return", "result", ";"]]
[["public", "int", "hashCode", "(", ")", "{", "final", "int", "prime", "=", "31", ";", "int", "result", "=", "1", ";", "result", "=", "prime", "*", "result", "+", "(", "(", "gameName", "==", "null", ")", "?", "0", ":", "gameName", ".", "hashCode", "(", ")", ")", ";", "result", "=", "prime", "*", "result", "+", "(", "(", "id", "==", "null", ")", "?", "0", ":", "id", ".", "hashCode", "(", ")", ")", ";", "return", "result", ";"], ["}"]]
[["public", "int", "hashCode", "(", ")", "{", "final", "int", "prime", "=", "31", ";", "int", "result", "=", "1", ";", "result", "=", "prime", "*", "result", "+", "(", "(", "gameName", "==", "null", ")", "?", "0", ":", "gameName", ".", "hashCode", "(", ")", ")", ";", "result", "=", "prime", "*", "result", "+", "(", "(", "id", "==", "null", ")", "?", "0", ":", "id", ".", "hashCode", "(", ")", ")", ";", "return", "result", ";", "}"], []]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{"], ["if", "(", "this", "==", "obj", ")", "return", "true", ";"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";"], ["if", "(", "obj", "==", "null", ")", "return", "false", ";"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";"], ["if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";"], ["SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";"], ["if", "(", "gameName", "==", "null", ")", "{"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{"], ["if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{", "if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";"], ["}"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{", "if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";", "}"], ["else", "if", "(", "!", "gameName", ".", "equals", "(", "other", ".", "gameName", ")", ")", "return", "false", ";"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{", "if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "gameName", ".", "equals", "(", "other", ".", "gameName", ")", ")", "return", "false", ";"], ["if", "(", "id", "==", "null", ")", "{"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{", "if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "gameName", ".", "equals", "(", "other", ".", "gameName", ")", ")", "return", "false", ";", "if", "(", "id", "==", "null", ")", "{"], ["if", "(", "other", ".", "id", "!=", "null", ")", "return", "false", ";"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{", "if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "gameName", ".", "equals", "(", "other", ".", "gameName", ")", ")", "return", "false", ";", "if", "(", "id", "==", "null", ")", "{", "if", "(", "other", ".", "id", "!=", "null", ")", "return", "false", ";"], ["}"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{", "if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "gameName", ".", "equals", "(", "other", ".", "gameName", ")", ")", "return", "false", ";", "if", "(", "id", "==", "null", ")", "{", "if", "(", "other", ".", "id", "!=", "null", ")", "return", "false", ";", "}"], ["else", "if", "(", "!", "id", ".", "equals", "(", "other", ".", "id", ")", ")", "return", "false", ";"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{", "if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "gameName", ".", "equals", "(", "other", ".", "gameName", ")", ")", "return", "false", ";", "if", "(", "id", "==", "null", ")", "{", "if", "(", "other", ".", "id", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "id", ".", "equals", "(", "other", ".", "id", ")", ")", "return", "false", ";"], ["return", "true", ";"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{", "if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "gameName", ".", "equals", "(", "other", ".", "gameName", ")", ")", "return", "false", ";", "if", "(", "id", "==", "null", ")", "{", "if", "(", "other", ".", "id", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "id", ".", "equals", "(", "other", ".", "id", ")", ")", "return", "false", ";", "return", "true", ";"], ["}"]]
[["public", "boolean", "equals", "(", "Object", "obj", ")", "{", "if", "(", "this", "==", "obj", ")", "return", "true", ";", "if", "(", "obj", "==", "null", ")", "return", "false", ";", "if", "(", "getClass", "(", ")", "!=", "obj", ".", "getClass", "(", ")", ")", "return", "false", ";", "SimpleGame", "other", "=", "(", "SimpleGame", ")", "obj", ";", "if", "(", "gameName", "==", "null", ")", "{", "if", "(", "other", ".", "gameName", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "gameName", ".", "equals", "(", "other", ".", "gameName", ")", ")", "return", "false", ";", "if", "(", "id", "==", "null", ")", "{", "if", "(", "other", ".", "id", "!=", "null", ")", "return", "false", ";", "}", "else", "if", "(", "!", "id", ".", "equals", "(", "other", ".", "id", ")", ")", "return", "false", ";", "return", "true", ";", "}"], []]
[["public", "void", "setUp", "(", ")", "{"], ["super", ".", "setUp", "(", ")", ";"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";"], ["verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";"], ["reset", "(", "listener", "(", ")", ")", ";"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";"], ["doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{"], ["@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{"], ["StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";"], ["InputStream", "message", ";"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";"], ["while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{"], ["listenerMessageQueue", ".", "add", "(", "message", ")", ";"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";"], ["}"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";", "}"], ["return", "null", ";"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";", "}", "return", "null", ";"], ["}"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";", "}", "return", "null", ";", "}"], ["}"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";", "}", "return", "null", ";", "}", "}"], [")", ".", "when", "(", "serverListener", ")", ".", "messagesAvailable", "(", "ArgumentMatchers", ".", "<", "StreamListener", ".", "MessageProducer", ">", "any", "(", ")", ")", ";"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";", "}", "return", "null", ";", "}", "}", ")", ".", "when", "(", "serverListener", ")", ".", "messagesAvailable", "(", "ArgumentMatchers", ".", "<", "StreamListener", ".", "MessageProducer", ">", "any", "(", ")", ")", ";"], ["}"]]
[["public", "void", "setUp", "(", ")", "{", "super", ".", "setUp", "(", ")", ";", "verify", "(", "listener", "(", ")", ")", ".", "onReady", "(", ")", ";", "reset", "(", "listener", "(", ")", ")", ";", "doAnswer", "(", "new", "Answer", "<", "Void", ">", "(", ")", "{", "@", "Override", "public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";", "}", "return", "null", ";", "}", "}", ")", ".", "when", "(", "serverListener", ")", ".", "messagesAvailable", "(", "ArgumentMatchers", ".", "<", "StreamListener", ".", "MessageProducer", ">", "any", "(", ")", ")", ";", "}"], []]
[["public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{"], ["StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";"]]
[["public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";"], ["InputStream", "message", ";"]]
[["public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";"], ["while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{"]]
[["public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{"], ["listenerMessageQueue", ".", "add", "(", "message", ")", ";"]]
[["public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";"], ["}"]]
[["public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";", "}"], ["return", "null", ";"]]
[["public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";", "}", "return", "null", ";"], ["}"]]
[["public", "Void", "answer", "(", "InvocationOnMock", "invocation", ")", "throws", "Throwable", "{", "StreamListener", ".", "MessageProducer", "producer", "=", "(", "StreamListener", ".", "MessageProducer", ")", "invocation", ".", "getArguments", "(", ")", "[", "0", "]", ";", "InputStream", "message", ";", "while", "(", "(", "message", "=", "producer", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "listenerMessageQueue", ".", "add", "(", "message", ")", ";", "}", "return", "null", ";", "}"], []]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{"], ["ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";"], ["stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";"], ["ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";"], ["verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";"], ["SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";"], ["assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";"], ["assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";"], ["assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";", "assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";"], ["byte", "[", "]", "msg", "=", "smallMessage", "(", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";", "assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";", "byte", "[", "]", "msg", "=", "smallMessage", "(", ")", ";"], ["stream", ".", "writeMessage", "(", "new", "ByteArrayInputStream", "(", "msg", ")", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";", "assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";", "byte", "[", "]", "msg", "=", "smallMessage", "(", ")", ";", "stream", ".", "writeMessage", "(", "new", "ByteArrayInputStream", "(", "msg", ")", ")", ";"], ["stream", ".", "flush", "(", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";", "assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";", "byte", "[", "]", "msg", "=", "smallMessage", "(", ")", ";", "stream", ".", "writeMessage", "(", "new", "ByteArrayInputStream", "(", "msg", ")", ")", ";", "stream", ".", "flush", "(", ")", ";"], ["verify", "(", "writeQueue", ")", ".", "enqueue", "(", "eq", "(", "new", "SendGrpcFrameCommand", "(", "stream", ".", "transportState", "(", ")", ",", "messageFrame", "(", "MESSAGE", ")", ",", "false", ")", ")", ",", "eq", "(", "true", ")", ")", ";"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";", "assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";", "byte", "[", "]", "msg", "=", "smallMessage", "(", ")", ";", "stream", ".", "writeMessage", "(", "new", "ByteArrayInputStream", "(", "msg", ")", ")", ";", "stream", ".", "flush", "(", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "eq", "(", "new", "SendGrpcFrameCommand", "(", "stream", ".", "transportState", "(", ")", ",", "messageFrame", "(", "MESSAGE", ")", ",", "false", ")", ")", ",", "eq", "(", "true", ")", ")", ";"], ["}"]]
[["public", "void", "writeMessageShouldSendResponse", "(", ")", "throws", "Exception", "{", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "new", "DefaultHttp2Headers", "(", ")", ".", "status", "(", "Utils", ".", "STATUS_OK", ")", ".", "set", "(", "Utils", ".", "CONTENT_TYPE_HEADER", ",", "Utils", ".", "CONTENT_TYPE_GRPC", ")", ")", ";", "stream", ".", "writeHeaders", "(", "new", "Metadata", "(", ")", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";", "assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";", "byte", "[", "]", "msg", "=", "smallMessage", "(", ")", ";", "stream", ".", "writeMessage", "(", "new", "ByteArrayInputStream", "(", "msg", ")", ")", ";", "stream", ".", "flush", "(", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "eq", "(", "new", "SendGrpcFrameCommand", "(", "stream", ".", "transportState", "(", ")", ",", "messageFrame", "(", "MESSAGE", ")", ",", "false", ")", ")", ",", "eq", "(", "true", ")", ")", ";", "}"], []]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{"], ["Metadata", "headers", "=", "new", "Metadata", "(", ")", ";"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";"], ["ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";"], ["stream", "(", ")", ".", "writeHeaders", "(", "headers", ")", ";"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";", "stream", "(", ")", ".", "writeHeaders", "(", "headers", ")", ";"], ["ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";", "stream", "(", ")", ".", "writeHeaders", "(", "headers", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";"], ["verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";", "stream", "(", ")", ".", "writeHeaders", "(", "headers", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";"], ["SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";", "stream", "(", ")", ".", "writeHeaders", "(", "headers", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";"], ["assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";", "stream", "(", ")", ".", "writeHeaders", "(", "headers", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";"], ["assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";", "stream", "(", ")", ".", "writeHeaders", "(", "headers", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";"], ["assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";", "stream", "(", ")", ".", "writeHeaders", "(", "headers", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";", "assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";"], ["}"]]
[["public", "void", "writeHeadersShouldSendHeaders", "(", ")", "throws", "Exception", "{", "Metadata", "headers", "=", "new", "Metadata", "(", ")", ";", "ListMultimap", "<", "CharSequence", ",", "CharSequence", ">", "expectedHeaders", "=", "ImmutableListMultimap", ".", "copyOf", "(", "Utils", ".", "convertServerHeaders", "(", "headers", ")", ")", ";", "stream", "(", ")", ".", "writeHeaders", "(", "headers", ")", ";", "ArgumentCaptor", "<", "SendResponseHeadersCommand", ">", "sendHeadersCap", "=", "ArgumentCaptor", ".", "forClass", "(", "SendResponseHeadersCommand", ".", "class", ")", ";", "verify", "(", "writeQueue", ")", ".", "enqueue", "(", "sendHeadersCap", ".", "capture", "(", ")", ",", "eq", "(", "true", ")", ")", ";", "SendResponseHeadersCommand", "sendHeaders", "=", "sendHeadersCap", ".", "getValue", "(", ")", ";", "assertThat", "(", "sendHeaders", ".", "stream", "(", ")", ")", ".", "isSameInstanceAs", "(", "stream", ".", "transportState", "(", ")", ")", ";", "assertThat", "(", "ImmutableListMultimap", ".", "copyOf", "(", "sendHeaders", ".", "headers", "(", ")", ")", ")", ".", "containsExactlyEntriesIn", "(", "expectedHeaders", ")", ";", "assertThat", "(", "sendHeaders", ".", "endOfStream", "(", ")", ")", ".", "isFalse", "(", ")", ";", "}"], []]
